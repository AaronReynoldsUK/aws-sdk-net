{
  "version": "1.0",
  "type": "json",
  "json_version": "1.1",
  "signature_version": "v4",
  "service_full_name": "Amazon Cognito Identity Provider",
  "service_id": "Cognito Identity Provider",
  "uid": "cognito-idp-2016-04-18",
  "endpoint_prefix": "cognito-idp",
  "api_version": "2016-04-18",
  "xmlnamespace": "http://cognito-idp.amazonaws.com/doc/2016-04-18/",
  "target_prefix": "AWSCognitoIdentityProviderService",
  "documentation": "\n        <p>Using the Amazon Cognito User Pools API, you can create a user pool to manage\n            directories and users. You can authenticate a user to obtain tokens related to user\n            identity and access policies.</p>\n        <p>This API reference provides information about user pools in Amazon Cognito User\n            Pools.</p>\n        <p>For more information, see the Amazon Cognito Documentation.</p>\n      ",
  "operations": {
    "CreateUserPool": {
      "name": "CreateUserPool",
      "input": {
        "type": "structure",
        "members": {
          "PoolName": {
            "type": "string",
            "pattern": "[\\w\\s+=,.@-]+",
            "zonbookDocumentation": "\n        <simpara>A string used to name the user pool.</simpara>\n      ",
            "documentation": "\n        <p>A string used to name the user pool.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolNameType",
            "min_length": 1,
            "max_length": 128
          },
          "Policies": {
            "type": "structure",
            "members": {
              "PasswordPolicy": {
                "type": "structure",
                "members": {
                  "MinimumLength": {
                    "type": "integer",
                    "zonbookDocumentation": "\n        <simpara>The minimum length of the password policy that you have set. Cannot be less than\n            6.</simpara>\n      ",
                    "documentation": "\n        <p>The minimum length of the password policy that you have set. Cannot be less than\n            6.</p>\n      ",
                    "shape_name": "PasswordPolicyMinLengthType",
                    "min_length": 6,
                    "max_length": 99
                  },
                  "RequireUppercase": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n        <simpara>In the password policy that you have set, refers to whether you have required users\n            to use at least one uppercase letter in their password.</simpara>\n      ",
                    "documentation": "\n        <p>In the password policy that you have set, refers to whether you have required users\n            to use at least one uppercase letter in their password.</p>\n      ",
                    "shape_name": "BooleanType"
                  },
                  "RequireLowercase": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n        <simpara>In the password policy that you have set, refers to whether you have required users\n            to use at least one lowercase letter in their password.</simpara>\n      ",
                    "documentation": "\n        <p>In the password policy that you have set, refers to whether you have required users\n            to use at least one lowercase letter in their password.</p>\n      ",
                    "shape_name": "BooleanType"
                  },
                  "RequireNumbers": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n        <simpara>In the password policy that you have set, refers to whether you have required users\n            to use at least one number in their password.</simpara>\n      ",
                    "documentation": "\n        <p>In the password policy that you have set, refers to whether you have required users\n            to use at least one number in their password.</p>\n      ",
                    "shape_name": "BooleanType"
                  },
                  "RequireSymbols": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n        <simpara>In the password policy that you have set, refers to whether you have required users\n            to use at least one symbol in their password.</simpara>\n      ",
                    "documentation": "\n        <p>In the password policy that you have set, refers to whether you have required users\n            to use at least one symbol in their password.</p>\n      ",
                    "shape_name": "BooleanType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The password policy.</simpara>\n      ",
                "documentation": "\n        <p>The password policy.</p>\n      ",
                "shape_name": "PasswordPolicyType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The policies associated with the new user pool.</simpara>\n      ",
            "documentation": "\n        <p>The policies associated with the new user pool.</p>\n      ",
            "shape_name": "UserPoolPolicyType"
          },
          "LambdaConfig": {
            "type": "structure",
            "members": {
              "PreSignUp": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>A pre-registration AWS Lambda trigger.</simpara>\n      ",
                "documentation": "\n        <p>A pre-registration AWS Lambda trigger.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "CustomMessage": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>A custom Message AWS Lambda trigger.</simpara>\n      ",
                "documentation": "\n        <p>A custom Message AWS Lambda trigger.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "PostConfirmation": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>A post-confirmation AWS Lambda trigger.</simpara>\n      ",
                "documentation": "\n        <p>A post-confirmation AWS Lambda trigger.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "PreAuthentication": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>A pre-authentication AWS Lambda trigger.</simpara>\n      ",
                "documentation": "\n        <p>A pre-authentication AWS Lambda trigger.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "PostAuthentication": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>A post-authentication AWS Lambda trigger.</simpara>\n      ",
                "documentation": "\n        <p>A post-authentication AWS Lambda trigger.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "DefineAuthChallenge": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>Defines the authentication challenge.</simpara>\n      ",
                "documentation": "\n        <p>Defines the authentication challenge.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "CreateAuthChallenge": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>Creates an authentication challenge.</simpara>\n      ",
                "documentation": "\n        <p>Creates an authentication challenge.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "VerifyAuthChallengeResponse": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>Verifies the authentication challenge response.</simpara>\n      ",
                "documentation": "\n        <p>Verifies the authentication challenge response.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "PreTokenGeneration": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>A Lambda trigger that is invoked before token generation.</simpara>\n      ",
                "documentation": "\n        <p>A Lambda trigger that is invoked before token generation.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "UserMigration": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <para>The user migration Lambda config type.</para>\n      ",
                "documentation": "\n        <p>The user migration Lambda config type.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              }
            },
            "zonbookDocumentation": "\n        <simpara>The Lambda trigger configuration information for the new user pool.</simpara>\n        <note>\n            <simpara>In a push model, event sources (such as Amazon S3 and custom applications) need\n                permission to invoke a function. So you will need to make an extra call to add\n                permission for these event sources to invoke your Lambda function.</simpara>\n            <simpara/>\n            <simpara>For more information on using the Lambda API to add permission, see <ulink url=\"https://docs.aws.amazon.com/lambda/latest/dg/API_AddPermission.html\">\n                AddPermission </ulink>. </simpara>\n            <simpara>For adding permission using the AWS CLI, see <ulink url=\"https://docs.aws.amazon.com/cli/latest/reference/lambda/add-permission.html\"> add-permission </ulink>.</simpara>\n        </note>\n\n      ",
            "documentation": "\n        <p>The Lambda trigger configuration information for the new user pool.</p>\n        <note>\n            <p>In a push model, event sources (such as Amazon S3 and custom applications) need\n                permission to invoke a function. So you will need to make an extra call to add\n                permission for these event sources to invoke your Lambda function.</p>\n            <p/>\n            <p>For more information on using the Lambda API to add permission, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/API_AddPermission.html\">\n                AddPermission </a>. </p>\n            <p>For adding permission using the AWS CLI, see <a href=\"https://docs.aws.amazon.com/cli/latest/reference/lambda/add-permission.html\"> add-permission </a>.</p>\n        </note>\n\n      ",
            "shape_name": "LambdaConfigType"
          },
          "AutoVerifiedAttributes": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The attributes to be auto-verified. Possible values: <emphasis role=\"bold\">email</emphasis>, <emphasis role=\"bold\">phone_number</emphasis>.</simpara>\n      ",
            "documentation": "\n        <p>The attributes to be auto-verified. Possible values: <b>email</b>, <b>phone_number</b>.</p>\n      ",
            "shape_name": "VerifiedAttributesListType",
            "members": {
              "type": "string",
              "enum": [
                "phone_number",
                "email"
              ],
              "shape_name": "VerifiedAttributeType",
              "documentation": null
            }
          },
          "AliasAttributes": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>Attributes supported as an alias for this user pool. Possible values: <emphasis role=\"bold\">phone_number</emphasis>, <emphasis role=\"bold\">email</emphasis>, or\n                <emphasis role=\"bold\">preferred_username</emphasis>.</simpara>\n      ",
            "documentation": "\n        <p>Attributes supported as an alias for this user pool. Possible values: <b>phone_number</b>, <b>email</b>, or\n                <b>preferred_username</b>.</p>\n      ",
            "shape_name": "AliasAttributesListType",
            "members": {
              "type": "string",
              "enum": [
                "phone_number",
                "email",
                "preferred_username"
              ],
              "shape_name": "AliasAttributeType",
              "documentation": null
            }
          },
          "UsernameAttributes": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>Specifies whether email addresses or phone numbers can be specified as usernames\n            when a user signs up.</simpara>\n      ",
            "documentation": "\n        <p>Specifies whether email addresses or phone numbers can be specified as usernames\n            when a user signs up.</p>\n      ",
            "shape_name": "UsernameAttributesListType",
            "members": {
              "type": "string",
              "enum": [
                "phone_number",
                "email"
              ],
              "shape_name": "UsernameAttributeType",
              "documentation": null
            }
          },
          "SmsVerificationMessage": {
            "type": "string",
            "pattern": ".*\\{####\\}.*",
            "zonbookDocumentation": "\n        <simpara>A string representing the SMS verification message.</simpara>\n      ",
            "documentation": "\n        <p>A string representing the SMS verification message.</p>\n      ",
            "shape_name": "SmsVerificationMessageType",
            "min_length": 6,
            "max_length": 140
          },
          "EmailVerificationMessage": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
            "zonbookDocumentation": "\n        <simpara>A string representing the email verification message.</simpara>\n      ",
            "documentation": "\n        <p>A string representing the email verification message.</p>\n      ",
            "shape_name": "EmailVerificationMessageType",
            "min_length": 6,
            "max_length": 20000
          },
          "EmailVerificationSubject": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
            "zonbookDocumentation": "\n        <simpara>A string representing the email verification subject.</simpara>\n      ",
            "documentation": "\n        <p>A string representing the email verification subject.</p>\n      ",
            "shape_name": "EmailVerificationSubjectType",
            "min_length": 1,
            "max_length": 140
          },
          "VerificationMessageTemplate": {
            "type": "structure",
            "members": {
              "SmsMessage": {
                "type": "string",
                "pattern": ".*\\{####\\}.*",
                "zonbookDocumentation": "\n        <simpara>The SMS message template.</simpara>\n      ",
                "documentation": "\n        <p>The SMS message template.</p>\n      ",
                "shape_name": "SmsVerificationMessageType",
                "min_length": 6,
                "max_length": 140
              },
              "EmailMessage": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                "zonbookDocumentation": "\n        <simpara>The email message template.</simpara>\n      ",
                "documentation": "\n        <p>The email message template.</p>\n      ",
                "shape_name": "EmailVerificationMessageType",
                "min_length": 6,
                "max_length": 20000
              },
              "EmailSubject": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                "zonbookDocumentation": "\n        <simpara>The subject line for the email message template.</simpara>\n      ",
                "documentation": "\n        <p>The subject line for the email message template.</p>\n      ",
                "shape_name": "EmailVerificationSubjectType",
                "min_length": 1,
                "max_length": 140
              },
              "EmailMessageByLink": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{##[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*##\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                "zonbookDocumentation": "\n        <simpara>The email message template for sending a confirmation link to the user.</simpara>\n      ",
                "documentation": "\n        <p>The email message template for sending a confirmation link to the user.</p>\n      ",
                "shape_name": "EmailVerificationMessageByLinkType",
                "min_length": 6,
                "max_length": 20000
              },
              "EmailSubjectByLink": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                "zonbookDocumentation": "\n        <simpara>The subject line for the email message template for sending a confirmation link to\n            the user.</simpara>\n      ",
                "documentation": "\n        <p>The subject line for the email message template for sending a confirmation link to\n            the user.</p>\n      ",
                "shape_name": "EmailVerificationSubjectByLinkType",
                "min_length": 1,
                "max_length": 140
              },
              "DefaultEmailOption": {
                "type": "string",
                "enum": [
                  "CONFIRM_WITH_LINK",
                  "CONFIRM_WITH_CODE"
                ],
                "zonbookDocumentation": "\n        <simpara>The default email option.</simpara>\n      ",
                "documentation": "\n        <p>The default email option.</p>\n      ",
                "shape_name": "DefaultEmailOptionType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The template for the verification message that the user sees when the app requests\n            permission to access the user's information.</simpara>\n      ",
            "documentation": "\n        <p>The template for the verification message that the user sees when the app requests\n            permission to access the user's information.</p>\n      ",
            "shape_name": "VerificationMessageTemplateType"
          },
          "SmsAuthenticationMessage": {
            "type": "string",
            "pattern": ".*\\{####\\}.*",
            "zonbookDocumentation": "\n        <simpara>A string representing the SMS authentication message.</simpara>\n      ",
            "documentation": "\n        <p>A string representing the SMS authentication message.</p>\n      ",
            "shape_name": "SmsVerificationMessageType",
            "min_length": 6,
            "max_length": 140
          },
          "MfaConfiguration": {
            "type": "string",
            "enum": [
              "OFF",
              "ON",
              "OPTIONAL"
            ],
            "zonbookDocumentation": "\n        <simpara>Specifies MFA configuration details.</simpara>\n      ",
            "documentation": "\n        <p>Specifies MFA configuration details.</p>\n      ",
            "shape_name": "UserPoolMfaType"
          },
          "DeviceConfiguration": {
            "type": "structure",
            "members": {
              "ChallengeRequiredOnNewDevice": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>Indicates whether a challenge is required on a new device. Only applicable to a new\n            device.</simpara>\n      ",
                "documentation": "\n        <p>Indicates whether a challenge is required on a new device. Only applicable to a new\n            device.</p>\n      ",
                "shape_name": "BooleanType"
              },
              "DeviceOnlyRememberedOnUserPrompt": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>If true, a device is only remembered on user prompt.</simpara>\n      ",
                "documentation": "\n        <p>If true, a device is only remembered on user prompt.</p>\n      ",
                "shape_name": "BooleanType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The device configuration.</simpara>\n      ",
            "documentation": "\n        <p>The device configuration.</p>\n      ",
            "shape_name": "DeviceConfigurationType"
          },
          "EmailConfiguration": {
            "type": "structure",
            "members": {
              "SourceArn": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the email source.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Resource Name (ARN) of the email source.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "ReplyToEmailAddress": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+@[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "zonbookDocumentation": "\n        <simpara>The destination to which the receiver of the email should reply to.</simpara>\n      ",
                "documentation": "\n        <p>The destination to which the receiver of the email should reply to.</p>\n      ",
                "shape_name": "EmailAddressType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The email configuration.</simpara>\n      ",
            "documentation": "\n        <p>The email configuration.</p>\n      ",
            "shape_name": "EmailConfigurationType"
          },
          "SmsConfiguration": {
            "type": "structure",
            "members": {
              "SnsCallerArn": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS)\n            caller.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS)\n            caller.</p>\n      ",
                "required": true,
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "ExternalId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The external ID.</simpara>\n      ",
                "documentation": "\n        <p>The external ID.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The SMS configuration.</simpara>\n      ",
            "documentation": "\n        <p>The SMS configuration.</p>\n      ",
            "shape_name": "SmsConfigurationType"
          },
          "UserPoolTags": {
            "type": "map",
            "zonbookDocumentation": "\n        <simpara>The cost allocation tags for the user pool. For more information, see <ulink url=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html\">Adding Cost Allocation Tags to Your User Pool</ulink>\n         </simpara>\n      ",
            "documentation": "\n        <p>The cost allocation tags for the user pool. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html\">Adding Cost Allocation Tags to Your User Pool</a>\n         </p>\n      ",
            "shape_name": "UserPoolTagsType",
            "keys": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            },
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          },
          "AdminCreateUserConfig": {
            "type": "structure",
            "members": {
              "AllowAdminCreateUserOnly": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>Set to <code>True</code> if only the administrator is allowed to create user\n            profiles. Set to <code>False</code> if users can sign themselves up via an\n            app.</simpara>\n      ",
                "documentation": "\n        <p>Set to <code>True</code> if only the administrator is allowed to create user\n            profiles. Set to <code>False</code> if users can sign themselves up via an\n            app.</p>\n      ",
                "shape_name": "BooleanType"
              },
              "UnusedAccountValidityDays": {
                "type": "integer",
                "zonbookDocumentation": "\n        <simpara>The user account expiration limit, in days, after which the account is no longer\n            usable. To reset the account after that time limit, you must call\n                <code>AdminCreateUser</code> again, specifying <code>\"RESEND\"</code> for the\n                <code>MessageAction</code> parameter. The default value for this parameter is\n            7.</simpara>\n      ",
                "documentation": "\n        <p>The user account expiration limit, in days, after which the account is no longer\n            usable. To reset the account after that time limit, you must call\n                <code>AdminCreateUser</code> again, specifying <code>\"RESEND\"</code> for the\n                <code>MessageAction</code> parameter. The default value for this parameter is\n            7.</p>\n      ",
                "shape_name": "AdminCreateUserUnusedAccountValidityDaysType",
                "min_length": 0,
                "max_length": 365
              },
              "InviteMessageTemplate": {
                "type": "structure",
                "members": {
                  "SMSMessage": {
                    "type": "string",
                    "pattern": ".*\\{####\\}.*",
                    "zonbookDocumentation": "\n        <simpara>The message template for SMS messages.</simpara>\n      ",
                    "documentation": "\n        <p>The message template for SMS messages.</p>\n      ",
                    "shape_name": "SmsVerificationMessageType",
                    "min_length": 6,
                    "max_length": 140
                  },
                  "EmailMessage": {
                    "type": "string",
                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                    "zonbookDocumentation": "\n        <simpara>The message template for email messages.</simpara>\n      ",
                    "documentation": "\n        <p>The message template for email messages.</p>\n      ",
                    "shape_name": "EmailVerificationMessageType",
                    "min_length": 6,
                    "max_length": 20000
                  },
                  "EmailSubject": {
                    "type": "string",
                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                    "zonbookDocumentation": "\n        <simpara>The subject line for email messages.</simpara>\n      ",
                    "documentation": "\n        <p>The subject line for email messages.</p>\n      ",
                    "shape_name": "EmailVerificationSubjectType",
                    "min_length": 1,
                    "max_length": 140
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The message template to be used for the welcome message to new users.</simpara>\n        <simpara>See also <ulink url=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization\">Customizing User Invitation Messages</ulink>.</simpara>\n      ",
                "documentation": "\n        <p>The message template to be used for the welcome message to new users.</p>\n        <p>See also <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization\">Customizing User Invitation Messages</a>.</p>\n      ",
                "shape_name": "MessageTemplateType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The configuration for <code>AdminCreateUser</code> requests.</simpara>\n      ",
            "documentation": "\n        <p>The configuration for <code>AdminCreateUser</code> requests.</p>\n      ",
            "shape_name": "AdminCreateUserConfigType"
          },
          "Schema": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>An array of schema attributes for the new user pool. These attributes can be\n            standard or custom attributes.</simpara>\n      ",
            "documentation": "\n        <p>An array of schema attributes for the new user pool. These attributes can be\n            standard or custom attributes.</p>\n      ",
            "shape_name": "SchemaAttributesListType",
            "min_length": 1,
            "max_length": 50,
            "members": {
              "type": "structure",
              "members": {
                "Name": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "zonbookDocumentation": "\n        <simpara>A schema attribute of the name type.</simpara>\n      ",
                  "documentation": "\n        <p>A schema attribute of the name type.</p>\n      ",
                  "shape_name": "CustomAttributeNameType",
                  "min_length": 1,
                  "max_length": 20
                },
                "AttributeDataType": {
                  "type": "string",
                  "enum": [
                    "String",
                    "Number",
                    "DateTime",
                    "Boolean"
                  ],
                  "zonbookDocumentation": "\n        <simpara>The attribute data type.</simpara>\n      ",
                  "documentation": "\n        <p>The attribute data type.</p>\n      ",
                  "shape_name": "AttributeDataType"
                },
                "DeveloperOnlyAttribute": {
                  "type": "boolean",
                  "zonbookDocumentation": "\n        <simpara>Specifies whether the attribute type is developer only.</simpara>\n      ",
                  "documentation": "\n        <p>Specifies whether the attribute type is developer only.</p>\n      ",
                  "box": true,
                  "shape_name": "BooleanType"
                },
                "Mutable": {
                  "type": "boolean",
                  "zonbookDocumentation": "\n        <simpara>Specifies whether the value of the attribute can be changed.</simpara>\n      ",
                  "documentation": "\n        <p>Specifies whether the value of the attribute can be changed.</p>\n      ",
                  "box": true,
                  "shape_name": "BooleanType"
                },
                "Required": {
                  "type": "boolean",
                  "zonbookDocumentation": "\n        <simpara>Specifies whether a user pool attribute is required. If the attribute is required\n            and the user does not provide a value, registration or sign-in will fail.</simpara>\n      ",
                  "documentation": "\n        <p>Specifies whether a user pool attribute is required. If the attribute is required\n            and the user does not provide a value, registration or sign-in will fail.</p>\n      ",
                  "box": true,
                  "shape_name": "BooleanType"
                },
                "NumberAttributeConstraints": {
                  "type": "structure",
                  "members": {
                    "MinValue": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The minimum value of an attribute that is of the number data type.</simpara>\n      ",
                      "documentation": "\n        <p>The minimum value of an attribute that is of the number data type.</p>\n      ",
                      "shape_name": "StringType"
                    },
                    "MaxValue": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The maximum value of an attribute that is of the number data type.</simpara>\n      ",
                      "documentation": "\n        <p>The maximum value of an attribute that is of the number data type.</p>\n      ",
                      "shape_name": "StringType"
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>Specifies the constraints for an attribute of the number type.</simpara>\n      ",
                  "documentation": "\n        <p>Specifies the constraints for an attribute of the number type.</p>\n      ",
                  "shape_name": "NumberAttributeConstraintsType"
                },
                "StringAttributeConstraints": {
                  "type": "structure",
                  "members": {
                    "MinLength": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The minimum length.</simpara>\n      ",
                      "documentation": "\n        <p>The minimum length.</p>\n      ",
                      "shape_name": "StringType"
                    },
                    "MaxLength": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The maximum length.</simpara>\n      ",
                      "documentation": "\n        <p>The maximum length.</p>\n      ",
                      "shape_name": "StringType"
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>Specifies the constraints for an attribute of the string type.</simpara>\n      ",
                  "documentation": "\n        <p>Specifies the constraints for an attribute of the string type.</p>\n      ",
                  "shape_name": "StringAttributeConstraintsType"
                }
              },
              "zonbookDocumentation": "\n        <simpara>Contains information about the schema attribute.</simpara>\n      ",
              "documentation": "\n        <p>Contains information about the schema attribute.</p>\n      ",
              "shape_name": "SchemaAttributeType"
            }
          },
          "UserPoolAddOns": {
            "type": "structure",
            "members": {
              "AdvancedSecurityMode": {
                "type": "string",
                "enum": [
                  "OFF",
                  "AUDIT",
                  "ENFORCED"
                ],
                "zonbookDocumentation": "\n        <simpara>The advanced security mode.</simpara>\n      ",
                "documentation": "\n        <p>The advanced security mode.</p>\n      ",
                "required": true,
                "shape_name": "AdvancedSecurityModeType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Used to enable advanced security risk detection. Set the key\n                <code>AdvancedSecurityMode</code> to the value \"AUDIT\".</simpara>\n      ",
            "documentation": "\n        <p>Used to enable advanced security risk detection. Set the key\n                <code>AdvancedSecurityMode</code> to the value \"AUDIT\".</p>\n      ",
            "shape_name": "UserPoolAddOnsType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to create a user pool.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to create a user pool.</p>\n      ",
        "shape_name": "CreateUserPoolRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "UserPool": {
            "type": "structure",
            "members": {
              "Id": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The ID of the user pool.</simpara>\n      ",
                "documentation": "\n        <p>The ID of the user pool.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "Name": {
                "type": "string",
                "pattern": "[\\w\\s+=,.@-]+",
                "zonbookDocumentation": "\n        <simpara>The name of the user pool.</simpara>\n      ",
                "documentation": "\n        <p>The name of the user pool.</p>\n      ",
                "shape_name": "UserPoolNameType",
                "min_length": 1,
                "max_length": 128
              },
              "Policies": {
                "type": "structure",
                "members": {
                  "PasswordPolicy": {
                    "type": "structure",
                    "members": {
                      "MinimumLength": {
                        "type": "integer",
                        "zonbookDocumentation": "\n        <simpara>The minimum length of the password policy that you have set. Cannot be less than\n            6.</simpara>\n      ",
                        "documentation": "\n        <p>The minimum length of the password policy that you have set. Cannot be less than\n            6.</p>\n      ",
                        "shape_name": "PasswordPolicyMinLengthType",
                        "min_length": 6,
                        "max_length": 99
                      },
                      "RequireUppercase": {
                        "type": "boolean",
                        "zonbookDocumentation": "\n        <simpara>In the password policy that you have set, refers to whether you have required users\n            to use at least one uppercase letter in their password.</simpara>\n      ",
                        "documentation": "\n        <p>In the password policy that you have set, refers to whether you have required users\n            to use at least one uppercase letter in their password.</p>\n      ",
                        "shape_name": "BooleanType"
                      },
                      "RequireLowercase": {
                        "type": "boolean",
                        "zonbookDocumentation": "\n        <simpara>In the password policy that you have set, refers to whether you have required users\n            to use at least one lowercase letter in their password.</simpara>\n      ",
                        "documentation": "\n        <p>In the password policy that you have set, refers to whether you have required users\n            to use at least one lowercase letter in their password.</p>\n      ",
                        "shape_name": "BooleanType"
                      },
                      "RequireNumbers": {
                        "type": "boolean",
                        "zonbookDocumentation": "\n        <simpara>In the password policy that you have set, refers to whether you have required users\n            to use at least one number in their password.</simpara>\n      ",
                        "documentation": "\n        <p>In the password policy that you have set, refers to whether you have required users\n            to use at least one number in their password.</p>\n      ",
                        "shape_name": "BooleanType"
                      },
                      "RequireSymbols": {
                        "type": "boolean",
                        "zonbookDocumentation": "\n        <simpara>In the password policy that you have set, refers to whether you have required users\n            to use at least one symbol in their password.</simpara>\n      ",
                        "documentation": "\n        <p>In the password policy that you have set, refers to whether you have required users\n            to use at least one symbol in their password.</p>\n      ",
                        "shape_name": "BooleanType"
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>The password policy.</simpara>\n      ",
                    "documentation": "\n        <p>The password policy.</p>\n      ",
                    "shape_name": "PasswordPolicyType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The policies associated with the user pool.</simpara>\n      ",
                "documentation": "\n        <p>The policies associated with the user pool.</p>\n      ",
                "shape_name": "UserPoolPolicyType"
              },
              "LambdaConfig": {
                "type": "structure",
                "members": {
                  "PreSignUp": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>A pre-registration AWS Lambda trigger.</simpara>\n      ",
                    "documentation": "\n        <p>A pre-registration AWS Lambda trigger.</p>\n      ",
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "CustomMessage": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>A custom Message AWS Lambda trigger.</simpara>\n      ",
                    "documentation": "\n        <p>A custom Message AWS Lambda trigger.</p>\n      ",
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "PostConfirmation": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>A post-confirmation AWS Lambda trigger.</simpara>\n      ",
                    "documentation": "\n        <p>A post-confirmation AWS Lambda trigger.</p>\n      ",
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "PreAuthentication": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>A pre-authentication AWS Lambda trigger.</simpara>\n      ",
                    "documentation": "\n        <p>A pre-authentication AWS Lambda trigger.</p>\n      ",
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "PostAuthentication": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>A post-authentication AWS Lambda trigger.</simpara>\n      ",
                    "documentation": "\n        <p>A post-authentication AWS Lambda trigger.</p>\n      ",
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "DefineAuthChallenge": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>Defines the authentication challenge.</simpara>\n      ",
                    "documentation": "\n        <p>Defines the authentication challenge.</p>\n      ",
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "CreateAuthChallenge": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>Creates an authentication challenge.</simpara>\n      ",
                    "documentation": "\n        <p>Creates an authentication challenge.</p>\n      ",
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "VerifyAuthChallengeResponse": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>Verifies the authentication challenge response.</simpara>\n      ",
                    "documentation": "\n        <p>Verifies the authentication challenge response.</p>\n      ",
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "PreTokenGeneration": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>A Lambda trigger that is invoked before token generation.</simpara>\n      ",
                    "documentation": "\n        <p>A Lambda trigger that is invoked before token generation.</p>\n      ",
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "UserMigration": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <para>The user migration Lambda config type.</para>\n      ",
                    "documentation": "\n        <p>The user migration Lambda config type.</p>\n      ",
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The AWS Lambda triggers associated with the user pool.</simpara>\n      ",
                "documentation": "\n        <p>The AWS Lambda triggers associated with the user pool.</p>\n      ",
                "shape_name": "LambdaConfigType"
              },
              "Status": {
                "type": "string",
                "enum": [
                  "Enabled",
                  "Disabled"
                ],
                "zonbookDocumentation": "\n        <simpara>The status of a user pool.</simpara>\n      ",
                "documentation": "\n        <p>The status of a user pool.</p>\n      ",
                "shape_name": "StatusType"
              },
              "LastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the user pool was last modified.</simpara>\n      ",
                "documentation": "\n        <p>The date the user pool was last modified.</p>\n      ",
                "shape_name": "DateType"
              },
              "CreationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the user pool was created.</simpara>\n      ",
                "documentation": "\n        <p>The date the user pool was created.</p>\n      ",
                "shape_name": "DateType"
              },
              "SchemaAttributes": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>A container with the schema attributes of a user pool.</simpara>\n      ",
                "documentation": "\n        <p>A container with the schema attributes of a user pool.</p>\n      ",
                "shape_name": "SchemaAttributesListType",
                "min_length": 1,
                "max_length": 50,
                "members": {
                  "type": "structure",
                  "members": {
                    "Name": {
                      "type": "string",
                      "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                      "zonbookDocumentation": "\n        <simpara>A schema attribute of the name type.</simpara>\n      ",
                      "documentation": "\n        <p>A schema attribute of the name type.</p>\n      ",
                      "shape_name": "CustomAttributeNameType",
                      "min_length": 1,
                      "max_length": 20
                    },
                    "AttributeDataType": {
                      "type": "string",
                      "enum": [
                        "String",
                        "Number",
                        "DateTime",
                        "Boolean"
                      ],
                      "zonbookDocumentation": "\n        <simpara>The attribute data type.</simpara>\n      ",
                      "documentation": "\n        <p>The attribute data type.</p>\n      ",
                      "shape_name": "AttributeDataType"
                    },
                    "DeveloperOnlyAttribute": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n        <simpara>Specifies whether the attribute type is developer only.</simpara>\n      ",
                      "documentation": "\n        <p>Specifies whether the attribute type is developer only.</p>\n      ",
                      "box": true,
                      "shape_name": "BooleanType"
                    },
                    "Mutable": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n        <simpara>Specifies whether the value of the attribute can be changed.</simpara>\n      ",
                      "documentation": "\n        <p>Specifies whether the value of the attribute can be changed.</p>\n      ",
                      "box": true,
                      "shape_name": "BooleanType"
                    },
                    "Required": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n        <simpara>Specifies whether a user pool attribute is required. If the attribute is required\n            and the user does not provide a value, registration or sign-in will fail.</simpara>\n      ",
                      "documentation": "\n        <p>Specifies whether a user pool attribute is required. If the attribute is required\n            and the user does not provide a value, registration or sign-in will fail.</p>\n      ",
                      "box": true,
                      "shape_name": "BooleanType"
                    },
                    "NumberAttributeConstraints": {
                      "type": "structure",
                      "members": {
                        "MinValue": {
                          "type": "string",
                          "zonbookDocumentation": "\n        <simpara>The minimum value of an attribute that is of the number data type.</simpara>\n      ",
                          "documentation": "\n        <p>The minimum value of an attribute that is of the number data type.</p>\n      ",
                          "shape_name": "StringType"
                        },
                        "MaxValue": {
                          "type": "string",
                          "zonbookDocumentation": "\n        <simpara>The maximum value of an attribute that is of the number data type.</simpara>\n      ",
                          "documentation": "\n        <p>The maximum value of an attribute that is of the number data type.</p>\n      ",
                          "shape_name": "StringType"
                        }
                      },
                      "zonbookDocumentation": "\n        <simpara>Specifies the constraints for an attribute of the number type.</simpara>\n      ",
                      "documentation": "\n        <p>Specifies the constraints for an attribute of the number type.</p>\n      ",
                      "shape_name": "NumberAttributeConstraintsType"
                    },
                    "StringAttributeConstraints": {
                      "type": "structure",
                      "members": {
                        "MinLength": {
                          "type": "string",
                          "zonbookDocumentation": "\n        <simpara>The minimum length.</simpara>\n      ",
                          "documentation": "\n        <p>The minimum length.</p>\n      ",
                          "shape_name": "StringType"
                        },
                        "MaxLength": {
                          "type": "string",
                          "zonbookDocumentation": "\n        <simpara>The maximum length.</simpara>\n      ",
                          "documentation": "\n        <p>The maximum length.</p>\n      ",
                          "shape_name": "StringType"
                        }
                      },
                      "zonbookDocumentation": "\n        <simpara>Specifies the constraints for an attribute of the string type.</simpara>\n      ",
                      "documentation": "\n        <p>Specifies the constraints for an attribute of the string type.</p>\n      ",
                      "shape_name": "StringAttributeConstraintsType"
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>Contains information about the schema attribute.</simpara>\n      ",
                  "documentation": "\n        <p>Contains information about the schema attribute.</p>\n      ",
                  "shape_name": "SchemaAttributeType"
                }
              },
              "AutoVerifiedAttributes": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>Specifies the attributes that are auto-verified in a user pool.</simpara>\n      ",
                "documentation": "\n        <p>Specifies the attributes that are auto-verified in a user pool.</p>\n      ",
                "shape_name": "VerifiedAttributesListType",
                "members": {
                  "type": "string",
                  "enum": [
                    "phone_number",
                    "email"
                  ],
                  "shape_name": "VerifiedAttributeType",
                  "documentation": null
                }
              },
              "AliasAttributes": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>Specifies the attributes that are aliased in a user pool.</simpara>\n      ",
                "documentation": "\n        <p>Specifies the attributes that are aliased in a user pool.</p>\n      ",
                "shape_name": "AliasAttributesListType",
                "members": {
                  "type": "string",
                  "enum": [
                    "phone_number",
                    "email",
                    "preferred_username"
                  ],
                  "shape_name": "AliasAttributeType",
                  "documentation": null
                }
              },
              "UsernameAttributes": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>Specifies whether email addresses or phone numbers can be specified as usernames\n            when a user signs up.</simpara>\n      ",
                "documentation": "\n        <p>Specifies whether email addresses or phone numbers can be specified as usernames\n            when a user signs up.</p>\n      ",
                "shape_name": "UsernameAttributesListType",
                "members": {
                  "type": "string",
                  "enum": [
                    "phone_number",
                    "email"
                  ],
                  "shape_name": "UsernameAttributeType",
                  "documentation": null
                }
              },
              "SmsVerificationMessage": {
                "type": "string",
                "pattern": ".*\\{####\\}.*",
                "zonbookDocumentation": "\n        <simpara>The contents of the SMS verification message.</simpara>\n      ",
                "documentation": "\n        <p>The contents of the SMS verification message.</p>\n      ",
                "shape_name": "SmsVerificationMessageType",
                "min_length": 6,
                "max_length": 140
              },
              "EmailVerificationMessage": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                "zonbookDocumentation": "\n        <simpara>The contents of the email verification message.</simpara>\n      ",
                "documentation": "\n        <p>The contents of the email verification message.</p>\n      ",
                "shape_name": "EmailVerificationMessageType",
                "min_length": 6,
                "max_length": 20000
              },
              "EmailVerificationSubject": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                "zonbookDocumentation": "\n        <simpara>The subject of the email verification message.</simpara>\n      ",
                "documentation": "\n        <p>The subject of the email verification message.</p>\n      ",
                "shape_name": "EmailVerificationSubjectType",
                "min_length": 1,
                "max_length": 140
              },
              "VerificationMessageTemplate": {
                "type": "structure",
                "members": {
                  "SmsMessage": {
                    "type": "string",
                    "pattern": ".*\\{####\\}.*",
                    "zonbookDocumentation": "\n        <simpara>The SMS message template.</simpara>\n      ",
                    "documentation": "\n        <p>The SMS message template.</p>\n      ",
                    "shape_name": "SmsVerificationMessageType",
                    "min_length": 6,
                    "max_length": 140
                  },
                  "EmailMessage": {
                    "type": "string",
                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                    "zonbookDocumentation": "\n        <simpara>The email message template.</simpara>\n      ",
                    "documentation": "\n        <p>The email message template.</p>\n      ",
                    "shape_name": "EmailVerificationMessageType",
                    "min_length": 6,
                    "max_length": 20000
                  },
                  "EmailSubject": {
                    "type": "string",
                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                    "zonbookDocumentation": "\n        <simpara>The subject line for the email message template.</simpara>\n      ",
                    "documentation": "\n        <p>The subject line for the email message template.</p>\n      ",
                    "shape_name": "EmailVerificationSubjectType",
                    "min_length": 1,
                    "max_length": 140
                  },
                  "EmailMessageByLink": {
                    "type": "string",
                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{##[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*##\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                    "zonbookDocumentation": "\n        <simpara>The email message template for sending a confirmation link to the user.</simpara>\n      ",
                    "documentation": "\n        <p>The email message template for sending a confirmation link to the user.</p>\n      ",
                    "shape_name": "EmailVerificationMessageByLinkType",
                    "min_length": 6,
                    "max_length": 20000
                  },
                  "EmailSubjectByLink": {
                    "type": "string",
                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                    "zonbookDocumentation": "\n        <simpara>The subject line for the email message template for sending a confirmation link to\n            the user.</simpara>\n      ",
                    "documentation": "\n        <p>The subject line for the email message template for sending a confirmation link to\n            the user.</p>\n      ",
                    "shape_name": "EmailVerificationSubjectByLinkType",
                    "min_length": 1,
                    "max_length": 140
                  },
                  "DefaultEmailOption": {
                    "type": "string",
                    "enum": [
                      "CONFIRM_WITH_LINK",
                      "CONFIRM_WITH_CODE"
                    ],
                    "zonbookDocumentation": "\n        <simpara>The default email option.</simpara>\n      ",
                    "documentation": "\n        <p>The default email option.</p>\n      ",
                    "shape_name": "DefaultEmailOptionType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The template for verification messages.</simpara>\n      ",
                "documentation": "\n        <p>The template for verification messages.</p>\n      ",
                "shape_name": "VerificationMessageTemplateType"
              },
              "SmsAuthenticationMessage": {
                "type": "string",
                "pattern": ".*\\{####\\}.*",
                "zonbookDocumentation": "\n        <simpara>The contents of the SMS authentication message.</simpara>\n      ",
                "documentation": "\n        <p>The contents of the SMS authentication message.</p>\n      ",
                "shape_name": "SmsVerificationMessageType",
                "min_length": 6,
                "max_length": 140
              },
              "MfaConfiguration": {
                "type": "string",
                "enum": [
                  "OFF",
                  "ON",
                  "OPTIONAL"
                ],
                "zonbookDocumentation": "\n        <simpara>Can be one of the following values:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>\n                    <code>OFF</code> - MFA tokens are not required and cannot be specified during\n                    user registration.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                    <code>ON</code> - MFA tokens are required for all user registrations. You can\n                    only specify required when you are initially creating a user pool.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                    <code>OPTIONAL</code> - Users have the option when registering to create an MFA\n                    token.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
                "documentation": "\n        <p>Can be one of the following values:</p>\n        <ul>\n            <li>\n                <p>\n                    <code>OFF</code> - MFA tokens are not required and cannot be specified during\n                    user registration.</p>\n            </li>\n            <li>\n                <p>\n                    <code>ON</code> - MFA tokens are required for all user registrations. You can\n                    only specify required when you are initially creating a user pool.</p>\n            </li>\n            <li>\n                <p>\n                    <code>OPTIONAL</code> - Users have the option when registering to create an MFA\n                    token.</p>\n            </li>\n         </ul>\n      ",
                "shape_name": "UserPoolMfaType"
              },
              "DeviceConfiguration": {
                "type": "structure",
                "members": {
                  "ChallengeRequiredOnNewDevice": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n        <simpara>Indicates whether a challenge is required on a new device. Only applicable to a new\n            device.</simpara>\n      ",
                    "documentation": "\n        <p>Indicates whether a challenge is required on a new device. Only applicable to a new\n            device.</p>\n      ",
                    "shape_name": "BooleanType"
                  },
                  "DeviceOnlyRememberedOnUserPrompt": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n        <simpara>If true, a device is only remembered on user prompt.</simpara>\n      ",
                    "documentation": "\n        <p>If true, a device is only remembered on user prompt.</p>\n      ",
                    "shape_name": "BooleanType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The device configuration.</simpara>\n      ",
                "documentation": "\n        <p>The device configuration.</p>\n      ",
                "shape_name": "DeviceConfigurationType"
              },
              "EstimatedNumberOfUsers": {
                "type": "integer",
                "zonbookDocumentation": "\n        <simpara>A number estimating the size of the user pool.</simpara>\n      ",
                "documentation": "\n        <p>A number estimating the size of the user pool.</p>\n      ",
                "shape_name": "IntegerType"
              },
              "EmailConfiguration": {
                "type": "structure",
                "members": {
                  "SourceArn": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the email source.</simpara>\n      ",
                    "documentation": "\n        <p>The Amazon Resource Name (ARN) of the email source.</p>\n      ",
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "ReplyToEmailAddress": {
                    "type": "string",
                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+@[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                    "zonbookDocumentation": "\n        <simpara>The destination to which the receiver of the email should reply to.</simpara>\n      ",
                    "documentation": "\n        <p>The destination to which the receiver of the email should reply to.</p>\n      ",
                    "shape_name": "EmailAddressType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The email configuration.</simpara>\n      ",
                "documentation": "\n        <p>The email configuration.</p>\n      ",
                "shape_name": "EmailConfigurationType"
              },
              "SmsConfiguration": {
                "type": "structure",
                "members": {
                  "SnsCallerArn": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS)\n            caller.</simpara>\n      ",
                    "documentation": "\n        <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS)\n            caller.</p>\n      ",
                    "required": true,
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "ExternalId": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The external ID.</simpara>\n      ",
                    "documentation": "\n        <p>The external ID.</p>\n      ",
                    "shape_name": "StringType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The SMS configuration.</simpara>\n      ",
                "documentation": "\n        <p>The SMS configuration.</p>\n      ",
                "shape_name": "SmsConfigurationType"
              },
              "UserPoolTags": {
                "type": "map",
                "zonbookDocumentation": "\n        <simpara>The cost allocation tags for the user pool. For more information, see <ulink url=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html\">Adding Cost Allocation Tags to Your User Pool</ulink>\n         </simpara>\n      ",
                "documentation": "\n        <p>The cost allocation tags for the user pool. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html\">Adding Cost Allocation Tags to Your User Pool</a>\n         </p>\n      ",
                "shape_name": "UserPoolTagsType",
                "keys": {
                  "type": "string",
                  "shape_name": "StringType",
                  "documentation": null
                },
                "members": {
                  "type": "string",
                  "shape_name": "StringType",
                  "documentation": null
                }
              },
              "SmsConfigurationFailure": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The reason why the SMS configuration cannot send the messages to your\n            users.</simpara>\n      ",
                "documentation": "\n        <p>The reason why the SMS configuration cannot send the messages to your\n            users.</p>\n      ",
                "shape_name": "StringType"
              },
              "EmailConfigurationFailure": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The reason why the email configuration cannot send the messages to your\n            users.</simpara>\n      ",
                "documentation": "\n        <p>The reason why the email configuration cannot send the messages to your\n            users.</p>\n      ",
                "shape_name": "StringType"
              },
              "Domain": {
                "type": "string",
                "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                "zonbookDocumentation": "\n        <para>Holds the domain prefix if the user pool has a domain associated with it.</para>\n      ",
                "documentation": "\n        <p>Holds the domain prefix if the user pool has a domain associated with it.</p>\n      ",
                "shape_name": "DomainType",
                "min_length": 1,
                "max_length": 63
              },
              "CustomDomain": {
                "type": "string",
                "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                "shape_name": "DomainType",
                "documentation": null,
                "min_length": 1,
                "max_length": 63
              },
              "AdminCreateUserConfig": {
                "type": "structure",
                "members": {
                  "AllowAdminCreateUserOnly": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n        <simpara>Set to <code>True</code> if only the administrator is allowed to create user\n            profiles. Set to <code>False</code> if users can sign themselves up via an\n            app.</simpara>\n      ",
                    "documentation": "\n        <p>Set to <code>True</code> if only the administrator is allowed to create user\n            profiles. Set to <code>False</code> if users can sign themselves up via an\n            app.</p>\n      ",
                    "shape_name": "BooleanType"
                  },
                  "UnusedAccountValidityDays": {
                    "type": "integer",
                    "zonbookDocumentation": "\n        <simpara>The user account expiration limit, in days, after which the account is no longer\n            usable. To reset the account after that time limit, you must call\n                <code>AdminCreateUser</code> again, specifying <code>\"RESEND\"</code> for the\n                <code>MessageAction</code> parameter. The default value for this parameter is\n            7.</simpara>\n      ",
                    "documentation": "\n        <p>The user account expiration limit, in days, after which the account is no longer\n            usable. To reset the account after that time limit, you must call\n                <code>AdminCreateUser</code> again, specifying <code>\"RESEND\"</code> for the\n                <code>MessageAction</code> parameter. The default value for this parameter is\n            7.</p>\n      ",
                    "shape_name": "AdminCreateUserUnusedAccountValidityDaysType",
                    "min_length": 0,
                    "max_length": 365
                  },
                  "InviteMessageTemplate": {
                    "type": "structure",
                    "members": {
                      "SMSMessage": {
                        "type": "string",
                        "pattern": ".*\\{####\\}.*",
                        "zonbookDocumentation": "\n        <simpara>The message template for SMS messages.</simpara>\n      ",
                        "documentation": "\n        <p>The message template for SMS messages.</p>\n      ",
                        "shape_name": "SmsVerificationMessageType",
                        "min_length": 6,
                        "max_length": 140
                      },
                      "EmailMessage": {
                        "type": "string",
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                        "zonbookDocumentation": "\n        <simpara>The message template for email messages.</simpara>\n      ",
                        "documentation": "\n        <p>The message template for email messages.</p>\n      ",
                        "shape_name": "EmailVerificationMessageType",
                        "min_length": 6,
                        "max_length": 20000
                      },
                      "EmailSubject": {
                        "type": "string",
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                        "zonbookDocumentation": "\n        <simpara>The subject line for email messages.</simpara>\n      ",
                        "documentation": "\n        <p>The subject line for email messages.</p>\n      ",
                        "shape_name": "EmailVerificationSubjectType",
                        "min_length": 1,
                        "max_length": 140
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>The message template to be used for the welcome message to new users.</simpara>\n        <simpara>See also <ulink url=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization\">Customizing User Invitation Messages</ulink>.</simpara>\n      ",
                    "documentation": "\n        <p>The message template to be used for the welcome message to new users.</p>\n        <p>See also <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization\">Customizing User Invitation Messages</a>.</p>\n      ",
                    "shape_name": "MessageTemplateType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The configuration for <code>AdminCreateUser</code> requests.</simpara>\n      ",
                "documentation": "\n        <p>The configuration for <code>AdminCreateUser</code> requests.</p>\n      ",
                "shape_name": "AdminCreateUserConfigType"
              },
              "UserPoolAddOns": {
                "type": "structure",
                "members": {
                  "AdvancedSecurityMode": {
                    "type": "string",
                    "enum": [
                      "OFF",
                      "AUDIT",
                      "ENFORCED"
                    ],
                    "zonbookDocumentation": "\n        <simpara>The advanced security mode.</simpara>\n      ",
                    "documentation": "\n        <p>The advanced security mode.</p>\n      ",
                    "required": true,
                    "shape_name": "AdvancedSecurityModeType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The user pool add-ons.</simpara>\n      ",
                "documentation": "\n        <p>The user pool add-ons.</p>\n      ",
                "shape_name": "UserPoolAddOnsType"
              },
              "Arn": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) for the user pool.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Resource Name (ARN) for the user pool.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              }
            },
            "zonbookDocumentation": "\n        <simpara>A container for the user pool details.</simpara>\n      ",
            "documentation": "\n        <p>A container for the user pool details.</p>\n      ",
            "shape_name": "UserPoolType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server for the request to create a user\n            pool.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server for the request to create a user\n            pool.</p>\n      ",
        "shape_name": "CreateUserPoolResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message retuned when the invalid SMS role access policy exception is\n            thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message retuned when the invalid SMS role access policy exception is\n            thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</simpara>\n      ",
          "documentation": "\n        <p>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</p>\n      ",
          "shape_name": "InvalidSmsRoleAccessPolicyException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the role trust relationship for the SMS message is\n            invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the role trust relationship for the SMS message is\n            invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <emphasis role=\"bold\">cognito-idp.amazonaws.com</emphasis> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <b>cognito-idp.amazonaws.com</b> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</p>\n      ",
          "shape_name": "InvalidSmsRoleTrustRelationshipException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when you have an unverified email address or the identity\n            policy is not set on an email address that Amazon Cognito can access.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when you have an unverified email address or the identity\n            policy is not set on an email address that Amazon Cognito can access.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito is not allowed to use your email\n            identity. HTTP status code: 400.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito is not allowed to use your email\n            identity. HTTP status code: 400.</p>\n      ",
          "shape_name": "InvalidEmailRoleAccessPolicyException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "MessageType",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user pool tag cannot be set or updated.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user pool tag cannot be set or updated.</p>\n      ",
          "shape_name": "UserPoolTaggingException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Creates a new Amazon Cognito user pool and sets the password policy for the\n            pool.</p>\n      "
    },
    "DescribeUserPool": {
      "name": "DescribeUserPool",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool you want to describe.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool you want to describe.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to describe the user pool.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to describe the user pool.</p>\n      ",
        "shape_name": "DescribeUserPoolRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "UserPool": {
            "type": "structure",
            "members": {
              "Id": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The ID of the user pool.</simpara>\n      ",
                "documentation": "\n        <p>The ID of the user pool.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "Name": {
                "type": "string",
                "pattern": "[\\w\\s+=,.@-]+",
                "zonbookDocumentation": "\n        <simpara>The name of the user pool.</simpara>\n      ",
                "documentation": "\n        <p>The name of the user pool.</p>\n      ",
                "shape_name": "UserPoolNameType",
                "min_length": 1,
                "max_length": 128
              },
              "Policies": {
                "type": "structure",
                "members": {
                  "PasswordPolicy": {
                    "type": "structure",
                    "members": {
                      "MinimumLength": {
                        "type": "integer",
                        "zonbookDocumentation": "\n        <simpara>The minimum length of the password policy that you have set. Cannot be less than\n            6.</simpara>\n      ",
                        "documentation": "\n        <p>The minimum length of the password policy that you have set. Cannot be less than\n            6.</p>\n      ",
                        "shape_name": "PasswordPolicyMinLengthType",
                        "min_length": 6,
                        "max_length": 99
                      },
                      "RequireUppercase": {
                        "type": "boolean",
                        "zonbookDocumentation": "\n        <simpara>In the password policy that you have set, refers to whether you have required users\n            to use at least one uppercase letter in their password.</simpara>\n      ",
                        "documentation": "\n        <p>In the password policy that you have set, refers to whether you have required users\n            to use at least one uppercase letter in their password.</p>\n      ",
                        "shape_name": "BooleanType"
                      },
                      "RequireLowercase": {
                        "type": "boolean",
                        "zonbookDocumentation": "\n        <simpara>In the password policy that you have set, refers to whether you have required users\n            to use at least one lowercase letter in their password.</simpara>\n      ",
                        "documentation": "\n        <p>In the password policy that you have set, refers to whether you have required users\n            to use at least one lowercase letter in their password.</p>\n      ",
                        "shape_name": "BooleanType"
                      },
                      "RequireNumbers": {
                        "type": "boolean",
                        "zonbookDocumentation": "\n        <simpara>In the password policy that you have set, refers to whether you have required users\n            to use at least one number in their password.</simpara>\n      ",
                        "documentation": "\n        <p>In the password policy that you have set, refers to whether you have required users\n            to use at least one number in their password.</p>\n      ",
                        "shape_name": "BooleanType"
                      },
                      "RequireSymbols": {
                        "type": "boolean",
                        "zonbookDocumentation": "\n        <simpara>In the password policy that you have set, refers to whether you have required users\n            to use at least one symbol in their password.</simpara>\n      ",
                        "documentation": "\n        <p>In the password policy that you have set, refers to whether you have required users\n            to use at least one symbol in their password.</p>\n      ",
                        "shape_name": "BooleanType"
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>The password policy.</simpara>\n      ",
                    "documentation": "\n        <p>The password policy.</p>\n      ",
                    "shape_name": "PasswordPolicyType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The policies associated with the user pool.</simpara>\n      ",
                "documentation": "\n        <p>The policies associated with the user pool.</p>\n      ",
                "shape_name": "UserPoolPolicyType"
              },
              "LambdaConfig": {
                "type": "structure",
                "members": {
                  "PreSignUp": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>A pre-registration AWS Lambda trigger.</simpara>\n      ",
                    "documentation": "\n        <p>A pre-registration AWS Lambda trigger.</p>\n      ",
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "CustomMessage": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>A custom Message AWS Lambda trigger.</simpara>\n      ",
                    "documentation": "\n        <p>A custom Message AWS Lambda trigger.</p>\n      ",
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "PostConfirmation": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>A post-confirmation AWS Lambda trigger.</simpara>\n      ",
                    "documentation": "\n        <p>A post-confirmation AWS Lambda trigger.</p>\n      ",
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "PreAuthentication": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>A pre-authentication AWS Lambda trigger.</simpara>\n      ",
                    "documentation": "\n        <p>A pre-authentication AWS Lambda trigger.</p>\n      ",
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "PostAuthentication": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>A post-authentication AWS Lambda trigger.</simpara>\n      ",
                    "documentation": "\n        <p>A post-authentication AWS Lambda trigger.</p>\n      ",
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "DefineAuthChallenge": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>Defines the authentication challenge.</simpara>\n      ",
                    "documentation": "\n        <p>Defines the authentication challenge.</p>\n      ",
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "CreateAuthChallenge": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>Creates an authentication challenge.</simpara>\n      ",
                    "documentation": "\n        <p>Creates an authentication challenge.</p>\n      ",
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "VerifyAuthChallengeResponse": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>Verifies the authentication challenge response.</simpara>\n      ",
                    "documentation": "\n        <p>Verifies the authentication challenge response.</p>\n      ",
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "PreTokenGeneration": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>A Lambda trigger that is invoked before token generation.</simpara>\n      ",
                    "documentation": "\n        <p>A Lambda trigger that is invoked before token generation.</p>\n      ",
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "UserMigration": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <para>The user migration Lambda config type.</para>\n      ",
                    "documentation": "\n        <p>The user migration Lambda config type.</p>\n      ",
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The AWS Lambda triggers associated with the user pool.</simpara>\n      ",
                "documentation": "\n        <p>The AWS Lambda triggers associated with the user pool.</p>\n      ",
                "shape_name": "LambdaConfigType"
              },
              "Status": {
                "type": "string",
                "enum": [
                  "Enabled",
                  "Disabled"
                ],
                "zonbookDocumentation": "\n        <simpara>The status of a user pool.</simpara>\n      ",
                "documentation": "\n        <p>The status of a user pool.</p>\n      ",
                "shape_name": "StatusType"
              },
              "LastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the user pool was last modified.</simpara>\n      ",
                "documentation": "\n        <p>The date the user pool was last modified.</p>\n      ",
                "shape_name": "DateType"
              },
              "CreationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the user pool was created.</simpara>\n      ",
                "documentation": "\n        <p>The date the user pool was created.</p>\n      ",
                "shape_name": "DateType"
              },
              "SchemaAttributes": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>A container with the schema attributes of a user pool.</simpara>\n      ",
                "documentation": "\n        <p>A container with the schema attributes of a user pool.</p>\n      ",
                "shape_name": "SchemaAttributesListType",
                "min_length": 1,
                "max_length": 50,
                "members": {
                  "type": "structure",
                  "members": {
                    "Name": {
                      "type": "string",
                      "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                      "zonbookDocumentation": "\n        <simpara>A schema attribute of the name type.</simpara>\n      ",
                      "documentation": "\n        <p>A schema attribute of the name type.</p>\n      ",
                      "shape_name": "CustomAttributeNameType",
                      "min_length": 1,
                      "max_length": 20
                    },
                    "AttributeDataType": {
                      "type": "string",
                      "enum": [
                        "String",
                        "Number",
                        "DateTime",
                        "Boolean"
                      ],
                      "zonbookDocumentation": "\n        <simpara>The attribute data type.</simpara>\n      ",
                      "documentation": "\n        <p>The attribute data type.</p>\n      ",
                      "shape_name": "AttributeDataType"
                    },
                    "DeveloperOnlyAttribute": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n        <simpara>Specifies whether the attribute type is developer only.</simpara>\n      ",
                      "documentation": "\n        <p>Specifies whether the attribute type is developer only.</p>\n      ",
                      "box": true,
                      "shape_name": "BooleanType"
                    },
                    "Mutable": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n        <simpara>Specifies whether the value of the attribute can be changed.</simpara>\n      ",
                      "documentation": "\n        <p>Specifies whether the value of the attribute can be changed.</p>\n      ",
                      "box": true,
                      "shape_name": "BooleanType"
                    },
                    "Required": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n        <simpara>Specifies whether a user pool attribute is required. If the attribute is required\n            and the user does not provide a value, registration or sign-in will fail.</simpara>\n      ",
                      "documentation": "\n        <p>Specifies whether a user pool attribute is required. If the attribute is required\n            and the user does not provide a value, registration or sign-in will fail.</p>\n      ",
                      "box": true,
                      "shape_name": "BooleanType"
                    },
                    "NumberAttributeConstraints": {
                      "type": "structure",
                      "members": {
                        "MinValue": {
                          "type": "string",
                          "zonbookDocumentation": "\n        <simpara>The minimum value of an attribute that is of the number data type.</simpara>\n      ",
                          "documentation": "\n        <p>The minimum value of an attribute that is of the number data type.</p>\n      ",
                          "shape_name": "StringType"
                        },
                        "MaxValue": {
                          "type": "string",
                          "zonbookDocumentation": "\n        <simpara>The maximum value of an attribute that is of the number data type.</simpara>\n      ",
                          "documentation": "\n        <p>The maximum value of an attribute that is of the number data type.</p>\n      ",
                          "shape_name": "StringType"
                        }
                      },
                      "zonbookDocumentation": "\n        <simpara>Specifies the constraints for an attribute of the number type.</simpara>\n      ",
                      "documentation": "\n        <p>Specifies the constraints for an attribute of the number type.</p>\n      ",
                      "shape_name": "NumberAttributeConstraintsType"
                    },
                    "StringAttributeConstraints": {
                      "type": "structure",
                      "members": {
                        "MinLength": {
                          "type": "string",
                          "zonbookDocumentation": "\n        <simpara>The minimum length.</simpara>\n      ",
                          "documentation": "\n        <p>The minimum length.</p>\n      ",
                          "shape_name": "StringType"
                        },
                        "MaxLength": {
                          "type": "string",
                          "zonbookDocumentation": "\n        <simpara>The maximum length.</simpara>\n      ",
                          "documentation": "\n        <p>The maximum length.</p>\n      ",
                          "shape_name": "StringType"
                        }
                      },
                      "zonbookDocumentation": "\n        <simpara>Specifies the constraints for an attribute of the string type.</simpara>\n      ",
                      "documentation": "\n        <p>Specifies the constraints for an attribute of the string type.</p>\n      ",
                      "shape_name": "StringAttributeConstraintsType"
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>Contains information about the schema attribute.</simpara>\n      ",
                  "documentation": "\n        <p>Contains information about the schema attribute.</p>\n      ",
                  "shape_name": "SchemaAttributeType"
                }
              },
              "AutoVerifiedAttributes": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>Specifies the attributes that are auto-verified in a user pool.</simpara>\n      ",
                "documentation": "\n        <p>Specifies the attributes that are auto-verified in a user pool.</p>\n      ",
                "shape_name": "VerifiedAttributesListType",
                "members": {
                  "type": "string",
                  "enum": [
                    "phone_number",
                    "email"
                  ],
                  "shape_name": "VerifiedAttributeType",
                  "documentation": null
                }
              },
              "AliasAttributes": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>Specifies the attributes that are aliased in a user pool.</simpara>\n      ",
                "documentation": "\n        <p>Specifies the attributes that are aliased in a user pool.</p>\n      ",
                "shape_name": "AliasAttributesListType",
                "members": {
                  "type": "string",
                  "enum": [
                    "phone_number",
                    "email",
                    "preferred_username"
                  ],
                  "shape_name": "AliasAttributeType",
                  "documentation": null
                }
              },
              "UsernameAttributes": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>Specifies whether email addresses or phone numbers can be specified as usernames\n            when a user signs up.</simpara>\n      ",
                "documentation": "\n        <p>Specifies whether email addresses or phone numbers can be specified as usernames\n            when a user signs up.</p>\n      ",
                "shape_name": "UsernameAttributesListType",
                "members": {
                  "type": "string",
                  "enum": [
                    "phone_number",
                    "email"
                  ],
                  "shape_name": "UsernameAttributeType",
                  "documentation": null
                }
              },
              "SmsVerificationMessage": {
                "type": "string",
                "pattern": ".*\\{####\\}.*",
                "zonbookDocumentation": "\n        <simpara>The contents of the SMS verification message.</simpara>\n      ",
                "documentation": "\n        <p>The contents of the SMS verification message.</p>\n      ",
                "shape_name": "SmsVerificationMessageType",
                "min_length": 6,
                "max_length": 140
              },
              "EmailVerificationMessage": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                "zonbookDocumentation": "\n        <simpara>The contents of the email verification message.</simpara>\n      ",
                "documentation": "\n        <p>The contents of the email verification message.</p>\n      ",
                "shape_name": "EmailVerificationMessageType",
                "min_length": 6,
                "max_length": 20000
              },
              "EmailVerificationSubject": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                "zonbookDocumentation": "\n        <simpara>The subject of the email verification message.</simpara>\n      ",
                "documentation": "\n        <p>The subject of the email verification message.</p>\n      ",
                "shape_name": "EmailVerificationSubjectType",
                "min_length": 1,
                "max_length": 140
              },
              "VerificationMessageTemplate": {
                "type": "structure",
                "members": {
                  "SmsMessage": {
                    "type": "string",
                    "pattern": ".*\\{####\\}.*",
                    "zonbookDocumentation": "\n        <simpara>The SMS message template.</simpara>\n      ",
                    "documentation": "\n        <p>The SMS message template.</p>\n      ",
                    "shape_name": "SmsVerificationMessageType",
                    "min_length": 6,
                    "max_length": 140
                  },
                  "EmailMessage": {
                    "type": "string",
                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                    "zonbookDocumentation": "\n        <simpara>The email message template.</simpara>\n      ",
                    "documentation": "\n        <p>The email message template.</p>\n      ",
                    "shape_name": "EmailVerificationMessageType",
                    "min_length": 6,
                    "max_length": 20000
                  },
                  "EmailSubject": {
                    "type": "string",
                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                    "zonbookDocumentation": "\n        <simpara>The subject line for the email message template.</simpara>\n      ",
                    "documentation": "\n        <p>The subject line for the email message template.</p>\n      ",
                    "shape_name": "EmailVerificationSubjectType",
                    "min_length": 1,
                    "max_length": 140
                  },
                  "EmailMessageByLink": {
                    "type": "string",
                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{##[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*##\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                    "zonbookDocumentation": "\n        <simpara>The email message template for sending a confirmation link to the user.</simpara>\n      ",
                    "documentation": "\n        <p>The email message template for sending a confirmation link to the user.</p>\n      ",
                    "shape_name": "EmailVerificationMessageByLinkType",
                    "min_length": 6,
                    "max_length": 20000
                  },
                  "EmailSubjectByLink": {
                    "type": "string",
                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                    "zonbookDocumentation": "\n        <simpara>The subject line for the email message template for sending a confirmation link to\n            the user.</simpara>\n      ",
                    "documentation": "\n        <p>The subject line for the email message template for sending a confirmation link to\n            the user.</p>\n      ",
                    "shape_name": "EmailVerificationSubjectByLinkType",
                    "min_length": 1,
                    "max_length": 140
                  },
                  "DefaultEmailOption": {
                    "type": "string",
                    "enum": [
                      "CONFIRM_WITH_LINK",
                      "CONFIRM_WITH_CODE"
                    ],
                    "zonbookDocumentation": "\n        <simpara>The default email option.</simpara>\n      ",
                    "documentation": "\n        <p>The default email option.</p>\n      ",
                    "shape_name": "DefaultEmailOptionType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The template for verification messages.</simpara>\n      ",
                "documentation": "\n        <p>The template for verification messages.</p>\n      ",
                "shape_name": "VerificationMessageTemplateType"
              },
              "SmsAuthenticationMessage": {
                "type": "string",
                "pattern": ".*\\{####\\}.*",
                "zonbookDocumentation": "\n        <simpara>The contents of the SMS authentication message.</simpara>\n      ",
                "documentation": "\n        <p>The contents of the SMS authentication message.</p>\n      ",
                "shape_name": "SmsVerificationMessageType",
                "min_length": 6,
                "max_length": 140
              },
              "MfaConfiguration": {
                "type": "string",
                "enum": [
                  "OFF",
                  "ON",
                  "OPTIONAL"
                ],
                "zonbookDocumentation": "\n        <simpara>Can be one of the following values:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>\n                    <code>OFF</code> - MFA tokens are not required and cannot be specified during\n                    user registration.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                    <code>ON</code> - MFA tokens are required for all user registrations. You can\n                    only specify required when you are initially creating a user pool.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                    <code>OPTIONAL</code> - Users have the option when registering to create an MFA\n                    token.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
                "documentation": "\n        <p>Can be one of the following values:</p>\n        <ul>\n            <li>\n                <p>\n                    <code>OFF</code> - MFA tokens are not required and cannot be specified during\n                    user registration.</p>\n            </li>\n            <li>\n                <p>\n                    <code>ON</code> - MFA tokens are required for all user registrations. You can\n                    only specify required when you are initially creating a user pool.</p>\n            </li>\n            <li>\n                <p>\n                    <code>OPTIONAL</code> - Users have the option when registering to create an MFA\n                    token.</p>\n            </li>\n         </ul>\n      ",
                "shape_name": "UserPoolMfaType"
              },
              "DeviceConfiguration": {
                "type": "structure",
                "members": {
                  "ChallengeRequiredOnNewDevice": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n        <simpara>Indicates whether a challenge is required on a new device. Only applicable to a new\n            device.</simpara>\n      ",
                    "documentation": "\n        <p>Indicates whether a challenge is required on a new device. Only applicable to a new\n            device.</p>\n      ",
                    "shape_name": "BooleanType"
                  },
                  "DeviceOnlyRememberedOnUserPrompt": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n        <simpara>If true, a device is only remembered on user prompt.</simpara>\n      ",
                    "documentation": "\n        <p>If true, a device is only remembered on user prompt.</p>\n      ",
                    "shape_name": "BooleanType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The device configuration.</simpara>\n      ",
                "documentation": "\n        <p>The device configuration.</p>\n      ",
                "shape_name": "DeviceConfigurationType"
              },
              "EstimatedNumberOfUsers": {
                "type": "integer",
                "zonbookDocumentation": "\n        <simpara>A number estimating the size of the user pool.</simpara>\n      ",
                "documentation": "\n        <p>A number estimating the size of the user pool.</p>\n      ",
                "shape_name": "IntegerType"
              },
              "EmailConfiguration": {
                "type": "structure",
                "members": {
                  "SourceArn": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the email source.</simpara>\n      ",
                    "documentation": "\n        <p>The Amazon Resource Name (ARN) of the email source.</p>\n      ",
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "ReplyToEmailAddress": {
                    "type": "string",
                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+@[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                    "zonbookDocumentation": "\n        <simpara>The destination to which the receiver of the email should reply to.</simpara>\n      ",
                    "documentation": "\n        <p>The destination to which the receiver of the email should reply to.</p>\n      ",
                    "shape_name": "EmailAddressType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The email configuration.</simpara>\n      ",
                "documentation": "\n        <p>The email configuration.</p>\n      ",
                "shape_name": "EmailConfigurationType"
              },
              "SmsConfiguration": {
                "type": "structure",
                "members": {
                  "SnsCallerArn": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS)\n            caller.</simpara>\n      ",
                    "documentation": "\n        <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS)\n            caller.</p>\n      ",
                    "required": true,
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "ExternalId": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The external ID.</simpara>\n      ",
                    "documentation": "\n        <p>The external ID.</p>\n      ",
                    "shape_name": "StringType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The SMS configuration.</simpara>\n      ",
                "documentation": "\n        <p>The SMS configuration.</p>\n      ",
                "shape_name": "SmsConfigurationType"
              },
              "UserPoolTags": {
                "type": "map",
                "zonbookDocumentation": "\n        <simpara>The cost allocation tags for the user pool. For more information, see <ulink url=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html\">Adding Cost Allocation Tags to Your User Pool</ulink>\n         </simpara>\n      ",
                "documentation": "\n        <p>The cost allocation tags for the user pool. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html\">Adding Cost Allocation Tags to Your User Pool</a>\n         </p>\n      ",
                "shape_name": "UserPoolTagsType",
                "keys": {
                  "type": "string",
                  "shape_name": "StringType",
                  "documentation": null
                },
                "members": {
                  "type": "string",
                  "shape_name": "StringType",
                  "documentation": null
                }
              },
              "SmsConfigurationFailure": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The reason why the SMS configuration cannot send the messages to your\n            users.</simpara>\n      ",
                "documentation": "\n        <p>The reason why the SMS configuration cannot send the messages to your\n            users.</p>\n      ",
                "shape_name": "StringType"
              },
              "EmailConfigurationFailure": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The reason why the email configuration cannot send the messages to your\n            users.</simpara>\n      ",
                "documentation": "\n        <p>The reason why the email configuration cannot send the messages to your\n            users.</p>\n      ",
                "shape_name": "StringType"
              },
              "Domain": {
                "type": "string",
                "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                "zonbookDocumentation": "\n        <para>Holds the domain prefix if the user pool has a domain associated with it.</para>\n      ",
                "documentation": "\n        <p>Holds the domain prefix if the user pool has a domain associated with it.</p>\n      ",
                "shape_name": "DomainType",
                "min_length": 1,
                "max_length": 63
              },
              "CustomDomain": {
                "type": "string",
                "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                "shape_name": "DomainType",
                "documentation": null,
                "min_length": 1,
                "max_length": 63
              },
              "AdminCreateUserConfig": {
                "type": "structure",
                "members": {
                  "AllowAdminCreateUserOnly": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n        <simpara>Set to <code>True</code> if only the administrator is allowed to create user\n            profiles. Set to <code>False</code> if users can sign themselves up via an\n            app.</simpara>\n      ",
                    "documentation": "\n        <p>Set to <code>True</code> if only the administrator is allowed to create user\n            profiles. Set to <code>False</code> if users can sign themselves up via an\n            app.</p>\n      ",
                    "shape_name": "BooleanType"
                  },
                  "UnusedAccountValidityDays": {
                    "type": "integer",
                    "zonbookDocumentation": "\n        <simpara>The user account expiration limit, in days, after which the account is no longer\n            usable. To reset the account after that time limit, you must call\n                <code>AdminCreateUser</code> again, specifying <code>\"RESEND\"</code> for the\n                <code>MessageAction</code> parameter. The default value for this parameter is\n            7.</simpara>\n      ",
                    "documentation": "\n        <p>The user account expiration limit, in days, after which the account is no longer\n            usable. To reset the account after that time limit, you must call\n                <code>AdminCreateUser</code> again, specifying <code>\"RESEND\"</code> for the\n                <code>MessageAction</code> parameter. The default value for this parameter is\n            7.</p>\n      ",
                    "shape_name": "AdminCreateUserUnusedAccountValidityDaysType",
                    "min_length": 0,
                    "max_length": 365
                  },
                  "InviteMessageTemplate": {
                    "type": "structure",
                    "members": {
                      "SMSMessage": {
                        "type": "string",
                        "pattern": ".*\\{####\\}.*",
                        "zonbookDocumentation": "\n        <simpara>The message template for SMS messages.</simpara>\n      ",
                        "documentation": "\n        <p>The message template for SMS messages.</p>\n      ",
                        "shape_name": "SmsVerificationMessageType",
                        "min_length": 6,
                        "max_length": 140
                      },
                      "EmailMessage": {
                        "type": "string",
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                        "zonbookDocumentation": "\n        <simpara>The message template for email messages.</simpara>\n      ",
                        "documentation": "\n        <p>The message template for email messages.</p>\n      ",
                        "shape_name": "EmailVerificationMessageType",
                        "min_length": 6,
                        "max_length": 20000
                      },
                      "EmailSubject": {
                        "type": "string",
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                        "zonbookDocumentation": "\n        <simpara>The subject line for email messages.</simpara>\n      ",
                        "documentation": "\n        <p>The subject line for email messages.</p>\n      ",
                        "shape_name": "EmailVerificationSubjectType",
                        "min_length": 1,
                        "max_length": 140
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>The message template to be used for the welcome message to new users.</simpara>\n        <simpara>See also <ulink url=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization\">Customizing User Invitation Messages</ulink>.</simpara>\n      ",
                    "documentation": "\n        <p>The message template to be used for the welcome message to new users.</p>\n        <p>See also <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization\">Customizing User Invitation Messages</a>.</p>\n      ",
                    "shape_name": "MessageTemplateType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The configuration for <code>AdminCreateUser</code> requests.</simpara>\n      ",
                "documentation": "\n        <p>The configuration for <code>AdminCreateUser</code> requests.</p>\n      ",
                "shape_name": "AdminCreateUserConfigType"
              },
              "UserPoolAddOns": {
                "type": "structure",
                "members": {
                  "AdvancedSecurityMode": {
                    "type": "string",
                    "enum": [
                      "OFF",
                      "AUDIT",
                      "ENFORCED"
                    ],
                    "zonbookDocumentation": "\n        <simpara>The advanced security mode.</simpara>\n      ",
                    "documentation": "\n        <p>The advanced security mode.</p>\n      ",
                    "required": true,
                    "shape_name": "AdvancedSecurityModeType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The user pool add-ons.</simpara>\n      ",
                "documentation": "\n        <p>The user pool add-ons.</p>\n      ",
                "shape_name": "UserPoolAddOnsType"
              },
              "Arn": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) for the user pool.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Resource Name (ARN) for the user pool.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              }
            },
            "zonbookDocumentation": "\n        <simpara>The container of metadata returned by the server to describe the pool.</simpara>\n      ",
            "documentation": "\n        <p>The container of metadata returned by the server to describe the pool.</p>\n      ",
            "shape_name": "UserPoolType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response to describe the user pool.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response to describe the user pool.</p>\n      ",
        "shape_name": "DescribeUserPoolResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "MessageType",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user pool tag cannot be set or updated.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user pool tag cannot be set or updated.</p>\n      ",
          "shape_name": "UserPoolTaggingException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Returns the configuration information and metadata of the specified user\n            pool.</p>\n      "
    },
    "UpdateUserPool": {
      "name": "UpdateUserPool",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool you want to update.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool you want to update.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Policies": {
            "type": "structure",
            "members": {
              "PasswordPolicy": {
                "type": "structure",
                "members": {
                  "MinimumLength": {
                    "type": "integer",
                    "zonbookDocumentation": "\n        <simpara>The minimum length of the password policy that you have set. Cannot be less than\n            6.</simpara>\n      ",
                    "documentation": "\n        <p>The minimum length of the password policy that you have set. Cannot be less than\n            6.</p>\n      ",
                    "shape_name": "PasswordPolicyMinLengthType",
                    "min_length": 6,
                    "max_length": 99
                  },
                  "RequireUppercase": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n        <simpara>In the password policy that you have set, refers to whether you have required users\n            to use at least one uppercase letter in their password.</simpara>\n      ",
                    "documentation": "\n        <p>In the password policy that you have set, refers to whether you have required users\n            to use at least one uppercase letter in their password.</p>\n      ",
                    "shape_name": "BooleanType"
                  },
                  "RequireLowercase": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n        <simpara>In the password policy that you have set, refers to whether you have required users\n            to use at least one lowercase letter in their password.</simpara>\n      ",
                    "documentation": "\n        <p>In the password policy that you have set, refers to whether you have required users\n            to use at least one lowercase letter in their password.</p>\n      ",
                    "shape_name": "BooleanType"
                  },
                  "RequireNumbers": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n        <simpara>In the password policy that you have set, refers to whether you have required users\n            to use at least one number in their password.</simpara>\n      ",
                    "documentation": "\n        <p>In the password policy that you have set, refers to whether you have required users\n            to use at least one number in their password.</p>\n      ",
                    "shape_name": "BooleanType"
                  },
                  "RequireSymbols": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n        <simpara>In the password policy that you have set, refers to whether you have required users\n            to use at least one symbol in their password.</simpara>\n      ",
                    "documentation": "\n        <p>In the password policy that you have set, refers to whether you have required users\n            to use at least one symbol in their password.</p>\n      ",
                    "shape_name": "BooleanType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The password policy.</simpara>\n      ",
                "documentation": "\n        <p>The password policy.</p>\n      ",
                "shape_name": "PasswordPolicyType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>A container with the policies you wish to update in a user pool.</simpara>\n      ",
            "documentation": "\n        <p>A container with the policies you wish to update in a user pool.</p>\n      ",
            "shape_name": "UserPoolPolicyType"
          },
          "LambdaConfig": {
            "type": "structure",
            "members": {
              "PreSignUp": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>A pre-registration AWS Lambda trigger.</simpara>\n      ",
                "documentation": "\n        <p>A pre-registration AWS Lambda trigger.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "CustomMessage": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>A custom Message AWS Lambda trigger.</simpara>\n      ",
                "documentation": "\n        <p>A custom Message AWS Lambda trigger.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "PostConfirmation": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>A post-confirmation AWS Lambda trigger.</simpara>\n      ",
                "documentation": "\n        <p>A post-confirmation AWS Lambda trigger.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "PreAuthentication": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>A pre-authentication AWS Lambda trigger.</simpara>\n      ",
                "documentation": "\n        <p>A pre-authentication AWS Lambda trigger.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "PostAuthentication": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>A post-authentication AWS Lambda trigger.</simpara>\n      ",
                "documentation": "\n        <p>A post-authentication AWS Lambda trigger.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "DefineAuthChallenge": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>Defines the authentication challenge.</simpara>\n      ",
                "documentation": "\n        <p>Defines the authentication challenge.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "CreateAuthChallenge": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>Creates an authentication challenge.</simpara>\n      ",
                "documentation": "\n        <p>Creates an authentication challenge.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "VerifyAuthChallengeResponse": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>Verifies the authentication challenge response.</simpara>\n      ",
                "documentation": "\n        <p>Verifies the authentication challenge response.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "PreTokenGeneration": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>A Lambda trigger that is invoked before token generation.</simpara>\n      ",
                "documentation": "\n        <p>A Lambda trigger that is invoked before token generation.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "UserMigration": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <para>The user migration Lambda config type.</para>\n      ",
                "documentation": "\n        <p>The user migration Lambda config type.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              }
            },
            "zonbookDocumentation": "\n        <simpara>The AWS Lambda configuration information from the request to update the user\n            pool.</simpara>\n      ",
            "documentation": "\n        <p>The AWS Lambda configuration information from the request to update the user\n            pool.</p>\n      ",
            "shape_name": "LambdaConfigType"
          },
          "AutoVerifiedAttributes": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The attributes that are automatically verified when the Amazon Cognito service\n            makes a request to update user pools.</simpara>\n      ",
            "documentation": "\n        <p>The attributes that are automatically verified when the Amazon Cognito service\n            makes a request to update user pools.</p>\n      ",
            "shape_name": "VerifiedAttributesListType",
            "members": {
              "type": "string",
              "enum": [
                "phone_number",
                "email"
              ],
              "shape_name": "VerifiedAttributeType",
              "documentation": null
            }
          },
          "SmsVerificationMessage": {
            "type": "string",
            "pattern": ".*\\{####\\}.*",
            "zonbookDocumentation": "\n        <simpara>A container with information about the SMS verification message.</simpara>\n      ",
            "documentation": "\n        <p>A container with information about the SMS verification message.</p>\n      ",
            "shape_name": "SmsVerificationMessageType",
            "min_length": 6,
            "max_length": 140
          },
          "EmailVerificationMessage": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
            "zonbookDocumentation": "\n        <simpara>The contents of the email verification message.</simpara>\n      ",
            "documentation": "\n        <p>The contents of the email verification message.</p>\n      ",
            "shape_name": "EmailVerificationMessageType",
            "min_length": 6,
            "max_length": 20000
          },
          "EmailVerificationSubject": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
            "zonbookDocumentation": "\n        <simpara>The subject of the email verification message.</simpara>\n      ",
            "documentation": "\n        <p>The subject of the email verification message.</p>\n      ",
            "shape_name": "EmailVerificationSubjectType",
            "min_length": 1,
            "max_length": 140
          },
          "VerificationMessageTemplate": {
            "type": "structure",
            "members": {
              "SmsMessage": {
                "type": "string",
                "pattern": ".*\\{####\\}.*",
                "zonbookDocumentation": "\n        <simpara>The SMS message template.</simpara>\n      ",
                "documentation": "\n        <p>The SMS message template.</p>\n      ",
                "shape_name": "SmsVerificationMessageType",
                "min_length": 6,
                "max_length": 140
              },
              "EmailMessage": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                "zonbookDocumentation": "\n        <simpara>The email message template.</simpara>\n      ",
                "documentation": "\n        <p>The email message template.</p>\n      ",
                "shape_name": "EmailVerificationMessageType",
                "min_length": 6,
                "max_length": 20000
              },
              "EmailSubject": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                "zonbookDocumentation": "\n        <simpara>The subject line for the email message template.</simpara>\n      ",
                "documentation": "\n        <p>The subject line for the email message template.</p>\n      ",
                "shape_name": "EmailVerificationSubjectType",
                "min_length": 1,
                "max_length": 140
              },
              "EmailMessageByLink": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{##[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*##\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                "zonbookDocumentation": "\n        <simpara>The email message template for sending a confirmation link to the user.</simpara>\n      ",
                "documentation": "\n        <p>The email message template for sending a confirmation link to the user.</p>\n      ",
                "shape_name": "EmailVerificationMessageByLinkType",
                "min_length": 6,
                "max_length": 20000
              },
              "EmailSubjectByLink": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                "zonbookDocumentation": "\n        <simpara>The subject line for the email message template for sending a confirmation link to\n            the user.</simpara>\n      ",
                "documentation": "\n        <p>The subject line for the email message template for sending a confirmation link to\n            the user.</p>\n      ",
                "shape_name": "EmailVerificationSubjectByLinkType",
                "min_length": 1,
                "max_length": 140
              },
              "DefaultEmailOption": {
                "type": "string",
                "enum": [
                  "CONFIRM_WITH_LINK",
                  "CONFIRM_WITH_CODE"
                ],
                "zonbookDocumentation": "\n        <simpara>The default email option.</simpara>\n      ",
                "documentation": "\n        <p>The default email option.</p>\n      ",
                "shape_name": "DefaultEmailOptionType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The template for verification messages.</simpara>\n      ",
            "documentation": "\n        <p>The template for verification messages.</p>\n      ",
            "shape_name": "VerificationMessageTemplateType"
          },
          "SmsAuthenticationMessage": {
            "type": "string",
            "pattern": ".*\\{####\\}.*",
            "zonbookDocumentation": "\n        <simpara>The contents of the SMS authentication message.</simpara>\n      ",
            "documentation": "\n        <p>The contents of the SMS authentication message.</p>\n      ",
            "shape_name": "SmsVerificationMessageType",
            "min_length": 6,
            "max_length": 140
          },
          "MfaConfiguration": {
            "type": "string",
            "enum": [
              "OFF",
              "ON",
              "OPTIONAL"
            ],
            "zonbookDocumentation": "\n        <simpara>Can be one of the following values:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>\n                    <code>OFF</code> - MFA tokens are not required and cannot be specified during\n                    user registration.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                    <code>ON</code> - MFA tokens are required for all user registrations. You can\n                    only specify required when you are initially creating a user pool.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                    <code>OPTIONAL</code> - Users have the option when registering to create an MFA\n                    token.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
            "documentation": "\n        <p>Can be one of the following values:</p>\n        <ul>\n            <li>\n                <p>\n                    <code>OFF</code> - MFA tokens are not required and cannot be specified during\n                    user registration.</p>\n            </li>\n            <li>\n                <p>\n                    <code>ON</code> - MFA tokens are required for all user registrations. You can\n                    only specify required when you are initially creating a user pool.</p>\n            </li>\n            <li>\n                <p>\n                    <code>OPTIONAL</code> - Users have the option when registering to create an MFA\n                    token.</p>\n            </li>\n         </ul>\n      ",
            "shape_name": "UserPoolMfaType"
          },
          "DeviceConfiguration": {
            "type": "structure",
            "members": {
              "ChallengeRequiredOnNewDevice": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>Indicates whether a challenge is required on a new device. Only applicable to a new\n            device.</simpara>\n      ",
                "documentation": "\n        <p>Indicates whether a challenge is required on a new device. Only applicable to a new\n            device.</p>\n      ",
                "shape_name": "BooleanType"
              },
              "DeviceOnlyRememberedOnUserPrompt": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>If true, a device is only remembered on user prompt.</simpara>\n      ",
                "documentation": "\n        <p>If true, a device is only remembered on user prompt.</p>\n      ",
                "shape_name": "BooleanType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Device configuration.</simpara>\n      ",
            "documentation": "\n        <p>Device configuration.</p>\n      ",
            "shape_name": "DeviceConfigurationType"
          },
          "EmailConfiguration": {
            "type": "structure",
            "members": {
              "SourceArn": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the email source.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Resource Name (ARN) of the email source.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "ReplyToEmailAddress": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+@[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "zonbookDocumentation": "\n        <simpara>The destination to which the receiver of the email should reply to.</simpara>\n      ",
                "documentation": "\n        <p>The destination to which the receiver of the email should reply to.</p>\n      ",
                "shape_name": "EmailAddressType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Email configuration.</simpara>\n      ",
            "documentation": "\n        <p>Email configuration.</p>\n      ",
            "shape_name": "EmailConfigurationType"
          },
          "SmsConfiguration": {
            "type": "structure",
            "members": {
              "SnsCallerArn": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS)\n            caller.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS)\n            caller.</p>\n      ",
                "required": true,
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "ExternalId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The external ID.</simpara>\n      ",
                "documentation": "\n        <p>The external ID.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>SMS configuration.</simpara>\n      ",
            "documentation": "\n        <p>SMS configuration.</p>\n      ",
            "shape_name": "SmsConfigurationType"
          },
          "UserPoolTags": {
            "type": "map",
            "zonbookDocumentation": "\n        <simpara>The cost allocation tags for the user pool. For more information, see <ulink url=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html\">Adding Cost Allocation Tags to Your User Pool</ulink>\n         </simpara>\n      ",
            "documentation": "\n        <p>The cost allocation tags for the user pool. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html\">Adding Cost Allocation Tags to Your User Pool</a>\n         </p>\n      ",
            "shape_name": "UserPoolTagsType",
            "keys": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            },
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          },
          "AdminCreateUserConfig": {
            "type": "structure",
            "members": {
              "AllowAdminCreateUserOnly": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>Set to <code>True</code> if only the administrator is allowed to create user\n            profiles. Set to <code>False</code> if users can sign themselves up via an\n            app.</simpara>\n      ",
                "documentation": "\n        <p>Set to <code>True</code> if only the administrator is allowed to create user\n            profiles. Set to <code>False</code> if users can sign themselves up via an\n            app.</p>\n      ",
                "shape_name": "BooleanType"
              },
              "UnusedAccountValidityDays": {
                "type": "integer",
                "zonbookDocumentation": "\n        <simpara>The user account expiration limit, in days, after which the account is no longer\n            usable. To reset the account after that time limit, you must call\n                <code>AdminCreateUser</code> again, specifying <code>\"RESEND\"</code> for the\n                <code>MessageAction</code> parameter. The default value for this parameter is\n            7.</simpara>\n      ",
                "documentation": "\n        <p>The user account expiration limit, in days, after which the account is no longer\n            usable. To reset the account after that time limit, you must call\n                <code>AdminCreateUser</code> again, specifying <code>\"RESEND\"</code> for the\n                <code>MessageAction</code> parameter. The default value for this parameter is\n            7.</p>\n      ",
                "shape_name": "AdminCreateUserUnusedAccountValidityDaysType",
                "min_length": 0,
                "max_length": 365
              },
              "InviteMessageTemplate": {
                "type": "structure",
                "members": {
                  "SMSMessage": {
                    "type": "string",
                    "pattern": ".*\\{####\\}.*",
                    "zonbookDocumentation": "\n        <simpara>The message template for SMS messages.</simpara>\n      ",
                    "documentation": "\n        <p>The message template for SMS messages.</p>\n      ",
                    "shape_name": "SmsVerificationMessageType",
                    "min_length": 6,
                    "max_length": 140
                  },
                  "EmailMessage": {
                    "type": "string",
                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                    "zonbookDocumentation": "\n        <simpara>The message template for email messages.</simpara>\n      ",
                    "documentation": "\n        <p>The message template for email messages.</p>\n      ",
                    "shape_name": "EmailVerificationMessageType",
                    "min_length": 6,
                    "max_length": 20000
                  },
                  "EmailSubject": {
                    "type": "string",
                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                    "zonbookDocumentation": "\n        <simpara>The subject line for email messages.</simpara>\n      ",
                    "documentation": "\n        <p>The subject line for email messages.</p>\n      ",
                    "shape_name": "EmailVerificationSubjectType",
                    "min_length": 1,
                    "max_length": 140
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The message template to be used for the welcome message to new users.</simpara>\n        <simpara>See also <ulink url=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization\">Customizing User Invitation Messages</ulink>.</simpara>\n      ",
                "documentation": "\n        <p>The message template to be used for the welcome message to new users.</p>\n        <p>See also <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization\">Customizing User Invitation Messages</a>.</p>\n      ",
                "shape_name": "MessageTemplateType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The configuration for <code>AdminCreateUser</code> requests.</simpara>\n      ",
            "documentation": "\n        <p>The configuration for <code>AdminCreateUser</code> requests.</p>\n      ",
            "shape_name": "AdminCreateUserConfigType"
          },
          "UserPoolAddOns": {
            "type": "structure",
            "members": {
              "AdvancedSecurityMode": {
                "type": "string",
                "enum": [
                  "OFF",
                  "AUDIT",
                  "ENFORCED"
                ],
                "zonbookDocumentation": "\n        <simpara>The advanced security mode.</simpara>\n      ",
                "documentation": "\n        <p>The advanced security mode.</p>\n      ",
                "required": true,
                "shape_name": "AdvancedSecurityModeType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Used to enable advanced security risk detection. Set the key\n                <code>AdvancedSecurityMode</code> to the value \"AUDIT\".</simpara>\n      ",
            "documentation": "\n        <p>Used to enable advanced security risk detection. Set the key\n                <code>AdvancedSecurityMode</code> to the value \"AUDIT\".</p>\n      ",
            "shape_name": "UserPoolAddOnsType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to update the user pool.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to update the user pool.</p>\n      ",
        "shape_name": "UpdateUserPoolRequest"
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server when you make a request to update the user\n            pool.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server when you make a request to update the user\n            pool.</p>\n      ",
        "shape_name": "UpdateUserPoolResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message provided when the concurrent exception is thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message provided when the concurrent exception is thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown if two or more modifications are happening\n            concurrently.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown if two or more modifications are happening\n            concurrently.</p>\n      ",
          "shape_name": "ConcurrentModificationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the user pool has an import job running.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the user pool has an import job running.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when you are trying to modify a user pool while a user\n            import job is in progress for that pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when you are trying to modify a user pool while a user\n            import job is in progress for that pool.</p>\n      ",
          "shape_name": "UserImportInProgressException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message retuned when the invalid SMS role access policy exception is\n            thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message retuned when the invalid SMS role access policy exception is\n            thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</simpara>\n      ",
          "documentation": "\n        <p>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</p>\n      ",
          "shape_name": "InvalidSmsRoleAccessPolicyException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the role trust relationship for the SMS message is\n            invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the role trust relationship for the SMS message is\n            invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <emphasis role=\"bold\">cognito-idp.amazonaws.com</emphasis> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <b>cognito-idp.amazonaws.com</b> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</p>\n      ",
          "shape_name": "InvalidSmsRoleTrustRelationshipException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "MessageType",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user pool tag cannot be set or updated.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user pool tag cannot be set or updated.</p>\n      ",
          "shape_name": "UserPoolTaggingException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when you have an unverified email address or the identity\n            policy is not set on an email address that Amazon Cognito can access.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when you have an unverified email address or the identity\n            policy is not set on an email address that Amazon Cognito can access.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito is not allowed to use your email\n            identity. HTTP status code: 400.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito is not allowed to use your email\n            identity. HTTP status code: 400.</p>\n      ",
          "shape_name": "InvalidEmailRoleAccessPolicyException"
        }
      ],
      "documentation": "\n        <p>Updates the specified user pool with the specified attributes. If you don't provide\n            a value for an attribute, it will be set to the default value. You can get a list of the\n            current user pool settings with .</p>\n      "
    },
    "ListUserPools": {
      "name": "ListUserPools",
      "input": {
        "type": "structure",
        "members": {
          "NextToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</simpara>\n      ",
            "documentation": "\n        <p>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</p>\n      ",
            "shape_name": "PaginationKeyType",
            "min_length": 1
          },
          "MaxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n        <simpara>The maximum number of results you want the request to return when listing the user\n            pools.</simpara>\n      ",
            "documentation": "\n        <p>The maximum number of results you want the request to return when listing the user\n            pools.</p>\n      ",
            "required": true,
            "shape_name": "PoolQueryLimitType",
            "min_length": 1,
            "max_length": 60
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to list user pools.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to list user pools.</p>\n      ",
        "shape_name": "ListUserPoolsRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "UserPools": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The user pools from the response to list users.</simpara>\n      ",
            "documentation": "\n        <p>The user pools from the response to list users.</p>\n      ",
            "shape_name": "UserPoolListType",
            "members": {
              "type": "structure",
              "members": {
                "Id": {
                  "type": "string",
                  "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                  "zonbookDocumentation": "\n        <simpara>The ID in a user pool description.</simpara>\n      ",
                  "documentation": "\n        <p>The ID in a user pool description.</p>\n      ",
                  "shape_name": "UserPoolIdType",
                  "min_length": 1,
                  "max_length": 55
                },
                "Name": {
                  "type": "string",
                  "pattern": "[\\w\\s+=,.@-]+",
                  "zonbookDocumentation": "\n        <simpara>The name in a user pool description.</simpara>\n      ",
                  "documentation": "\n        <p>The name in a user pool description.</p>\n      ",
                  "shape_name": "UserPoolNameType",
                  "min_length": 1,
                  "max_length": 128
                },
                "LambdaConfig": {
                  "type": "structure",
                  "members": {
                    "PreSignUp": {
                      "type": "string",
                      "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                      "zonbookDocumentation": "\n        <simpara>A pre-registration AWS Lambda trigger.</simpara>\n      ",
                      "documentation": "\n        <p>A pre-registration AWS Lambda trigger.</p>\n      ",
                      "shape_name": "ArnType",
                      "min_length": 20,
                      "max_length": 2048
                    },
                    "CustomMessage": {
                      "type": "string",
                      "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                      "zonbookDocumentation": "\n        <simpara>A custom Message AWS Lambda trigger.</simpara>\n      ",
                      "documentation": "\n        <p>A custom Message AWS Lambda trigger.</p>\n      ",
                      "shape_name": "ArnType",
                      "min_length": 20,
                      "max_length": 2048
                    },
                    "PostConfirmation": {
                      "type": "string",
                      "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                      "zonbookDocumentation": "\n        <simpara>A post-confirmation AWS Lambda trigger.</simpara>\n      ",
                      "documentation": "\n        <p>A post-confirmation AWS Lambda trigger.</p>\n      ",
                      "shape_name": "ArnType",
                      "min_length": 20,
                      "max_length": 2048
                    },
                    "PreAuthentication": {
                      "type": "string",
                      "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                      "zonbookDocumentation": "\n        <simpara>A pre-authentication AWS Lambda trigger.</simpara>\n      ",
                      "documentation": "\n        <p>A pre-authentication AWS Lambda trigger.</p>\n      ",
                      "shape_name": "ArnType",
                      "min_length": 20,
                      "max_length": 2048
                    },
                    "PostAuthentication": {
                      "type": "string",
                      "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                      "zonbookDocumentation": "\n        <simpara>A post-authentication AWS Lambda trigger.</simpara>\n      ",
                      "documentation": "\n        <p>A post-authentication AWS Lambda trigger.</p>\n      ",
                      "shape_name": "ArnType",
                      "min_length": 20,
                      "max_length": 2048
                    },
                    "DefineAuthChallenge": {
                      "type": "string",
                      "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                      "zonbookDocumentation": "\n        <simpara>Defines the authentication challenge.</simpara>\n      ",
                      "documentation": "\n        <p>Defines the authentication challenge.</p>\n      ",
                      "shape_name": "ArnType",
                      "min_length": 20,
                      "max_length": 2048
                    },
                    "CreateAuthChallenge": {
                      "type": "string",
                      "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                      "zonbookDocumentation": "\n        <simpara>Creates an authentication challenge.</simpara>\n      ",
                      "documentation": "\n        <p>Creates an authentication challenge.</p>\n      ",
                      "shape_name": "ArnType",
                      "min_length": 20,
                      "max_length": 2048
                    },
                    "VerifyAuthChallengeResponse": {
                      "type": "string",
                      "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                      "zonbookDocumentation": "\n        <simpara>Verifies the authentication challenge response.</simpara>\n      ",
                      "documentation": "\n        <p>Verifies the authentication challenge response.</p>\n      ",
                      "shape_name": "ArnType",
                      "min_length": 20,
                      "max_length": 2048
                    },
                    "PreTokenGeneration": {
                      "type": "string",
                      "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                      "zonbookDocumentation": "\n        <simpara>A Lambda trigger that is invoked before token generation.</simpara>\n      ",
                      "documentation": "\n        <p>A Lambda trigger that is invoked before token generation.</p>\n      ",
                      "shape_name": "ArnType",
                      "min_length": 20,
                      "max_length": 2048
                    },
                    "UserMigration": {
                      "type": "string",
                      "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                      "zonbookDocumentation": "\n        <para>The user migration Lambda config type.</para>\n      ",
                      "documentation": "\n        <p>The user migration Lambda config type.</p>\n      ",
                      "shape_name": "ArnType",
                      "min_length": 20,
                      "max_length": 2048
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>The AWS Lambda configuration information in a user pool description.</simpara>\n      ",
                  "documentation": "\n        <p>The AWS Lambda configuration information in a user pool description.</p>\n      ",
                  "shape_name": "LambdaConfigType"
                },
                "Status": {
                  "type": "string",
                  "enum": [
                    "Enabled",
                    "Disabled"
                  ],
                  "zonbookDocumentation": "\n        <simpara>The user pool status in a user pool description.</simpara>\n      ",
                  "documentation": "\n        <p>The user pool status in a user pool description.</p>\n      ",
                  "shape_name": "StatusType"
                },
                "LastModifiedDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The date the user pool description was last modified.</simpara>\n      ",
                  "documentation": "\n        <p>The date the user pool description was last modified.</p>\n      ",
                  "shape_name": "DateType"
                },
                "CreationDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The date the user pool description was created.</simpara>\n      ",
                  "documentation": "\n        <p>The date the user pool description was created.</p>\n      ",
                  "shape_name": "DateType"
                }
              },
              "zonbookDocumentation": "\n        <simpara>A user pool description.</simpara>\n      ",
              "documentation": "\n        <p>A user pool description.</p>\n      ",
              "shape_name": "UserPoolDescriptionType"
            }
          },
          "NextToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</simpara>\n      ",
            "documentation": "\n        <p>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</p>\n      ",
            "shape_name": "PaginationKeyType",
            "min_length": 1
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response to list user pools.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response to list user pools.</p>\n      ",
        "shape_name": "ListUserPoolsResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Lists the user pools associated with an AWS account.</p>\n      "
    },
    "DeleteUserPool": {
      "name": "DeleteUserPool",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool you want to delete.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool you want to delete.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to delete a user pool.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to delete a user pool.</p>\n      ",
        "shape_name": "DeleteUserPoolRequest"
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the user pool has an import job running.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the user pool has an import job running.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when you are trying to modify a user pool while a user\n            import job is in progress for that pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when you are trying to modify a user pool while a user\n            import job is in progress for that pool.</p>\n      ",
          "shape_name": "UserImportInProgressException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Deletes the specified Amazon Cognito user pool.</p>\n      "
    },
    "SetUserPoolMfaConfig": {
      "name": "SetUserPoolMfaConfig",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "SmsMfaConfiguration": {
            "type": "structure",
            "members": {
              "SmsAuthenticationMessage": {
                "type": "string",
                "pattern": ".*\\{####\\}.*",
                "zonbookDocumentation": "\n        <simpara>The SMS authentication message.</simpara>\n      ",
                "documentation": "\n        <p>The SMS authentication message.</p>\n      ",
                "shape_name": "SmsVerificationMessageType",
                "min_length": 6,
                "max_length": 140
              },
              "SmsConfiguration": {
                "type": "structure",
                "members": {
                  "SnsCallerArn": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS)\n            caller.</simpara>\n      ",
                    "documentation": "\n        <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS)\n            caller.</p>\n      ",
                    "required": true,
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "ExternalId": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The external ID.</simpara>\n      ",
                    "documentation": "\n        <p>The external ID.</p>\n      ",
                    "shape_name": "StringType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The SMS configuration.</simpara>\n      ",
                "documentation": "\n        <p>The SMS configuration.</p>\n      ",
                "shape_name": "SmsConfigurationType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The SMS text message MFA configuration.</simpara>\n      ",
            "documentation": "\n        <p>The SMS text message MFA configuration.</p>\n      ",
            "shape_name": "SmsMfaConfigType"
          },
          "SoftwareTokenMfaConfiguration": {
            "type": "structure",
            "members": {
              "Enabled": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>Specifies whether software token MFA is enabled.</simpara>\n      ",
                "documentation": "\n        <p>Specifies whether software token MFA is enabled.</p>\n      ",
                "shape_name": "BooleanType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The software token MFA configuration.</simpara>\n      ",
            "documentation": "\n        <p>The software token MFA configuration.</p>\n      ",
            "shape_name": "SoftwareTokenMfaConfigType"
          },
          "MfaConfiguration": {
            "type": "string",
            "enum": [
              "OFF",
              "ON",
              "OPTIONAL"
            ],
            "zonbookDocumentation": "\n        <simpara>The MFA configuration.</simpara>\n      ",
            "documentation": "\n        <p>The MFA configuration.</p>\n      ",
            "shape_name": "UserPoolMfaType"
          }
        },
        "shape_name": "SetUserPoolMfaConfigRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "SmsMfaConfiguration": {
            "type": "structure",
            "members": {
              "SmsAuthenticationMessage": {
                "type": "string",
                "pattern": ".*\\{####\\}.*",
                "zonbookDocumentation": "\n        <simpara>The SMS authentication message.</simpara>\n      ",
                "documentation": "\n        <p>The SMS authentication message.</p>\n      ",
                "shape_name": "SmsVerificationMessageType",
                "min_length": 6,
                "max_length": 140
              },
              "SmsConfiguration": {
                "type": "structure",
                "members": {
                  "SnsCallerArn": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS)\n            caller.</simpara>\n      ",
                    "documentation": "\n        <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS)\n            caller.</p>\n      ",
                    "required": true,
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "ExternalId": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The external ID.</simpara>\n      ",
                    "documentation": "\n        <p>The external ID.</p>\n      ",
                    "shape_name": "StringType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The SMS configuration.</simpara>\n      ",
                "documentation": "\n        <p>The SMS configuration.</p>\n      ",
                "shape_name": "SmsConfigurationType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The SMS text message MFA configuration.</simpara>\n      ",
            "documentation": "\n        <p>The SMS text message MFA configuration.</p>\n      ",
            "shape_name": "SmsMfaConfigType"
          },
          "SoftwareTokenMfaConfiguration": {
            "type": "structure",
            "members": {
              "Enabled": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>Specifies whether software token MFA is enabled.</simpara>\n      ",
                "documentation": "\n        <p>Specifies whether software token MFA is enabled.</p>\n      ",
                "shape_name": "BooleanType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The software token MFA configuration.</simpara>\n      ",
            "documentation": "\n        <p>The software token MFA configuration.</p>\n      ",
            "shape_name": "SoftwareTokenMfaConfigType"
          },
          "MfaConfiguration": {
            "type": "string",
            "enum": [
              "OFF",
              "ON",
              "OPTIONAL"
            ],
            "zonbookDocumentation": "\n        <simpara>The MFA configuration.</simpara>\n      ",
            "documentation": "\n        <p>The MFA configuration.</p>\n      ",
            "shape_name": "UserPoolMfaType"
          }
        },
        "shape_name": "SetUserPoolMfaConfigResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message retuned when the invalid SMS role access policy exception is\n            thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message retuned when the invalid SMS role access policy exception is\n            thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</simpara>\n      ",
          "documentation": "\n        <p>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</p>\n      ",
          "shape_name": "InvalidSmsRoleAccessPolicyException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the role trust relationship for the SMS message is\n            invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the role trust relationship for the SMS message is\n            invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <emphasis role=\"bold\">cognito-idp.amazonaws.com</emphasis> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <b>cognito-idp.amazonaws.com</b> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</p>\n      ",
          "shape_name": "InvalidSmsRoleTrustRelationshipException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Set the user pool MFA configuration.</p>\n      "
    },
    "GetUserPoolMfaConfig": {
      "name": "GetUserPoolMfaConfig",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          }
        },
        "shape_name": "GetUserPoolMfaConfigRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "SmsMfaConfiguration": {
            "type": "structure",
            "members": {
              "SmsAuthenticationMessage": {
                "type": "string",
                "pattern": ".*\\{####\\}.*",
                "zonbookDocumentation": "\n        <simpara>The SMS authentication message.</simpara>\n      ",
                "documentation": "\n        <p>The SMS authentication message.</p>\n      ",
                "shape_name": "SmsVerificationMessageType",
                "min_length": 6,
                "max_length": 140
              },
              "SmsConfiguration": {
                "type": "structure",
                "members": {
                  "SnsCallerArn": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS)\n            caller.</simpara>\n      ",
                    "documentation": "\n        <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS)\n            caller.</p>\n      ",
                    "required": true,
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "ExternalId": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The external ID.</simpara>\n      ",
                    "documentation": "\n        <p>The external ID.</p>\n      ",
                    "shape_name": "StringType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The SMS configuration.</simpara>\n      ",
                "documentation": "\n        <p>The SMS configuration.</p>\n      ",
                "shape_name": "SmsConfigurationType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The SMS text message multi-factor (MFA) configuration.</simpara>\n      ",
            "documentation": "\n        <p>The SMS text message multi-factor (MFA) configuration.</p>\n      ",
            "shape_name": "SmsMfaConfigType"
          },
          "SoftwareTokenMfaConfiguration": {
            "type": "structure",
            "members": {
              "Enabled": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>Specifies whether software token MFA is enabled.</simpara>\n      ",
                "documentation": "\n        <p>Specifies whether software token MFA is enabled.</p>\n      ",
                "shape_name": "BooleanType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The software token multi-factor (MFA) configuration.</simpara>\n      ",
            "documentation": "\n        <p>The software token multi-factor (MFA) configuration.</p>\n      ",
            "shape_name": "SoftwareTokenMfaConfigType"
          },
          "MfaConfiguration": {
            "type": "string",
            "enum": [
              "OFF",
              "ON",
              "OPTIONAL"
            ],
            "zonbookDocumentation": "\n        <simpara>The multi-factor (MFA) configuration.</simpara>\n      ",
            "documentation": "\n        <p>The multi-factor (MFA) configuration.</p>\n      ",
            "shape_name": "UserPoolMfaType"
          }
        },
        "shape_name": "GetUserPoolMfaConfigResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Gets the user pool multi-factor authentication (MFA) configuration.</p>\n      "
    },
    "AddCustomAttributes": {
      "name": "AddCustomAttributes",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool where you want to add custom\n            attributes.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool where you want to add custom\n            attributes.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "CustomAttributes": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>An array of custom attributes, such as Mutable and Name.</simpara>\n      ",
            "documentation": "\n        <p>An array of custom attributes, such as Mutable and Name.</p>\n      ",
            "required": true,
            "shape_name": "CustomAttributesListType",
            "min_length": 1,
            "max_length": 25,
            "members": {
              "type": "structure",
              "members": {
                "Name": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "zonbookDocumentation": "\n        <simpara>A schema attribute of the name type.</simpara>\n      ",
                  "documentation": "\n        <p>A schema attribute of the name type.</p>\n      ",
                  "shape_name": "CustomAttributeNameType",
                  "min_length": 1,
                  "max_length": 20
                },
                "AttributeDataType": {
                  "type": "string",
                  "enum": [
                    "String",
                    "Number",
                    "DateTime",
                    "Boolean"
                  ],
                  "zonbookDocumentation": "\n        <simpara>The attribute data type.</simpara>\n      ",
                  "documentation": "\n        <p>The attribute data type.</p>\n      ",
                  "shape_name": "AttributeDataType"
                },
                "DeveloperOnlyAttribute": {
                  "type": "boolean",
                  "zonbookDocumentation": "\n        <simpara>Specifies whether the attribute type is developer only.</simpara>\n      ",
                  "documentation": "\n        <p>Specifies whether the attribute type is developer only.</p>\n      ",
                  "box": true,
                  "shape_name": "BooleanType"
                },
                "Mutable": {
                  "type": "boolean",
                  "zonbookDocumentation": "\n        <simpara>Specifies whether the value of the attribute can be changed.</simpara>\n      ",
                  "documentation": "\n        <p>Specifies whether the value of the attribute can be changed.</p>\n      ",
                  "box": true,
                  "shape_name": "BooleanType"
                },
                "Required": {
                  "type": "boolean",
                  "zonbookDocumentation": "\n        <simpara>Specifies whether a user pool attribute is required. If the attribute is required\n            and the user does not provide a value, registration or sign-in will fail.</simpara>\n      ",
                  "documentation": "\n        <p>Specifies whether a user pool attribute is required. If the attribute is required\n            and the user does not provide a value, registration or sign-in will fail.</p>\n      ",
                  "box": true,
                  "shape_name": "BooleanType"
                },
                "NumberAttributeConstraints": {
                  "type": "structure",
                  "members": {
                    "MinValue": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The minimum value of an attribute that is of the number data type.</simpara>\n      ",
                      "documentation": "\n        <p>The minimum value of an attribute that is of the number data type.</p>\n      ",
                      "shape_name": "StringType"
                    },
                    "MaxValue": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The maximum value of an attribute that is of the number data type.</simpara>\n      ",
                      "documentation": "\n        <p>The maximum value of an attribute that is of the number data type.</p>\n      ",
                      "shape_name": "StringType"
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>Specifies the constraints for an attribute of the number type.</simpara>\n      ",
                  "documentation": "\n        <p>Specifies the constraints for an attribute of the number type.</p>\n      ",
                  "shape_name": "NumberAttributeConstraintsType"
                },
                "StringAttributeConstraints": {
                  "type": "structure",
                  "members": {
                    "MinLength": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The minimum length.</simpara>\n      ",
                      "documentation": "\n        <p>The minimum length.</p>\n      ",
                      "shape_name": "StringType"
                    },
                    "MaxLength": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The maximum length.</simpara>\n      ",
                      "documentation": "\n        <p>The maximum length.</p>\n      ",
                      "shape_name": "StringType"
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>Specifies the constraints for an attribute of the string type.</simpara>\n      ",
                  "documentation": "\n        <p>Specifies the constraints for an attribute of the string type.</p>\n      ",
                  "shape_name": "StringAttributeConstraintsType"
                }
              },
              "zonbookDocumentation": "\n        <simpara>Contains information about the schema attribute.</simpara>\n      ",
              "documentation": "\n        <p>Contains information about the schema attribute.</p>\n      ",
              "shape_name": "SchemaAttributeType"
            }
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to add custom attributes.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to add custom attributes.</p>\n      ",
        "shape_name": "AddCustomAttributesRequest"
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server for the request to add custom\n            attributes.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server for the request to add custom\n            attributes.</p>\n      ",
        "shape_name": "AddCustomAttributesResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the user pool has an import job running.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the user pool has an import job running.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when you are trying to modify a user pool while a user\n            import job is in progress for that pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when you are trying to modify a user pool while a user\n            import job is in progress for that pool.</p>\n      ",
          "shape_name": "UserImportInProgressException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Adds additional user attributes to the user pool schema.</p>\n      "
    },
    "ListUsers": {
      "name": "ListUsers",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool on which the search should be\n            performed.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool on which the search should be\n            performed.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "AttributesToGet": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>An array of strings, where each string is the name of a user attribute to be\n            returned for each user in the search results. If the array is null, all attributes are\n            returned.</simpara>\n      ",
            "documentation": "\n        <p>An array of strings, where each string is the name of a user attribute to be\n            returned for each user in the search results. If the array is null, all attributes are\n            returned.</p>\n      ",
            "shape_name": "SearchedAttributeNamesListType",
            "members": {
              "type": "string",
              "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
              "shape_name": "AttributeNameType",
              "documentation": null,
              "min_length": 1,
              "max_length": 32
            }
          },
          "Limit": {
            "type": "integer",
            "zonbookDocumentation": "\n        <simpara>Maximum number of users to be returned.</simpara>\n      ",
            "documentation": "\n        <p>Maximum number of users to be returned.</p>\n      ",
            "shape_name": "QueryLimitType",
            "min_length": 0,
            "max_length": 60
          },
          "PaginationToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</simpara>\n      ",
            "documentation": "\n        <p>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</p>\n      ",
            "shape_name": "SearchPaginationTokenType",
            "min_length": 1
          },
          "Filter": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>A filter string of the form \"<emphasis>AttributeName</emphasis>\n            <emphasis>Filter-Type</emphasis> \"<emphasis>AttributeValue</emphasis>\"\". Quotation marks\n            within the filter string must be escaped using the backslash (\\) character. For example,\n                \"<code>family_name</code> = \\\"Reddy\\\"\".</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>\n                  <emphasis>AttributeName</emphasis>: The name of the attribute to search\n                    for. You can only search for one attribute at a time.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <emphasis>Filter-Type</emphasis>: For an exact match, use =, for example,\n                        \"<code>given_name</code> = \\\"Jon\\\"\". For a prefix (\"starts with\") match, use\n                    ^=, for example, \"<code>given_name</code> ^= \\\"Jon\\\"\". </simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <emphasis>AttributeValue</emphasis>: The attribute value that must be\n                    matched for each user.</simpara>\n            </listitem>\n        </itemizedlist>\n        <simpara>If the filter string is empty, <code>ListUsers</code> returns all users in the user\n            pool.</simpara>\n        <simpara>You can only search for the following standard attributes:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>\n                  <code>username</code> (case-sensitive)</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                    <code>email</code>\n                </simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                    <code>phone_number</code>\n                </simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                    <code>name</code>\n                </simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                    <code>given_name</code>\n                </simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                    <code>family_name</code>\n                </simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                    <code>preferred_username</code>\n                </simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>cognito:user_status</code> (called <emphasis role=\"bold\">Status</emphasis> in the Console) (case-insensitive)</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>status (called <emphasis role=\"bold\">Enabled</emphasis> in the Console) (case-sensitive)</code>\n               </simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>sub</code>\n               </simpara>\n            </listitem>\n        </itemizedlist>\n        <simpara>Custom attributes are not searchable.</simpara>\n        <simpara>For more information, see <ulink url=\"http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api\">Searching for Users Using the ListUsers API</ulink> and <ulink url=\"http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples\">Examples of Using the ListUsers API</ulink> in the <emphasis>Amazon Cognito\n                Developer Guide</emphasis>.</simpara>\n      ",
            "documentation": "\n        <p>A filter string of the form \"<i>AttributeName</i>\n            <i>Filter-Type</i> \"<i>AttributeValue</i>\"\". Quotation marks\n            within the filter string must be escaped using the backslash (\\) character. For example,\n                \"<code>family_name</code> = \\\"Reddy\\\"\".</p>\n        <ul>\n            <li>\n                <p>\n                  <i>AttributeName</i>: The name of the attribute to search\n                    for. You can only search for one attribute at a time.</p>\n            </li>\n            <li>\n                <p>\n                  <i>Filter-Type</i>: For an exact match, use =, for example,\n                        \"<code>given_name</code> = \\\"Jon\\\"\". For a prefix (\"starts with\") match, use\n                    ^=, for example, \"<code>given_name</code> ^= \\\"Jon\\\"\". </p>\n            </li>\n            <li>\n                <p>\n                  <i>AttributeValue</i>: The attribute value that must be\n                    matched for each user.</p>\n            </li>\n         </ul>\n        <p>If the filter string is empty, <code>ListUsers</code> returns all users in the user\n            pool.</p>\n        <p>You can only search for the following standard attributes:</p>\n        <ul>\n            <li>\n                <p>\n                  <code>username</code> (case-sensitive)</p>\n            </li>\n            <li>\n                <p>\n                    <code>email</code>\n                </p>\n            </li>\n            <li>\n                <p>\n                    <code>phone_number</code>\n                </p>\n            </li>\n            <li>\n                <p>\n                    <code>name</code>\n                </p>\n            </li>\n            <li>\n                <p>\n                    <code>given_name</code>\n                </p>\n            </li>\n            <li>\n                <p>\n                    <code>family_name</code>\n                </p>\n            </li>\n            <li>\n                <p>\n                    <code>preferred_username</code>\n                </p>\n            </li>\n            <li>\n                <p>\n                  <code>cognito:user_status</code> (called <b>Status</b> in the Console) (case-insensitive)</p>\n            </li>\n            <li>\n                <p>\n                  <code>status (called <b>Enabled</b> in the Console) (case-sensitive)</code>\n               </p>\n            </li>\n            <li>\n                <p>\n                  <code>sub</code>\n               </p>\n            </li>\n         </ul>\n        <p>Custom attributes are not searchable.</p>\n        <p>For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api\">Searching for Users Using the ListUsers API</a> and <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples\">Examples of Using the ListUsers API</a> in the <i>Amazon Cognito\n                Developer Guide</i>.</p>\n      ",
            "shape_name": "UserFilterType",
            "max_length": 256
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to list users.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to list users.</p>\n      ",
        "shape_name": "ListUsersRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "Users": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The users returned in the request to list users.</simpara>\n      ",
            "documentation": "\n        <p>The users returned in the request to list users.</p>\n      ",
            "shape_name": "UsersListType",
            "members": {
              "type": "structure",
              "members": {
                "Username": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "sensitive": true,
                  "zonbookDocumentation": "\n        <simpara>The user name of the user you wish to describe.</simpara>\n      ",
                  "documentation": "\n        <p>The user name of the user you wish to describe.</p>\n      ",
                  "shape_name": "UsernameType",
                  "min_length": 1,
                  "max_length": 128
                },
                "Attributes": {
                  "type": "list",
                  "zonbookDocumentation": "\n        <simpara>A container with information about the user type attributes.</simpara>\n      ",
                  "documentation": "\n        <p>A container with information about the user type attributes.</p>\n      ",
                  "shape_name": "AttributeListType",
                  "members": {
                    "type": "structure",
                    "members": {
                      "Name": {
                        "type": "string",
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "zonbookDocumentation": "\n        <simpara>The name of the attribute.</simpara>\n      ",
                        "documentation": "\n        <p>The name of the attribute.</p>\n      ",
                        "required": true,
                        "shape_name": "AttributeNameType",
                        "min_length": 1,
                        "max_length": 32
                      },
                      "Value": {
                        "type": "string",
                        "sensitive": true,
                        "zonbookDocumentation": "\n        <simpara>The value of the attribute.</simpara>\n      ",
                        "documentation": "\n        <p>The value of the attribute.</p>\n      ",
                        "shape_name": "AttributeValueType",
                        "max_length": 2048
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>Specifies whether the attribute is standard or custom.</simpara>\n      ",
                    "documentation": "\n        <p>Specifies whether the attribute is standard or custom.</p>\n      ",
                    "shape_name": "AttributeType"
                  }
                },
                "UserCreateDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The creation date of the user.</simpara>\n      ",
                  "documentation": "\n        <p>The creation date of the user.</p>\n      ",
                  "shape_name": "DateType"
                },
                "UserLastModifiedDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The last modified date of the user.</simpara>\n      ",
                  "documentation": "\n        <p>The last modified date of the user.</p>\n      ",
                  "shape_name": "DateType"
                },
                "Enabled": {
                  "type": "boolean",
                  "zonbookDocumentation": "\n        <simpara>Specifies whether the user is enabled.</simpara>\n      ",
                  "documentation": "\n        <p>Specifies whether the user is enabled.</p>\n      ",
                  "shape_name": "BooleanType"
                },
                "UserStatus": {
                  "type": "string",
                  "enum": [
                    "UNCONFIRMED",
                    "CONFIRMED",
                    "ARCHIVED",
                    "COMPROMISED",
                    "UNKNOWN",
                    "RESET_REQUIRED",
                    "FORCE_CHANGE_PASSWORD"
                  ],
                  "zonbookDocumentation": "\n        <simpara>The user status. Can be one of the following:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>UNCONFIRMED - User has been created but not confirmed.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>CONFIRMED - User has been confirmed.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>ARCHIVED - User is no longer active.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>COMPROMISED - User is disabled due to a potential security\n                    threat.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>UNKNOWN - User status is not known.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
                  "documentation": "\n        <p>The user status. Can be one of the following:</p>\n        <ul>\n            <li>\n                <p>UNCONFIRMED - User has been created but not confirmed.</p>\n            </li>\n            <li>\n                <p>CONFIRMED - User has been confirmed.</p>\n            </li>\n            <li>\n                <p>ARCHIVED - User is no longer active.</p>\n            </li>\n            <li>\n                <p>COMPROMISED - User is disabled due to a potential security\n                    threat.</p>\n            </li>\n            <li>\n                <p>UNKNOWN - User status is not known.</p>\n            </li>\n         </ul>\n      ",
                  "shape_name": "UserStatusType"
                },
                "MFAOptions": {
                  "type": "list",
                  "zonbookDocumentation": "\n        <simpara>The MFA options for the user.</simpara>\n      ",
                  "documentation": "\n        <p>The MFA options for the user.</p>\n      ",
                  "shape_name": "MFAOptionListType",
                  "members": {
                    "type": "structure",
                    "members": {
                      "DeliveryMedium": {
                        "type": "string",
                        "enum": [
                          "SMS",
                          "EMAIL"
                        ],
                        "zonbookDocumentation": "\n        <simpara>The delivery medium (email message or SMS message) to send the MFA code.</simpara>\n      ",
                        "documentation": "\n        <p>The delivery medium (email message or SMS message) to send the MFA code.</p>\n      ",
                        "shape_name": "DeliveryMediumType"
                      },
                      "AttributeName": {
                        "type": "string",
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "zonbookDocumentation": "\n        <simpara>The attribute name of the MFA option type.</simpara>\n      ",
                        "documentation": "\n        <p>The attribute name of the MFA option type.</p>\n      ",
                        "shape_name": "AttributeNameType",
                        "min_length": 1,
                        "max_length": 32
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>Specifies the different settings for multi-factor authentication (MFA).</simpara>\n      ",
                    "documentation": "\n        <p>Specifies the different settings for multi-factor authentication (MFA).</p>\n      ",
                    "shape_name": "MFAOptionType"
                  }
                }
              },
              "zonbookDocumentation": "\n        <simpara>The user type.</simpara>\n      ",
              "documentation": "\n        <p>The user type.</p>\n      ",
              "shape_name": "UserType"
            }
          },
          "PaginationToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</simpara>\n      ",
            "documentation": "\n        <p>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</p>\n      ",
            "shape_name": "SearchPaginationTokenType",
            "min_length": 1
          }
        },
        "zonbookDocumentation": "\n        <simpara>The response from the request to list users.</simpara>\n      ",
        "documentation": "\n        <p>The response from the request to list users.</p>\n      ",
        "shape_name": "ListUsersResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Lists the users in the Amazon Cognito user pool.</p>\n      "
    },
    "CreateUserPoolClient": {
      "name": "CreateUserPoolClient",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool where you want to create a user pool\n            client.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool where you want to create a user pool\n            client.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "ClientName": {
            "type": "string",
            "pattern": "[\\w\\s+=,.@-]+",
            "zonbookDocumentation": "\n        <simpara>The client name for the user pool client you would like to create.</simpara>\n      ",
            "documentation": "\n        <p>The client name for the user pool client you would like to create.</p>\n      ",
            "required": true,
            "shape_name": "ClientNameType",
            "min_length": 1,
            "max_length": 128
          },
          "GenerateSecret": {
            "type": "boolean",
            "zonbookDocumentation": "\n        <simpara>Boolean to specify whether you want to generate a secret for the user pool client\n            being created.</simpara>\n      ",
            "documentation": "\n        <p>Boolean to specify whether you want to generate a secret for the user pool client\n            being created.</p>\n      ",
            "shape_name": "GenerateSecret"
          },
          "RefreshTokenValidity": {
            "type": "integer",
            "zonbookDocumentation": "\n        <simpara>The time limit, in days, after which the refresh token is no longer valid and\n            cannot be used.</simpara>\n      ",
            "documentation": "\n        <p>The time limit, in days, after which the refresh token is no longer valid and\n            cannot be used.</p>\n      ",
            "shape_name": "RefreshTokenValidityType",
            "min_length": 0,
            "max_length": 3650
          },
          "ReadAttributes": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The read attributes.</simpara>\n      ",
            "documentation": "\n        <p>The read attributes.</p>\n      ",
            "shape_name": "ClientPermissionListType",
            "members": {
              "type": "string",
              "shape_name": "ClientPermissionType",
              "documentation": null,
              "min_length": 1,
              "max_length": 2048
            }
          },
          "WriteAttributes": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The write attributes.</simpara>\n      ",
            "documentation": "\n        <p>The write attributes.</p>\n      ",
            "shape_name": "ClientPermissionListType",
            "members": {
              "type": "string",
              "shape_name": "ClientPermissionType",
              "documentation": null,
              "min_length": 1,
              "max_length": 2048
            }
          },
          "ExplicitAuthFlows": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The explicit authentication flows.</simpara>\n      ",
            "documentation": "\n        <p>The explicit authentication flows.</p>\n      ",
            "shape_name": "ExplicitAuthFlowsListType",
            "members": {
              "type": "string",
              "enum": [
                "ADMIN_NO_SRP_AUTH",
                "CUSTOM_AUTH_FLOW_ONLY",
                "USER_PASSWORD_AUTH"
              ],
              "shape_name": "ExplicitAuthFlowsType",
              "documentation": null
            }
          },
          "SupportedIdentityProviders": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>A list of provider names for the identity providers that are supported on this\n            client.</simpara>\n      ",
            "documentation": "\n        <p>A list of provider names for the identity providers that are supported on this\n            client.</p>\n      ",
            "shape_name": "SupportedIdentityProvidersListType",
            "members": {
              "type": "string",
              "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
              "shape_name": "ProviderNameType",
              "documentation": null,
              "min_length": 1,
              "max_length": 32
            }
          },
          "CallbackURLs": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>A list of allowed redirect (callback) URLs for the identity providers.</simpara>\n        <simpara>A redirect URI must:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>Be an absolute URI.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>Be registered with the authorization server.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>Not include a fragment component.</simpara>\n            </listitem>\n        </itemizedlist>\n        <simpara>See <ulink url=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 -\n                Redirection Endpoint</ulink>.</simpara>\n        <simpara>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</simpara>\n        <simpara>App callback URLs such as myapp://example are also supported.</simpara>\n      ",
            "documentation": "\n        <p>A list of allowed redirect (callback) URLs for the identity providers.</p>\n        <p>A redirect URI must:</p>\n        <ul>\n            <li>\n                <p>Be an absolute URI.</p>\n            </li>\n            <li>\n                <p>Be registered with the authorization server.</p>\n            </li>\n            <li>\n                <p>Not include a fragment component.</p>\n            </li>\n         </ul>\n        <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 -\n                Redirection Endpoint</a>.</p>\n        <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p>\n        <p>App callback URLs such as myapp://example are also supported.</p>\n      ",
            "shape_name": "CallbackURLsListType",
            "min_length": 0,
            "max_length": 100,
            "members": {
              "type": "string",
              "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
              "shape_name": "RedirectUrlType",
              "documentation": null,
              "min_length": 1,
              "max_length": 1024
            }
          },
          "LogoutURLs": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>A list of allowed logout URLs for the identity providers.</simpara>\n      ",
            "documentation": "\n        <p>A list of allowed logout URLs for the identity providers.</p>\n      ",
            "shape_name": "LogoutURLsListType",
            "min_length": 0,
            "max_length": 100,
            "members": {
              "type": "string",
              "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
              "shape_name": "RedirectUrlType",
              "documentation": null,
              "min_length": 1,
              "max_length": 1024
            }
          },
          "DefaultRedirectURI": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "zonbookDocumentation": "\n        <simpara>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</simpara>\n        <simpara>A redirect URI must:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>Be an absolute URI.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>Be registered with the authorization server.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>Not include a fragment component.</simpara>\n            </listitem>\n        </itemizedlist>\n        <simpara>See <ulink url=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 -\n            Redirection Endpoint</ulink>.</simpara>\n        <simpara>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</simpara>\n        <simpara>App callback URLs such as myapp://example are also supported.</simpara>\n      ",
            "documentation": "\n        <p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p>\n        <p>A redirect URI must:</p>\n        <ul>\n            <li>\n                <p>Be an absolute URI.</p>\n            </li>\n            <li>\n                <p>Be registered with the authorization server.</p>\n            </li>\n            <li>\n                <p>Not include a fragment component.</p>\n            </li>\n         </ul>\n        <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 -\n            Redirection Endpoint</a>.</p>\n        <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p>\n        <p>App callback URLs such as myapp://example are also supported.</p>\n      ",
            "shape_name": "RedirectUrlType",
            "min_length": 1,
            "max_length": 1024
          },
          "AllowedOAuthFlows": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>Set to <code>code</code> to initiate a code grant flow, which provides an\n            authorization code as the response. This code can be exchanged for access tokens with\n            the token endpoint.</simpara>\n        <simpara>Set to <code>token</code> to specify that the client should get the access token\n            (and, optionally, ID token, based on scopes) directly.</simpara>\n      ",
            "documentation": "\n        <p>Set to <code>code</code> to initiate a code grant flow, which provides an\n            authorization code as the response. This code can be exchanged for access tokens with\n            the token endpoint.</p>\n        <p>Set to <code>token</code> to specify that the client should get the access token\n            (and, optionally, ID token, based on scopes) directly.</p>\n      ",
            "shape_name": "OAuthFlowsType",
            "min_length": 0,
            "max_length": 3,
            "members": {
              "type": "string",
              "enum": [
                "code",
                "implicit",
                "client_credentials"
              ],
              "shape_name": "OAuthFlowType",
              "documentation": null
            }
          },
          "AllowedOAuthScopes": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>A list of allowed <code>OAuth</code> scopes. Currently supported values are\n                <code>\"phone\"</code>, <code>\"email\"</code>, <code>\"openid\"</code>, and\n                <code>\"Cognito\"</code>.</simpara>\n      ",
            "documentation": "\n        <p>A list of allowed <code>OAuth</code> scopes. Currently supported values are\n                <code>\"phone\"</code>, <code>\"email\"</code>, <code>\"openid\"</code>, and\n                <code>\"Cognito\"</code>.</p>\n      ",
            "shape_name": "ScopeListType",
            "max_length": 25,
            "members": {
              "type": "string",
              "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
              "shape_name": "ScopeType",
              "documentation": null,
              "min_length": 1,
              "max_length": 256
            }
          },
          "AllowedOAuthFlowsUserPoolClient": {
            "type": "boolean",
            "zonbookDocumentation": "\n        <simpara>Set to <code>True</code> if the client is allowed to follow the OAuth protocol when\n            interacting with Cognito user pools.</simpara>\n      ",
            "documentation": "\n        <p>Set to <code>True</code> if the client is allowed to follow the OAuth protocol when\n            interacting with Cognito user pools.</p>\n      ",
            "shape_name": "BooleanType"
          },
          "AnalyticsConfiguration": {
            "type": "structure",
            "members": {
              "ApplicationId": {
                "type": "string",
                "pattern": "^[0-9a-fA-F]+$",
                "zonbookDocumentation": "\n        <simpara>The application ID for an Amazon Pinpoint application.</simpara>\n      ",
                "documentation": "\n        <p>The application ID for an Amazon Pinpoint application.</p>\n      ",
                "required": true,
                "shape_name": "HexStringType"
              },
              "RoleArn": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon\n            Pinpoint analytics.</simpara>\n      ",
                "documentation": "\n        <p>The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon\n            Pinpoint analytics.</p>\n      ",
                "required": true,
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "ExternalId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The external ID.</simpara>\n      ",
                "documentation": "\n        <p>The external ID.</p>\n      ",
                "required": true,
                "shape_name": "StringType"
              },
              "UserDataShared": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include\n            user data in the events it publishes to Amazon Pinpoint analytics.</simpara>\n      ",
                "documentation": "\n        <p>If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include\n            user data in the events it publishes to Amazon Pinpoint analytics.</p>\n      ",
                "shape_name": "BooleanType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The Amazon Pinpoint analytics configuration for collecting metrics for this user\n            pool.</simpara>\n      ",
            "documentation": "\n        <p>The Amazon Pinpoint analytics configuration for collecting metrics for this user\n            pool.</p>\n      ",
            "shape_name": "AnalyticsConfigurationType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to create a user pool client.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to create a user pool client.</p>\n      ",
        "shape_name": "CreateUserPoolClientRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "UserPoolClient": {
            "type": "structure",
            "members": {
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool client.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID for the user pool client.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "ClientName": {
                "type": "string",
                "pattern": "[\\w\\s+=,.@-]+",
                "zonbookDocumentation": "\n        <simpara>The client name from the user pool request of the client type.</simpara>\n      ",
                "documentation": "\n        <p>The client name from the user pool request of the client type.</p>\n      ",
                "shape_name": "ClientNameType",
                "min_length": 1,
                "max_length": 128
              },
              "ClientId": {
                "type": "string",
                "pattern": "[\\w+]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The ID of the client associated with the user pool.</simpara>\n      ",
                "documentation": "\n        <p>The ID of the client associated with the user pool.</p>\n      ",
                "shape_name": "ClientIdType",
                "min_length": 1,
                "max_length": 128
              },
              "ClientSecret": {
                "type": "string",
                "pattern": "[\\w+]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The client secret from the user pool request of the client type.</simpara>\n      ",
                "documentation": "\n        <p>The client secret from the user pool request of the client type.</p>\n      ",
                "shape_name": "ClientSecretType",
                "min_length": 1,
                "max_length": 64
              },
              "LastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the user pool client was last modified.</simpara>\n      ",
                "documentation": "\n        <p>The date the user pool client was last modified.</p>\n      ",
                "shape_name": "DateType"
              },
              "CreationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the user pool client was created.</simpara>\n      ",
                "documentation": "\n        <p>The date the user pool client was created.</p>\n      ",
                "shape_name": "DateType"
              },
              "RefreshTokenValidity": {
                "type": "integer",
                "zonbookDocumentation": "\n        <simpara>The time limit, in days, after which the refresh token is no longer valid and\n            cannot be used.</simpara>\n      ",
                "documentation": "\n        <p>The time limit, in days, after which the refresh token is no longer valid and\n            cannot be used.</p>\n      ",
                "shape_name": "RefreshTokenValidityType",
                "min_length": 0,
                "max_length": 3650
              },
              "ReadAttributes": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>The Read-only attributes.</simpara>\n      ",
                "documentation": "\n        <p>The Read-only attributes.</p>\n      ",
                "shape_name": "ClientPermissionListType",
                "members": {
                  "type": "string",
                  "shape_name": "ClientPermissionType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 2048
                }
              },
              "WriteAttributes": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>The writeable attributes.</simpara>\n      ",
                "documentation": "\n        <p>The writeable attributes.</p>\n      ",
                "shape_name": "ClientPermissionListType",
                "members": {
                  "type": "string",
                  "shape_name": "ClientPermissionType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 2048
                }
              },
              "ExplicitAuthFlows": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>The explicit authentication flows.</simpara>\n      ",
                "documentation": "\n        <p>The explicit authentication flows.</p>\n      ",
                "shape_name": "ExplicitAuthFlowsListType",
                "members": {
                  "type": "string",
                  "enum": [
                    "ADMIN_NO_SRP_AUTH",
                    "CUSTOM_AUTH_FLOW_ONLY",
                    "USER_PASSWORD_AUTH"
                  ],
                  "shape_name": "ExplicitAuthFlowsType",
                  "documentation": null
                }
              },
              "SupportedIdentityProviders": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>A list of provider names for the identity providers that are supported on this\n            client.</simpara>\n      ",
                "documentation": "\n        <p>A list of provider names for the identity providers that are supported on this\n            client.</p>\n      ",
                "shape_name": "SupportedIdentityProvidersListType",
                "members": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "shape_name": "ProviderNameType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 32
                }
              },
              "CallbackURLs": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>A list of allowed redirect (callback) URLs for the identity providers.</simpara>\n        <simpara>A redirect URI must:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>Be an absolute URI.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>Be registered with the authorization server.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>Not include a fragment component.</simpara>\n            </listitem>\n        </itemizedlist>\n        <simpara>See <ulink url=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 -\n                Redirection Endpoint</ulink>.</simpara>\n        <simpara>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</simpara>\n        <simpara>App callback URLs such as myapp://example are also supported.</simpara>\n      ",
                "documentation": "\n        <p>A list of allowed redirect (callback) URLs for the identity providers.</p>\n        <p>A redirect URI must:</p>\n        <ul>\n            <li>\n                <p>Be an absolute URI.</p>\n            </li>\n            <li>\n                <p>Be registered with the authorization server.</p>\n            </li>\n            <li>\n                <p>Not include a fragment component.</p>\n            </li>\n         </ul>\n        <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 -\n                Redirection Endpoint</a>.</p>\n        <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p>\n        <p>App callback URLs such as myapp://example are also supported.</p>\n      ",
                "shape_name": "CallbackURLsListType",
                "min_length": 0,
                "max_length": 100,
                "members": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "shape_name": "RedirectUrlType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 1024
                }
              },
              "LogoutURLs": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>A list of allowed logout URLs for the identity providers.</simpara>\n      ",
                "documentation": "\n        <p>A list of allowed logout URLs for the identity providers.</p>\n      ",
                "shape_name": "LogoutURLsListType",
                "min_length": 0,
                "max_length": 100,
                "members": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "shape_name": "RedirectUrlType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 1024
                }
              },
              "DefaultRedirectURI": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "zonbookDocumentation": "\n        <simpara>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</simpara>\n        <simpara>A redirect URI must:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>Be an absolute URI.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>Be registered with the authorization server.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>Not include a fragment component.</simpara>\n            </listitem>\n        </itemizedlist>\n        <simpara>See <ulink url=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 -\n            Redirection Endpoint</ulink>.</simpara>\n        <simpara>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</simpara>\n        <simpara>App callback URLs such as myapp://example are also supported.</simpara>\n      ",
                "documentation": "\n        <p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p>\n        <p>A redirect URI must:</p>\n        <ul>\n            <li>\n                <p>Be an absolute URI.</p>\n            </li>\n            <li>\n                <p>Be registered with the authorization server.</p>\n            </li>\n            <li>\n                <p>Not include a fragment component.</p>\n            </li>\n         </ul>\n        <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 -\n            Redirection Endpoint</a>.</p>\n        <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p>\n        <p>App callback URLs such as myapp://example are also supported.</p>\n      ",
                "shape_name": "RedirectUrlType",
                "min_length": 1,
                "max_length": 1024
              },
              "AllowedOAuthFlows": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>Set to <code>code</code> to initiate a code grant flow, which provides an\n            authorization code as the response. This code can be exchanged for access tokens with\n            the token endpoint.</simpara>\n        <simpara>Set to <code>token</code> to specify that the client should get the access token\n            (and, optionally, ID token, based on scopes) directly.</simpara>\n      ",
                "documentation": "\n        <p>Set to <code>code</code> to initiate a code grant flow, which provides an\n            authorization code as the response. This code can be exchanged for access tokens with\n            the token endpoint.</p>\n        <p>Set to <code>token</code> to specify that the client should get the access token\n            (and, optionally, ID token, based on scopes) directly.</p>\n      ",
                "shape_name": "OAuthFlowsType",
                "min_length": 0,
                "max_length": 3,
                "members": {
                  "type": "string",
                  "enum": [
                    "code",
                    "implicit",
                    "client_credentials"
                  ],
                  "shape_name": "OAuthFlowType",
                  "documentation": null
                }
              },
              "AllowedOAuthScopes": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>A list of allowed <code>OAuth</code> scopes. Currently supported values are\n                <code>\"phone\"</code>, <code>\"email\"</code>, <code>\"openid\"</code>, and\n                <code>\"Cognito\"</code>.</simpara>\n      ",
                "documentation": "\n        <p>A list of allowed <code>OAuth</code> scopes. Currently supported values are\n                <code>\"phone\"</code>, <code>\"email\"</code>, <code>\"openid\"</code>, and\n                <code>\"Cognito\"</code>.</p>\n      ",
                "shape_name": "ScopeListType",
                "max_length": 25,
                "members": {
                  "type": "string",
                  "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                  "shape_name": "ScopeType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 256
                }
              },
              "AllowedOAuthFlowsUserPoolClient": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>Set to TRUE if the client is allowed to follow the OAuth protocol when interacting\n            with Cognito user pools.</simpara>\n      ",
                "documentation": "\n        <p>Set to TRUE if the client is allowed to follow the OAuth protocol when interacting\n            with Cognito user pools.</p>\n      ",
                "box": true,
                "shape_name": "BooleanType"
              },
              "AnalyticsConfiguration": {
                "type": "structure",
                "members": {
                  "ApplicationId": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]+$",
                    "zonbookDocumentation": "\n        <simpara>The application ID for an Amazon Pinpoint application.</simpara>\n      ",
                    "documentation": "\n        <p>The application ID for an Amazon Pinpoint application.</p>\n      ",
                    "required": true,
                    "shape_name": "HexStringType"
                  },
                  "RoleArn": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon\n            Pinpoint analytics.</simpara>\n      ",
                    "documentation": "\n        <p>The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon\n            Pinpoint analytics.</p>\n      ",
                    "required": true,
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "ExternalId": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The external ID.</simpara>\n      ",
                    "documentation": "\n        <p>The external ID.</p>\n      ",
                    "required": true,
                    "shape_name": "StringType"
                  },
                  "UserDataShared": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n        <simpara>If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include\n            user data in the events it publishes to Amazon Pinpoint analytics.</simpara>\n      ",
                    "documentation": "\n        <p>If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include\n            user data in the events it publishes to Amazon Pinpoint analytics.</p>\n      ",
                    "shape_name": "BooleanType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The Amazon Pinpoint analytics configuration for the user pool client.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Pinpoint analytics configuration for the user pool client.</p>\n      ",
                "shape_name": "AnalyticsConfigurationType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The user pool client that was just created.</simpara>\n      ",
            "documentation": "\n        <p>The user pool client that was just created.</p>\n      ",
            "shape_name": "UserPoolClientType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server to create a user pool client.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server to create a user pool client.</p>\n      ",
        "shape_name": "CreateUserPoolClientResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "MessageType",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the specified scope does not exist.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the specified scope does not exist.</p>\n      ",
          "shape_name": "ScopeDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "MessageType",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the specified OAuth flow is invalid.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the specified OAuth flow is invalid.</p>\n      ",
          "shape_name": "InvalidOAuthFlowException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Creates the user pool client.</p>\n      "
    },
    "DescribeUserPoolClient": {
      "name": "DescribeUserPoolClient",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool you want to describe.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool you want to describe.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "ClientId": {
            "type": "string",
            "pattern": "[\\w+]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The app client ID of the app associated with the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The app client ID of the app associated with the user pool.</p>\n      ",
            "required": true,
            "shape_name": "ClientIdType",
            "min_length": 1,
            "max_length": 128
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to describe a user pool client.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to describe a user pool client.</p>\n      ",
        "shape_name": "DescribeUserPoolClientRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "UserPoolClient": {
            "type": "structure",
            "members": {
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool client.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID for the user pool client.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "ClientName": {
                "type": "string",
                "pattern": "[\\w\\s+=,.@-]+",
                "zonbookDocumentation": "\n        <simpara>The client name from the user pool request of the client type.</simpara>\n      ",
                "documentation": "\n        <p>The client name from the user pool request of the client type.</p>\n      ",
                "shape_name": "ClientNameType",
                "min_length": 1,
                "max_length": 128
              },
              "ClientId": {
                "type": "string",
                "pattern": "[\\w+]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The ID of the client associated with the user pool.</simpara>\n      ",
                "documentation": "\n        <p>The ID of the client associated with the user pool.</p>\n      ",
                "shape_name": "ClientIdType",
                "min_length": 1,
                "max_length": 128
              },
              "ClientSecret": {
                "type": "string",
                "pattern": "[\\w+]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The client secret from the user pool request of the client type.</simpara>\n      ",
                "documentation": "\n        <p>The client secret from the user pool request of the client type.</p>\n      ",
                "shape_name": "ClientSecretType",
                "min_length": 1,
                "max_length": 64
              },
              "LastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the user pool client was last modified.</simpara>\n      ",
                "documentation": "\n        <p>The date the user pool client was last modified.</p>\n      ",
                "shape_name": "DateType"
              },
              "CreationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the user pool client was created.</simpara>\n      ",
                "documentation": "\n        <p>The date the user pool client was created.</p>\n      ",
                "shape_name": "DateType"
              },
              "RefreshTokenValidity": {
                "type": "integer",
                "zonbookDocumentation": "\n        <simpara>The time limit, in days, after which the refresh token is no longer valid and\n            cannot be used.</simpara>\n      ",
                "documentation": "\n        <p>The time limit, in days, after which the refresh token is no longer valid and\n            cannot be used.</p>\n      ",
                "shape_name": "RefreshTokenValidityType",
                "min_length": 0,
                "max_length": 3650
              },
              "ReadAttributes": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>The Read-only attributes.</simpara>\n      ",
                "documentation": "\n        <p>The Read-only attributes.</p>\n      ",
                "shape_name": "ClientPermissionListType",
                "members": {
                  "type": "string",
                  "shape_name": "ClientPermissionType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 2048
                }
              },
              "WriteAttributes": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>The writeable attributes.</simpara>\n      ",
                "documentation": "\n        <p>The writeable attributes.</p>\n      ",
                "shape_name": "ClientPermissionListType",
                "members": {
                  "type": "string",
                  "shape_name": "ClientPermissionType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 2048
                }
              },
              "ExplicitAuthFlows": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>The explicit authentication flows.</simpara>\n      ",
                "documentation": "\n        <p>The explicit authentication flows.</p>\n      ",
                "shape_name": "ExplicitAuthFlowsListType",
                "members": {
                  "type": "string",
                  "enum": [
                    "ADMIN_NO_SRP_AUTH",
                    "CUSTOM_AUTH_FLOW_ONLY",
                    "USER_PASSWORD_AUTH"
                  ],
                  "shape_name": "ExplicitAuthFlowsType",
                  "documentation": null
                }
              },
              "SupportedIdentityProviders": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>A list of provider names for the identity providers that are supported on this\n            client.</simpara>\n      ",
                "documentation": "\n        <p>A list of provider names for the identity providers that are supported on this\n            client.</p>\n      ",
                "shape_name": "SupportedIdentityProvidersListType",
                "members": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "shape_name": "ProviderNameType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 32
                }
              },
              "CallbackURLs": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>A list of allowed redirect (callback) URLs for the identity providers.</simpara>\n        <simpara>A redirect URI must:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>Be an absolute URI.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>Be registered with the authorization server.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>Not include a fragment component.</simpara>\n            </listitem>\n        </itemizedlist>\n        <simpara>See <ulink url=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 -\n                Redirection Endpoint</ulink>.</simpara>\n        <simpara>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</simpara>\n        <simpara>App callback URLs such as myapp://example are also supported.</simpara>\n      ",
                "documentation": "\n        <p>A list of allowed redirect (callback) URLs for the identity providers.</p>\n        <p>A redirect URI must:</p>\n        <ul>\n            <li>\n                <p>Be an absolute URI.</p>\n            </li>\n            <li>\n                <p>Be registered with the authorization server.</p>\n            </li>\n            <li>\n                <p>Not include a fragment component.</p>\n            </li>\n         </ul>\n        <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 -\n                Redirection Endpoint</a>.</p>\n        <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p>\n        <p>App callback URLs such as myapp://example are also supported.</p>\n      ",
                "shape_name": "CallbackURLsListType",
                "min_length": 0,
                "max_length": 100,
                "members": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "shape_name": "RedirectUrlType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 1024
                }
              },
              "LogoutURLs": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>A list of allowed logout URLs for the identity providers.</simpara>\n      ",
                "documentation": "\n        <p>A list of allowed logout URLs for the identity providers.</p>\n      ",
                "shape_name": "LogoutURLsListType",
                "min_length": 0,
                "max_length": 100,
                "members": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "shape_name": "RedirectUrlType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 1024
                }
              },
              "DefaultRedirectURI": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "zonbookDocumentation": "\n        <simpara>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</simpara>\n        <simpara>A redirect URI must:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>Be an absolute URI.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>Be registered with the authorization server.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>Not include a fragment component.</simpara>\n            </listitem>\n        </itemizedlist>\n        <simpara>See <ulink url=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 -\n            Redirection Endpoint</ulink>.</simpara>\n        <simpara>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</simpara>\n        <simpara>App callback URLs such as myapp://example are also supported.</simpara>\n      ",
                "documentation": "\n        <p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p>\n        <p>A redirect URI must:</p>\n        <ul>\n            <li>\n                <p>Be an absolute URI.</p>\n            </li>\n            <li>\n                <p>Be registered with the authorization server.</p>\n            </li>\n            <li>\n                <p>Not include a fragment component.</p>\n            </li>\n         </ul>\n        <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 -\n            Redirection Endpoint</a>.</p>\n        <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p>\n        <p>App callback URLs such as myapp://example are also supported.</p>\n      ",
                "shape_name": "RedirectUrlType",
                "min_length": 1,
                "max_length": 1024
              },
              "AllowedOAuthFlows": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>Set to <code>code</code> to initiate a code grant flow, which provides an\n            authorization code as the response. This code can be exchanged for access tokens with\n            the token endpoint.</simpara>\n        <simpara>Set to <code>token</code> to specify that the client should get the access token\n            (and, optionally, ID token, based on scopes) directly.</simpara>\n      ",
                "documentation": "\n        <p>Set to <code>code</code> to initiate a code grant flow, which provides an\n            authorization code as the response. This code can be exchanged for access tokens with\n            the token endpoint.</p>\n        <p>Set to <code>token</code> to specify that the client should get the access token\n            (and, optionally, ID token, based on scopes) directly.</p>\n      ",
                "shape_name": "OAuthFlowsType",
                "min_length": 0,
                "max_length": 3,
                "members": {
                  "type": "string",
                  "enum": [
                    "code",
                    "implicit",
                    "client_credentials"
                  ],
                  "shape_name": "OAuthFlowType",
                  "documentation": null
                }
              },
              "AllowedOAuthScopes": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>A list of allowed <code>OAuth</code> scopes. Currently supported values are\n                <code>\"phone\"</code>, <code>\"email\"</code>, <code>\"openid\"</code>, and\n                <code>\"Cognito\"</code>.</simpara>\n      ",
                "documentation": "\n        <p>A list of allowed <code>OAuth</code> scopes. Currently supported values are\n                <code>\"phone\"</code>, <code>\"email\"</code>, <code>\"openid\"</code>, and\n                <code>\"Cognito\"</code>.</p>\n      ",
                "shape_name": "ScopeListType",
                "max_length": 25,
                "members": {
                  "type": "string",
                  "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                  "shape_name": "ScopeType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 256
                }
              },
              "AllowedOAuthFlowsUserPoolClient": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>Set to TRUE if the client is allowed to follow the OAuth protocol when interacting\n            with Cognito user pools.</simpara>\n      ",
                "documentation": "\n        <p>Set to TRUE if the client is allowed to follow the OAuth protocol when interacting\n            with Cognito user pools.</p>\n      ",
                "box": true,
                "shape_name": "BooleanType"
              },
              "AnalyticsConfiguration": {
                "type": "structure",
                "members": {
                  "ApplicationId": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]+$",
                    "zonbookDocumentation": "\n        <simpara>The application ID for an Amazon Pinpoint application.</simpara>\n      ",
                    "documentation": "\n        <p>The application ID for an Amazon Pinpoint application.</p>\n      ",
                    "required": true,
                    "shape_name": "HexStringType"
                  },
                  "RoleArn": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon\n            Pinpoint analytics.</simpara>\n      ",
                    "documentation": "\n        <p>The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon\n            Pinpoint analytics.</p>\n      ",
                    "required": true,
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "ExternalId": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The external ID.</simpara>\n      ",
                    "documentation": "\n        <p>The external ID.</p>\n      ",
                    "required": true,
                    "shape_name": "StringType"
                  },
                  "UserDataShared": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n        <simpara>If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include\n            user data in the events it publishes to Amazon Pinpoint analytics.</simpara>\n      ",
                    "documentation": "\n        <p>If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include\n            user data in the events it publishes to Amazon Pinpoint analytics.</p>\n      ",
                    "shape_name": "BooleanType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The Amazon Pinpoint analytics configuration for the user pool client.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Pinpoint analytics configuration for the user pool client.</p>\n      ",
                "shape_name": "AnalyticsConfigurationType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The user pool client from a server response to describe the user pool\n            client.</simpara>\n      ",
            "documentation": "\n        <p>The user pool client from a server response to describe the user pool\n            client.</p>\n      ",
            "shape_name": "UserPoolClientType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server from a request to describe the user pool\n            client.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server from a request to describe the user pool\n            client.</p>\n      ",
        "shape_name": "DescribeUserPoolClientResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Client method for returning the configuration information and metadata of the\n            specified user pool app client.</p>\n      "
    },
    "UpdateUserPoolClient": {
      "name": "UpdateUserPoolClient",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool where you want to update the user pool\n            client.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool where you want to update the user pool\n            client.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "ClientId": {
            "type": "string",
            "pattern": "[\\w+]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The ID of the client associated with the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The ID of the client associated with the user pool.</p>\n      ",
            "required": true,
            "shape_name": "ClientIdType",
            "min_length": 1,
            "max_length": 128
          },
          "ClientName": {
            "type": "string",
            "pattern": "[\\w\\s+=,.@-]+",
            "zonbookDocumentation": "\n        <simpara>The client name from the update user pool client request.</simpara>\n      ",
            "documentation": "\n        <p>The client name from the update user pool client request.</p>\n      ",
            "shape_name": "ClientNameType",
            "min_length": 1,
            "max_length": 128
          },
          "RefreshTokenValidity": {
            "type": "integer",
            "zonbookDocumentation": "\n        <simpara>The time limit, in days, after which the refresh token is no longer valid and\n            cannot be used.</simpara>\n      ",
            "documentation": "\n        <p>The time limit, in days, after which the refresh token is no longer valid and\n            cannot be used.</p>\n      ",
            "shape_name": "RefreshTokenValidityType",
            "min_length": 0,
            "max_length": 3650
          },
          "ReadAttributes": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The read-only attributes of the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The read-only attributes of the user pool.</p>\n      ",
            "shape_name": "ClientPermissionListType",
            "members": {
              "type": "string",
              "shape_name": "ClientPermissionType",
              "documentation": null,
              "min_length": 1,
              "max_length": 2048
            }
          },
          "WriteAttributes": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The writeable attributes of the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The writeable attributes of the user pool.</p>\n      ",
            "shape_name": "ClientPermissionListType",
            "members": {
              "type": "string",
              "shape_name": "ClientPermissionType",
              "documentation": null,
              "min_length": 1,
              "max_length": 2048
            }
          },
          "ExplicitAuthFlows": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>Explicit authentication flows.</simpara>\n      ",
            "documentation": "\n        <p>Explicit authentication flows.</p>\n      ",
            "shape_name": "ExplicitAuthFlowsListType",
            "members": {
              "type": "string",
              "enum": [
                "ADMIN_NO_SRP_AUTH",
                "CUSTOM_AUTH_FLOW_ONLY",
                "USER_PASSWORD_AUTH"
              ],
              "shape_name": "ExplicitAuthFlowsType",
              "documentation": null
            }
          },
          "SupportedIdentityProviders": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>A list of provider names for the identity providers that are supported on this\n            client.</simpara>\n      ",
            "documentation": "\n        <p>A list of provider names for the identity providers that are supported on this\n            client.</p>\n      ",
            "shape_name": "SupportedIdentityProvidersListType",
            "members": {
              "type": "string",
              "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
              "shape_name": "ProviderNameType",
              "documentation": null,
              "min_length": 1,
              "max_length": 32
            }
          },
          "CallbackURLs": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>A list of allowed redirect (callback) URLs for the identity providers.</simpara>\n        <simpara>A redirect URI must:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>Be an absolute URI.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>Be registered with the authorization server.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>Not include a fragment component.</simpara>\n            </listitem>\n        </itemizedlist>\n        <simpara>See <ulink url=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 -\n            Redirection Endpoint</ulink>.</simpara>\n        <simpara>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</simpara>\n        <simpara>App callback URLs such as myapp://example are also supported.</simpara>\n      ",
            "documentation": "\n        <p>A list of allowed redirect (callback) URLs for the identity providers.</p>\n        <p>A redirect URI must:</p>\n        <ul>\n            <li>\n                <p>Be an absolute URI.</p>\n            </li>\n            <li>\n                <p>Be registered with the authorization server.</p>\n            </li>\n            <li>\n                <p>Not include a fragment component.</p>\n            </li>\n         </ul>\n        <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 -\n            Redirection Endpoint</a>.</p>\n        <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p>\n        <p>App callback URLs such as myapp://example are also supported.</p>\n      ",
            "shape_name": "CallbackURLsListType",
            "min_length": 0,
            "max_length": 100,
            "members": {
              "type": "string",
              "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
              "shape_name": "RedirectUrlType",
              "documentation": null,
              "min_length": 1,
              "max_length": 1024
            }
          },
          "LogoutURLs": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>A list of allowed logout URLs for the identity providers.</simpara>\n      ",
            "documentation": "\n        <p>A list of allowed logout URLs for the identity providers.</p>\n      ",
            "shape_name": "LogoutURLsListType",
            "min_length": 0,
            "max_length": 100,
            "members": {
              "type": "string",
              "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
              "shape_name": "RedirectUrlType",
              "documentation": null,
              "min_length": 1,
              "max_length": 1024
            }
          },
          "DefaultRedirectURI": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "zonbookDocumentation": "\n        <simpara>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</simpara>\n        <simpara>A redirect URI must:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>Be an absolute URI.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>Be registered with the authorization server.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>Not include a fragment component.</simpara>\n            </listitem>\n        </itemizedlist>\n        <simpara>See <ulink url=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 -\n            Redirection Endpoint</ulink>.</simpara>\n        <simpara>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</simpara>\n        <simpara>App callback URLs such as myapp://example are also supported.</simpara>\n      ",
            "documentation": "\n        <p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p>\n        <p>A redirect URI must:</p>\n        <ul>\n            <li>\n                <p>Be an absolute URI.</p>\n            </li>\n            <li>\n                <p>Be registered with the authorization server.</p>\n            </li>\n            <li>\n                <p>Not include a fragment component.</p>\n            </li>\n         </ul>\n        <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 -\n            Redirection Endpoint</a>.</p>\n        <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p>\n        <p>App callback URLs such as myapp://example are also supported.</p>\n      ",
            "shape_name": "RedirectUrlType",
            "min_length": 1,
            "max_length": 1024
          },
          "AllowedOAuthFlows": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>Set to <code>code</code> to initiate a code grant flow, which provides an\n            authorization code as the response. This code can be exchanged for access tokens with\n            the token endpoint.</simpara>\n        <simpara>Set to <code>token</code> to specify that the client should get the access token\n            (and, optionally, ID token, based on scopes) directly.</simpara>\n      ",
            "documentation": "\n        <p>Set to <code>code</code> to initiate a code grant flow, which provides an\n            authorization code as the response. This code can be exchanged for access tokens with\n            the token endpoint.</p>\n        <p>Set to <code>token</code> to specify that the client should get the access token\n            (and, optionally, ID token, based on scopes) directly.</p>\n      ",
            "shape_name": "OAuthFlowsType",
            "min_length": 0,
            "max_length": 3,
            "members": {
              "type": "string",
              "enum": [
                "code",
                "implicit",
                "client_credentials"
              ],
              "shape_name": "OAuthFlowType",
              "documentation": null
            }
          },
          "AllowedOAuthScopes": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>A list of allowed <code>OAuth</code> scopes. Currently supported values are\n                <code>\"phone\"</code>, <code>\"email\"</code>, <code>\"openid\"</code>, and\n                <code>\"Cognito\"</code>.</simpara>\n      ",
            "documentation": "\n        <p>A list of allowed <code>OAuth</code> scopes. Currently supported values are\n                <code>\"phone\"</code>, <code>\"email\"</code>, <code>\"openid\"</code>, and\n                <code>\"Cognito\"</code>.</p>\n      ",
            "shape_name": "ScopeListType",
            "max_length": 25,
            "members": {
              "type": "string",
              "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
              "shape_name": "ScopeType",
              "documentation": null,
              "min_length": 1,
              "max_length": 256
            }
          },
          "AllowedOAuthFlowsUserPoolClient": {
            "type": "boolean",
            "zonbookDocumentation": "\n        <simpara>Set to TRUE if the client is allowed to follow the OAuth protocol when interacting\n            with Cognito user pools.</simpara>\n      ",
            "documentation": "\n        <p>Set to TRUE if the client is allowed to follow the OAuth protocol when interacting\n            with Cognito user pools.</p>\n      ",
            "shape_name": "BooleanType"
          },
          "AnalyticsConfiguration": {
            "type": "structure",
            "members": {
              "ApplicationId": {
                "type": "string",
                "pattern": "^[0-9a-fA-F]+$",
                "zonbookDocumentation": "\n        <simpara>The application ID for an Amazon Pinpoint application.</simpara>\n      ",
                "documentation": "\n        <p>The application ID for an Amazon Pinpoint application.</p>\n      ",
                "required": true,
                "shape_name": "HexStringType"
              },
              "RoleArn": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon\n            Pinpoint analytics.</simpara>\n      ",
                "documentation": "\n        <p>The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon\n            Pinpoint analytics.</p>\n      ",
                "required": true,
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "ExternalId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The external ID.</simpara>\n      ",
                "documentation": "\n        <p>The external ID.</p>\n      ",
                "required": true,
                "shape_name": "StringType"
              },
              "UserDataShared": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include\n            user data in the events it publishes to Amazon Pinpoint analytics.</simpara>\n      ",
                "documentation": "\n        <p>If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include\n            user data in the events it publishes to Amazon Pinpoint analytics.</p>\n      ",
                "shape_name": "BooleanType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The Amazon Pinpoint analytics configuration for collecting metrics for this user\n            pool.</simpara>\n      ",
            "documentation": "\n        <p>The Amazon Pinpoint analytics configuration for collecting metrics for this user\n            pool.</p>\n      ",
            "shape_name": "AnalyticsConfigurationType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to update the user pool client.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to update the user pool client.</p>\n      ",
        "shape_name": "UpdateUserPoolClientRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "UserPoolClient": {
            "type": "structure",
            "members": {
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool client.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID for the user pool client.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "ClientName": {
                "type": "string",
                "pattern": "[\\w\\s+=,.@-]+",
                "zonbookDocumentation": "\n        <simpara>The client name from the user pool request of the client type.</simpara>\n      ",
                "documentation": "\n        <p>The client name from the user pool request of the client type.</p>\n      ",
                "shape_name": "ClientNameType",
                "min_length": 1,
                "max_length": 128
              },
              "ClientId": {
                "type": "string",
                "pattern": "[\\w+]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The ID of the client associated with the user pool.</simpara>\n      ",
                "documentation": "\n        <p>The ID of the client associated with the user pool.</p>\n      ",
                "shape_name": "ClientIdType",
                "min_length": 1,
                "max_length": 128
              },
              "ClientSecret": {
                "type": "string",
                "pattern": "[\\w+]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The client secret from the user pool request of the client type.</simpara>\n      ",
                "documentation": "\n        <p>The client secret from the user pool request of the client type.</p>\n      ",
                "shape_name": "ClientSecretType",
                "min_length": 1,
                "max_length": 64
              },
              "LastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the user pool client was last modified.</simpara>\n      ",
                "documentation": "\n        <p>The date the user pool client was last modified.</p>\n      ",
                "shape_name": "DateType"
              },
              "CreationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the user pool client was created.</simpara>\n      ",
                "documentation": "\n        <p>The date the user pool client was created.</p>\n      ",
                "shape_name": "DateType"
              },
              "RefreshTokenValidity": {
                "type": "integer",
                "zonbookDocumentation": "\n        <simpara>The time limit, in days, after which the refresh token is no longer valid and\n            cannot be used.</simpara>\n      ",
                "documentation": "\n        <p>The time limit, in days, after which the refresh token is no longer valid and\n            cannot be used.</p>\n      ",
                "shape_name": "RefreshTokenValidityType",
                "min_length": 0,
                "max_length": 3650
              },
              "ReadAttributes": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>The Read-only attributes.</simpara>\n      ",
                "documentation": "\n        <p>The Read-only attributes.</p>\n      ",
                "shape_name": "ClientPermissionListType",
                "members": {
                  "type": "string",
                  "shape_name": "ClientPermissionType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 2048
                }
              },
              "WriteAttributes": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>The writeable attributes.</simpara>\n      ",
                "documentation": "\n        <p>The writeable attributes.</p>\n      ",
                "shape_name": "ClientPermissionListType",
                "members": {
                  "type": "string",
                  "shape_name": "ClientPermissionType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 2048
                }
              },
              "ExplicitAuthFlows": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>The explicit authentication flows.</simpara>\n      ",
                "documentation": "\n        <p>The explicit authentication flows.</p>\n      ",
                "shape_name": "ExplicitAuthFlowsListType",
                "members": {
                  "type": "string",
                  "enum": [
                    "ADMIN_NO_SRP_AUTH",
                    "CUSTOM_AUTH_FLOW_ONLY",
                    "USER_PASSWORD_AUTH"
                  ],
                  "shape_name": "ExplicitAuthFlowsType",
                  "documentation": null
                }
              },
              "SupportedIdentityProviders": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>A list of provider names for the identity providers that are supported on this\n            client.</simpara>\n      ",
                "documentation": "\n        <p>A list of provider names for the identity providers that are supported on this\n            client.</p>\n      ",
                "shape_name": "SupportedIdentityProvidersListType",
                "members": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "shape_name": "ProviderNameType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 32
                }
              },
              "CallbackURLs": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>A list of allowed redirect (callback) URLs for the identity providers.</simpara>\n        <simpara>A redirect URI must:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>Be an absolute URI.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>Be registered with the authorization server.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>Not include a fragment component.</simpara>\n            </listitem>\n        </itemizedlist>\n        <simpara>See <ulink url=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 -\n                Redirection Endpoint</ulink>.</simpara>\n        <simpara>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</simpara>\n        <simpara>App callback URLs such as myapp://example are also supported.</simpara>\n      ",
                "documentation": "\n        <p>A list of allowed redirect (callback) URLs for the identity providers.</p>\n        <p>A redirect URI must:</p>\n        <ul>\n            <li>\n                <p>Be an absolute URI.</p>\n            </li>\n            <li>\n                <p>Be registered with the authorization server.</p>\n            </li>\n            <li>\n                <p>Not include a fragment component.</p>\n            </li>\n         </ul>\n        <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 -\n                Redirection Endpoint</a>.</p>\n        <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p>\n        <p>App callback URLs such as myapp://example are also supported.</p>\n      ",
                "shape_name": "CallbackURLsListType",
                "min_length": 0,
                "max_length": 100,
                "members": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "shape_name": "RedirectUrlType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 1024
                }
              },
              "LogoutURLs": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>A list of allowed logout URLs for the identity providers.</simpara>\n      ",
                "documentation": "\n        <p>A list of allowed logout URLs for the identity providers.</p>\n      ",
                "shape_name": "LogoutURLsListType",
                "min_length": 0,
                "max_length": 100,
                "members": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "shape_name": "RedirectUrlType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 1024
                }
              },
              "DefaultRedirectURI": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "zonbookDocumentation": "\n        <simpara>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</simpara>\n        <simpara>A redirect URI must:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>Be an absolute URI.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>Be registered with the authorization server.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>Not include a fragment component.</simpara>\n            </listitem>\n        </itemizedlist>\n        <simpara>See <ulink url=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 -\n            Redirection Endpoint</ulink>.</simpara>\n        <simpara>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</simpara>\n        <simpara>App callback URLs such as myapp://example are also supported.</simpara>\n      ",
                "documentation": "\n        <p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p>\n        <p>A redirect URI must:</p>\n        <ul>\n            <li>\n                <p>Be an absolute URI.</p>\n            </li>\n            <li>\n                <p>Be registered with the authorization server.</p>\n            </li>\n            <li>\n                <p>Not include a fragment component.</p>\n            </li>\n         </ul>\n        <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 -\n            Redirection Endpoint</a>.</p>\n        <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p>\n        <p>App callback URLs such as myapp://example are also supported.</p>\n      ",
                "shape_name": "RedirectUrlType",
                "min_length": 1,
                "max_length": 1024
              },
              "AllowedOAuthFlows": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>Set to <code>code</code> to initiate a code grant flow, which provides an\n            authorization code as the response. This code can be exchanged for access tokens with\n            the token endpoint.</simpara>\n        <simpara>Set to <code>token</code> to specify that the client should get the access token\n            (and, optionally, ID token, based on scopes) directly.</simpara>\n      ",
                "documentation": "\n        <p>Set to <code>code</code> to initiate a code grant flow, which provides an\n            authorization code as the response. This code can be exchanged for access tokens with\n            the token endpoint.</p>\n        <p>Set to <code>token</code> to specify that the client should get the access token\n            (and, optionally, ID token, based on scopes) directly.</p>\n      ",
                "shape_name": "OAuthFlowsType",
                "min_length": 0,
                "max_length": 3,
                "members": {
                  "type": "string",
                  "enum": [
                    "code",
                    "implicit",
                    "client_credentials"
                  ],
                  "shape_name": "OAuthFlowType",
                  "documentation": null
                }
              },
              "AllowedOAuthScopes": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>A list of allowed <code>OAuth</code> scopes. Currently supported values are\n                <code>\"phone\"</code>, <code>\"email\"</code>, <code>\"openid\"</code>, and\n                <code>\"Cognito\"</code>.</simpara>\n      ",
                "documentation": "\n        <p>A list of allowed <code>OAuth</code> scopes. Currently supported values are\n                <code>\"phone\"</code>, <code>\"email\"</code>, <code>\"openid\"</code>, and\n                <code>\"Cognito\"</code>.</p>\n      ",
                "shape_name": "ScopeListType",
                "max_length": 25,
                "members": {
                  "type": "string",
                  "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                  "shape_name": "ScopeType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 256
                }
              },
              "AllowedOAuthFlowsUserPoolClient": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>Set to TRUE if the client is allowed to follow the OAuth protocol when interacting\n            with Cognito user pools.</simpara>\n      ",
                "documentation": "\n        <p>Set to TRUE if the client is allowed to follow the OAuth protocol when interacting\n            with Cognito user pools.</p>\n      ",
                "box": true,
                "shape_name": "BooleanType"
              },
              "AnalyticsConfiguration": {
                "type": "structure",
                "members": {
                  "ApplicationId": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]+$",
                    "zonbookDocumentation": "\n        <simpara>The application ID for an Amazon Pinpoint application.</simpara>\n      ",
                    "documentation": "\n        <p>The application ID for an Amazon Pinpoint application.</p>\n      ",
                    "required": true,
                    "shape_name": "HexStringType"
                  },
                  "RoleArn": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon\n            Pinpoint analytics.</simpara>\n      ",
                    "documentation": "\n        <p>The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon\n            Pinpoint analytics.</p>\n      ",
                    "required": true,
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "ExternalId": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The external ID.</simpara>\n      ",
                    "documentation": "\n        <p>The external ID.</p>\n      ",
                    "required": true,
                    "shape_name": "StringType"
                  },
                  "UserDataShared": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n        <simpara>If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include\n            user data in the events it publishes to Amazon Pinpoint analytics.</simpara>\n      ",
                    "documentation": "\n        <p>If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include\n            user data in the events it publishes to Amazon Pinpoint analytics.</p>\n      ",
                    "shape_name": "BooleanType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The Amazon Pinpoint analytics configuration for the user pool client.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Pinpoint analytics configuration for the user pool client.</p>\n      ",
                "shape_name": "AnalyticsConfigurationType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The user pool client value from the response from the server when an update user\n            pool client request is made.</simpara>\n      ",
            "documentation": "\n        <p>The user pool client value from the response from the server when an update user\n            pool client request is made.</p>\n      ",
            "shape_name": "UserPoolClientType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server to the request to update the user pool\n            client.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server to the request to update the user pool\n            client.</p>\n      ",
        "shape_name": "UpdateUserPoolClientResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message provided when the concurrent exception is thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message provided when the concurrent exception is thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown if two or more modifications are happening\n            concurrently.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown if two or more modifications are happening\n            concurrently.</p>\n      ",
          "shape_name": "ConcurrentModificationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "MessageType",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the specified scope does not exist.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the specified scope does not exist.</p>\n      ",
          "shape_name": "ScopeDoesNotExistException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "MessageType",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the specified OAuth flow is invalid.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the specified OAuth flow is invalid.</p>\n      ",
          "shape_name": "InvalidOAuthFlowException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Updates the specified user pool app client with the specified attributes.\n            If you don't provide a value for an attribute, it will be set to the default value. You\n            can get a list of the current user pool app client settings with .</p>\n      "
    },
    "ListUserPoolClients": {
      "name": "ListUserPoolClients",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool where you want to list user pool\n            clients.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool where you want to list user pool\n            clients.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "MaxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n        <simpara>The maximum number of results you want the request to return when listing the user\n            pool clients.</simpara>\n      ",
            "documentation": "\n        <p>The maximum number of results you want the request to return when listing the user\n            pool clients.</p>\n      ",
            "shape_name": "QueryLimit",
            "min_length": 1,
            "max_length": 60
          },
          "NextToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</simpara>\n      ",
            "documentation": "\n        <p>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</p>\n      ",
            "shape_name": "PaginationKey",
            "min_length": 1
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to list the user pool clients.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to list the user pool clients.</p>\n      ",
        "shape_name": "ListUserPoolClientsRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "UserPoolClients": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The user pool clients in the response that lists user pool clients.</simpara>\n      ",
            "documentation": "\n        <p>The user pool clients in the response that lists user pool clients.</p>\n      ",
            "shape_name": "UserPoolClientListType",
            "members": {
              "type": "structure",
              "members": {
                "ClientId": {
                  "type": "string",
                  "pattern": "[\\w+]+",
                  "sensitive": true,
                  "zonbookDocumentation": "\n        <simpara>The ID of the client associated with the user pool.</simpara>\n      ",
                  "documentation": "\n        <p>The ID of the client associated with the user pool.</p>\n      ",
                  "shape_name": "ClientIdType",
                  "min_length": 1,
                  "max_length": 128
                },
                "UserPoolId": {
                  "type": "string",
                  "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                  "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool where you want to describe the user pool\n            client.</simpara>\n      ",
                  "documentation": "\n        <p>The user pool ID for the user pool where you want to describe the user pool\n            client.</p>\n      ",
                  "shape_name": "UserPoolIdType",
                  "min_length": 1,
                  "max_length": 55
                },
                "ClientName": {
                  "type": "string",
                  "pattern": "[\\w\\s+=,.@-]+",
                  "zonbookDocumentation": "\n        <simpara>The client name from the user pool client description.</simpara>\n      ",
                  "documentation": "\n        <p>The client name from the user pool client description.</p>\n      ",
                  "shape_name": "ClientNameType",
                  "min_length": 1,
                  "max_length": 128
                }
              },
              "zonbookDocumentation": "\n        <simpara>The description of the user pool client.</simpara>\n      ",
              "documentation": "\n        <p>The description of the user pool client.</p>\n      ",
              "shape_name": "UserPoolClientDescription"
            }
          },
          "NextToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</simpara>\n      ",
            "documentation": "\n        <p>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</p>\n      ",
            "shape_name": "PaginationKey",
            "min_length": 1
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server that lists user pool clients.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server that lists user pool clients.</p>\n      ",
        "shape_name": "ListUserPoolClientsResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Lists the clients that have been created for the specified user pool.</p>\n      "
    },
    "DeleteUserPoolClient": {
      "name": "DeleteUserPoolClient",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool where you want to delete the client.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool where you want to delete the client.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "ClientId": {
            "type": "string",
            "pattern": "[\\w+]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The app client ID of the app associated with the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The app client ID of the app associated with the user pool.</p>\n      ",
            "required": true,
            "shape_name": "ClientIdType",
            "min_length": 1,
            "max_length": 128
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to delete a user pool client.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to delete a user pool client.</p>\n      ",
        "shape_name": "DeleteUserPoolClientRequest"
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Allows the developer to delete the user pool client.</p>\n      "
    },
    "GetDevice": {
      "name": "GetDevice",
      "input": {
        "type": "structure",
        "members": {
          "DeviceKey": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-f-]+",
            "zonbookDocumentation": "\n        <simpara>The device key.</simpara>\n      ",
            "documentation": "\n        <p>The device key.</p>\n      ",
            "required": true,
            "shape_name": "DeviceKeyType",
            "min_length": 1,
            "max_length": 55
          },
          "AccessToken": {
            "type": "string",
            "pattern": "[A-Za-z0-9-_=.]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The access token.</simpara>\n      ",
            "documentation": "\n        <p>The access token.</p>\n      ",
            "shape_name": "TokenModelType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to get the device.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to get the device.</p>\n      ",
        "shape_name": "GetDeviceRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "Device": {
            "type": "structure",
            "members": {
              "DeviceKey": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-f-]+",
                "zonbookDocumentation": "\n        <simpara>The device key.</simpara>\n      ",
                "documentation": "\n        <p>The device key.</p>\n      ",
                "shape_name": "DeviceKeyType",
                "min_length": 1,
                "max_length": 55
              },
              "DeviceAttributes": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>The device attributes.</simpara>\n      ",
                "documentation": "\n        <p>The device attributes.</p>\n      ",
                "shape_name": "AttributeListType",
                "members": {
                  "type": "structure",
                  "members": {
                    "Name": {
                      "type": "string",
                      "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                      "zonbookDocumentation": "\n        <simpara>The name of the attribute.</simpara>\n      ",
                      "documentation": "\n        <p>The name of the attribute.</p>\n      ",
                      "required": true,
                      "shape_name": "AttributeNameType",
                      "min_length": 1,
                      "max_length": 32
                    },
                    "Value": {
                      "type": "string",
                      "sensitive": true,
                      "zonbookDocumentation": "\n        <simpara>The value of the attribute.</simpara>\n      ",
                      "documentation": "\n        <p>The value of the attribute.</p>\n      ",
                      "shape_name": "AttributeValueType",
                      "max_length": 2048
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>Specifies whether the attribute is standard or custom.</simpara>\n      ",
                  "documentation": "\n        <p>Specifies whether the attribute is standard or custom.</p>\n      ",
                  "shape_name": "AttributeType"
                }
              },
              "DeviceCreateDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The creation date of the device.</simpara>\n      ",
                "documentation": "\n        <p>The creation date of the device.</p>\n      ",
                "shape_name": "DateType"
              },
              "DeviceLastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The last modified date of the device.</simpara>\n      ",
                "documentation": "\n        <p>The last modified date of the device.</p>\n      ",
                "shape_name": "DateType"
              },
              "DeviceLastAuthenticatedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date in which the device was last authenticated.</simpara>\n      ",
                "documentation": "\n        <p>The date in which the device was last authenticated.</p>\n      ",
                "shape_name": "DateType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The device.</simpara>\n      ",
            "documentation": "\n        <p>The device.</p>\n      ",
            "required": true,
            "shape_name": "DeviceType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Gets the device response.</simpara>\n      ",
        "documentation": "\n        <p>Gets the device response.</p>\n      ",
        "shape_name": "GetDeviceResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the user pool configuration is invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the user pool configuration is invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user pool configuration is invalid.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user pool configuration is invalid.</p>\n      ",
          "shape_name": "InvalidUserPoolConfigurationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Gets the device.</p>\n      "
    },
    "ListDevices": {
      "name": "ListDevices",
      "input": {
        "type": "structure",
        "members": {
          "AccessToken": {
            "type": "string",
            "pattern": "[A-Za-z0-9-_=.]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The access tokens for the request to list devices.</simpara>\n      ",
            "documentation": "\n        <p>The access tokens for the request to list devices.</p>\n      ",
            "required": true,
            "shape_name": "TokenModelType"
          },
          "Limit": {
            "type": "integer",
            "zonbookDocumentation": "\n        <simpara>The limit of the device request.</simpara>\n      ",
            "documentation": "\n        <p>The limit of the device request.</p>\n      ",
            "shape_name": "QueryLimitType",
            "min_length": 0,
            "max_length": 60
          },
          "PaginationToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>The pagination token for the list request.</simpara>\n      ",
            "documentation": "\n        <p>The pagination token for the list request.</p>\n      ",
            "shape_name": "SearchPaginationTokenType",
            "min_length": 1
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to list the devices.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to list the devices.</p>\n      ",
        "shape_name": "ListDevicesRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "Devices": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The devices returned in the list devices response.</simpara>\n      ",
            "documentation": "\n        <p>The devices returned in the list devices response.</p>\n      ",
            "shape_name": "DeviceListType",
            "members": {
              "type": "structure",
              "members": {
                "DeviceKey": {
                  "type": "string",
                  "pattern": "[\\w-]+_[0-9a-f-]+",
                  "zonbookDocumentation": "\n        <simpara>The device key.</simpara>\n      ",
                  "documentation": "\n        <p>The device key.</p>\n      ",
                  "shape_name": "DeviceKeyType",
                  "min_length": 1,
                  "max_length": 55
                },
                "DeviceAttributes": {
                  "type": "list",
                  "zonbookDocumentation": "\n        <simpara>The device attributes.</simpara>\n      ",
                  "documentation": "\n        <p>The device attributes.</p>\n      ",
                  "shape_name": "AttributeListType",
                  "members": {
                    "type": "structure",
                    "members": {
                      "Name": {
                        "type": "string",
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "zonbookDocumentation": "\n        <simpara>The name of the attribute.</simpara>\n      ",
                        "documentation": "\n        <p>The name of the attribute.</p>\n      ",
                        "required": true,
                        "shape_name": "AttributeNameType",
                        "min_length": 1,
                        "max_length": 32
                      },
                      "Value": {
                        "type": "string",
                        "sensitive": true,
                        "zonbookDocumentation": "\n        <simpara>The value of the attribute.</simpara>\n      ",
                        "documentation": "\n        <p>The value of the attribute.</p>\n      ",
                        "shape_name": "AttributeValueType",
                        "max_length": 2048
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>Specifies whether the attribute is standard or custom.</simpara>\n      ",
                    "documentation": "\n        <p>Specifies whether the attribute is standard or custom.</p>\n      ",
                    "shape_name": "AttributeType"
                  }
                },
                "DeviceCreateDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The creation date of the device.</simpara>\n      ",
                  "documentation": "\n        <p>The creation date of the device.</p>\n      ",
                  "shape_name": "DateType"
                },
                "DeviceLastModifiedDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The last modified date of the device.</simpara>\n      ",
                  "documentation": "\n        <p>The last modified date of the device.</p>\n      ",
                  "shape_name": "DateType"
                },
                "DeviceLastAuthenticatedDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The date in which the device was last authenticated.</simpara>\n      ",
                  "documentation": "\n        <p>The date in which the device was last authenticated.</p>\n      ",
                  "shape_name": "DateType"
                }
              },
              "zonbookDocumentation": "\n        <simpara>The device type.</simpara>\n      ",
              "documentation": "\n        <p>The device type.</p>\n      ",
              "shape_name": "DeviceType"
            }
          },
          "PaginationToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>The pagination token for the list device response.</simpara>\n      ",
            "documentation": "\n        <p>The pagination token for the list device response.</p>\n      ",
            "shape_name": "SearchPaginationTokenType",
            "min_length": 1
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response to list devices.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response to list devices.</p>\n      ",
        "shape_name": "ListDevicesResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the user pool configuration is invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the user pool configuration is invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user pool configuration is invalid.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user pool configuration is invalid.</p>\n      ",
          "shape_name": "InvalidUserPoolConfigurationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Lists the devices.</p>\n      "
    },
    "ForgetDevice": {
      "name": "ForgetDevice",
      "input": {
        "type": "structure",
        "members": {
          "AccessToken": {
            "type": "string",
            "pattern": "[A-Za-z0-9-_=.]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The access token for the forgotten device request.</simpara>\n      ",
            "documentation": "\n        <p>The access token for the forgotten device request.</p>\n      ",
            "shape_name": "TokenModelType"
          },
          "DeviceKey": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-f-]+",
            "zonbookDocumentation": "\n        <simpara>The device key.</simpara>\n      ",
            "documentation": "\n        <p>The device key.</p>\n      ",
            "required": true,
            "shape_name": "DeviceKeyType",
            "min_length": 1,
            "max_length": 55
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to forget the device.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to forget the device.</p>\n      ",
        "shape_name": "ForgetDeviceRequest"
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the user pool configuration is invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the user pool configuration is invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user pool configuration is invalid.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user pool configuration is invalid.</p>\n      ",
          "shape_name": "InvalidUserPoolConfigurationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Forgets the specified device.</p>\n      "
    },
    "UpdateDeviceStatus": {
      "name": "UpdateDeviceStatus",
      "input": {
        "type": "structure",
        "members": {
          "AccessToken": {
            "type": "string",
            "pattern": "[A-Za-z0-9-_=.]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The access token.</simpara>\n      ",
            "documentation": "\n        <p>The access token.</p>\n      ",
            "required": true,
            "shape_name": "TokenModelType"
          },
          "DeviceKey": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-f-]+",
            "zonbookDocumentation": "\n        <simpara>The device key.</simpara>\n      ",
            "documentation": "\n        <p>The device key.</p>\n      ",
            "required": true,
            "shape_name": "DeviceKeyType",
            "min_length": 1,
            "max_length": 55
          },
          "DeviceRememberedStatus": {
            "type": "string",
            "enum": [
              "remembered",
              "not_remembered"
            ],
            "zonbookDocumentation": "\n        <simpara>The status of whether a device is remembered.</simpara>\n      ",
            "documentation": "\n        <p>The status of whether a device is remembered.</p>\n      ",
            "shape_name": "DeviceRememberedStatusType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to update the device status.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to update the device status.</p>\n      ",
        "shape_name": "UpdateDeviceStatusRequest"
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "zonbookDocumentation": "\n        <simpara>The response to the request to update the device status.</simpara>\n      ",
        "documentation": "\n        <p>The response to the request to update the device status.</p>\n      ",
        "shape_name": "UpdateDeviceStatusResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the user pool configuration is invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the user pool configuration is invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user pool configuration is invalid.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user pool configuration is invalid.</p>\n      ",
          "shape_name": "InvalidUserPoolConfigurationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Updates the device status.</p>\n      "
    },
    "ConfirmDevice": {
      "name": "ConfirmDevice",
      "input": {
        "type": "structure",
        "members": {
          "AccessToken": {
            "type": "string",
            "pattern": "[A-Za-z0-9-_=.]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The access token.</simpara>\n      ",
            "documentation": "\n        <p>The access token.</p>\n      ",
            "required": true,
            "shape_name": "TokenModelType"
          },
          "DeviceKey": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-f-]+",
            "zonbookDocumentation": "\n        <simpara>The device key.</simpara>\n      ",
            "documentation": "\n        <p>The device key.</p>\n      ",
            "required": true,
            "shape_name": "DeviceKeyType",
            "min_length": 1,
            "max_length": 55
          },
          "DeviceSecretVerifierConfig": {
            "type": "structure",
            "members": {
              "PasswordVerifier": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The password verifier.</simpara>\n      ",
                "documentation": "\n        <p>The password verifier.</p>\n      ",
                "shape_name": "StringType"
              },
              "Salt": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The salt.</simpara>\n      ",
                "documentation": "\n        <p>The salt.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The configuration of the device secret verifier.</simpara>\n      ",
            "documentation": "\n        <p>The configuration of the device secret verifier.</p>\n      ",
            "shape_name": "DeviceSecretVerifierConfigType"
          },
          "DeviceName": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The device name.</simpara>\n      ",
            "documentation": "\n        <p>The device name.</p>\n      ",
            "shape_name": "DeviceNameType",
            "min_length": 1,
            "max_length": 1024
          }
        },
        "zonbookDocumentation": "\n        <simpara>Confirms the device request.</simpara>\n      ",
        "documentation": "\n        <p>Confirms the device request.</p>\n      ",
        "shape_name": "ConfirmDeviceRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "UserConfirmationNecessary": {
            "type": "boolean",
            "zonbookDocumentation": "\n        <simpara>Indicates whether the user confirmation is necessary to confirm the device\n            response.</simpara>\n      ",
            "documentation": "\n        <p>Indicates whether the user confirmation is necessary to confirm the device\n            response.</p>\n      ",
            "shape_name": "BooleanType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Confirms the device response.</simpara>\n      ",
        "documentation": "\n        <p>Confirms the device response.</p>\n      ",
        "shape_name": "ConfirmDeviceResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid user\n            password exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid user\n            password exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            password.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            password.</p>\n      ",
          "shape_name": "InvalidPasswordException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</p>\n      ",
          "shape_name": "InvalidLambdaResponseException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws a user name exists\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws a user name exists\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters a user name that already\n            exists in the user pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters a user name that already\n            exists in the user pool.</p>\n      ",
          "shape_name": "UsernameExistsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the user pool configuration is invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the user pool configuration is invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user pool configuration is invalid.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user pool configuration is invalid.</p>\n      ",
          "shape_name": "InvalidUserPoolConfigurationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Confirms tracking of the device. This API call is the call that begins device\n            tracking.</p>\n      "
    },
    "AdminGetDevice": {
      "name": "AdminGetDevice",
      "input": {
        "type": "structure",
        "members": {
          "DeviceKey": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-f-]+",
            "zonbookDocumentation": "\n        <simpara>The device key.</simpara>\n      ",
            "documentation": "\n        <p>The device key.</p>\n      ",
            "required": true,
            "shape_name": "DeviceKeyType",
            "min_length": 1,
            "max_length": 55
          },
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name.</simpara>\n      ",
            "documentation": "\n        <p>The user name.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to get the device, as an administrator.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to get the device, as an administrator.</p>\n      ",
        "shape_name": "AdminGetDeviceRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "Device": {
            "type": "structure",
            "members": {
              "DeviceKey": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-f-]+",
                "zonbookDocumentation": "\n        <simpara>The device key.</simpara>\n      ",
                "documentation": "\n        <p>The device key.</p>\n      ",
                "shape_name": "DeviceKeyType",
                "min_length": 1,
                "max_length": 55
              },
              "DeviceAttributes": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>The device attributes.</simpara>\n      ",
                "documentation": "\n        <p>The device attributes.</p>\n      ",
                "shape_name": "AttributeListType",
                "members": {
                  "type": "structure",
                  "members": {
                    "Name": {
                      "type": "string",
                      "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                      "zonbookDocumentation": "\n        <simpara>The name of the attribute.</simpara>\n      ",
                      "documentation": "\n        <p>The name of the attribute.</p>\n      ",
                      "required": true,
                      "shape_name": "AttributeNameType",
                      "min_length": 1,
                      "max_length": 32
                    },
                    "Value": {
                      "type": "string",
                      "sensitive": true,
                      "zonbookDocumentation": "\n        <simpara>The value of the attribute.</simpara>\n      ",
                      "documentation": "\n        <p>The value of the attribute.</p>\n      ",
                      "shape_name": "AttributeValueType",
                      "max_length": 2048
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>Specifies whether the attribute is standard or custom.</simpara>\n      ",
                  "documentation": "\n        <p>Specifies whether the attribute is standard or custom.</p>\n      ",
                  "shape_name": "AttributeType"
                }
              },
              "DeviceCreateDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The creation date of the device.</simpara>\n      ",
                "documentation": "\n        <p>The creation date of the device.</p>\n      ",
                "shape_name": "DateType"
              },
              "DeviceLastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The last modified date of the device.</simpara>\n      ",
                "documentation": "\n        <p>The last modified date of the device.</p>\n      ",
                "shape_name": "DateType"
              },
              "DeviceLastAuthenticatedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date in which the device was last authenticated.</simpara>\n      ",
                "documentation": "\n        <p>The date in which the device was last authenticated.</p>\n      ",
                "shape_name": "DateType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The device.</simpara>\n      ",
            "documentation": "\n        <p>The device.</p>\n      ",
            "required": true,
            "shape_name": "DeviceType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Gets the device response, as an administrator.</simpara>\n      ",
        "documentation": "\n        <p>Gets the device response, as an administrator.</p>\n      ",
        "shape_name": "AdminGetDeviceResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the user pool configuration is invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the user pool configuration is invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user pool configuration is invalid.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user pool configuration is invalid.</p>\n      ",
          "shape_name": "InvalidUserPoolConfigurationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        }
      ],
      "documentation": "\n        <p>Gets the device, as an administrator.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "AdminListDevices": {
      "name": "AdminListDevices",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name.</simpara>\n      ",
            "documentation": "\n        <p>The user name.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "Limit": {
            "type": "integer",
            "zonbookDocumentation": "\n        <simpara>The limit of the devices request.</simpara>\n      ",
            "documentation": "\n        <p>The limit of the devices request.</p>\n      ",
            "shape_name": "QueryLimitType",
            "min_length": 0,
            "max_length": 60
          },
          "PaginationToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>The pagination token.</simpara>\n      ",
            "documentation": "\n        <p>The pagination token.</p>\n      ",
            "shape_name": "SearchPaginationTokenType",
            "min_length": 1
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to list devices, as an administrator.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to list devices, as an administrator.</p>\n      ",
        "shape_name": "AdminListDevicesRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "Devices": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The devices in the list of devices response.</simpara>\n      ",
            "documentation": "\n        <p>The devices in the list of devices response.</p>\n      ",
            "shape_name": "DeviceListType",
            "members": {
              "type": "structure",
              "members": {
                "DeviceKey": {
                  "type": "string",
                  "pattern": "[\\w-]+_[0-9a-f-]+",
                  "zonbookDocumentation": "\n        <simpara>The device key.</simpara>\n      ",
                  "documentation": "\n        <p>The device key.</p>\n      ",
                  "shape_name": "DeviceKeyType",
                  "min_length": 1,
                  "max_length": 55
                },
                "DeviceAttributes": {
                  "type": "list",
                  "zonbookDocumentation": "\n        <simpara>The device attributes.</simpara>\n      ",
                  "documentation": "\n        <p>The device attributes.</p>\n      ",
                  "shape_name": "AttributeListType",
                  "members": {
                    "type": "structure",
                    "members": {
                      "Name": {
                        "type": "string",
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "zonbookDocumentation": "\n        <simpara>The name of the attribute.</simpara>\n      ",
                        "documentation": "\n        <p>The name of the attribute.</p>\n      ",
                        "required": true,
                        "shape_name": "AttributeNameType",
                        "min_length": 1,
                        "max_length": 32
                      },
                      "Value": {
                        "type": "string",
                        "sensitive": true,
                        "zonbookDocumentation": "\n        <simpara>The value of the attribute.</simpara>\n      ",
                        "documentation": "\n        <p>The value of the attribute.</p>\n      ",
                        "shape_name": "AttributeValueType",
                        "max_length": 2048
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>Specifies whether the attribute is standard or custom.</simpara>\n      ",
                    "documentation": "\n        <p>Specifies whether the attribute is standard or custom.</p>\n      ",
                    "shape_name": "AttributeType"
                  }
                },
                "DeviceCreateDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The creation date of the device.</simpara>\n      ",
                  "documentation": "\n        <p>The creation date of the device.</p>\n      ",
                  "shape_name": "DateType"
                },
                "DeviceLastModifiedDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The last modified date of the device.</simpara>\n      ",
                  "documentation": "\n        <p>The last modified date of the device.</p>\n      ",
                  "shape_name": "DateType"
                },
                "DeviceLastAuthenticatedDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The date in which the device was last authenticated.</simpara>\n      ",
                  "documentation": "\n        <p>The date in which the device was last authenticated.</p>\n      ",
                  "shape_name": "DateType"
                }
              },
              "zonbookDocumentation": "\n        <simpara>The device type.</simpara>\n      ",
              "documentation": "\n        <p>The device type.</p>\n      ",
              "shape_name": "DeviceType"
            }
          },
          "PaginationToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>The pagination token.</simpara>\n      ",
            "documentation": "\n        <p>The pagination token.</p>\n      ",
            "shape_name": "SearchPaginationTokenType",
            "min_length": 1
          }
        },
        "zonbookDocumentation": "\n        <simpara>Lists the device's response, as an administrator.</simpara>\n      ",
        "documentation": "\n        <p>Lists the device's response, as an administrator.</p>\n      ",
        "shape_name": "AdminListDevicesResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the user pool configuration is invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the user pool configuration is invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user pool configuration is invalid.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user pool configuration is invalid.</p>\n      ",
          "shape_name": "InvalidUserPoolConfigurationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        }
      ],
      "documentation": "\n        <p>Lists devices, as an administrator.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "AdminForgetDevice": {
      "name": "AdminForgetDevice",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name.</simpara>\n      ",
            "documentation": "\n        <p>The user name.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "DeviceKey": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-f-]+",
            "zonbookDocumentation": "\n        <simpara>The device key.</simpara>\n      ",
            "documentation": "\n        <p>The device key.</p>\n      ",
            "required": true,
            "shape_name": "DeviceKeyType",
            "min_length": 1,
            "max_length": 55
          }
        },
        "zonbookDocumentation": "\n        <simpara>Sends the forgot device request, as an administrator.</simpara>\n      ",
        "documentation": "\n        <p>Sends the forgot device request, as an administrator.</p>\n      ",
        "shape_name": "AdminForgetDeviceRequest"
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the user pool configuration is invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the user pool configuration is invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user pool configuration is invalid.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user pool configuration is invalid.</p>\n      ",
          "shape_name": "InvalidUserPoolConfigurationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Forgets the device, as an administrator.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "AdminUpdateDeviceStatus": {
      "name": "AdminUpdateDeviceStatus",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name.</simpara>\n      ",
            "documentation": "\n        <p>The user name.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "DeviceKey": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-f-]+",
            "zonbookDocumentation": "\n        <simpara>The device key.</simpara>\n      ",
            "documentation": "\n        <p>The device key.</p>\n      ",
            "required": true,
            "shape_name": "DeviceKeyType",
            "min_length": 1,
            "max_length": 55
          },
          "DeviceRememberedStatus": {
            "type": "string",
            "enum": [
              "remembered",
              "not_remembered"
            ],
            "zonbookDocumentation": "\n        <simpara>The status indicating whether a device has been remembered or not.</simpara>\n      ",
            "documentation": "\n        <p>The status indicating whether a device has been remembered or not.</p>\n      ",
            "shape_name": "DeviceRememberedStatusType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>The request to update the device status, as an administrator.</simpara>\n      ",
        "documentation": "\n        <p>The request to update the device status, as an administrator.</p>\n      ",
        "shape_name": "AdminUpdateDeviceStatusRequest"
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "zonbookDocumentation": "\n        <simpara>The status response from the request to update the device, as an\n            administrator.</simpara>\n      ",
        "documentation": "\n        <p>The status response from the request to update the device, as an\n            administrator.</p>\n      ",
        "shape_name": "AdminUpdateDeviceStatusResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the user pool configuration is invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the user pool configuration is invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user pool configuration is invalid.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user pool configuration is invalid.</p>\n      ",
          "shape_name": "InvalidUserPoolConfigurationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Updates the device status as an administrator.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "SignUp": {
      "name": "SignUp",
      "input": {
        "type": "structure",
        "members": {
          "ClientId": {
            "type": "string",
            "pattern": "[\\w+]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The ID of the client associated with the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The ID of the client associated with the user pool.</p>\n      ",
            "required": true,
            "shape_name": "ClientIdType",
            "min_length": 1,
            "max_length": 128
          },
          "SecretHash": {
            "type": "string",
            "pattern": "[\\w+=/]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>A keyed-hash message authentication code (HMAC) calculated using the secret key of\n            a user pool client and username plus the client ID in the message.</simpara>\n      ",
            "documentation": "\n        <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of\n            a user pool client and username plus the client ID in the message.</p>\n      ",
            "shape_name": "SecretHashType",
            "min_length": 1,
            "max_length": 128
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name of the user you wish to register.</simpara>\n      ",
            "documentation": "\n        <p>The user name of the user you wish to register.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "Password": {
            "type": "string",
            "sensitive": true,
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>The password of the user you wish to register.</simpara>\n      ",
            "documentation": "\n        <p>The password of the user you wish to register.</p>\n      ",
            "required": true,
            "shape_name": "PasswordType",
            "min_length": 6,
            "max_length": 256
          },
          "UserAttributes": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>An array of name-value pairs representing user attributes.</simpara>\n        <simpara>For custom attributes, you must prepend the <code>custom:</code> prefix to the\n            attribute name.</simpara>\n      ",
            "documentation": "\n        <p>An array of name-value pairs representing user attributes.</p>\n        <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the\n            attribute name.</p>\n      ",
            "shape_name": "AttributeListType",
            "members": {
              "type": "structure",
              "members": {
                "Name": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "zonbookDocumentation": "\n        <simpara>The name of the attribute.</simpara>\n      ",
                  "documentation": "\n        <p>The name of the attribute.</p>\n      ",
                  "required": true,
                  "shape_name": "AttributeNameType",
                  "min_length": 1,
                  "max_length": 32
                },
                "Value": {
                  "type": "string",
                  "sensitive": true,
                  "zonbookDocumentation": "\n        <simpara>The value of the attribute.</simpara>\n      ",
                  "documentation": "\n        <p>The value of the attribute.</p>\n      ",
                  "shape_name": "AttributeValueType",
                  "max_length": 2048
                }
              },
              "zonbookDocumentation": "\n        <simpara>Specifies whether the attribute is standard or custom.</simpara>\n      ",
              "documentation": "\n        <p>Specifies whether the attribute is standard or custom.</p>\n      ",
              "shape_name": "AttributeType"
            }
          },
          "ValidationData": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The validation data in the request to register a user.</simpara>\n      ",
            "documentation": "\n        <p>The validation data in the request to register a user.</p>\n      ",
            "shape_name": "AttributeListType",
            "members": {
              "type": "structure",
              "members": {
                "Name": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "zonbookDocumentation": "\n        <simpara>The name of the attribute.</simpara>\n      ",
                  "documentation": "\n        <p>The name of the attribute.</p>\n      ",
                  "required": true,
                  "shape_name": "AttributeNameType",
                  "min_length": 1,
                  "max_length": 32
                },
                "Value": {
                  "type": "string",
                  "sensitive": true,
                  "zonbookDocumentation": "\n        <simpara>The value of the attribute.</simpara>\n      ",
                  "documentation": "\n        <p>The value of the attribute.</p>\n      ",
                  "shape_name": "AttributeValueType",
                  "max_length": 2048
                }
              },
              "zonbookDocumentation": "\n        <simpara>Specifies whether the attribute is standard or custom.</simpara>\n      ",
              "documentation": "\n        <p>Specifies whether the attribute is standard or custom.</p>\n      ",
              "shape_name": "AttributeType"
            }
          },
          "AnalyticsMetadata": {
            "type": "structure",
            "members": {
              "AnalyticsEndpointId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The endpoint ID.</simpara>\n      ",
                "documentation": "\n        <p>The endpoint ID.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The Amazon Pinpoint analytics metadata for collecting metrics for\n                <code>SignUp</code> calls.</simpara>\n      ",
            "documentation": "\n        <p>The Amazon Pinpoint analytics metadata for collecting metrics for\n                <code>SignUp</code> calls.</p>\n      ",
            "shape_name": "AnalyticsMetadataType"
          },
          "UserContextData": {
            "type": "structure",
            "members": {
              "EncodedData": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</simpara>\n      ",
                "documentation": "\n        <p>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</simpara>\n      ",
            "documentation": "\n        <p>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</p>\n      ",
            "shape_name": "UserContextDataType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to register a user.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to register a user.</p>\n      ",
        "shape_name": "SignUpRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "UserConfirmed": {
            "type": "boolean",
            "zonbookDocumentation": "\n        <simpara>A response from the server indicating that a user registration has been\n            confirmed.</simpara>\n      ",
            "documentation": "\n        <p>A response from the server indicating that a user registration has been\n            confirmed.</p>\n      ",
            "required": true,
            "shape_name": "BooleanType"
          },
          "CodeDeliveryDetails": {
            "type": "structure",
            "members": {
              "Destination": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The destination for the code delivery details.</simpara>\n      ",
                "documentation": "\n        <p>The destination for the code delivery details.</p>\n      ",
                "shape_name": "StringType"
              },
              "DeliveryMedium": {
                "type": "string",
                "enum": [
                  "SMS",
                  "EMAIL"
                ],
                "zonbookDocumentation": "\n        <simpara>The delivery medium (email message or phone number).</simpara>\n      ",
                "documentation": "\n        <p>The delivery medium (email message or phone number).</p>\n      ",
                "shape_name": "DeliveryMediumType"
              },
              "AttributeName": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "zonbookDocumentation": "\n        <simpara>The attribute name.</simpara>\n      ",
                "documentation": "\n        <p>The attribute name.</p>\n      ",
                "shape_name": "AttributeNameType",
                "min_length": 1,
                "max_length": 32
              }
            },
            "zonbookDocumentation": "\n        <simpara>The code delivery details returned by the server response to the user registration\n            request.</simpara>\n      ",
            "documentation": "\n        <p>The code delivery details returned by the server response to the user registration\n            request.</p>\n      ",
            "shape_name": "CodeDeliveryDetailsType"
          },
          "UserSub": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The UUID of the authenticated user. This is not the same as\n            <code>username</code>.</simpara>\n      ",
            "documentation": "\n        <p>The UUID of the authenticated user. This is not the same as\n            <code>username</code>.</p>\n      ",
            "required": true,
            "shape_name": "StringType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>The response from the server for a registration request.</simpara>\n      ",
        "documentation": "\n        <p>The response from the server for a registration request.</p>\n      ",
        "shape_name": "SignUpResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UnexpectedLambdaException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UserLambdaValidationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid user\n            password exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid user\n            password exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            password.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            password.</p>\n      ",
          "shape_name": "InvalidPasswordException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</p>\n      ",
          "shape_name": "InvalidLambdaResponseException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws a user name exists\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws a user name exists\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters a user name that already\n            exists in the user pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters a user name that already\n            exists in the user pool.</p>\n      ",
          "shape_name": "UsernameExistsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message retuned when the invalid SMS role access policy exception is\n            thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message retuned when the invalid SMS role access policy exception is\n            thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</simpara>\n      ",
          "documentation": "\n        <p>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</p>\n      ",
          "shape_name": "InvalidSmsRoleAccessPolicyException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the role trust relationship for the SMS message is\n            invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the role trust relationship for the SMS message is\n            invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <emphasis role=\"bold\">cognito-idp.amazonaws.com</emphasis> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <b>cognito-idp.amazonaws.com</b> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</p>\n      ",
          "shape_name": "InvalidSmsRoleTrustRelationshipException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when you have an unverified email address or the identity\n            policy is not set on an email address that Amazon Cognito can access.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when you have an unverified email address or the identity\n            policy is not set on an email address that Amazon Cognito can access.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito is not allowed to use your email\n            identity. HTTP status code: 400.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito is not allowed to use your email\n            identity. HTTP status code: 400.</p>\n      ",
          "shape_name": "InvalidEmailRoleAccessPolicyException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message sent when a verification code fails to deliver successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message sent when a verification code fails to deliver successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a verification code fails to deliver\n            successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a verification code fails to deliver\n            successfully.</p>\n      ",
          "shape_name": "CodeDeliveryFailureException"
        }
      ],
      "documentation": "\n        <p>Registers the user in the specified user pool and creates a user name, password,\n            and user attributes.</p>\n      "
    },
    "ConfirmSignUp": {
      "name": "ConfirmSignUp",
      "input": {
        "type": "structure",
        "members": {
          "ClientId": {
            "type": "string",
            "pattern": "[\\w+]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The ID of the app client associated with the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The ID of the app client associated with the user pool.</p>\n      ",
            "required": true,
            "shape_name": "ClientIdType",
            "min_length": 1,
            "max_length": 128
          },
          "SecretHash": {
            "type": "string",
            "pattern": "[\\w+=/]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>A keyed-hash message authentication code (HMAC) calculated using the secret key of\n            a user pool client and username plus the client ID in the message.</simpara>\n      ",
            "documentation": "\n        <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of\n            a user pool client and username plus the client ID in the message.</p>\n      ",
            "shape_name": "SecretHashType",
            "min_length": 1,
            "max_length": 128
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name of the user whose registration you wish to confirm.</simpara>\n      ",
            "documentation": "\n        <p>The user name of the user whose registration you wish to confirm.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "ConfirmationCode": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>The confirmation code sent by a user's request to confirm registration.</simpara>\n      ",
            "documentation": "\n        <p>The confirmation code sent by a user's request to confirm registration.</p>\n      ",
            "required": true,
            "shape_name": "ConfirmationCodeType",
            "min_length": 1,
            "max_length": 2048
          },
          "ForceAliasCreation": {
            "type": "boolean",
            "zonbookDocumentation": "\n        <simpara>Boolean to be specified to force user confirmation irrespective of existing alias.\n            By default set to <code>False</code>. If this parameter is set to <code>True</code> and\n            the phone number/email used for sign up confirmation already exists as an alias with a\n            different user, the API call will migrate the alias from the previous user to the newly\n            created user being confirmed. If set to <code>False</code>, the API will throw an\n                <emphasis role=\"bold\">AliasExistsException</emphasis> error.</simpara>\n      ",
            "documentation": "\n        <p>Boolean to be specified to force user confirmation irrespective of existing alias.\n            By default set to <code>False</code>. If this parameter is set to <code>True</code> and\n            the phone number/email used for sign up confirmation already exists as an alias with a\n            different user, the API call will migrate the alias from the previous user to the newly\n            created user being confirmed. If set to <code>False</code>, the API will throw an\n                <b>AliasExistsException</b> error.</p>\n      ",
            "shape_name": "ForceAliasCreation"
          },
          "AnalyticsMetadata": {
            "type": "structure",
            "members": {
              "AnalyticsEndpointId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The endpoint ID.</simpara>\n      ",
                "documentation": "\n        <p>The endpoint ID.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The Amazon Pinpoint analytics metadata for collecting metrics for\n                <code>ConfirmSignUp</code> calls.</simpara>\n      ",
            "documentation": "\n        <p>The Amazon Pinpoint analytics metadata for collecting metrics for\n                <code>ConfirmSignUp</code> calls.</p>\n      ",
            "shape_name": "AnalyticsMetadataType"
          },
          "UserContextData": {
            "type": "structure",
            "members": {
              "EncodedData": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</simpara>\n      ",
                "documentation": "\n        <p>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</simpara>\n      ",
            "documentation": "\n        <p>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</p>\n      ",
            "shape_name": "UserContextDataType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to confirm registration of a user.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to confirm registration of a user.</p>\n      ",
        "shape_name": "ConfirmSignUpRequest"
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server for the registration\n            confirmation.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server for the registration\n            confirmation.</p>\n      ",
        "shape_name": "ConfirmSignUpResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UnexpectedLambdaException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UserLambdaValidationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many failed\n            attempts exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many failed\n            attempts exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many failed attempts for a\n            given action (e.g., sign in).</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many failed attempts for a\n            given action (e.g., sign in).</p>\n      ",
          "shape_name": "TooManyFailedAttemptsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message provided when the code mismatch exception is thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message provided when the code mismatch exception is thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown if the provided code does not match what the server was\n            expecting.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown if the provided code does not match what the server was\n            expecting.</p>\n      ",
          "shape_name": "CodeMismatchException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the expired code exception is thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the expired code exception is thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown if a code has expired.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown if a code has expired.</p>\n      ",
          "shape_name": "ExpiredCodeException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</p>\n      ",
          "shape_name": "InvalidLambdaResponseException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message sent to the user when an alias exists.</simpara>\n      ",
              "documentation": "\n        <p>The message sent to the user when an alias exists.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user tries to confirm the account with an email or\n            phone number that has already been supplied as an alias from a different account. This\n            exception tells user that an account with this email or phone already exists.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user tries to confirm the account with an email or\n            phone number that has already been supplied as an alias from a different account. This\n            exception tells user that an account with this email or phone already exists.</p>\n      ",
          "shape_name": "AliasExistsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Confirms registration of a user and handles the existing alias from a previous\n            user.</p>\n      "
    },
    "ResendConfirmationCode": {
      "name": "ResendConfirmationCode",
      "input": {
        "type": "structure",
        "members": {
          "ClientId": {
            "type": "string",
            "pattern": "[\\w+]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The ID of the client associated with the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The ID of the client associated with the user pool.</p>\n      ",
            "required": true,
            "shape_name": "ClientIdType",
            "min_length": 1,
            "max_length": 128
          },
          "SecretHash": {
            "type": "string",
            "pattern": "[\\w+=/]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>A keyed-hash message authentication code (HMAC) calculated using the secret key of\n            a user pool client and username plus the client ID in the message.</simpara>\n      ",
            "documentation": "\n        <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of\n            a user pool client and username plus the client ID in the message.</p>\n      ",
            "shape_name": "SecretHashType",
            "min_length": 1,
            "max_length": 128
          },
          "UserContextData": {
            "type": "structure",
            "members": {
              "EncodedData": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</simpara>\n      ",
                "documentation": "\n        <p>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</simpara>\n      ",
            "documentation": "\n        <p>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</p>\n      ",
            "shape_name": "UserContextDataType"
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name of the user to whom you wish to resend a confirmation code.</simpara>\n      ",
            "documentation": "\n        <p>The user name of the user to whom you wish to resend a confirmation code.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "AnalyticsMetadata": {
            "type": "structure",
            "members": {
              "AnalyticsEndpointId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The endpoint ID.</simpara>\n      ",
                "documentation": "\n        <p>The endpoint ID.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The Amazon Pinpoint analytics metadata for collecting metrics for\n                <code>ResendConfirmationCode</code> calls.</simpara>\n      ",
            "documentation": "\n        <p>The Amazon Pinpoint analytics metadata for collecting metrics for\n                <code>ResendConfirmationCode</code> calls.</p>\n      ",
            "shape_name": "AnalyticsMetadataType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to resend the confirmation code.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to resend the confirmation code.</p>\n      ",
        "shape_name": "ResendConfirmationCodeRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "CodeDeliveryDetails": {
            "type": "structure",
            "members": {
              "Destination": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The destination for the code delivery details.</simpara>\n      ",
                "documentation": "\n        <p>The destination for the code delivery details.</p>\n      ",
                "shape_name": "StringType"
              },
              "DeliveryMedium": {
                "type": "string",
                "enum": [
                  "SMS",
                  "EMAIL"
                ],
                "zonbookDocumentation": "\n        <simpara>The delivery medium (email message or phone number).</simpara>\n      ",
                "documentation": "\n        <p>The delivery medium (email message or phone number).</p>\n      ",
                "shape_name": "DeliveryMediumType"
              },
              "AttributeName": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "zonbookDocumentation": "\n        <simpara>The attribute name.</simpara>\n      ",
                "documentation": "\n        <p>The attribute name.</p>\n      ",
                "shape_name": "AttributeNameType",
                "min_length": 1,
                "max_length": 32
              }
            },
            "zonbookDocumentation": "\n        <simpara>The code delivery details returned by the server in response to the request to\n            resend the confirmation code.</simpara>\n      ",
            "documentation": "\n        <p>The code delivery details returned by the server in response to the request to\n            resend the confirmation code.</p>\n      ",
            "shape_name": "CodeDeliveryDetailsType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>The response from the server when the Amazon Cognito Your User Pools service makes\n            the request to resend a confirmation code.</simpara>\n      ",
        "documentation": "\n        <p>The response from the server when the Amazon Cognito Your User Pools service makes\n            the request to resend a confirmation code.</p>\n      ",
        "shape_name": "ResendConfirmationCodeResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UnexpectedLambdaException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UserLambdaValidationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</p>\n      ",
          "shape_name": "InvalidLambdaResponseException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message retuned when the invalid SMS role access policy exception is\n            thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message retuned when the invalid SMS role access policy exception is\n            thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</simpara>\n      ",
          "documentation": "\n        <p>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</p>\n      ",
          "shape_name": "InvalidSmsRoleAccessPolicyException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the role trust relationship for the SMS message is\n            invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the role trust relationship for the SMS message is\n            invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <emphasis role=\"bold\">cognito-idp.amazonaws.com</emphasis> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <b>cognito-idp.amazonaws.com</b> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</p>\n      ",
          "shape_name": "InvalidSmsRoleTrustRelationshipException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when you have an unverified email address or the identity\n            policy is not set on an email address that Amazon Cognito can access.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when you have an unverified email address or the identity\n            policy is not set on an email address that Amazon Cognito can access.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito is not allowed to use your email\n            identity. HTTP status code: 400.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito is not allowed to use your email\n            identity. HTTP status code: 400.</p>\n      ",
          "shape_name": "InvalidEmailRoleAccessPolicyException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message sent when a verification code fails to deliver successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message sent when a verification code fails to deliver successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a verification code fails to deliver\n            successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a verification code fails to deliver\n            successfully.</p>\n      ",
          "shape_name": "CodeDeliveryFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Resends the confirmation (for confirmation of registration) to a specific user in\n            the user pool.</p>\n      "
    },
    "ForgotPassword": {
      "name": "ForgotPassword",
      "input": {
        "type": "structure",
        "members": {
          "ClientId": {
            "type": "string",
            "pattern": "[\\w+]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The ID of the client associated with the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The ID of the client associated with the user pool.</p>\n      ",
            "required": true,
            "shape_name": "ClientIdType",
            "min_length": 1,
            "max_length": 128
          },
          "SecretHash": {
            "type": "string",
            "pattern": "[\\w+=/]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>A keyed-hash message authentication code (HMAC) calculated using the secret key of\n            a user pool client and username plus the client ID in the message.</simpara>\n      ",
            "documentation": "\n        <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of\n            a user pool client and username plus the client ID in the message.</p>\n      ",
            "shape_name": "SecretHashType",
            "min_length": 1,
            "max_length": 128
          },
          "UserContextData": {
            "type": "structure",
            "members": {
              "EncodedData": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</simpara>\n      ",
                "documentation": "\n        <p>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</simpara>\n      ",
            "documentation": "\n        <p>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</p>\n      ",
            "shape_name": "UserContextDataType"
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name of the user for whom you want to enter a code to reset a forgotten\n            password.</simpara>\n      ",
            "documentation": "\n        <p>The user name of the user for whom you want to enter a code to reset a forgotten\n            password.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "AnalyticsMetadata": {
            "type": "structure",
            "members": {
              "AnalyticsEndpointId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The endpoint ID.</simpara>\n      ",
                "documentation": "\n        <p>The endpoint ID.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The Amazon Pinpoint analytics metadata for collecting metrics for\n                <code>ForgotPassword</code> calls.</simpara>\n      ",
            "documentation": "\n        <p>The Amazon Pinpoint analytics metadata for collecting metrics for\n                <code>ForgotPassword</code> calls.</p>\n      ",
            "shape_name": "AnalyticsMetadataType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to reset a user's password.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to reset a user's password.</p>\n      ",
        "shape_name": "ForgotPasswordRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "CodeDeliveryDetails": {
            "type": "structure",
            "members": {
              "Destination": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The destination for the code delivery details.</simpara>\n      ",
                "documentation": "\n        <p>The destination for the code delivery details.</p>\n      ",
                "shape_name": "StringType"
              },
              "DeliveryMedium": {
                "type": "string",
                "enum": [
                  "SMS",
                  "EMAIL"
                ],
                "zonbookDocumentation": "\n        <simpara>The delivery medium (email message or phone number).</simpara>\n      ",
                "documentation": "\n        <p>The delivery medium (email message or phone number).</p>\n      ",
                "shape_name": "DeliveryMediumType"
              },
              "AttributeName": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "zonbookDocumentation": "\n        <simpara>The attribute name.</simpara>\n      ",
                "documentation": "\n        <p>The attribute name.</p>\n      ",
                "shape_name": "AttributeNameType",
                "min_length": 1,
                "max_length": 32
              }
            },
            "zonbookDocumentation": "\n        <simpara>The code delivery details returned by the server in response to the request to\n            reset a password.</simpara>\n      ",
            "documentation": "\n        <p>The code delivery details returned by the server in response to the request to\n            reset a password.</p>\n      ",
            "shape_name": "CodeDeliveryDetailsType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Respresents the response from the server regarding the request to reset a\n            password.</simpara>\n      ",
        "documentation": "\n        <p>Respresents the response from the server regarding the request to reset a\n            password.</p>\n      ",
        "shape_name": "ForgotPasswordResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UnexpectedLambdaException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UserLambdaValidationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</p>\n      ",
          "shape_name": "InvalidLambdaResponseException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message retuned when the invalid SMS role access policy exception is\n            thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message retuned when the invalid SMS role access policy exception is\n            thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</simpara>\n      ",
          "documentation": "\n        <p>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</p>\n      ",
          "shape_name": "InvalidSmsRoleAccessPolicyException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the role trust relationship for the SMS message is\n            invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the role trust relationship for the SMS message is\n            invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <emphasis role=\"bold\">cognito-idp.amazonaws.com</emphasis> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <b>cognito-idp.amazonaws.com</b> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</p>\n      ",
          "shape_name": "InvalidSmsRoleTrustRelationshipException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when you have an unverified email address or the identity\n            policy is not set on an email address that Amazon Cognito can access.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when you have an unverified email address or the identity\n            policy is not set on an email address that Amazon Cognito can access.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito is not allowed to use your email\n            identity. HTTP status code: 400.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito is not allowed to use your email\n            identity. HTTP status code: 400.</p>\n      ",
          "shape_name": "InvalidEmailRoleAccessPolicyException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message sent when a verification code fails to deliver successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message sent when a verification code fails to deliver successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a verification code fails to deliver\n            successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a verification code fails to deliver\n            successfully.</p>\n      ",
          "shape_name": "CodeDeliveryFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Calling this API causes a message to be sent to the end user with a confirmation\n            code that is required to change the user's password. For the <code>Username</code>\n            parameter, you can use the username or user alias. If a verified phone number exists for\n            the user, the confirmation code is sent to the phone number. Otherwise, if a verified\n            email exists, the confirmation code is sent to the email. If neither a verified phone\n            number nor a verified email exists, <code>InvalidParameterException</code> is thrown. To\n            use the confirmation code for resetting the password, call .</p>\n      "
    },
    "ConfirmForgotPassword": {
      "name": "ConfirmForgotPassword",
      "input": {
        "type": "structure",
        "members": {
          "ClientId": {
            "type": "string",
            "pattern": "[\\w+]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The app client ID of the app associated with the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The app client ID of the app associated with the user pool.</p>\n      ",
            "required": true,
            "shape_name": "ClientIdType",
            "min_length": 1,
            "max_length": 128
          },
          "SecretHash": {
            "type": "string",
            "pattern": "[\\w+=/]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>A keyed-hash message authentication code (HMAC) calculated using the secret key of\n            a user pool client and username plus the client ID in the message.</simpara>\n      ",
            "documentation": "\n        <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of\n            a user pool client and username plus the client ID in the message.</p>\n      ",
            "shape_name": "SecretHashType",
            "min_length": 1,
            "max_length": 128
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name of the user for whom you want to enter a code to retrieve a forgotten\n            password.</simpara>\n      ",
            "documentation": "\n        <p>The user name of the user for whom you want to enter a code to retrieve a forgotten\n            password.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "ConfirmationCode": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>The confirmation code sent by a user's request to retrieve a forgotten password.\n            For more information, see <xref linkend=\"API_ForgotPassword\"/>\n         </simpara>\n      ",
            "documentation": "\n        <p>The confirmation code sent by a user's request to retrieve a forgotten password.\n            For more information, see </p>\n      ",
            "required": true,
            "shape_name": "ConfirmationCodeType",
            "min_length": 1,
            "max_length": 2048
          },
          "Password": {
            "type": "string",
            "sensitive": true,
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>The password sent by a user's request to retrieve a forgotten password.</simpara>\n      ",
            "documentation": "\n        <p>The password sent by a user's request to retrieve a forgotten password.</p>\n      ",
            "required": true,
            "shape_name": "PasswordType",
            "min_length": 6,
            "max_length": 256
          },
          "AnalyticsMetadata": {
            "type": "structure",
            "members": {
              "AnalyticsEndpointId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The endpoint ID.</simpara>\n      ",
                "documentation": "\n        <p>The endpoint ID.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The Amazon Pinpoint analytics metadata for collecting metrics for\n                <code>ConfirmForgotPassword</code> calls.</simpara>\n      ",
            "documentation": "\n        <p>The Amazon Pinpoint analytics metadata for collecting metrics for\n                <code>ConfirmForgotPassword</code> calls.</p>\n      ",
            "shape_name": "AnalyticsMetadataType"
          },
          "UserContextData": {
            "type": "structure",
            "members": {
              "EncodedData": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</simpara>\n      ",
                "documentation": "\n        <p>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</simpara>\n      ",
            "documentation": "\n        <p>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</p>\n      ",
            "shape_name": "UserContextDataType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>The request representing the confirmation for a password reset.</simpara>\n      ",
        "documentation": "\n        <p>The request representing the confirmation for a password reset.</p>\n      ",
        "shape_name": "ConfirmForgotPasswordRequest"
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "zonbookDocumentation": "\n        <simpara>The response from the server that results from a user's request to retrieve a\n            forgotten password.</simpara>\n      ",
        "documentation": "\n        <p>The response from the server that results from a user's request to retrieve a\n            forgotten password.</p>\n      ",
        "shape_name": "ConfirmForgotPasswordResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UnexpectedLambdaException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UserLambdaValidationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid user\n            password exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid user\n            password exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            password.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            password.</p>\n      ",
          "shape_name": "InvalidPasswordException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message provided when the code mismatch exception is thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message provided when the code mismatch exception is thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown if the provided code does not match what the server was\n            expecting.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown if the provided code does not match what the server was\n            expecting.</p>\n      ",
          "shape_name": "CodeMismatchException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the expired code exception is thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the expired code exception is thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown if a code has expired.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown if a code has expired.</p>\n      ",
          "shape_name": "ExpiredCodeException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many failed\n            attempts exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many failed\n            attempts exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many failed attempts for a\n            given action (e.g., sign in).</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many failed attempts for a\n            given action (e.g., sign in).</p>\n      ",
          "shape_name": "TooManyFailedAttemptsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</p>\n      ",
          "shape_name": "InvalidLambdaResponseException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Allows a user to enter a confirmation code to reset a forgotten password.</p>\n      "
    },
    "GetAuthenticationDetails": {
      "name": "GetAuthenticationDetails",
      "input": {
        "type": "structure",
        "members": {
          "ClientId": {
            "type": "string",
            "pattern": "[\\w+]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The ID of the client associated with the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The ID of the client associated with the user pool.</p>\n      ",
            "required": true,
            "shape_name": "ClientIdType",
            "min_length": 1,
            "max_length": 128
          },
          "SecretHash": {
            "type": "string",
            "pattern": "[\\w+=/]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>A keyed-hash message authentication code (HMAC) calculated using the secret key of\n            a user pool client and username plus the client ID in the message.</simpara>\n      ",
            "documentation": "\n        <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of\n            a user pool client and username plus the client ID in the message.</p>\n      ",
            "shape_name": "SecretHashType",
            "min_length": 1,
            "max_length": 128
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name of the user for whom you wish to retrieve authentication\n            details.</simpara>\n      ",
            "documentation": "\n        <p>The user name of the user for whom you wish to retrieve authentication\n            details.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "SrpA": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]+$",
            "zonbookDocumentation": "\n        <simpara>The Secure Remote Password protocol (SRP) key. For more information, see <ulink url=\"https://en.wikipedia.org/wiki/Secure_Remote_Password_protocol\">Secure Remote\n                Password Protocol</ulink>.</simpara>\n      ",
            "documentation": "\n        <p>The Secure Remote Password protocol (SRP) key. For more information, see <a href=\"https://en.wikipedia.org/wiki/Secure_Remote_Password_protocol\">Secure Remote\n                Password Protocol</a>.</p>\n      ",
            "required": true,
            "shape_name": "AValueHexStringType",
            "min_length": 1,
            "max_length": 1024
          },
          "ValidationData": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The validation data of the request to get authentication details.</simpara>\n      ",
            "documentation": "\n        <p>The validation data of the request to get authentication details.</p>\n      ",
            "shape_name": "AttributeListType",
            "members": {
              "type": "structure",
              "members": {
                "Name": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "zonbookDocumentation": "\n        <simpara>The name of the attribute.</simpara>\n      ",
                  "documentation": "\n        <p>The name of the attribute.</p>\n      ",
                  "required": true,
                  "shape_name": "AttributeNameType",
                  "min_length": 1,
                  "max_length": 32
                },
                "Value": {
                  "type": "string",
                  "sensitive": true,
                  "zonbookDocumentation": "\n        <simpara>The value of the attribute.</simpara>\n      ",
                  "documentation": "\n        <p>The value of the attribute.</p>\n      ",
                  "shape_name": "AttributeValueType",
                  "max_length": 2048
                }
              },
              "zonbookDocumentation": "\n        <simpara>Specifies whether the attribute is standard or custom.</simpara>\n      ",
              "documentation": "\n        <p>Specifies whether the attribute is standard or custom.</p>\n      ",
              "shape_name": "AttributeType"
            }
          },
          "AnalyticsMetadata": {
            "type": "structure",
            "members": {
              "AnalyticsEndpointId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The endpoint ID.</simpara>\n      ",
                "documentation": "\n        <p>The endpoint ID.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>An Amazon Pinpoint analytics endpoint.</simpara>\n        <simpara>An endpoint uniquely identifies a mobile device, email address, or phone number\n            that can receive messages from Amazon Pinpoint analytics.</simpara>\n      ",
            "documentation": "\n        <p>An Amazon Pinpoint analytics endpoint.</p>\n        <p>An endpoint uniquely identifies a mobile device, email address, or phone number\n            that can receive messages from Amazon Pinpoint analytics.</p>\n      ",
            "shape_name": "AnalyticsMetadataType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the user's request to get authentication details.</simpara>\n      ",
        "documentation": "\n        <p>Represents the user's request to get authentication details.</p>\n      ",
        "shape_name": "GetAuthenticationDetailsRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "Salt": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]+$",
            "zonbookDocumentation": "\n        <simpara>A salt that gets returned by the response from the server to get authentication\n            details. For more information, see <ulink url=\"https://en.wikipedia.org/wiki/Salt_%28cryptography%29\">Salt\n                cryptography</ulink>.</simpara>\n      ",
            "documentation": "\n        <p>A salt that gets returned by the response from the server to get authentication\n            details. For more information, see <a href=\"https://en.wikipedia.org/wiki/Salt_%28cryptography%29\">Salt\n                cryptography</a>.</p>\n      ",
            "required": true,
            "shape_name": "HexStringType"
          },
          "SrpB": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]+$",
            "zonbookDocumentation": "\n        <simpara>The Secure Remote Password protocol (SRP) key. For more information, see <ulink url=\"https://en.wikipedia.org/wiki/Secure_Remote_Password_protocol\">Secure Remote\n                Password Protocol</ulink>.</simpara>\n      ",
            "documentation": "\n        <p>The Secure Remote Password protocol (SRP) key. For more information, see <a href=\"https://en.wikipedia.org/wiki/Secure_Remote_Password_protocol\">Secure Remote\n                Password Protocol</a>.</p>\n      ",
            "required": true,
            "shape_name": "HexStringType"
          },
          "SecretBlock": {
            "type": "blob",
            "zonbookDocumentation": "\n        <simpara>A blob that blocks the secret hash in the get authentication details\n            response.</simpara>\n      ",
            "documentation": "\n        <p>A blob that blocks the secret hash in the get authentication details\n            response.</p>\n      ",
            "required": true,
            "shape_name": "BlobType"
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The resolved username for a possible alias in the input username\n            parameter.</simpara>\n      ",
            "documentation": "\n        <p>The resolved username for a possible alias in the input username\n            parameter.</p>\n      ",
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server to get authentication details.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server to get authentication details.</p>\n      ",
        "shape_name": "GetAuthenticationDetailsResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UnexpectedLambdaException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UserLambdaValidationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</p>\n      ",
          "shape_name": "InvalidLambdaResponseException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>First step of the Secure Remote Password protocol (SRP) auth flow to authenticate a\n            user. To learn about the second step, see .</p>\n      "
    },
    "Authenticate": {
      "name": "Authenticate",
      "input": {
        "type": "structure",
        "members": {
          "ClientId": {
            "type": "string",
            "pattern": "[\\w+]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The app client ID.</simpara>\n      ",
            "documentation": "\n        <p>The app client ID.</p>\n      ",
            "required": true,
            "shape_name": "ClientIdType",
            "min_length": 1,
            "max_length": 128
          },
          "SecretHash": {
            "type": "string",
            "pattern": "[\\w+=/]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>A keyed-hash message authentication code (HMAC) calculated using the secret key of\n            a user pool client and username plus the client ID in the message.</simpara>\n      ",
            "documentation": "\n        <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of\n            a user pool client and username plus the client ID in the message.</p>\n      ",
            "shape_name": "SecretHashType",
            "min_length": 1,
            "max_length": 128
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name of the user you wish to authenticate.</simpara>\n      ",
            "documentation": "\n        <p>The user name of the user you wish to authenticate.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "PasswordClaim": {
            "type": "structure",
            "members": {
              "SecretBlock": {
                "type": "blob",
                "zonbookDocumentation": "\n        <simpara>A secret block claim type for a password.</simpara>\n      ",
                "documentation": "\n        <p>A secret block claim type for a password.</p>\n      ",
                "shape_name": "BlobType"
              },
              "Signature": {
                "type": "blob",
                "zonbookDocumentation": "\n        <simpara>A signature claim type for a password.</simpara>\n      ",
                "documentation": "\n        <p>A signature claim type for a password.</p>\n      ",
                "shape_name": "BlobType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The password claim of the authentication request.</simpara>\n      ",
            "documentation": "\n        <p>The password claim of the authentication request.</p>\n      ",
            "sensitive": true,
            "required": true,
            "shape_name": "PasswordClaimType"
          },
          "Timestamp": {
            "type": "timestamp",
            "zonbookDocumentation": "\n        <simpara>The timestamp of the authentication request.</simpara>\n      ",
            "documentation": "\n        <p>The timestamp of the authentication request.</p>\n      ",
            "shape_name": "DateType"
          },
          "AnalyticsMetadata": {
            "type": "structure",
            "members": {
              "AnalyticsEndpointId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The endpoint ID.</simpara>\n      ",
                "documentation": "\n        <p>The endpoint ID.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>An Amazon Pinpoint analytics endpoint.</simpara>\n        <simpara>An endpoint uniquely identifies a mobile device, email address, or phone number\n            that can receive messages from Amazon Pinpoint analytics.</simpara>\n      ",
            "documentation": "\n        <p>An Amazon Pinpoint analytics endpoint.</p>\n        <p>An endpoint uniquely identifies a mobile device, email address, or phone number\n            that can receive messages from Amazon Pinpoint analytics.</p>\n      ",
            "shape_name": "AnalyticsMetadataType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to authenticate.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to authenticate.</p>\n      ",
        "shape_name": "AuthenticateRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "AuthenticationResult": {
            "type": "structure",
            "members": {
              "AccessToken": {
                "type": "string",
                "pattern": "[A-Za-z0-9-_=.]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The access token.</simpara>\n      ",
                "documentation": "\n        <p>The access token.</p>\n      ",
                "shape_name": "TokenModelType"
              },
              "ExpiresIn": {
                "type": "integer",
                "zonbookDocumentation": "\n        <simpara>The expiration period of the authentication result in seconds.</simpara>\n      ",
                "documentation": "\n        <p>The expiration period of the authentication result in seconds.</p>\n      ",
                "shape_name": "IntegerType"
              },
              "TokenType": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The token type.</simpara>\n      ",
                "documentation": "\n        <p>The token type.</p>\n      ",
                "shape_name": "StringType"
              },
              "RefreshToken": {
                "type": "string",
                "pattern": "[A-Za-z0-9-_=.]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The refresh token.</simpara>\n      ",
                "documentation": "\n        <p>The refresh token.</p>\n      ",
                "shape_name": "TokenModelType"
              },
              "IdToken": {
                "type": "string",
                "pattern": "[A-Za-z0-9-_=.]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The ID token.</simpara>\n      ",
                "documentation": "\n        <p>The ID token.</p>\n      ",
                "shape_name": "TokenModelType"
              },
              "NewDeviceMetadata": {
                "type": "structure",
                "members": {
                  "DeviceKey": {
                    "type": "string",
                    "pattern": "[\\w-]+_[0-9a-f-]+",
                    "zonbookDocumentation": "\n        <simpara>The device key.</simpara>\n      ",
                    "documentation": "\n        <p>The device key.</p>\n      ",
                    "shape_name": "DeviceKeyType",
                    "min_length": 1,
                    "max_length": 55
                  },
                  "DeviceGroupKey": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The device group key.</simpara>\n      ",
                    "documentation": "\n        <p>The device group key.</p>\n      ",
                    "shape_name": "StringType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The new device metadata from an authentication result.</simpara>\n      ",
                "documentation": "\n        <p>The new device metadata from an authentication result.</p>\n      ",
                "shape_name": "NewDeviceMetadataType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The result of the authentication response.</simpara>\n      ",
            "documentation": "\n        <p>The result of the authentication response.</p>\n      ",
            "shape_name": "AuthenticationResultType"
          },
          "AuthState": {
            "type": "string",
            "pattern": "[A-Za-z0-9-_+/=]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The authorization state of the authentication response.</simpara>\n      ",
            "documentation": "\n        <p>The authorization state of the authentication response.</p>\n      ",
            "shape_name": "AuthStateType"
          },
          "CodeDeliveryDetails": {
            "type": "structure",
            "members": {
              "Destination": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The destination for the code delivery details.</simpara>\n      ",
                "documentation": "\n        <p>The destination for the code delivery details.</p>\n      ",
                "shape_name": "StringType"
              },
              "DeliveryMedium": {
                "type": "string",
                "enum": [
                  "SMS",
                  "EMAIL"
                ],
                "zonbookDocumentation": "\n        <simpara>The delivery medium (email message or phone number).</simpara>\n      ",
                "documentation": "\n        <p>The delivery medium (email message or phone number).</p>\n      ",
                "shape_name": "DeliveryMediumType"
              },
              "AttributeName": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "zonbookDocumentation": "\n        <simpara>The attribute name.</simpara>\n      ",
                "documentation": "\n        <p>The attribute name.</p>\n      ",
                "shape_name": "AttributeNameType",
                "min_length": 1,
                "max_length": 32
              }
            },
            "zonbookDocumentation": "\n        <simpara>The code delivery details returned by the server in the response to the\n            authentication request.</simpara>\n      ",
            "documentation": "\n        <p>The code delivery details returned by the server in the response to the\n            authentication request.</p>\n      ",
            "shape_name": "CodeDeliveryDetailsType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the authentication response.</simpara>\n      ",
        "documentation": "\n        <p>Represents the authentication response.</p>\n      ",
        "shape_name": "AuthenticateResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UnexpectedLambdaException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UserLambdaValidationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</p>\n      ",
          "shape_name": "InvalidLambdaResponseException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an MFA method not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an MFA method not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito cannot find a multi-factor\n            authentication (MFA) method.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito cannot find a multi-factor\n            authentication (MFA) method.</p>\n      ",
          "shape_name": "MFAMethodNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message retuned when the invalid SMS role access policy exception is\n            thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message retuned when the invalid SMS role access policy exception is\n            thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</simpara>\n      ",
          "documentation": "\n        <p>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</p>\n      ",
          "shape_name": "InvalidSmsRoleAccessPolicyException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the role trust relationship for the SMS message is\n            invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the role trust relationship for the SMS message is\n            invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <emphasis role=\"bold\">cognito-idp.amazonaws.com</emphasis> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <b>cognito-idp.amazonaws.com</b> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</p>\n      ",
          "shape_name": "InvalidSmsRoleTrustRelationshipException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when you have an unverified email address or the identity\n            policy is not set on an email address that Amazon Cognito can access.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when you have an unverified email address or the identity\n            policy is not set on an email address that Amazon Cognito can access.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito is not allowed to use your email\n            identity. HTTP status code: 400.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito is not allowed to use your email\n            identity. HTTP status code: 400.</p>\n      ",
          "shape_name": "InvalidEmailRoleAccessPolicyException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message sent when a verification code fails to deliver successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message sent when a verification code fails to deliver successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a verification code fails to deliver\n            successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a verification code fails to deliver\n            successfully.</p>\n      ",
          "shape_name": "CodeDeliveryFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>The second step in the authentication flow of Secure Remote Password protocol (SRP)\n            for authenticating a user to get ID, access and refresh tokens. To learn more about the\n            first step, see .</p>\n      "
    },
    "EnhanceAuth": {
      "name": "EnhanceAuth",
      "input": {
        "type": "structure",
        "members": {
          "ClientId": {
            "type": "string",
            "pattern": "[\\w+]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The ID of the client associated with the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The ID of the client associated with the user pool.</p>\n      ",
            "required": true,
            "shape_name": "ClientIdType",
            "min_length": 1,
            "max_length": 128
          },
          "SecretHash": {
            "type": "string",
            "pattern": "[\\w+=/]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>A keyed-hash message authentication code (HMAC) calculated using the secret key of\n            a user pool client and username plus the client ID in the message.</simpara>\n      ",
            "documentation": "\n        <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of\n            a user pool client and username plus the client ID in the message.</p>\n      ",
            "shape_name": "SecretHashType",
            "min_length": 1,
            "max_length": 128
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name of the user for whom you wish to enhance authentication.</simpara>\n      ",
            "documentation": "\n        <p>The user name of the user for whom you wish to enhance authentication.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "AuthState": {
            "type": "string",
            "pattern": "[A-Za-z0-9-_+/=]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The authentication state.</simpara>\n      ",
            "documentation": "\n        <p>The authentication state.</p>\n      ",
            "required": true,
            "shape_name": "AuthStateType"
          },
          "Code": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The code returned from the enhanced authentication request.</simpara>\n      ",
            "documentation": "\n        <p>The code returned from the enhanced authentication request.</p>\n      ",
            "required": true,
            "shape_name": "StringType"
          },
          "AnalyticsMetadata": {
            "type": "structure",
            "members": {
              "AnalyticsEndpointId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The endpoint ID.</simpara>\n      ",
                "documentation": "\n        <p>The endpoint ID.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>An Amazon Pinpoint analytics endpoint.</simpara>\n        <simpara>An endpoint uniquely identifies a mobile device, email address, or phone number\n            that can receive messages from Amazon Pinpoint analytics.</simpara>\n      ",
            "documentation": "\n        <p>An Amazon Pinpoint analytics endpoint.</p>\n        <p>An endpoint uniquely identifies a mobile device, email address, or phone number\n            that can receive messages from Amazon Pinpoint analytics.</p>\n      ",
            "shape_name": "AnalyticsMetadataType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request by the developer to enhance the authentication on a user\n            pool.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request by the developer to enhance the authentication on a user\n            pool.</p>\n      ",
        "shape_name": "EnhanceAuthRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "AuthenticationResult": {
            "type": "structure",
            "members": {
              "AccessToken": {
                "type": "string",
                "pattern": "[A-Za-z0-9-_=.]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The access token.</simpara>\n      ",
                "documentation": "\n        <p>The access token.</p>\n      ",
                "shape_name": "TokenModelType"
              },
              "ExpiresIn": {
                "type": "integer",
                "zonbookDocumentation": "\n        <simpara>The expiration period of the authentication result in seconds.</simpara>\n      ",
                "documentation": "\n        <p>The expiration period of the authentication result in seconds.</p>\n      ",
                "shape_name": "IntegerType"
              },
              "TokenType": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The token type.</simpara>\n      ",
                "documentation": "\n        <p>The token type.</p>\n      ",
                "shape_name": "StringType"
              },
              "RefreshToken": {
                "type": "string",
                "pattern": "[A-Za-z0-9-_=.]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The refresh token.</simpara>\n      ",
                "documentation": "\n        <p>The refresh token.</p>\n      ",
                "shape_name": "TokenModelType"
              },
              "IdToken": {
                "type": "string",
                "pattern": "[A-Za-z0-9-_=.]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The ID token.</simpara>\n      ",
                "documentation": "\n        <p>The ID token.</p>\n      ",
                "shape_name": "TokenModelType"
              },
              "NewDeviceMetadata": {
                "type": "structure",
                "members": {
                  "DeviceKey": {
                    "type": "string",
                    "pattern": "[\\w-]+_[0-9a-f-]+",
                    "zonbookDocumentation": "\n        <simpara>The device key.</simpara>\n      ",
                    "documentation": "\n        <p>The device key.</p>\n      ",
                    "shape_name": "DeviceKeyType",
                    "min_length": 1,
                    "max_length": 55
                  },
                  "DeviceGroupKey": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The device group key.</simpara>\n      ",
                    "documentation": "\n        <p>The device group key.</p>\n      ",
                    "shape_name": "StringType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The new device metadata from an authentication result.</simpara>\n      ",
                "documentation": "\n        <p>The new device metadata from an authentication result.</p>\n      ",
                "shape_name": "NewDeviceMetadataType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The authentication result from the enhanced authentication response.</simpara>\n      ",
            "documentation": "\n        <p>The authentication result from the enhanced authentication response.</p>\n      ",
            "shape_name": "AuthenticationResultType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the enhanced authentication request.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the enhanced authentication request.</p>\n      ",
        "shape_name": "EnhanceAuthResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message provided when the code mismatch exception is thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message provided when the code mismatch exception is thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown if the provided code does not match what the server was\n            expecting.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown if the provided code does not match what the server was\n            expecting.</p>\n      ",
          "shape_name": "CodeMismatchException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the expired code exception is thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the expired code exception is thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown if a code has expired.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown if a code has expired.</p>\n      ",
          "shape_name": "ExpiredCodeException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UnexpectedLambdaException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UserLambdaValidationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</p>\n      ",
          "shape_name": "InvalidLambdaResponseException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Grants the ability to supply a multi-factor authentication (MFA) token for an\n            MFA-enabled user to get the ID, access, and refresh tokens.</p>\n      "
    },
    "RefreshTokens": {
      "name": "RefreshTokens",
      "input": {
        "type": "structure",
        "members": {
          "ClientId": {
            "type": "string",
            "pattern": "[\\w+]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The ID of the client associated with the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The ID of the client associated with the user pool.</p>\n      ",
            "required": true,
            "shape_name": "ClientIdType",
            "min_length": 1,
            "max_length": 128
          },
          "ClientSecret": {
            "type": "string",
            "pattern": "[\\w+]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The client secret for a user's request to refresh tokens.</simpara>\n      ",
            "documentation": "\n        <p>The client secret for a user's request to refresh tokens.</p>\n      ",
            "shape_name": "ClientSecretType",
            "min_length": 1,
            "max_length": 64
          },
          "RefreshToken": {
            "type": "string",
            "pattern": "[A-Za-z0-9-_=.]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The refresh token for a user's request to refresh tokens.</simpara>\n      ",
            "documentation": "\n        <p>The refresh token for a user's request to refresh tokens.</p>\n      ",
            "required": true,
            "shape_name": "TokenModelType"
          },
          "AnalyticsMetadata": {
            "type": "structure",
            "members": {
              "AnalyticsEndpointId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The endpoint ID.</simpara>\n      ",
                "documentation": "\n        <p>The endpoint ID.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>An Amazon Pinpoint analytics endpoint.</simpara>\n        <simpara>An endpoint uniquely identifies a mobile device, email address, or phone number\n            that can receive messages from Amazon Pinpoint analytics.</simpara>\n      ",
            "documentation": "\n        <p>An Amazon Pinpoint analytics endpoint.</p>\n        <p>An endpoint uniquely identifies a mobile device, email address, or phone number\n            that can receive messages from Amazon Pinpoint analytics.</p>\n      ",
            "shape_name": "AnalyticsMetadataType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to refresh tokens.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to refresh tokens.</p>\n      ",
        "shape_name": "RefreshTokensRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "AuthenticationResult": {
            "type": "structure",
            "members": {
              "AccessToken": {
                "type": "string",
                "pattern": "[A-Za-z0-9-_=.]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The access token.</simpara>\n      ",
                "documentation": "\n        <p>The access token.</p>\n      ",
                "shape_name": "TokenModelType"
              },
              "ExpiresIn": {
                "type": "integer",
                "zonbookDocumentation": "\n        <simpara>The expiration period of the authentication result in seconds.</simpara>\n      ",
                "documentation": "\n        <p>The expiration period of the authentication result in seconds.</p>\n      ",
                "shape_name": "IntegerType"
              },
              "TokenType": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The token type.</simpara>\n      ",
                "documentation": "\n        <p>The token type.</p>\n      ",
                "shape_name": "StringType"
              },
              "RefreshToken": {
                "type": "string",
                "pattern": "[A-Za-z0-9-_=.]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The refresh token.</simpara>\n      ",
                "documentation": "\n        <p>The refresh token.</p>\n      ",
                "shape_name": "TokenModelType"
              },
              "IdToken": {
                "type": "string",
                "pattern": "[A-Za-z0-9-_=.]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The ID token.</simpara>\n      ",
                "documentation": "\n        <p>The ID token.</p>\n      ",
                "shape_name": "TokenModelType"
              },
              "NewDeviceMetadata": {
                "type": "structure",
                "members": {
                  "DeviceKey": {
                    "type": "string",
                    "pattern": "[\\w-]+_[0-9a-f-]+",
                    "zonbookDocumentation": "\n        <simpara>The device key.</simpara>\n      ",
                    "documentation": "\n        <p>The device key.</p>\n      ",
                    "shape_name": "DeviceKeyType",
                    "min_length": 1,
                    "max_length": 55
                  },
                  "DeviceGroupKey": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The device group key.</simpara>\n      ",
                    "documentation": "\n        <p>The device group key.</p>\n      ",
                    "shape_name": "StringType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The new device metadata from an authentication result.</simpara>\n      ",
                "documentation": "\n        <p>The new device metadata from an authentication result.</p>\n      ",
                "shape_name": "NewDeviceMetadataType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The authentication result from the server's response to the request to refresh\n            tokens.</simpara>\n      ",
            "documentation": "\n        <p>The authentication result from the server's response to the request to refresh\n            tokens.</p>\n      ",
            "shape_name": "AuthenticationResultType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server when the user wants to refresh\n            tokens.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server when the user wants to refresh\n            tokens.</p>\n      ",
        "shape_name": "RefreshTokensResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UnexpectedLambdaException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UserLambdaValidationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</p>\n      ",
          "shape_name": "InvalidLambdaResponseException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Refreshes the tokens for the specified client ID.</p>\n      "
    },
    "InitiateAuth": {
      "name": "InitiateAuth",
      "input": {
        "type": "structure",
        "members": {
          "AuthFlow": {
            "type": "string",
            "enum": [
              "USER_SRP_AUTH",
              "REFRESH_TOKEN_AUTH",
              "REFRESH_TOKEN",
              "CUSTOM_AUTH",
              "ADMIN_NO_SRP_AUTH",
              "USER_PASSWORD_AUTH"
            ],
            "zonbookDocumentation": "\n        <simpara>The authentication flow for this call to execute. The API action will depend on\n            this value. For example: </simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>\n                  <code>REFRESH_TOKEN_AUTH</code> will take in a valid refresh token and\n                    return new tokens.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>USER_SRP_AUTH</code> will take in <code>USERNAME</code> and\n                        <code>SRP_A</code> and return the SRP variables to be used for next\n                    challenge execution.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>USER_PASSWORD_AUTH</code> will take in <code>USERNAME</code> and\n                <code>PASSWORD</code> and return the next challenge or tokens.</simpara>\n            </listitem>\n        </itemizedlist>\n        <simpara>Valid values include:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>\n                  <code>USER_SRP_AUTH</code>: Authentication flow for the Secure Remote\n                    Password (SRP) protocol.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>REFRESH_TOKEN_AUTH</code>/<code>REFRESH_TOKEN</code>: Authentication\n                    flow for refreshing the access token and ID token by supplying a valid refresh\n                    token.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>CUSTOM_AUTH</code>: Custom authentication flow.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>USER_PASSWORD_AUTH</code>: Non-SRP authentication flow; USERNAME and\n                    PASSWORD are passed directly. If a user migration Lambda trigger is set, this\n                    flow will invoke the user migration Lambda if the USERNAME is not found in the\n                    user pool. </simpara>\n            </listitem>\n        </itemizedlist>\n        <simpara>\n            <code>ADMIN_NO_SRP_AUTH</code> is not a valid value.</simpara>\n      ",
            "documentation": "\n        <p>The authentication flow for this call to execute. The API action will depend on\n            this value. For example: </p>\n        <ul>\n            <li>\n                <p>\n                  <code>REFRESH_TOKEN_AUTH</code> will take in a valid refresh token and\n                    return new tokens.</p>\n            </li>\n            <li>\n                <p>\n                  <code>USER_SRP_AUTH</code> will take in <code>USERNAME</code> and\n                        <code>SRP_A</code> and return the SRP variables to be used for next\n                    challenge execution.</p>\n            </li>\n            <li>\n               <p>\n                  <code>USER_PASSWORD_AUTH</code> will take in <code>USERNAME</code> and\n                <code>PASSWORD</code> and return the next challenge or tokens.</p>\n            </li>\n         </ul>\n        <p>Valid values include:</p>\n        <ul>\n            <li>\n                <p>\n                  <code>USER_SRP_AUTH</code>: Authentication flow for the Secure Remote\n                    Password (SRP) protocol.</p>\n            </li>\n            <li>\n                <p>\n                  <code>REFRESH_TOKEN_AUTH</code>/<code>REFRESH_TOKEN</code>: Authentication\n                    flow for refreshing the access token and ID token by supplying a valid refresh\n                    token.</p>\n            </li>\n            <li>\n                <p>\n                  <code>CUSTOM_AUTH</code>: Custom authentication flow.</p>\n            </li>\n            <li>\n                <p>\n                  <code>USER_PASSWORD_AUTH</code>: Non-SRP authentication flow; USERNAME and\n                    PASSWORD are passed directly. If a user migration Lambda trigger is set, this\n                    flow will invoke the user migration Lambda if the USERNAME is not found in the\n                    user pool. </p>\n            </li>\n         </ul>\n        <p>\n            <code>ADMIN_NO_SRP_AUTH</code> is not a valid value.</p>\n      ",
            "required": true,
            "shape_name": "AuthFlowType"
          },
          "AuthParameters": {
            "type": "map",
            "zonbookDocumentation": "\n        <simpara>The authentication parameters. These are inputs corresponding to the\n                <code>AuthFlow</code> that you are invoking. The required values depend on the value\n            of <code>AuthFlow</code>:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>For <code>USER_SRP_AUTH</code>: <code>USERNAME</code> (required),\n                        <code>SRP_A</code> (required), <code>SECRET_HASH</code> (required if the app\n                    client is configured with a client secret), <code>DEVICE_KEY</code>\n               </simpara>\n            </listitem>\n            <listitem>\n                <simpara>For <code>REFRESH_TOKEN_AUTH/REFRESH_TOKEN</code>:\n                        <code>REFRESH_TOKEN</code> (required), <code>SECRET_HASH</code> (required if\n                    the app client is configured with a client secret),\n                    <code>DEVICE_KEY</code>\n               </simpara>\n            </listitem>\n            <listitem>\n                <simpara>For <code>CUSTOM_AUTH</code>: <code>USERNAME</code> (required),\n                        <code>SECRET_HASH</code> (if app client is configured with client secret),\n                        <code>DEVICE_KEY</code>\n               </simpara>\n            </listitem>\n        </itemizedlist>\n      ",
            "documentation": "\n        <p>The authentication parameters. These are inputs corresponding to the\n                <code>AuthFlow</code> that you are invoking. The required values depend on the value\n            of <code>AuthFlow</code>:</p>\n        <ul>\n            <li>\n                <p>For <code>USER_SRP_AUTH</code>: <code>USERNAME</code> (required),\n                        <code>SRP_A</code> (required), <code>SECRET_HASH</code> (required if the app\n                    client is configured with a client secret), <code>DEVICE_KEY</code>\n               </p>\n            </li>\n            <li>\n                <p>For <code>REFRESH_TOKEN_AUTH/REFRESH_TOKEN</code>:\n                        <code>REFRESH_TOKEN</code> (required), <code>SECRET_HASH</code> (required if\n                    the app client is configured with a client secret),\n                    <code>DEVICE_KEY</code>\n               </p>\n            </li>\n            <li>\n                <p>For <code>CUSTOM_AUTH</code>: <code>USERNAME</code> (required),\n                        <code>SECRET_HASH</code> (if app client is configured with client secret),\n                        <code>DEVICE_KEY</code>\n               </p>\n            </li>\n         </ul>\n      ",
            "shape_name": "AuthParametersType",
            "keys": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            },
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          },
          "ClientMetadata": {
            "type": "map",
            "zonbookDocumentation": "\n        <simpara>This is a random key-value pair map which can contain any key and will be passed to\n            your PreAuthentication Lambda trigger as-is. It can be used to implement additional\n            validations around authentication.</simpara>\n      ",
            "documentation": "\n        <p>This is a random key-value pair map which can contain any key and will be passed to\n            your PreAuthentication Lambda trigger as-is. It can be used to implement additional\n            validations around authentication.</p>\n      ",
            "shape_name": "ClientMetadataType",
            "keys": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            },
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          },
          "ClientId": {
            "type": "string",
            "pattern": "[\\w+]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The app client ID.</simpara>\n      ",
            "documentation": "\n        <p>The app client ID.</p>\n      ",
            "required": true,
            "shape_name": "ClientIdType",
            "min_length": 1,
            "max_length": 128
          },
          "AnalyticsMetadata": {
            "type": "structure",
            "members": {
              "AnalyticsEndpointId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The endpoint ID.</simpara>\n      ",
                "documentation": "\n        <p>The endpoint ID.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The Amazon Pinpoint analytics metadata for collecting metrics for\n                <code>InitiateAuth</code> calls.</simpara>\n      ",
            "documentation": "\n        <p>The Amazon Pinpoint analytics metadata for collecting metrics for\n                <code>InitiateAuth</code> calls.</p>\n      ",
            "shape_name": "AnalyticsMetadataType"
          },
          "UserContextData": {
            "type": "structure",
            "members": {
              "EncodedData": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</simpara>\n      ",
                "documentation": "\n        <p>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</simpara>\n      ",
            "documentation": "\n        <p>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</p>\n      ",
            "shape_name": "UserContextDataType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Initiates the authentication request.</simpara>\n      ",
        "documentation": "\n        <p>Initiates the authentication request.</p>\n      ",
        "shape_name": "InitiateAuthRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "ChallengeName": {
            "type": "string",
            "enum": [
              "SMS_MFA",
              "SOFTWARE_TOKEN_MFA",
              "SELECT_MFA_TYPE",
              "MFA_SETUP",
              "PASSWORD_VERIFIER",
              "CUSTOM_CHALLENGE",
              "DEVICE_SRP_AUTH",
              "DEVICE_PASSWORD_VERIFIER",
              "ADMIN_NO_SRP_AUTH",
              "NEW_PASSWORD_REQUIRED"
            ],
            "zonbookDocumentation": "\n        <simpara>The name of the challenge which you are responding to with this call. This is\n            returned to you in the <code>AdminInitiateAuth</code> response if you need to pass\n            another challenge.</simpara>\n        <simpara>Valid values include the following. Note that all of these challenges require\n                <code>USERNAME</code> and <code>SECRET_HASH</code> (if applicable) in the\n            parameters.</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>\n                  <code>SMS_MFA</code>: Next challenge is to supply an\n                        <code>SMS_MFA_CODE</code>, delivered via SMS.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>PASSWORD_VERIFIER</code>: Next challenge is to supply\n                        <code>PASSWORD_CLAIM_SIGNATURE</code>,\n                        <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, and <code>TIMESTAMP</code> after\n                    the client-side SRP calculations.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>CUSTOM_CHALLENGE</code>: This is returned if your custom\n                    authentication flow determines that the user should pass another challenge\n                    before tokens are issued.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>DEVICE_SRP_AUTH</code>: If device tracking was enabled on your user\n                    pool and the previous challenges were passed, this challenge is returned so that\n                    Amazon Cognito can start tracking this device.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>DEVICE_PASSWORD_VERIFIER</code>: Similar to\n                        <code>PASSWORD_VERIFIER</code>, but for devices only.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>NEW_PASSWORD_REQUIRED</code>: For users which are required to change\n                    their passwords after successful first login. This challenge should be passed\n                    with <code>NEW_PASSWORD</code> and any other required attributes.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
            "documentation": "\n        <p>The name of the challenge which you are responding to with this call. This is\n            returned to you in the <code>AdminInitiateAuth</code> response if you need to pass\n            another challenge.</p>\n        <p>Valid values include the following. Note that all of these challenges require\n                <code>USERNAME</code> and <code>SECRET_HASH</code> (if applicable) in the\n            parameters.</p>\n        <ul>\n            <li>\n                <p>\n                  <code>SMS_MFA</code>: Next challenge is to supply an\n                        <code>SMS_MFA_CODE</code>, delivered via SMS.</p>\n            </li>\n            <li>\n                <p>\n                  <code>PASSWORD_VERIFIER</code>: Next challenge is to supply\n                        <code>PASSWORD_CLAIM_SIGNATURE</code>,\n                        <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, and <code>TIMESTAMP</code> after\n                    the client-side SRP calculations.</p>\n            </li>\n            <li>\n                <p>\n                  <code>CUSTOM_CHALLENGE</code>: This is returned if your custom\n                    authentication flow determines that the user should pass another challenge\n                    before tokens are issued.</p>\n            </li>\n            <li>\n                <p>\n                  <code>DEVICE_SRP_AUTH</code>: If device tracking was enabled on your user\n                    pool and the previous challenges were passed, this challenge is returned so that\n                    Amazon Cognito can start tracking this device.</p>\n            </li>\n            <li>\n                <p>\n                  <code>DEVICE_PASSWORD_VERIFIER</code>: Similar to\n                        <code>PASSWORD_VERIFIER</code>, but for devices only.</p>\n            </li>\n            <li>\n                <p>\n                  <code>NEW_PASSWORD_REQUIRED</code>: For users which are required to change\n                    their passwords after successful first login. This challenge should be passed\n                    with <code>NEW_PASSWORD</code> and any other required attributes.</p>\n            </li>\n         </ul>\n      ",
            "shape_name": "ChallengeNameType"
          },
          "Session": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The session which should be passed both ways in challenge-response calls to the\n            service. If the <xref linkend=\"API_InitiateAuth\"/> or <xref linkend=\"API_RespondToAuthChallenge\"/> API call determines that the caller needs to\n            go through another challenge, they return a session with other challenge parameters.\n            This session should be passed as it is to the next <code>RespondToAuthChallenge</code>\n            API call.</simpara>\n      ",
            "documentation": "\n        <p>The session which should be passed both ways in challenge-response calls to the\n            service. If the  or  API call determines that the caller needs to\n            go through another challenge, they return a session with other challenge parameters.\n            This session should be passed as it is to the next <code>RespondToAuthChallenge</code>\n            API call.</p>\n      ",
            "shape_name": "SessionType",
            "min_length": 20,
            "max_length": 2048
          },
          "ChallengeParameters": {
            "type": "map",
            "zonbookDocumentation": "\n        <simpara>The challenge parameters. These are returned to you in the\n                <code>InitiateAuth</code> response if you need to pass another challenge. The\n            responses in this parameter should be used to compute inputs to the next call\n                (<code>RespondToAuthChallenge</code>). </simpara>\n        <simpara>All challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if\n            applicable).</simpara>\n      ",
            "documentation": "\n        <p>The challenge parameters. These are returned to you in the\n                <code>InitiateAuth</code> response if you need to pass another challenge. The\n            responses in this parameter should be used to compute inputs to the next call\n                (<code>RespondToAuthChallenge</code>). </p>\n        <p>All challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if\n            applicable).</p>\n      ",
            "shape_name": "ChallengeParametersType",
            "keys": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            },
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          },
          "AuthenticationResult": {
            "type": "structure",
            "members": {
              "AccessToken": {
                "type": "string",
                "pattern": "[A-Za-z0-9-_=.]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The access token.</simpara>\n      ",
                "documentation": "\n        <p>The access token.</p>\n      ",
                "shape_name": "TokenModelType"
              },
              "ExpiresIn": {
                "type": "integer",
                "zonbookDocumentation": "\n        <simpara>The expiration period of the authentication result in seconds.</simpara>\n      ",
                "documentation": "\n        <p>The expiration period of the authentication result in seconds.</p>\n      ",
                "shape_name": "IntegerType"
              },
              "TokenType": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The token type.</simpara>\n      ",
                "documentation": "\n        <p>The token type.</p>\n      ",
                "shape_name": "StringType"
              },
              "RefreshToken": {
                "type": "string",
                "pattern": "[A-Za-z0-9-_=.]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The refresh token.</simpara>\n      ",
                "documentation": "\n        <p>The refresh token.</p>\n      ",
                "shape_name": "TokenModelType"
              },
              "IdToken": {
                "type": "string",
                "pattern": "[A-Za-z0-9-_=.]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The ID token.</simpara>\n      ",
                "documentation": "\n        <p>The ID token.</p>\n      ",
                "shape_name": "TokenModelType"
              },
              "NewDeviceMetadata": {
                "type": "structure",
                "members": {
                  "DeviceKey": {
                    "type": "string",
                    "pattern": "[\\w-]+_[0-9a-f-]+",
                    "zonbookDocumentation": "\n        <simpara>The device key.</simpara>\n      ",
                    "documentation": "\n        <p>The device key.</p>\n      ",
                    "shape_name": "DeviceKeyType",
                    "min_length": 1,
                    "max_length": 55
                  },
                  "DeviceGroupKey": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The device group key.</simpara>\n      ",
                    "documentation": "\n        <p>The device group key.</p>\n      ",
                    "shape_name": "StringType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The new device metadata from an authentication result.</simpara>\n      ",
                "documentation": "\n        <p>The new device metadata from an authentication result.</p>\n      ",
                "shape_name": "NewDeviceMetadataType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The result of the authentication response. This is only returned if the caller does\n            not need to pass another challenge. If the caller does need to pass another challenge\n            before it gets tokens, <code>ChallengeName</code>, <code>ChallengeParameters</code>, and\n                <code>Session</code> are returned.</simpara>\n      ",
            "documentation": "\n        <p>The result of the authentication response. This is only returned if the caller does\n            not need to pass another challenge. If the caller does need to pass another challenge\n            before it gets tokens, <code>ChallengeName</code>, <code>ChallengeParameters</code>, and\n                <code>Session</code> are returned.</p>\n      ",
            "shape_name": "AuthenticationResultType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Initiates the authentication response.</simpara>\n      ",
        "documentation": "\n        <p>Initiates the authentication response.</p>\n      ",
        "shape_name": "InitiateAuthResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UnexpectedLambdaException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the user pool configuration is invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the user pool configuration is invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user pool configuration is invalid.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user pool configuration is invalid.</p>\n      ",
          "shape_name": "InvalidUserPoolConfigurationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UserLambdaValidationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</p>\n      ",
          "shape_name": "InvalidLambdaResponseException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Initiates the authentication flow.</p>\n      "
    },
    "RespondToAuthChallenge": {
      "name": "RespondToAuthChallenge",
      "input": {
        "type": "structure",
        "members": {
          "ClientId": {
            "type": "string",
            "pattern": "[\\w+]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The app client ID.</simpara>\n      ",
            "documentation": "\n        <p>The app client ID.</p>\n      ",
            "required": true,
            "shape_name": "ClientIdType",
            "min_length": 1,
            "max_length": 128
          },
          "ChallengeName": {
            "type": "string",
            "enum": [
              "SMS_MFA",
              "SOFTWARE_TOKEN_MFA",
              "SELECT_MFA_TYPE",
              "MFA_SETUP",
              "PASSWORD_VERIFIER",
              "CUSTOM_CHALLENGE",
              "DEVICE_SRP_AUTH",
              "DEVICE_PASSWORD_VERIFIER",
              "ADMIN_NO_SRP_AUTH",
              "NEW_PASSWORD_REQUIRED"
            ],
            "zonbookDocumentation": "\n        <simpara>The challenge name. For more information, see <xref linkend=\"API_InitiateAuth\"/>.</simpara>\n        <simpara>\n            <code>ADMIN_NO_SRP_AUTH</code> is not a valid value.</simpara>\n      ",
            "documentation": "\n        <p>The challenge name. For more information, see .</p>\n        <p>\n            <code>ADMIN_NO_SRP_AUTH</code> is not a valid value.</p>\n      ",
            "required": true,
            "shape_name": "ChallengeNameType"
          },
          "Session": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The session which should be passed both ways in challenge-response calls to the\n            service. If <code>InitiateAuth</code> or <code>RespondToAuthChallenge</code> API call\n            determines that the caller needs to go through another challenge, they return a session\n            with other challenge parameters. This session should be passed as it is to the next\n                <code>RespondToAuthChallenge</code> API call.</simpara>\n      ",
            "documentation": "\n        <p>The session which should be passed both ways in challenge-response calls to the\n            service. If <code>InitiateAuth</code> or <code>RespondToAuthChallenge</code> API call\n            determines that the caller needs to go through another challenge, they return a session\n            with other challenge parameters. This session should be passed as it is to the next\n                <code>RespondToAuthChallenge</code> API call.</p>\n      ",
            "shape_name": "SessionType",
            "min_length": 20,
            "max_length": 2048
          },
          "ChallengeResponses": {
            "type": "map",
            "zonbookDocumentation": "\n        <simpara>The challenge responses. These are inputs corresponding to the value of\n                <code>ChallengeName</code>, for example:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>\n                  <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>,\n                        <code>SECRET_HASH</code> (if app client is configured with client\n                    secret).</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>,\n                        <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>,\n                        <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured\n                    with client secret).</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                    <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other\n                    required attributes, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app\n                    client is configured with client secret). </simpara>\n            </listitem>\n        </itemizedlist>\n      ",
            "documentation": "\n        <p>The challenge responses. These are inputs corresponding to the value of\n                <code>ChallengeName</code>, for example:</p>\n        <ul>\n            <li>\n                <p>\n                  <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>,\n                        <code>SECRET_HASH</code> (if app client is configured with client\n                    secret).</p>\n            </li>\n            <li>\n                <p>\n                  <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>,\n                        <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>,\n                        <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured\n                    with client secret).</p>\n            </li>\n            <li>\n                <p>\n                    <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other\n                    required attributes, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app\n                    client is configured with client secret). </p>\n            </li>\n         </ul>\n      ",
            "shape_name": "ChallengeResponsesType",
            "keys": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            },
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          },
          "AnalyticsMetadata": {
            "type": "structure",
            "members": {
              "AnalyticsEndpointId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The endpoint ID.</simpara>\n      ",
                "documentation": "\n        <p>The endpoint ID.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The Amazon Pinpoint analytics metadata for collecting metrics for\n                <code>RespondToAuthChallenge</code> calls.</simpara>\n      ",
            "documentation": "\n        <p>The Amazon Pinpoint analytics metadata for collecting metrics for\n                <code>RespondToAuthChallenge</code> calls.</p>\n      ",
            "shape_name": "AnalyticsMetadataType"
          },
          "UserContextData": {
            "type": "structure",
            "members": {
              "EncodedData": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</simpara>\n      ",
                "documentation": "\n        <p>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</simpara>\n      ",
            "documentation": "\n        <p>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</p>\n      ",
            "shape_name": "UserContextDataType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>The request to respond to an authentication challenge.</simpara>\n      ",
        "documentation": "\n        <p>The request to respond to an authentication challenge.</p>\n      ",
        "shape_name": "RespondToAuthChallengeRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "ChallengeName": {
            "type": "string",
            "enum": [
              "SMS_MFA",
              "SOFTWARE_TOKEN_MFA",
              "SELECT_MFA_TYPE",
              "MFA_SETUP",
              "PASSWORD_VERIFIER",
              "CUSTOM_CHALLENGE",
              "DEVICE_SRP_AUTH",
              "DEVICE_PASSWORD_VERIFIER",
              "ADMIN_NO_SRP_AUTH",
              "NEW_PASSWORD_REQUIRED"
            ],
            "zonbookDocumentation": "\n        <simpara>The challenge name. For more information, see <xref linkend=\"API_InitiateAuth\"/>.</simpara>\n      ",
            "documentation": "\n        <p>The challenge name. For more information, see .</p>\n      ",
            "shape_name": "ChallengeNameType"
          },
          "Session": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The session which should be passed both ways in challenge-response calls to the\n            service. If the <xref linkend=\"API_InitiateAuth\"/> or <xref linkend=\"API_RespondToAuthChallenge\"/> API call determines that the caller needs to\n            go through another challenge, they return a session with other challenge parameters.\n            This session should be passed as it is to the next <code>RespondToAuthChallenge</code>\n            API call.</simpara>\n      ",
            "documentation": "\n        <p>The session which should be passed both ways in challenge-response calls to the\n            service. If the  or  API call determines that the caller needs to\n            go through another challenge, they return a session with other challenge parameters.\n            This session should be passed as it is to the next <code>RespondToAuthChallenge</code>\n            API call.</p>\n      ",
            "shape_name": "SessionType",
            "min_length": 20,
            "max_length": 2048
          },
          "ChallengeParameters": {
            "type": "map",
            "zonbookDocumentation": "\n        <simpara>The challenge parameters. For more information, see <xref linkend=\"API_InitiateAuth\"/>.</simpara>\n      ",
            "documentation": "\n        <p>The challenge parameters. For more information, see .</p>\n      ",
            "shape_name": "ChallengeParametersType",
            "keys": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            },
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          },
          "AuthenticationResult": {
            "type": "structure",
            "members": {
              "AccessToken": {
                "type": "string",
                "pattern": "[A-Za-z0-9-_=.]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The access token.</simpara>\n      ",
                "documentation": "\n        <p>The access token.</p>\n      ",
                "shape_name": "TokenModelType"
              },
              "ExpiresIn": {
                "type": "integer",
                "zonbookDocumentation": "\n        <simpara>The expiration period of the authentication result in seconds.</simpara>\n      ",
                "documentation": "\n        <p>The expiration period of the authentication result in seconds.</p>\n      ",
                "shape_name": "IntegerType"
              },
              "TokenType": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The token type.</simpara>\n      ",
                "documentation": "\n        <p>The token type.</p>\n      ",
                "shape_name": "StringType"
              },
              "RefreshToken": {
                "type": "string",
                "pattern": "[A-Za-z0-9-_=.]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The refresh token.</simpara>\n      ",
                "documentation": "\n        <p>The refresh token.</p>\n      ",
                "shape_name": "TokenModelType"
              },
              "IdToken": {
                "type": "string",
                "pattern": "[A-Za-z0-9-_=.]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The ID token.</simpara>\n      ",
                "documentation": "\n        <p>The ID token.</p>\n      ",
                "shape_name": "TokenModelType"
              },
              "NewDeviceMetadata": {
                "type": "structure",
                "members": {
                  "DeviceKey": {
                    "type": "string",
                    "pattern": "[\\w-]+_[0-9a-f-]+",
                    "zonbookDocumentation": "\n        <simpara>The device key.</simpara>\n      ",
                    "documentation": "\n        <p>The device key.</p>\n      ",
                    "shape_name": "DeviceKeyType",
                    "min_length": 1,
                    "max_length": 55
                  },
                  "DeviceGroupKey": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The device group key.</simpara>\n      ",
                    "documentation": "\n        <p>The device group key.</p>\n      ",
                    "shape_name": "StringType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The new device metadata from an authentication result.</simpara>\n      ",
                "documentation": "\n        <p>The new device metadata from an authentication result.</p>\n      ",
                "shape_name": "NewDeviceMetadataType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The result returned by the server in response to the request to respond to the\n            authentication challenge.</simpara>\n      ",
            "documentation": "\n        <p>The result returned by the server in response to the request to respond to the\n            authentication challenge.</p>\n      ",
            "shape_name": "AuthenticationResultType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>The response to respond to the authentication challenge.</simpara>\n      ",
        "documentation": "\n        <p>The response to respond to the authentication challenge.</p>\n      ",
        "shape_name": "RespondToAuthChallengeResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message provided when the code mismatch exception is thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message provided when the code mismatch exception is thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown if the provided code does not match what the server was\n            expecting.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown if the provided code does not match what the server was\n            expecting.</p>\n      ",
          "shape_name": "CodeMismatchException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the expired code exception is thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the expired code exception is thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown if a code has expired.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown if a code has expired.</p>\n      ",
          "shape_name": "ExpiredCodeException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UnexpectedLambdaException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UserLambdaValidationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid user\n            password exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid user\n            password exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            password.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            password.</p>\n      ",
          "shape_name": "InvalidPasswordException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</p>\n      ",
          "shape_name": "InvalidLambdaResponseException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the user pool configuration is invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the user pool configuration is invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user pool configuration is invalid.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user pool configuration is invalid.</p>\n      ",
          "shape_name": "InvalidUserPoolConfigurationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an MFA method not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an MFA method not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito cannot find a multi-factor\n            authentication (MFA) method.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito cannot find a multi-factor\n            authentication (MFA) method.</p>\n      ",
          "shape_name": "MFAMethodNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message retuned when the invalid SMS role access policy exception is\n            thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message retuned when the invalid SMS role access policy exception is\n            thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</simpara>\n      ",
          "documentation": "\n        <p>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</p>\n      ",
          "shape_name": "InvalidSmsRoleAccessPolicyException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the role trust relationship for the SMS message is\n            invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the role trust relationship for the SMS message is\n            invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <emphasis role=\"bold\">cognito-idp.amazonaws.com</emphasis> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <b>cognito-idp.amazonaws.com</b> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</p>\n      ",
          "shape_name": "InvalidSmsRoleTrustRelationshipException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message sent to the user when an alias exists.</simpara>\n      ",
              "documentation": "\n        <p>The message sent to the user when an alias exists.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user tries to confirm the account with an email or\n            phone number that has already been supplied as an alias from a different account. This\n            exception tells user that an account with this email or phone already exists.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user tries to confirm the account with an email or\n            phone number that has already been supplied as an alias from a different account. This\n            exception tells user that an account with this email or phone already exists.</p>\n      ",
          "shape_name": "AliasExistsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "MessageType",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the software token TOTP multi-factor authentication\n            (MFA) is not enabled for the user pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the software token TOTP multi-factor authentication\n            (MFA) is not enabled for the user pool.</p>\n      ",
          "shape_name": "SoftwareTokenMFANotFoundException"
        }
      ],
      "documentation": "\n        <p>Responds to the authentication challenge.</p>\n      "
    },
    "AssociateSoftwareToken": {
      "name": "AssociateSoftwareToken",
      "input": {
        "type": "structure",
        "members": {
          "AccessToken": {
            "type": "string",
            "pattern": "[A-Za-z0-9-_=.]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The access token.</simpara>\n      ",
            "documentation": "\n        <p>The access token.</p>\n      ",
            "shape_name": "TokenModelType"
          },
          "Session": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The session which should be passed both ways in challenge-response calls to the\n            service. This allows authentication of the user as part of the MFA setup\n            process.</simpara>\n      ",
            "documentation": "\n        <p>The session which should be passed both ways in challenge-response calls to the\n            service. This allows authentication of the user as part of the MFA setup\n            process.</p>\n      ",
            "shape_name": "SessionType",
            "min_length": 20,
            "max_length": 2048
          }
        },
        "shape_name": "AssociateSoftwareTokenRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "SecretCode": {
            "type": "string",
            "pattern": "[A-Za-z0-9]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>A unique generated shared secret code that is used in the TOTP algorithm to\n            generate a one time code.</simpara>\n      ",
            "documentation": "\n        <p>A unique generated shared secret code that is used in the TOTP algorithm to\n            generate a one time code.</p>\n      ",
            "shape_name": "SecretCodeType",
            "min_length": 16
          },
          "Session": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The session which should be passed both ways in challenge-response calls to the\n            service. This allows authentication of the user as part of the MFA setup\n            process.</simpara>\n      ",
            "documentation": "\n        <p>The session which should be passed both ways in challenge-response calls to the\n            service. This allows authentication of the user as part of the MFA setup\n            process.</p>\n      ",
            "shape_name": "SessionType",
            "min_length": 20,
            "max_length": 2048
          }
        },
        "shape_name": "AssociateSoftwareTokenResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "MessageType",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the software token TOTP multi-factor authentication\n            (MFA) is not enabled for the user pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the software token TOTP multi-factor authentication\n            (MFA) is not enabled for the user pool.</p>\n      ",
          "shape_name": "SoftwareTokenMFANotFoundException"
        }
      ],
      "documentation": "\n        <p>Returns a unique generated shared secret key code for the user account. The request\n            takes an access token or a session string, but not both.</p>\n      "
    },
    "VerifySoftwareToken": {
      "name": "VerifySoftwareToken",
      "input": {
        "type": "structure",
        "members": {
          "AccessToken": {
            "type": "string",
            "pattern": "[A-Za-z0-9-_=.]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The access token.</simpara>\n      ",
            "documentation": "\n        <p>The access token.</p>\n      ",
            "shape_name": "TokenModelType"
          },
          "Session": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The session which should be passed both ways in challenge-response calls to the\n            service.</simpara>\n      ",
            "documentation": "\n        <p>The session which should be passed both ways in challenge-response calls to the\n            service.</p>\n      ",
            "shape_name": "SessionType",
            "min_length": 20,
            "max_length": 2048
          },
          "UserCode": {
            "type": "string",
            "pattern": "[0-9]+",
            "zonbookDocumentation": "\n        <simpara>The one time password computed using the secret code returned by <xref linkend=\"API_AssociateSoftwareToken\"/>\n         </simpara>\n      ",
            "documentation": "\n        <p>The one time password computed using the secret code returned by </p>\n      ",
            "required": true,
            "shape_name": "SoftwareTokenMFAUserCodeType",
            "min_length": 6,
            "max_length": 6
          },
          "FriendlyDeviceName": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The friendly device name.</simpara>\n      ",
            "documentation": "\n        <p>The friendly device name.</p>\n      ",
            "shape_name": "StringType"
          }
        },
        "shape_name": "VerifySoftwareTokenRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "ERROR"
            ],
            "zonbookDocumentation": "\n        <simpara>The status of the verify software token.</simpara>\n      ",
            "documentation": "\n        <p>The status of the verify software token.</p>\n      ",
            "shape_name": "VerifySoftwareTokenResponseType"
          },
          "Session": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The session which should be passed both ways in challenge-response calls to the\n            service.</simpara>\n      ",
            "documentation": "\n        <p>The session which should be passed both ways in challenge-response calls to the\n            service.</p>\n      ",
            "shape_name": "SessionType",
            "min_length": 20,
            "max_length": 2048
          }
        },
        "shape_name": "VerifySoftwareTokenResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the user pool configuration is invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the user pool configuration is invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user pool configuration is invalid.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user pool configuration is invalid.</p>\n      ",
          "shape_name": "InvalidUserPoolConfigurationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "MessageType",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when there is a code mismatch and the service fails to\n            configure the software token TOTP multi-factor authentication (MFA).</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when there is a code mismatch and the service fails to\n            configure the software token TOTP multi-factor authentication (MFA).</p>\n      ",
          "shape_name": "EnableSoftwareTokenMFAException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "MessageType",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the software token TOTP multi-factor authentication\n            (MFA) is not enabled for the user pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the software token TOTP multi-factor authentication\n            (MFA) is not enabled for the user pool.</p>\n      ",
          "shape_name": "SoftwareTokenMFANotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message provided when the code mismatch exception is thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message provided when the code mismatch exception is thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown if the provided code does not match what the server was\n            expecting.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown if the provided code does not match what the server was\n            expecting.</p>\n      ",
          "shape_name": "CodeMismatchException"
        }
      ],
      "documentation": "\n        <p>Use this API to register a user's entered TOTP code and mark the user's software\n            token MFA status as \"verified\" if successful. The request takes an access token or a\n            session string, but not both.</p>\n      "
    },
    "ChangePassword": {
      "name": "ChangePassword",
      "input": {
        "type": "structure",
        "members": {
          "PreviousPassword": {
            "type": "string",
            "sensitive": true,
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>The old password.</simpara>\n      ",
            "documentation": "\n        <p>The old password.</p>\n      ",
            "required": true,
            "shape_name": "PasswordType",
            "min_length": 6,
            "max_length": 256
          },
          "ProposedPassword": {
            "type": "string",
            "sensitive": true,
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>The new password.</simpara>\n      ",
            "documentation": "\n        <p>The new password.</p>\n      ",
            "required": true,
            "shape_name": "PasswordType",
            "min_length": 6,
            "max_length": 256
          },
          "AccessToken": {
            "type": "string",
            "pattern": "[A-Za-z0-9-_=.]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The access token.</simpara>\n      ",
            "documentation": "\n        <p>The access token.</p>\n      ",
            "required": true,
            "shape_name": "TokenModelType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to change a user password.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to change a user password.</p>\n      ",
        "shape_name": "ChangePasswordRequest"
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "zonbookDocumentation": "\n        <simpara>The response from the server to the change password request.</simpara>\n      ",
        "documentation": "\n        <p>The response from the server to the change password request.</p>\n      ",
        "shape_name": "ChangePasswordResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid user\n            password exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid user\n            password exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            password.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            password.</p>\n      ",
          "shape_name": "InvalidPasswordException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Changes the password for a specified user in a user pool.</p>\n      "
    },
    "GetUser": {
      "name": "GetUser",
      "input": {
        "type": "structure",
        "members": {
          "AccessToken": {
            "type": "string",
            "pattern": "[A-Za-z0-9-_=.]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The access token returned by the server response to get information about the\n            user.</simpara>\n      ",
            "documentation": "\n        <p>The access token returned by the server response to get information about the\n            user.</p>\n      ",
            "required": true,
            "shape_name": "TokenModelType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to get information about the user.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to get information about the user.</p>\n      ",
        "shape_name": "GetUserRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name of the user you wish to retrieve from the get user request.</simpara>\n      ",
            "documentation": "\n        <p>The user name of the user you wish to retrieve from the get user request.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "UserAttributes": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>An array of name-value pairs representing user attributes.</simpara>\n        <simpara>For custom attributes, you must prepend the <code>custom:</code> prefix to the\n            attribute name.</simpara>\n      ",
            "documentation": "\n        <p>An array of name-value pairs representing user attributes.</p>\n        <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the\n            attribute name.</p>\n      ",
            "required": true,
            "shape_name": "AttributeListType",
            "members": {
              "type": "structure",
              "members": {
                "Name": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "zonbookDocumentation": "\n        <simpara>The name of the attribute.</simpara>\n      ",
                  "documentation": "\n        <p>The name of the attribute.</p>\n      ",
                  "required": true,
                  "shape_name": "AttributeNameType",
                  "min_length": 1,
                  "max_length": 32
                },
                "Value": {
                  "type": "string",
                  "sensitive": true,
                  "zonbookDocumentation": "\n        <simpara>The value of the attribute.</simpara>\n      ",
                  "documentation": "\n        <p>The value of the attribute.</p>\n      ",
                  "shape_name": "AttributeValueType",
                  "max_length": 2048
                }
              },
              "zonbookDocumentation": "\n        <simpara>Specifies whether the attribute is standard or custom.</simpara>\n      ",
              "documentation": "\n        <p>Specifies whether the attribute is standard or custom.</p>\n      ",
              "shape_name": "AttributeType"
            }
          },
          "MFAOptions": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>Specifies the options for MFA (e.g., email or phone number).</simpara>\n      ",
            "documentation": "\n        <p>Specifies the options for MFA (e.g., email or phone number).</p>\n      ",
            "shape_name": "MFAOptionListType",
            "members": {
              "type": "structure",
              "members": {
                "DeliveryMedium": {
                  "type": "string",
                  "enum": [
                    "SMS",
                    "EMAIL"
                  ],
                  "zonbookDocumentation": "\n        <simpara>The delivery medium (email message or SMS message) to send the MFA code.</simpara>\n      ",
                  "documentation": "\n        <p>The delivery medium (email message or SMS message) to send the MFA code.</p>\n      ",
                  "shape_name": "DeliveryMediumType"
                },
                "AttributeName": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "zonbookDocumentation": "\n        <simpara>The attribute name of the MFA option type.</simpara>\n      ",
                  "documentation": "\n        <p>The attribute name of the MFA option type.</p>\n      ",
                  "shape_name": "AttributeNameType",
                  "min_length": 1,
                  "max_length": 32
                }
              },
              "zonbookDocumentation": "\n        <simpara>Specifies the different settings for multi-factor authentication (MFA).</simpara>\n      ",
              "documentation": "\n        <p>Specifies the different settings for multi-factor authentication (MFA).</p>\n      ",
              "shape_name": "MFAOptionType"
            }
          },
          "PreferredMfaSetting": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The user's preferred MFA setting.</simpara>\n      ",
            "documentation": "\n        <p>The user's preferred MFA setting.</p>\n      ",
            "shape_name": "StringType"
          },
          "UserMFASettingList": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The list of the user's MFA settings.</simpara>\n      ",
            "documentation": "\n        <p>The list of the user's MFA settings.</p>\n      ",
            "shape_name": "UserMFASettingListType",
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server from the request to get information about\n            the user.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server from the request to get information about\n            the user.</p>\n      ",
        "shape_name": "GetUserResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Gets the user attributes and metadata for a user.</p>\n      "
    },
    "UpdateUserAttributes": {
      "name": "UpdateUserAttributes",
      "input": {
        "type": "structure",
        "members": {
          "UserAttributes": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>An array of name-value pairs representing user attributes.</simpara>\n        <simpara>For custom attributes, you must prepend the <code>custom:</code> prefix to the\n            attribute name.</simpara>\n      ",
            "documentation": "\n        <p>An array of name-value pairs representing user attributes.</p>\n        <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the\n            attribute name.</p>\n      ",
            "required": true,
            "shape_name": "AttributeListType",
            "members": {
              "type": "structure",
              "members": {
                "Name": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "zonbookDocumentation": "\n        <simpara>The name of the attribute.</simpara>\n      ",
                  "documentation": "\n        <p>The name of the attribute.</p>\n      ",
                  "required": true,
                  "shape_name": "AttributeNameType",
                  "min_length": 1,
                  "max_length": 32
                },
                "Value": {
                  "type": "string",
                  "sensitive": true,
                  "zonbookDocumentation": "\n        <simpara>The value of the attribute.</simpara>\n      ",
                  "documentation": "\n        <p>The value of the attribute.</p>\n      ",
                  "shape_name": "AttributeValueType",
                  "max_length": 2048
                }
              },
              "zonbookDocumentation": "\n        <simpara>Specifies whether the attribute is standard or custom.</simpara>\n      ",
              "documentation": "\n        <p>Specifies whether the attribute is standard or custom.</p>\n      ",
              "shape_name": "AttributeType"
            }
          },
          "AccessToken": {
            "type": "string",
            "pattern": "[A-Za-z0-9-_=.]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The access token for the request to update user attributes.</simpara>\n      ",
            "documentation": "\n        <p>The access token for the request to update user attributes.</p>\n      ",
            "required": true,
            "shape_name": "TokenModelType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to update user attributes.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to update user attributes.</p>\n      ",
        "shape_name": "UpdateUserAttributesRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "CodeDeliveryDetailsList": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The code delivery details list from the server for the request to update user\n            attributes.</simpara>\n      ",
            "documentation": "\n        <p>The code delivery details list from the server for the request to update user\n            attributes.</p>\n      ",
            "shape_name": "CodeDeliveryDetailsListType",
            "members": {
              "type": "structure",
              "members": {
                "Destination": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>The destination for the code delivery details.</simpara>\n      ",
                  "documentation": "\n        <p>The destination for the code delivery details.</p>\n      ",
                  "shape_name": "StringType"
                },
                "DeliveryMedium": {
                  "type": "string",
                  "enum": [
                    "SMS",
                    "EMAIL"
                  ],
                  "zonbookDocumentation": "\n        <simpara>The delivery medium (email message or phone number).</simpara>\n      ",
                  "documentation": "\n        <p>The delivery medium (email message or phone number).</p>\n      ",
                  "shape_name": "DeliveryMediumType"
                },
                "AttributeName": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "zonbookDocumentation": "\n        <simpara>The attribute name.</simpara>\n      ",
                  "documentation": "\n        <p>The attribute name.</p>\n      ",
                  "shape_name": "AttributeNameType",
                  "min_length": 1,
                  "max_length": 32
                }
              },
              "zonbookDocumentation": "\n        <simpara>The code delivery details being returned from the server.</simpara>\n      ",
              "documentation": "\n        <p>The code delivery details being returned from the server.</p>\n      ",
              "shape_name": "CodeDeliveryDetailsType"
            }
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server for the request to update user\n            attributes.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server for the request to update user\n            attributes.</p>\n      ",
        "shape_name": "UpdateUserAttributesResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message provided when the code mismatch exception is thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message provided when the code mismatch exception is thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown if the provided code does not match what the server was\n            expecting.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown if the provided code does not match what the server was\n            expecting.</p>\n      ",
          "shape_name": "CodeMismatchException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the expired code exception is thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the expired code exception is thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown if a code has expired.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown if a code has expired.</p>\n      ",
          "shape_name": "ExpiredCodeException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UnexpectedLambdaException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UserLambdaValidationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</p>\n      ",
          "shape_name": "InvalidLambdaResponseException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message sent to the user when an alias exists.</simpara>\n      ",
              "documentation": "\n        <p>The message sent to the user when an alias exists.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user tries to confirm the account with an email or\n            phone number that has already been supplied as an alias from a different account. This\n            exception tells user that an account with this email or phone already exists.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user tries to confirm the account with an email or\n            phone number that has already been supplied as an alias from a different account. This\n            exception tells user that an account with this email or phone already exists.</p>\n      ",
          "shape_name": "AliasExistsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message retuned when the invalid SMS role access policy exception is\n            thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message retuned when the invalid SMS role access policy exception is\n            thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</simpara>\n      ",
          "documentation": "\n        <p>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</p>\n      ",
          "shape_name": "InvalidSmsRoleAccessPolicyException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the role trust relationship for the SMS message is\n            invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the role trust relationship for the SMS message is\n            invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <emphasis role=\"bold\">cognito-idp.amazonaws.com</emphasis> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <b>cognito-idp.amazonaws.com</b> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</p>\n      ",
          "shape_name": "InvalidSmsRoleTrustRelationshipException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when you have an unverified email address or the identity\n            policy is not set on an email address that Amazon Cognito can access.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when you have an unverified email address or the identity\n            policy is not set on an email address that Amazon Cognito can access.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito is not allowed to use your email\n            identity. HTTP status code: 400.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito is not allowed to use your email\n            identity. HTTP status code: 400.</p>\n      ",
          "shape_name": "InvalidEmailRoleAccessPolicyException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message sent when a verification code fails to deliver successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message sent when a verification code fails to deliver successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a verification code fails to deliver\n            successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a verification code fails to deliver\n            successfully.</p>\n      ",
          "shape_name": "CodeDeliveryFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Allows a user to update a specific attribute (one at a time).</p>\n      "
    },
    "DeleteUserAttributes": {
      "name": "DeleteUserAttributes",
      "input": {
        "type": "structure",
        "members": {
          "UserAttributeNames": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>An array of strings representing the user attribute names you wish to\n            delete.</simpara>\n        <simpara>For custom attributes, you must prepend the <code>custom:</code> prefix to the\n            attribute name.</simpara>\n      ",
            "documentation": "\n        <p>An array of strings representing the user attribute names you wish to\n            delete.</p>\n        <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the\n            attribute name.</p>\n      ",
            "required": true,
            "shape_name": "AttributeNameListType",
            "members": {
              "type": "string",
              "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
              "shape_name": "AttributeNameType",
              "documentation": null,
              "min_length": 1,
              "max_length": 32
            }
          },
          "AccessToken": {
            "type": "string",
            "pattern": "[A-Za-z0-9-_=.]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The access token used in the request to delete user attributes.</simpara>\n      ",
            "documentation": "\n        <p>The access token used in the request to delete user attributes.</p>\n      ",
            "required": true,
            "shape_name": "TokenModelType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to delete user attributes.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to delete user attributes.</p>\n      ",
        "shape_name": "DeleteUserAttributesRequest"
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server to delete user attributes.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server to delete user attributes.</p>\n      ",
        "shape_name": "DeleteUserAttributesResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Deletes the attributes for a user.</p>\n      "
    },
    "DeleteUser": {
      "name": "DeleteUser",
      "input": {
        "type": "structure",
        "members": {
          "AccessToken": {
            "type": "string",
            "pattern": "[A-Za-z0-9-_=.]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The access token from a request to delete a user.</simpara>\n      ",
            "documentation": "\n        <p>The access token from a request to delete a user.</p>\n      ",
            "required": true,
            "shape_name": "TokenModelType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to delete a user.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to delete a user.</p>\n      ",
        "shape_name": "DeleteUserRequest"
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Allows a user to delete himself or herself.</p>\n      "
    },
    "GetUserAttributeVerificationCode": {
      "name": "GetUserAttributeVerificationCode",
      "input": {
        "type": "structure",
        "members": {
          "AccessToken": {
            "type": "string",
            "pattern": "[A-Za-z0-9-_=.]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The access token returned by the server response to get the user attribute\n            verification code.</simpara>\n      ",
            "documentation": "\n        <p>The access token returned by the server response to get the user attribute\n            verification code.</p>\n      ",
            "required": true,
            "shape_name": "TokenModelType"
          },
          "AttributeName": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "zonbookDocumentation": "\n        <simpara>The attribute name returned by the server response to get the user attribute\n            verification code.</simpara>\n      ",
            "documentation": "\n        <p>The attribute name returned by the server response to get the user attribute\n            verification code.</p>\n      ",
            "required": true,
            "shape_name": "AttributeNameType",
            "min_length": 1,
            "max_length": 32
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to get user attribute verification.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to get user attribute verification.</p>\n      ",
        "shape_name": "GetUserAttributeVerificationCodeRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "CodeDeliveryDetails": {
            "type": "structure",
            "members": {
              "Destination": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The destination for the code delivery details.</simpara>\n      ",
                "documentation": "\n        <p>The destination for the code delivery details.</p>\n      ",
                "shape_name": "StringType"
              },
              "DeliveryMedium": {
                "type": "string",
                "enum": [
                  "SMS",
                  "EMAIL"
                ],
                "zonbookDocumentation": "\n        <simpara>The delivery medium (email message or phone number).</simpara>\n      ",
                "documentation": "\n        <p>The delivery medium (email message or phone number).</p>\n      ",
                "shape_name": "DeliveryMediumType"
              },
              "AttributeName": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "zonbookDocumentation": "\n        <simpara>The attribute name.</simpara>\n      ",
                "documentation": "\n        <p>The attribute name.</p>\n      ",
                "shape_name": "AttributeNameType",
                "min_length": 1,
                "max_length": 32
              }
            },
            "zonbookDocumentation": "\n        <simpara>The code delivery details returned by the server in response to the request to get\n            the user attribute verification code.</simpara>\n      ",
            "documentation": "\n        <p>The code delivery details returned by the server in response to the request to get\n            the user attribute verification code.</p>\n      ",
            "shape_name": "CodeDeliveryDetailsType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>The verification code response returned by the server response to get the user\n            attribute verification code.</simpara>\n      ",
        "documentation": "\n        <p>The verification code response returned by the server response to get the user\n            attribute verification code.</p>\n      ",
        "shape_name": "GetUserAttributeVerificationCodeResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UnexpectedLambdaException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UserLambdaValidationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</p>\n      ",
          "shape_name": "InvalidLambdaResponseException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message retuned when the invalid SMS role access policy exception is\n            thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message retuned when the invalid SMS role access policy exception is\n            thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</simpara>\n      ",
          "documentation": "\n        <p>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</p>\n      ",
          "shape_name": "InvalidSmsRoleAccessPolicyException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the role trust relationship for the SMS message is\n            invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the role trust relationship for the SMS message is\n            invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <emphasis role=\"bold\">cognito-idp.amazonaws.com</emphasis> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <b>cognito-idp.amazonaws.com</b> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</p>\n      ",
          "shape_name": "InvalidSmsRoleTrustRelationshipException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when you have an unverified email address or the identity\n            policy is not set on an email address that Amazon Cognito can access.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when you have an unverified email address or the identity\n            policy is not set on an email address that Amazon Cognito can access.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito is not allowed to use your email\n            identity. HTTP status code: 400.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito is not allowed to use your email\n            identity. HTTP status code: 400.</p>\n      ",
          "shape_name": "InvalidEmailRoleAccessPolicyException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message sent when a verification code fails to deliver successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message sent when a verification code fails to deliver successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a verification code fails to deliver\n            successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a verification code fails to deliver\n            successfully.</p>\n      ",
          "shape_name": "CodeDeliveryFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Gets the user attribute verification code for the specified attribute\n            name.</p>\n      "
    },
    "VerifyUserAttribute": {
      "name": "VerifyUserAttribute",
      "input": {
        "type": "structure",
        "members": {
          "AccessToken": {
            "type": "string",
            "pattern": "[A-Za-z0-9-_=.]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>Represents the access token of the request to verify user attributes.</simpara>\n      ",
            "documentation": "\n        <p>Represents the access token of the request to verify user attributes.</p>\n      ",
            "required": true,
            "shape_name": "TokenModelType"
          },
          "AttributeName": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "zonbookDocumentation": "\n        <simpara>The attribute name in the request to verify user attributes.</simpara>\n      ",
            "documentation": "\n        <p>The attribute name in the request to verify user attributes.</p>\n      ",
            "required": true,
            "shape_name": "AttributeNameType",
            "min_length": 1,
            "max_length": 32
          },
          "Code": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>The verification code in the request to verify user attributes.</simpara>\n      ",
            "documentation": "\n        <p>The verification code in the request to verify user attributes.</p>\n      ",
            "required": true,
            "shape_name": "ConfirmationCodeType",
            "min_length": 1,
            "max_length": 2048
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to verify user attributes.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to verify user attributes.</p>\n      ",
        "shape_name": "VerifyUserAttributeRequest"
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "zonbookDocumentation": "\n        <simpara>A container representing the response from the server from the request to verify\n            user attributes.</simpara>\n      ",
        "documentation": "\n        <p>A container representing the response from the server from the request to verify\n            user attributes.</p>\n      ",
        "shape_name": "VerifyUserAttributeResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message provided when the code mismatch exception is thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message provided when the code mismatch exception is thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown if the provided code does not match what the server was\n            expecting.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown if the provided code does not match what the server was\n            expecting.</p>\n      ",
          "shape_name": "CodeMismatchException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the expired code exception is thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the expired code exception is thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown if a code has expired.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown if a code has expired.</p>\n      ",
          "shape_name": "ExpiredCodeException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Verifies the specified user attributes in the user pool.</p>\n      "
    },
    "SetUserSettings": {
      "name": "SetUserSettings",
      "input": {
        "type": "structure",
        "members": {
          "AccessToken": {
            "type": "string",
            "pattern": "[A-Za-z0-9-_=.]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The access token for the set user settings request.</simpara>\n      ",
            "documentation": "\n        <p>The access token for the set user settings request.</p>\n      ",
            "required": true,
            "shape_name": "TokenModelType"
          },
          "MFAOptions": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>Specifies the options for MFA (e.g., email or phone number).</simpara>\n      ",
            "documentation": "\n        <p>Specifies the options for MFA (e.g., email or phone number).</p>\n      ",
            "required": true,
            "shape_name": "MFAOptionListType",
            "members": {
              "type": "structure",
              "members": {
                "DeliveryMedium": {
                  "type": "string",
                  "enum": [
                    "SMS",
                    "EMAIL"
                  ],
                  "zonbookDocumentation": "\n        <simpara>The delivery medium (email message or SMS message) to send the MFA code.</simpara>\n      ",
                  "documentation": "\n        <p>The delivery medium (email message or SMS message) to send the MFA code.</p>\n      ",
                  "shape_name": "DeliveryMediumType"
                },
                "AttributeName": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "zonbookDocumentation": "\n        <simpara>The attribute name of the MFA option type.</simpara>\n      ",
                  "documentation": "\n        <p>The attribute name of the MFA option type.</p>\n      ",
                  "shape_name": "AttributeNameType",
                  "min_length": 1,
                  "max_length": 32
                }
              },
              "zonbookDocumentation": "\n        <simpara>Specifies the different settings for multi-factor authentication (MFA).</simpara>\n      ",
              "documentation": "\n        <p>Specifies the different settings for multi-factor authentication (MFA).</p>\n      ",
              "shape_name": "MFAOptionType"
            }
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to set user settings.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to set user settings.</p>\n      ",
        "shape_name": "SetUserSettingsRequest"
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "zonbookDocumentation": "\n        <simpara>The response from the server for a set user settings request.</simpara>\n      ",
        "documentation": "\n        <p>The response from the server for a set user settings request.</p>\n      ",
        "shape_name": "SetUserSettingsResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Sets the user settings like multi-factor authentication (MFA). If MFA is to be\n            removed for a particular attribute pass the attribute with code delivery as null. If\n            null list is passed, all MFA options are removed.</p>\n      "
    },
    "SetUserMFAPreference": {
      "name": "SetUserMFAPreference",
      "input": {
        "type": "structure",
        "members": {
          "SMSMfaSettings": {
            "type": "structure",
            "members": {
              "Enabled": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>Specifies whether SMS text message MFA is enabled.</simpara>\n      ",
                "documentation": "\n        <p>Specifies whether SMS text message MFA is enabled.</p>\n      ",
                "shape_name": "BooleanType"
              },
              "PreferredMfa": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>The preferred MFA method.</simpara>\n      ",
                "documentation": "\n        <p>The preferred MFA method.</p>\n      ",
                "shape_name": "BooleanType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The SMS text message multi-factor authentication (MFA) settings.</simpara>\n      ",
            "documentation": "\n        <p>The SMS text message multi-factor authentication (MFA) settings.</p>\n      ",
            "shape_name": "SMSMfaSettingsType"
          },
          "SoftwareTokenMfaSettings": {
            "type": "structure",
            "members": {
              "Enabled": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>Specifies whether software token MFA is enabled.</simpara>\n      ",
                "documentation": "\n        <p>Specifies whether software token MFA is enabled.</p>\n      ",
                "shape_name": "BooleanType"
              },
              "PreferredMfa": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>The preferred MFA method.</simpara>\n      ",
                "documentation": "\n        <p>The preferred MFA method.</p>\n      ",
                "shape_name": "BooleanType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The time-based one-time password software token MFA settings.</simpara>\n      ",
            "documentation": "\n        <p>The time-based one-time password software token MFA settings.</p>\n      ",
            "shape_name": "SoftwareTokenMfaSettingsType"
          },
          "AccessToken": {
            "type": "string",
            "pattern": "[A-Za-z0-9-_=.]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The access token.</simpara>\n      ",
            "documentation": "\n        <p>The access token.</p>\n      ",
            "required": true,
            "shape_name": "TokenModelType"
          }
        },
        "shape_name": "SetUserMFAPreferenceRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "SetUserMFAPreferenceResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Set the user's multi-factor authentication (MFA) method preference.</p>\n      "
    },
    "GlobalSignOut": {
      "name": "GlobalSignOut",
      "input": {
        "type": "structure",
        "members": {
          "AccessToken": {
            "type": "string",
            "pattern": "[A-Za-z0-9-_=.]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The access token.</simpara>\n      ",
            "documentation": "\n        <p>The access token.</p>\n      ",
            "required": true,
            "shape_name": "TokenModelType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to sign out all devices.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to sign out all devices.</p>\n      ",
        "shape_name": "GlobalSignOutRequest"
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "zonbookDocumentation": "\n        <simpara>The response to the request to sign out all devices.</simpara>\n      ",
        "documentation": "\n        <p>The response to the request to sign out all devices.</p>\n      ",
        "shape_name": "GlobalSignOutResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Signs out users from all devices.</p>\n      "
    },
    "AdminEnableUser": {
      "name": "AdminEnableUser",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool where you want to enable the user.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool where you want to enable the user.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name of the user you wish to enable.</simpara>\n      ",
            "documentation": "\n        <p>The user name of the user you wish to enable.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request that enables the user as an administrator.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request that enables the user as an administrator.</p>\n      ",
        "shape_name": "AdminEnableUserRequest"
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server for the request to enable a user as an\n            administrator.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server for the request to enable a user as an\n            administrator.</p>\n      ",
        "shape_name": "AdminEnableUserResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Enables the specified user as an administrator. Works on any user.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "AdminDisableUser": {
      "name": "AdminDisableUser",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool where you want to disable the user.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool where you want to disable the user.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name of the user you wish to disable.</simpara>\n      ",
            "documentation": "\n        <p>The user name of the user you wish to disable.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to disable any user as an administrator.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to disable any user as an administrator.</p>\n      ",
        "shape_name": "AdminDisableUserRequest"
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response received from the server to disable the user as an\n            administrator.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response received from the server to disable the user as an\n            administrator.</p>\n      ",
        "shape_name": "AdminDisableUserResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Disables the specified user as an administrator. Works on any user.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "AdminConfirmSignUp": {
      "name": "AdminConfirmSignUp",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for which you want to confirm user registration.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for which you want to confirm user registration.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name for which you want to confirm user registration.</simpara>\n      ",
            "documentation": "\n        <p>The user name for which you want to confirm user registration.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to confirm user registration.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to confirm user registration.</p>\n      ",
        "shape_name": "AdminConfirmSignUpRequest"
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server for the request to confirm\n            registration.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server for the request to confirm\n            registration.</p>\n      ",
        "shape_name": "AdminConfirmSignUpResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UnexpectedLambdaException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UserLambdaValidationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many failed\n            attempts exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many failed\n            attempts exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many failed attempts for a\n            given action (e.g., sign in).</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many failed attempts for a\n            given action (e.g., sign in).</p>\n      ",
          "shape_name": "TooManyFailedAttemptsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</p>\n      ",
          "shape_name": "InvalidLambdaResponseException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Confirms user registration as an admin without using a confirmation code. Works on\n            any user.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "AdminResetUserPassword": {
      "name": "AdminResetUserPassword",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool where you want to reset the user's\n            password.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool where you want to reset the user's\n            password.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name of the user whose password you wish to reset.</simpara>\n      ",
            "documentation": "\n        <p>The user name of the user whose password you wish to reset.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to reset a user's password as an administrator.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to reset a user's password as an administrator.</p>\n      ",
        "shape_name": "AdminResetUserPasswordRequest"
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server to reset a user password as an\n            administrator.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server to reset a user password as an\n            administrator.</p>\n      ",
        "shape_name": "AdminResetUserPasswordResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UnexpectedLambdaException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UserLambdaValidationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</p>\n      ",
          "shape_name": "InvalidLambdaResponseException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message retuned when the invalid SMS role access policy exception is\n            thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message retuned when the invalid SMS role access policy exception is\n            thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</simpara>\n      ",
          "documentation": "\n        <p>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</p>\n      ",
          "shape_name": "InvalidSmsRoleAccessPolicyException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when you have an unverified email address or the identity\n            policy is not set on an email address that Amazon Cognito can access.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when you have an unverified email address or the identity\n            policy is not set on an email address that Amazon Cognito can access.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito is not allowed to use your email\n            identity. HTTP status code: 400.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito is not allowed to use your email\n            identity. HTTP status code: 400.</p>\n      ",
          "shape_name": "InvalidEmailRoleAccessPolicyException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the role trust relationship for the SMS message is\n            invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the role trust relationship for the SMS message is\n            invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <emphasis role=\"bold\">cognito-idp.amazonaws.com</emphasis> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <b>cognito-idp.amazonaws.com</b> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</p>\n      ",
          "shape_name": "InvalidSmsRoleTrustRelationshipException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Resets the specified user's password in a user pool as an administrator. Works on\n            any user.</p>\n        <p>When a developer calls this API, the current password is invalidated, so it must be\n            changed. If a user tries to sign in after the API is called, the app will get a\n            PasswordResetRequiredException exception back and should direct the user down the flow\n            to reset the password, which is the same as the forgot password flow. In addition, if\n            the user pool has phone verification selected and a verified phone number exists for the\n            user, or if email verification is selected and a verified email exists for the user,\n            calling this API will also result in sending a message to the end user with the code to\n            change their password.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "AdminGetUser": {
      "name": "AdminGetUser",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool where you want to get information about the\n            user.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool where you want to get information about the\n            user.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name of the user you wish to retrieve.</simpara>\n      ",
            "documentation": "\n        <p>The user name of the user you wish to retrieve.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to get the specified user as an administrator.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to get the specified user as an administrator.</p>\n      ",
        "shape_name": "AdminGetUserRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name of the user about whom you are receiving information.</simpara>\n      ",
            "documentation": "\n        <p>The user name of the user about whom you are receiving information.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "UserAttributes": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>An array of name-value pairs representing user attributes.</simpara>\n      ",
            "documentation": "\n        <p>An array of name-value pairs representing user attributes.</p>\n      ",
            "shape_name": "AttributeListType",
            "members": {
              "type": "structure",
              "members": {
                "Name": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "zonbookDocumentation": "\n        <simpara>The name of the attribute.</simpara>\n      ",
                  "documentation": "\n        <p>The name of the attribute.</p>\n      ",
                  "required": true,
                  "shape_name": "AttributeNameType",
                  "min_length": 1,
                  "max_length": 32
                },
                "Value": {
                  "type": "string",
                  "sensitive": true,
                  "zonbookDocumentation": "\n        <simpara>The value of the attribute.</simpara>\n      ",
                  "documentation": "\n        <p>The value of the attribute.</p>\n      ",
                  "shape_name": "AttributeValueType",
                  "max_length": 2048
                }
              },
              "zonbookDocumentation": "\n        <simpara>Specifies whether the attribute is standard or custom.</simpara>\n      ",
              "documentation": "\n        <p>Specifies whether the attribute is standard or custom.</p>\n      ",
              "shape_name": "AttributeType"
            }
          },
          "UserCreateDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n        <simpara>The date the user was created.</simpara>\n      ",
            "documentation": "\n        <p>The date the user was created.</p>\n      ",
            "shape_name": "DateType"
          },
          "UserLastModifiedDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n        <simpara>The date the user was last modified.</simpara>\n      ",
            "documentation": "\n        <p>The date the user was last modified.</p>\n      ",
            "shape_name": "DateType"
          },
          "Enabled": {
            "type": "boolean",
            "zonbookDocumentation": "\n        <simpara>Indicates that the status is enabled.</simpara>\n      ",
            "documentation": "\n        <p>Indicates that the status is enabled.</p>\n      ",
            "shape_name": "BooleanType"
          },
          "UserStatus": {
            "type": "string",
            "enum": [
              "UNCONFIRMED",
              "CONFIRMED",
              "ARCHIVED",
              "COMPROMISED",
              "UNKNOWN",
              "RESET_REQUIRED",
              "FORCE_CHANGE_PASSWORD"
            ],
            "zonbookDocumentation": "\n        <simpara>The user status. Can be one of the following:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>UNCONFIRMED - User has been created but not confirmed.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>CONFIRMED - User has been confirmed.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>ARCHIVED - User is no longer active.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>COMPROMISED - User is disabled due to a potential security\n                    threat.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>UNKNOWN - User status is not known.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
            "documentation": "\n        <p>The user status. Can be one of the following:</p>\n        <ul>\n            <li>\n                <p>UNCONFIRMED - User has been created but not confirmed.</p>\n            </li>\n            <li>\n                <p>CONFIRMED - User has been confirmed.</p>\n            </li>\n            <li>\n                <p>ARCHIVED - User is no longer active.</p>\n            </li>\n            <li>\n                <p>COMPROMISED - User is disabled due to a potential security\n                    threat.</p>\n            </li>\n            <li>\n                <p>UNKNOWN - User status is not known.</p>\n            </li>\n         </ul>\n      ",
            "shape_name": "UserStatusType"
          },
          "MFAOptions": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>Specifies the options for MFA (e.g., email or phone number).</simpara>\n      ",
            "documentation": "\n        <p>Specifies the options for MFA (e.g., email or phone number).</p>\n      ",
            "shape_name": "MFAOptionListType",
            "members": {
              "type": "structure",
              "members": {
                "DeliveryMedium": {
                  "type": "string",
                  "enum": [
                    "SMS",
                    "EMAIL"
                  ],
                  "zonbookDocumentation": "\n        <simpara>The delivery medium (email message or SMS message) to send the MFA code.</simpara>\n      ",
                  "documentation": "\n        <p>The delivery medium (email message or SMS message) to send the MFA code.</p>\n      ",
                  "shape_name": "DeliveryMediumType"
                },
                "AttributeName": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "zonbookDocumentation": "\n        <simpara>The attribute name of the MFA option type.</simpara>\n      ",
                  "documentation": "\n        <p>The attribute name of the MFA option type.</p>\n      ",
                  "shape_name": "AttributeNameType",
                  "min_length": 1,
                  "max_length": 32
                }
              },
              "zonbookDocumentation": "\n        <simpara>Specifies the different settings for multi-factor authentication (MFA).</simpara>\n      ",
              "documentation": "\n        <p>Specifies the different settings for multi-factor authentication (MFA).</p>\n      ",
              "shape_name": "MFAOptionType"
            }
          },
          "PreferredMfaSetting": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The user's preferred MFA setting.</simpara>\n      ",
            "documentation": "\n        <p>The user's preferred MFA setting.</p>\n      ",
            "shape_name": "StringType"
          },
          "UserMFASettingList": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The list of the user's MFA settings.</simpara>\n      ",
            "documentation": "\n        <p>The list of the user's MFA settings.</p>\n      ",
            "shape_name": "UserMFASettingListType",
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server from the request to get the specified user\n            as an administrator.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server from the request to get the specified user\n            as an administrator.</p>\n      ",
        "shape_name": "AdminGetUserResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Gets the specified user by user name in a user pool as an administrator. Works on\n            any user.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "AdminUpdateUserAttributes": {
      "name": "AdminUpdateUserAttributes",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool where you want to update user\n            attributes.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool where you want to update user\n            attributes.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name of the user for whom you want to update user attributes.</simpara>\n      ",
            "documentation": "\n        <p>The user name of the user for whom you want to update user attributes.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "UserAttributes": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>An array of name-value pairs representing user attributes.</simpara>\n        <simpara>For custom attributes, you must prepend the <code>custom:</code> prefix to the\n            attribute name.</simpara>\n      ",
            "documentation": "\n        <p>An array of name-value pairs representing user attributes.</p>\n        <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the\n            attribute name.</p>\n      ",
            "required": true,
            "shape_name": "AttributeListType",
            "members": {
              "type": "structure",
              "members": {
                "Name": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "zonbookDocumentation": "\n        <simpara>The name of the attribute.</simpara>\n      ",
                  "documentation": "\n        <p>The name of the attribute.</p>\n      ",
                  "required": true,
                  "shape_name": "AttributeNameType",
                  "min_length": 1,
                  "max_length": 32
                },
                "Value": {
                  "type": "string",
                  "sensitive": true,
                  "zonbookDocumentation": "\n        <simpara>The value of the attribute.</simpara>\n      ",
                  "documentation": "\n        <p>The value of the attribute.</p>\n      ",
                  "shape_name": "AttributeValueType",
                  "max_length": 2048
                }
              },
              "zonbookDocumentation": "\n        <simpara>Specifies whether the attribute is standard or custom.</simpara>\n      ",
              "documentation": "\n        <p>Specifies whether the attribute is standard or custom.</p>\n      ",
              "shape_name": "AttributeType"
            }
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to update the user's attributes as an\n            administrator.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to update the user's attributes as an\n            administrator.</p>\n      ",
        "shape_name": "AdminUpdateUserAttributesRequest"
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server for the request to update user attributes\n            as an administrator.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server for the request to update user attributes\n            as an administrator.</p>\n      ",
        "shape_name": "AdminUpdateUserAttributesResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UnexpectedLambdaException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UserLambdaValidationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</p>\n      ",
          "shape_name": "InvalidLambdaResponseException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message sent to the user when an alias exists.</simpara>\n      ",
              "documentation": "\n        <p>The message sent to the user when an alias exists.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user tries to confirm the account with an email or\n            phone number that has already been supplied as an alias from a different account. This\n            exception tells user that an account with this email or phone already exists.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user tries to confirm the account with an email or\n            phone number that has already been supplied as an alias from a different account. This\n            exception tells user that an account with this email or phone already exists.</p>\n      ",
          "shape_name": "AliasExistsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Updates the specified user's attributes, including developer attributes, as an\n            administrator. Works on any user.</p>\n        <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the\n            attribute name.</p>\n        <p>In addition to updating user attributes, this API can also be used to mark phone\n            and email as verified.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "AdminDeleteUserAttributes": {
      "name": "AdminDeleteUserAttributes",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool where you want to delete user\n            attributes.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool where you want to delete user\n            attributes.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name of the user from which you would like to delete attributes.</simpara>\n      ",
            "documentation": "\n        <p>The user name of the user from which you would like to delete attributes.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "UserAttributeNames": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>An array of strings representing the user attribute names you wish to\n            delete.</simpara>\n        <simpara>For custom attributes, you must prepend the <code>custom:</code> prefix to the\n            attribute name.</simpara>\n      ",
            "documentation": "\n        <p>An array of strings representing the user attribute names you wish to\n            delete.</p>\n        <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the\n            attribute name.</p>\n      ",
            "required": true,
            "shape_name": "AttributeNameListType",
            "members": {
              "type": "string",
              "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
              "shape_name": "AttributeNameType",
              "documentation": null,
              "min_length": 1,
              "max_length": 32
            }
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to delete user attributes as an administrator.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to delete user attributes as an administrator.</p>\n      ",
        "shape_name": "AdminDeleteUserAttributesRequest"
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response received from the server for a request to delete user\n            attributes.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response received from the server for a request to delete user\n            attributes.</p>\n      ",
        "shape_name": "AdminDeleteUserAttributesResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Deletes the user attributes in a user pool as an administrator. Works on any\n            user.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "AdminDeleteUser": {
      "name": "AdminDeleteUser",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool where you want to delete the user.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool where you want to delete the user.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name of the user you wish to delete.</simpara>\n      ",
            "documentation": "\n        <p>The user name of the user you wish to delete.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to delete a user as an administrator.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to delete a user as an administrator.</p>\n      ",
        "shape_name": "AdminDeleteUserRequest"
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Deletes a user as an administrator. Works on any user.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "AdminSetUserSettings": {
      "name": "AdminSetUserSettings",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool where you want to set the user's settings, such\n            as MFA options.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool where you want to set the user's settings, such\n            as MFA options.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name of the user for whom you wish to set user settings.</simpara>\n      ",
            "documentation": "\n        <p>The user name of the user for whom you wish to set user settings.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "MFAOptions": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>Specifies the options for MFA (e.g., email or phone number).</simpara>\n      ",
            "documentation": "\n        <p>Specifies the options for MFA (e.g., email or phone number).</p>\n      ",
            "required": true,
            "shape_name": "MFAOptionListType",
            "members": {
              "type": "structure",
              "members": {
                "DeliveryMedium": {
                  "type": "string",
                  "enum": [
                    "SMS",
                    "EMAIL"
                  ],
                  "zonbookDocumentation": "\n        <simpara>The delivery medium (email message or SMS message) to send the MFA code.</simpara>\n      ",
                  "documentation": "\n        <p>The delivery medium (email message or SMS message) to send the MFA code.</p>\n      ",
                  "shape_name": "DeliveryMediumType"
                },
                "AttributeName": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "zonbookDocumentation": "\n        <simpara>The attribute name of the MFA option type.</simpara>\n      ",
                  "documentation": "\n        <p>The attribute name of the MFA option type.</p>\n      ",
                  "shape_name": "AttributeNameType",
                  "min_length": 1,
                  "max_length": 32
                }
              },
              "zonbookDocumentation": "\n        <simpara>Specifies the different settings for multi-factor authentication (MFA).</simpara>\n      ",
              "documentation": "\n        <p>Specifies the different settings for multi-factor authentication (MFA).</p>\n      ",
              "shape_name": "MFAOptionType"
            }
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to set user settings as an administrator.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to set user settings as an administrator.</p>\n      ",
        "shape_name": "AdminSetUserSettingsRequest"
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server to set user settings as an\n            administrator.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server to set user settings as an\n            administrator.</p>\n      ",
        "shape_name": "AdminSetUserSettingsResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Sets all the user settings for a specified user name. Works on any user.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "AdminUserGlobalSignOut": {
      "name": "AdminUserGlobalSignOut",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user name.</simpara>\n      ",
            "documentation": "\n        <p>The user name.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          }
        },
        "zonbookDocumentation": "\n        <simpara>The request to sign out of all devices, as an administrator.</simpara>\n      ",
        "documentation": "\n        <p>The request to sign out of all devices, as an administrator.</p>\n      ",
        "shape_name": "AdminUserGlobalSignOutRequest"
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "zonbookDocumentation": "\n        <simpara>The global sign-out response, as an administrator.</simpara>\n      ",
        "documentation": "\n        <p>The global sign-out response, as an administrator.</p>\n      ",
        "shape_name": "AdminUserGlobalSignOutResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Signs out users from all devices, as an administrator.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "AdminInitiateAuth": {
      "name": "AdminInitiateAuth",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The ID of the Amazon Cognito user pool.</simpara>\n      ",
            "documentation": "\n        <p>The ID of the Amazon Cognito user pool.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "ClientId": {
            "type": "string",
            "pattern": "[\\w+]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The app client ID.</simpara>\n      ",
            "documentation": "\n        <p>The app client ID.</p>\n      ",
            "required": true,
            "shape_name": "ClientIdType",
            "min_length": 1,
            "max_length": 128
          },
          "AuthFlow": {
            "type": "string",
            "enum": [
              "USER_SRP_AUTH",
              "REFRESH_TOKEN_AUTH",
              "REFRESH_TOKEN",
              "CUSTOM_AUTH",
              "ADMIN_NO_SRP_AUTH",
              "USER_PASSWORD_AUTH"
            ],
            "zonbookDocumentation": "\n        <simpara>The authentication flow for this call to execute. The API action will depend on\n            this value. For example:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>\n                  <code>REFRESH_TOKEN_AUTH</code> will take in a valid refresh token and\n                    return new tokens.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>USER_SRP_AUTH</code> will take in <code>USERNAME</code> and\n                        <code>SRP_A</code> and return the SRP variables to be used for next\n                    challenge execution.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>USER_PASSWORD_AUTH</code> will take in <code>USERNAME</code> and\n                    <code>PASSWORD</code> and return the next challenge or tokens.</simpara>\n            </listitem>\n        </itemizedlist>\n        <simpara>Valid values include:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>\n                  <code>USER_SRP_AUTH</code>: Authentication flow for the Secure Remote\n                    Password (SRP) protocol.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>REFRESH_TOKEN_AUTH</code>/<code>REFRESH_TOKEN</code>: Authentication\n                    flow for refreshing the access token and ID token by supplying a valid refresh\n                    token.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>CUSTOM_AUTH</code>: Custom authentication flow.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>ADMIN_NO_SRP_AUTH</code>: Non-SRP authentication flow; you can pass\n                    in the USERNAME and PASSWORD directly if the flow is enabled for calling the app\n                    client.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>USER_PASSWORD_AUTH</code>: Non-SRP authentication flow; USERNAME and\n                    PASSWORD are passed directly. If a user migration Lambda trigger is set, this\n                    flow will invoke the user migration Lambda if the USERNAME is not found in the\n                    user pool. </simpara>\n            </listitem>\n        </itemizedlist>\n      ",
            "documentation": "\n        <p>The authentication flow for this call to execute. The API action will depend on\n            this value. For example:</p>\n        <ul>\n            <li>\n                <p>\n                  <code>REFRESH_TOKEN_AUTH</code> will take in a valid refresh token and\n                    return new tokens.</p>\n            </li>\n            <li>\n                <p>\n                  <code>USER_SRP_AUTH</code> will take in <code>USERNAME</code> and\n                        <code>SRP_A</code> and return the SRP variables to be used for next\n                    challenge execution.</p>\n            </li>\n            <li>\n                <p>\n                  <code>USER_PASSWORD_AUTH</code> will take in <code>USERNAME</code> and\n                    <code>PASSWORD</code> and return the next challenge or tokens.</p>\n            </li>\n         </ul>\n        <p>Valid values include:</p>\n        <ul>\n            <li>\n                <p>\n                  <code>USER_SRP_AUTH</code>: Authentication flow for the Secure Remote\n                    Password (SRP) protocol.</p>\n            </li>\n            <li>\n                <p>\n                  <code>REFRESH_TOKEN_AUTH</code>/<code>REFRESH_TOKEN</code>: Authentication\n                    flow for refreshing the access token and ID token by supplying a valid refresh\n                    token.</p>\n            </li>\n            <li>\n                <p>\n                  <code>CUSTOM_AUTH</code>: Custom authentication flow.</p>\n            </li>\n            <li>\n                <p>\n                  <code>ADMIN_NO_SRP_AUTH</code>: Non-SRP authentication flow; you can pass\n                    in the USERNAME and PASSWORD directly if the flow is enabled for calling the app\n                    client.</p>\n            </li>\n            <li>\n                <p>\n                  <code>USER_PASSWORD_AUTH</code>: Non-SRP authentication flow; USERNAME and\n                    PASSWORD are passed directly. If a user migration Lambda trigger is set, this\n                    flow will invoke the user migration Lambda if the USERNAME is not found in the\n                    user pool. </p>\n            </li>\n         </ul>\n      ",
            "required": true,
            "shape_name": "AuthFlowType"
          },
          "AuthParameters": {
            "type": "map",
            "zonbookDocumentation": "\n        <simpara>The authentication parameters. These are inputs corresponding to the\n                <code>AuthFlow</code> that you are invoking. The required values depend on the value\n            of <code>AuthFlow</code>:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>For <code>USER_SRP_AUTH</code>: <code>USERNAME</code> (required),\n                        <code>SRP_A</code> (required), <code>SECRET_HASH</code> (required if the app\n                    client is configured with a client secret), <code>DEVICE_KEY</code>\n               </simpara>\n            </listitem>\n            <listitem>\n                <simpara>For <code>REFRESH_TOKEN_AUTH/REFRESH_TOKEN</code>:\n                        <code>REFRESH_TOKEN</code> (required), <code>SECRET_HASH</code> (required if\n                    the app client is configured with a client secret),\n                    <code>DEVICE_KEY</code>\n               </simpara>\n            </listitem>\n            <listitem>\n                <simpara>For <code>ADMIN_NO_SRP_AUTH</code>: <code>USERNAME</code> (required),\n                        <code>SECRET_HASH</code> (if app client is configured with client secret),\n                        <code>PASSWORD</code> (required), <code>DEVICE_KEY</code>\n               </simpara>\n            </listitem>\n            <listitem>\n                <simpara>For <code>CUSTOM_AUTH</code>: <code>USERNAME</code> (required),\n                        <code>SECRET_HASH</code> (if app client is configured with client secret),\n                        <code>DEVICE_KEY</code>\n               </simpara>\n            </listitem>\n        </itemizedlist>\n      ",
            "documentation": "\n        <p>The authentication parameters. These are inputs corresponding to the\n                <code>AuthFlow</code> that you are invoking. The required values depend on the value\n            of <code>AuthFlow</code>:</p>\n        <ul>\n            <li>\n                <p>For <code>USER_SRP_AUTH</code>: <code>USERNAME</code> (required),\n                        <code>SRP_A</code> (required), <code>SECRET_HASH</code> (required if the app\n                    client is configured with a client secret), <code>DEVICE_KEY</code>\n               </p>\n            </li>\n            <li>\n                <p>For <code>REFRESH_TOKEN_AUTH/REFRESH_TOKEN</code>:\n                        <code>REFRESH_TOKEN</code> (required), <code>SECRET_HASH</code> (required if\n                    the app client is configured with a client secret),\n                    <code>DEVICE_KEY</code>\n               </p>\n            </li>\n            <li>\n                <p>For <code>ADMIN_NO_SRP_AUTH</code>: <code>USERNAME</code> (required),\n                        <code>SECRET_HASH</code> (if app client is configured with client secret),\n                        <code>PASSWORD</code> (required), <code>DEVICE_KEY</code>\n               </p>\n            </li>\n            <li>\n                <p>For <code>CUSTOM_AUTH</code>: <code>USERNAME</code> (required),\n                        <code>SECRET_HASH</code> (if app client is configured with client secret),\n                        <code>DEVICE_KEY</code>\n               </p>\n            </li>\n         </ul>\n      ",
            "shape_name": "AuthParametersType",
            "keys": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            },
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          },
          "ClientMetadata": {
            "type": "map",
            "zonbookDocumentation": "\n        <simpara>This is a random key-value pair map which can contain any key and will be passed to\n            your PreAuthentication Lambda trigger as-is. It can be used to implement additional\n            validations around authentication.</simpara>\n      ",
            "documentation": "\n        <p>This is a random key-value pair map which can contain any key and will be passed to\n            your PreAuthentication Lambda trigger as-is. It can be used to implement additional\n            validations around authentication.</p>\n      ",
            "shape_name": "ClientMetadataType",
            "keys": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            },
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          },
          "AnalyticsMetadata": {
            "type": "structure",
            "members": {
              "AnalyticsEndpointId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The endpoint ID.</simpara>\n      ",
                "documentation": "\n        <p>The endpoint ID.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The analytics metadata for collecting Amazon Pinpoint metrics for\n                <code>AdminInitiateAuth</code> calls.</simpara>\n      ",
            "documentation": "\n        <p>The analytics metadata for collecting Amazon Pinpoint metrics for\n                <code>AdminInitiateAuth</code> calls.</p>\n      ",
            "shape_name": "AnalyticsMetadataType"
          },
          "ContextData": {
            "type": "structure",
            "members": {
              "IpAddress": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Source IP address of your user.</simpara>\n      ",
                "documentation": "\n        <p>Source IP address of your user.</p>\n      ",
                "required": true,
                "shape_name": "StringType"
              },
              "ServerName": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Your server endpoint where this API is invoked.</simpara>\n      ",
                "documentation": "\n        <p>Your server endpoint where this API is invoked.</p>\n      ",
                "required": true,
                "shape_name": "StringType"
              },
              "ServerPath": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Your server path where this API is invoked. </simpara>\n      ",
                "documentation": "\n        <p>Your server path where this API is invoked. </p>\n      ",
                "required": true,
                "shape_name": "StringType"
              },
              "HttpHeaders": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>HttpHeaders received on your server in same order.</simpara>\n      ",
                "documentation": "\n        <p>HttpHeaders received on your server in same order.</p>\n      ",
                "required": true,
                "shape_name": "HttpHeaderList",
                "members": {
                  "type": "structure",
                  "members": {
                    "headerName": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The header name</simpara>\n      ",
                      "documentation": "\n        <p>The header name</p>\n      ",
                      "shape_name": "StringType"
                    },
                    "headerValue": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The header value.</simpara>\n      ",
                      "documentation": "\n        <p>The header value.</p>\n      ",
                      "shape_name": "StringType"
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>The HTTP header.</simpara>\n      ",
                  "documentation": "\n        <p>The HTTP header.</p>\n      ",
                  "shape_name": "HttpHeader"
                }
              },
              "EncodedData": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Encoded data containing device fingerprinting details,\n            collected using the Amazon Cognito context data collection library.</simpara>\n      ",
                "documentation": "\n        <p>Encoded data containing device fingerprinting details,\n            collected using the Amazon Cognito context data collection library.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</simpara>\n      ",
            "documentation": "\n        <p>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</p>\n      ",
            "shape_name": "ContextDataType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Initiates the authorization request, as an administrator.</simpara>\n      ",
        "documentation": "\n        <p>Initiates the authorization request, as an administrator.</p>\n      ",
        "shape_name": "AdminInitiateAuthRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "ChallengeName": {
            "type": "string",
            "enum": [
              "SMS_MFA",
              "SOFTWARE_TOKEN_MFA",
              "SELECT_MFA_TYPE",
              "MFA_SETUP",
              "PASSWORD_VERIFIER",
              "CUSTOM_CHALLENGE",
              "DEVICE_SRP_AUTH",
              "DEVICE_PASSWORD_VERIFIER",
              "ADMIN_NO_SRP_AUTH",
              "NEW_PASSWORD_REQUIRED"
            ],
            "zonbookDocumentation": "\n        <simpara>The name of the challenge which you are responding to with this call. This is\n            returned to you in the <code>AdminInitiateAuth</code> response if you need to pass\n            another challenge.</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>\n                  <code>MFA_SETUP</code>: If MFA is required, users who do not have at least\n                    one of the MFA methods set up are presented with an <code>MFA_SETUP</code>\n                    challenge. The user must set up at least one MFA type to continue to\n                    authenticate.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>SELECT_MFA_TYPE</code>: Selects the MFA type. Valid MFA options are\n                    <code>SMS_MFA</code> for text SMS MFA, and <code>SOFTWARE_TOKEN_MFA</code>\n                    for TOTP software token MFA.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>SMS_MFA</code>: Next challenge is to supply an\n                        <code>SMS_MFA_CODE</code>, delivered via SMS.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>PASSWORD_VERIFIER</code>: Next challenge is to supply\n                        <code>PASSWORD_CLAIM_SIGNATURE</code>,\n                        <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, and <code>TIMESTAMP</code> after\n                    the client-side SRP calculations.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>CUSTOM_CHALLENGE</code>: This is returned if your custom\n                    authentication flow determines that the user should pass another challenge\n                    before tokens are issued.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>DEVICE_SRP_AUTH</code>: If device tracking was enabled on your user\n                    pool and the previous challenges were passed, this challenge is returned so that\n                    Amazon Cognito can start tracking this device.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>DEVICE_PASSWORD_VERIFIER</code>: Similar to\n                        <code>PASSWORD_VERIFIER</code>, but for devices only.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>ADMIN_NO_SRP_AUTH</code>: This is returned if you need to\n                    authenticate with <code>USERNAME</code> and <code>PASSWORD</code> directly. An\n                    app client must be enabled to use this flow.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>NEW_PASSWORD_REQUIRED</code>: For users which are required to change\n                    their passwords after successful first login. This challenge should be passed\n                    with <code>NEW_PASSWORD</code> and any other required attributes.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
            "documentation": "\n        <p>The name of the challenge which you are responding to with this call. This is\n            returned to you in the <code>AdminInitiateAuth</code> response if you need to pass\n            another challenge.</p>\n        <ul>\n            <li>\n                <p>\n                  <code>MFA_SETUP</code>: If MFA is required, users who do not have at least\n                    one of the MFA methods set up are presented with an <code>MFA_SETUP</code>\n                    challenge. The user must set up at least one MFA type to continue to\n                    authenticate.</p>\n            </li>\n            <li>\n                <p>\n                  <code>SELECT_MFA_TYPE</code>: Selects the MFA type. Valid MFA options are\n                    <code>SMS_MFA</code> for text SMS MFA, and <code>SOFTWARE_TOKEN_MFA</code>\n                    for TOTP software token MFA.</p>\n            </li>\n            <li>\n                <p>\n                  <code>SMS_MFA</code>: Next challenge is to supply an\n                        <code>SMS_MFA_CODE</code>, delivered via SMS.</p>\n            </li>\n            <li>\n                <p>\n                  <code>PASSWORD_VERIFIER</code>: Next challenge is to supply\n                        <code>PASSWORD_CLAIM_SIGNATURE</code>,\n                        <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, and <code>TIMESTAMP</code> after\n                    the client-side SRP calculations.</p>\n            </li>\n            <li>\n                <p>\n                  <code>CUSTOM_CHALLENGE</code>: This is returned if your custom\n                    authentication flow determines that the user should pass another challenge\n                    before tokens are issued.</p>\n            </li>\n            <li>\n                <p>\n                  <code>DEVICE_SRP_AUTH</code>: If device tracking was enabled on your user\n                    pool and the previous challenges were passed, this challenge is returned so that\n                    Amazon Cognito can start tracking this device.</p>\n            </li>\n            <li>\n                <p>\n                  <code>DEVICE_PASSWORD_VERIFIER</code>: Similar to\n                        <code>PASSWORD_VERIFIER</code>, but for devices only.</p>\n            </li>\n            <li>\n                <p>\n                  <code>ADMIN_NO_SRP_AUTH</code>: This is returned if you need to\n                    authenticate with <code>USERNAME</code> and <code>PASSWORD</code> directly. An\n                    app client must be enabled to use this flow.</p>\n            </li>\n            <li>\n                <p>\n                  <code>NEW_PASSWORD_REQUIRED</code>: For users which are required to change\n                    their passwords after successful first login. This challenge should be passed\n                    with <code>NEW_PASSWORD</code> and any other required attributes.</p>\n            </li>\n         </ul>\n      ",
            "shape_name": "ChallengeNameType"
          },
          "Session": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The session which should be passed both ways in challenge-response calls to the\n            service. If <code>AdminInitiateAuth</code> or <code>AdminRespondToAuthChallenge</code>\n            API call determines that the caller needs to go through another challenge, they return a\n            session with other challenge parameters. This session should be passed as it is to the\n            next <code>AdminRespondToAuthChallenge</code> API call.</simpara>\n      ",
            "documentation": "\n        <p>The session which should be passed both ways in challenge-response calls to the\n            service. If <code>AdminInitiateAuth</code> or <code>AdminRespondToAuthChallenge</code>\n            API call determines that the caller needs to go through another challenge, they return a\n            session with other challenge parameters. This session should be passed as it is to the\n            next <code>AdminRespondToAuthChallenge</code> API call.</p>\n      ",
            "shape_name": "SessionType",
            "min_length": 20,
            "max_length": 2048
          },
          "ChallengeParameters": {
            "type": "map",
            "zonbookDocumentation": "\n        <simpara>The challenge parameters. These are returned to you in the\n                <code>AdminInitiateAuth</code> response if you need to pass another challenge. The\n            responses in this parameter should be used to compute inputs to the next call\n                (<code>AdminRespondToAuthChallenge</code>).</simpara>\n        <simpara>All challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if\n            applicable).</simpara>\n        <simpara>The value of the <code>USER_ID_FOR_SRP</code> attribute will be the user's actual\n            username, not an alias (such as email address or phone number), even if you specified an\n            alias in your call to <code>AdminInitiateAuth</code>. This is because, in the\n                <code>AdminRespondToAuthChallenge</code> API <code>ChallengeResponses</code>, the\n                <code>USERNAME</code> attribute cannot be an alias.</simpara>\n      ",
            "documentation": "\n        <p>The challenge parameters. These are returned to you in the\n                <code>AdminInitiateAuth</code> response if you need to pass another challenge. The\n            responses in this parameter should be used to compute inputs to the next call\n                (<code>AdminRespondToAuthChallenge</code>).</p>\n        <p>All challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if\n            applicable).</p>\n        <p>The value of the <code>USER_ID_FOR_SRP</code> attribute will be the user's actual\n            username, not an alias (such as email address or phone number), even if you specified an\n            alias in your call to <code>AdminInitiateAuth</code>. This is because, in the\n                <code>AdminRespondToAuthChallenge</code> API <code>ChallengeResponses</code>, the\n                <code>USERNAME</code> attribute cannot be an alias.</p>\n      ",
            "shape_name": "ChallengeParametersType",
            "keys": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            },
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          },
          "AuthenticationResult": {
            "type": "structure",
            "members": {
              "AccessToken": {
                "type": "string",
                "pattern": "[A-Za-z0-9-_=.]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The access token.</simpara>\n      ",
                "documentation": "\n        <p>The access token.</p>\n      ",
                "shape_name": "TokenModelType"
              },
              "ExpiresIn": {
                "type": "integer",
                "zonbookDocumentation": "\n        <simpara>The expiration period of the authentication result in seconds.</simpara>\n      ",
                "documentation": "\n        <p>The expiration period of the authentication result in seconds.</p>\n      ",
                "shape_name": "IntegerType"
              },
              "TokenType": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The token type.</simpara>\n      ",
                "documentation": "\n        <p>The token type.</p>\n      ",
                "shape_name": "StringType"
              },
              "RefreshToken": {
                "type": "string",
                "pattern": "[A-Za-z0-9-_=.]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The refresh token.</simpara>\n      ",
                "documentation": "\n        <p>The refresh token.</p>\n      ",
                "shape_name": "TokenModelType"
              },
              "IdToken": {
                "type": "string",
                "pattern": "[A-Za-z0-9-_=.]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The ID token.</simpara>\n      ",
                "documentation": "\n        <p>The ID token.</p>\n      ",
                "shape_name": "TokenModelType"
              },
              "NewDeviceMetadata": {
                "type": "structure",
                "members": {
                  "DeviceKey": {
                    "type": "string",
                    "pattern": "[\\w-]+_[0-9a-f-]+",
                    "zonbookDocumentation": "\n        <simpara>The device key.</simpara>\n      ",
                    "documentation": "\n        <p>The device key.</p>\n      ",
                    "shape_name": "DeviceKeyType",
                    "min_length": 1,
                    "max_length": 55
                  },
                  "DeviceGroupKey": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The device group key.</simpara>\n      ",
                    "documentation": "\n        <p>The device group key.</p>\n      ",
                    "shape_name": "StringType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The new device metadata from an authentication result.</simpara>\n      ",
                "documentation": "\n        <p>The new device metadata from an authentication result.</p>\n      ",
                "shape_name": "NewDeviceMetadataType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The result of the authentication response. This is only returned if the caller does\n            not need to pass another challenge. If the caller does need to pass another challenge\n            before it gets tokens, <code>ChallengeName</code>, <code>ChallengeParameters</code>, and\n                <code>Session</code> are returned.</simpara>\n      ",
            "documentation": "\n        <p>The result of the authentication response. This is only returned if the caller does\n            not need to pass another challenge. If the caller does need to pass another challenge\n            before it gets tokens, <code>ChallengeName</code>, <code>ChallengeParameters</code>, and\n                <code>Session</code> are returned.</p>\n      ",
            "shape_name": "AuthenticationResultType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Initiates the authentication response, as an administrator.</simpara>\n      ",
        "documentation": "\n        <p>Initiates the authentication response, as an administrator.</p>\n      ",
        "shape_name": "AdminInitiateAuthResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UnexpectedLambdaException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the user pool configuration is invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the user pool configuration is invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user pool configuration is invalid.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user pool configuration is invalid.</p>\n      ",
          "shape_name": "InvalidUserPoolConfigurationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UserLambdaValidationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</p>\n      ",
          "shape_name": "InvalidLambdaResponseException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an MFA method not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an MFA method not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito cannot find a multi-factor\n            authentication (MFA) method.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito cannot find a multi-factor\n            authentication (MFA) method.</p>\n      ",
          "shape_name": "MFAMethodNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message retuned when the invalid SMS role access policy exception is\n            thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message retuned when the invalid SMS role access policy exception is\n            thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</simpara>\n      ",
          "documentation": "\n        <p>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</p>\n      ",
          "shape_name": "InvalidSmsRoleAccessPolicyException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the role trust relationship for the SMS message is\n            invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the role trust relationship for the SMS message is\n            invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <emphasis role=\"bold\">cognito-idp.amazonaws.com</emphasis> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <b>cognito-idp.amazonaws.com</b> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</p>\n      ",
          "shape_name": "InvalidSmsRoleTrustRelationshipException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        }
      ],
      "documentation": "\n        <p>Initiates the authentication flow, as an administrator.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "AdminRespondToAuthChallenge": {
      "name": "AdminRespondToAuthChallenge",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The ID of the Amazon Cognito user pool.</simpara>\n      ",
            "documentation": "\n        <p>The ID of the Amazon Cognito user pool.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "ClientId": {
            "type": "string",
            "pattern": "[\\w+]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The app client ID.</simpara>\n      ",
            "documentation": "\n        <p>The app client ID.</p>\n      ",
            "required": true,
            "shape_name": "ClientIdType",
            "min_length": 1,
            "max_length": 128
          },
          "ChallengeName": {
            "type": "string",
            "enum": [
              "SMS_MFA",
              "SOFTWARE_TOKEN_MFA",
              "SELECT_MFA_TYPE",
              "MFA_SETUP",
              "PASSWORD_VERIFIER",
              "CUSTOM_CHALLENGE",
              "DEVICE_SRP_AUTH",
              "DEVICE_PASSWORD_VERIFIER",
              "ADMIN_NO_SRP_AUTH",
              "NEW_PASSWORD_REQUIRED"
            ],
            "zonbookDocumentation": "\n        <simpara>The challenge name. For more information, see <xref linkend=\"API_AdminInitiateAuth\"/>.</simpara>\n      ",
            "documentation": "\n        <p>The challenge name. For more information, see .</p>\n      ",
            "required": true,
            "shape_name": "ChallengeNameType"
          },
          "ChallengeResponses": {
            "type": "map",
            "zonbookDocumentation": "\n        <simpara>The challenge responses. These are inputs corresponding to the value of\n                <code>ChallengeName</code>, for example:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>\n                  <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>,\n                        <code>SECRET_HASH</code> (if app client is configured with client\n                    secret).</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>,\n                        <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>,\n                        <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured\n                    with client secret).</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                    <code>ADMIN_NO_SRP_AUTH</code>: <code>PASSWORD</code>, <code>USERNAME</code>,\n                        <code>SECRET_HASH</code> (if app client is configured with client secret).\n                </simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                    <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other\n                    required attributes, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app\n                    client is configured with client secret). </simpara>\n            </listitem>\n        </itemizedlist>\n        <simpara>The value of the <code>USERNAME</code> attribute must be the user's actual\n            username, not an alias (such as email address or phone number). To make this easier, the\n                <code>AdminInitiateAuth</code> response includes the actual username value in the\n                <code>USERNAMEUSER_ID_FOR_SRP</code> attribute, even if you specified an alias in\n            your call to <code>AdminInitiateAuth</code>.</simpara>\n      ",
            "documentation": "\n        <p>The challenge responses. These are inputs corresponding to the value of\n                <code>ChallengeName</code>, for example:</p>\n        <ul>\n            <li>\n                <p>\n                  <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>,\n                        <code>SECRET_HASH</code> (if app client is configured with client\n                    secret).</p>\n            </li>\n            <li>\n                <p>\n                  <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>,\n                        <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>,\n                        <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured\n                    with client secret).</p>\n            </li>\n            <li>\n                <p>\n                    <code>ADMIN_NO_SRP_AUTH</code>: <code>PASSWORD</code>, <code>USERNAME</code>,\n                        <code>SECRET_HASH</code> (if app client is configured with client secret).\n                </p>\n            </li>\n            <li>\n                <p>\n                    <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other\n                    required attributes, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app\n                    client is configured with client secret). </p>\n            </li>\n         </ul>\n        <p>The value of the <code>USERNAME</code> attribute must be the user's actual\n            username, not an alias (such as email address or phone number). To make this easier, the\n                <code>AdminInitiateAuth</code> response includes the actual username value in the\n                <code>USERNAMEUSER_ID_FOR_SRP</code> attribute, even if you specified an alias in\n            your call to <code>AdminInitiateAuth</code>.</p>\n      ",
            "shape_name": "ChallengeResponsesType",
            "keys": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            },
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          },
          "Session": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The session which should be passed both ways in challenge-response calls to the\n            service. If <code>InitiateAuth</code> or <code>RespondToAuthChallenge</code> API call\n            determines that the caller needs to go through another challenge, they return a session\n            with other challenge parameters. This session should be passed as it is to the next\n                <code>RespondToAuthChallenge</code> API call.</simpara>\n      ",
            "documentation": "\n        <p>The session which should be passed both ways in challenge-response calls to the\n            service. If <code>InitiateAuth</code> or <code>RespondToAuthChallenge</code> API call\n            determines that the caller needs to go through another challenge, they return a session\n            with other challenge parameters. This session should be passed as it is to the next\n                <code>RespondToAuthChallenge</code> API call.</p>\n      ",
            "shape_name": "SessionType",
            "min_length": 20,
            "max_length": 2048
          },
          "AnalyticsMetadata": {
            "type": "structure",
            "members": {
              "AnalyticsEndpointId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The endpoint ID.</simpara>\n      ",
                "documentation": "\n        <p>The endpoint ID.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The analytics metadata for collecting Amazon Pinpoint metrics for\n                <code>AdminRespondToAuthChallenge</code> calls.</simpara>\n      ",
            "documentation": "\n        <p>The analytics metadata for collecting Amazon Pinpoint metrics for\n                <code>AdminRespondToAuthChallenge</code> calls.</p>\n      ",
            "shape_name": "AnalyticsMetadataType"
          },
          "ContextData": {
            "type": "structure",
            "members": {
              "IpAddress": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Source IP address of your user.</simpara>\n      ",
                "documentation": "\n        <p>Source IP address of your user.</p>\n      ",
                "required": true,
                "shape_name": "StringType"
              },
              "ServerName": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Your server endpoint where this API is invoked.</simpara>\n      ",
                "documentation": "\n        <p>Your server endpoint where this API is invoked.</p>\n      ",
                "required": true,
                "shape_name": "StringType"
              },
              "ServerPath": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Your server path where this API is invoked. </simpara>\n      ",
                "documentation": "\n        <p>Your server path where this API is invoked. </p>\n      ",
                "required": true,
                "shape_name": "StringType"
              },
              "HttpHeaders": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>HttpHeaders received on your server in same order.</simpara>\n      ",
                "documentation": "\n        <p>HttpHeaders received on your server in same order.</p>\n      ",
                "required": true,
                "shape_name": "HttpHeaderList",
                "members": {
                  "type": "structure",
                  "members": {
                    "headerName": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The header name</simpara>\n      ",
                      "documentation": "\n        <p>The header name</p>\n      ",
                      "shape_name": "StringType"
                    },
                    "headerValue": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The header value.</simpara>\n      ",
                      "documentation": "\n        <p>The header value.</p>\n      ",
                      "shape_name": "StringType"
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>The HTTP header.</simpara>\n      ",
                  "documentation": "\n        <p>The HTTP header.</p>\n      ",
                  "shape_name": "HttpHeader"
                }
              },
              "EncodedData": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>Encoded data containing device fingerprinting details,\n            collected using the Amazon Cognito context data collection library.</simpara>\n      ",
                "documentation": "\n        <p>Encoded data containing device fingerprinting details,\n            collected using the Amazon Cognito context data collection library.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</simpara>\n      ",
            "documentation": "\n        <p>Contextual data such as the user's device fingerprint, IP address, or location used\n            for evaluating the risk of an unexpected event by Amazon Cognito advanced\n            security.</p>\n      ",
            "shape_name": "ContextDataType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>The request to respond to the authentication challenge, as an\n            administrator.</simpara>\n      ",
        "documentation": "\n        <p>The request to respond to the authentication challenge, as an\n            administrator.</p>\n      ",
        "shape_name": "AdminRespondToAuthChallengeRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "ChallengeName": {
            "type": "string",
            "enum": [
              "SMS_MFA",
              "SOFTWARE_TOKEN_MFA",
              "SELECT_MFA_TYPE",
              "MFA_SETUP",
              "PASSWORD_VERIFIER",
              "CUSTOM_CHALLENGE",
              "DEVICE_SRP_AUTH",
              "DEVICE_PASSWORD_VERIFIER",
              "ADMIN_NO_SRP_AUTH",
              "NEW_PASSWORD_REQUIRED"
            ],
            "zonbookDocumentation": "\n        <simpara>The name of the challenge. For more information, see <xref linkend=\"API_AdminInitiateAuth\"/>.</simpara>\n      ",
            "documentation": "\n        <p>The name of the challenge. For more information, see .</p>\n      ",
            "shape_name": "ChallengeNameType"
          },
          "Session": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The session which should be passed both ways in challenge-response calls to the\n            service. If the <xref linkend=\"API_InitiateAuth\"/> or <xref linkend=\"API_RespondToAuthChallenge\"/> API call determines that the caller needs to\n            go through another challenge, they return a session with other challenge parameters.\n            This session should be passed as it is to the next <code>RespondToAuthChallenge</code>\n            API call.</simpara>\n      ",
            "documentation": "\n        <p>The session which should be passed both ways in challenge-response calls to the\n            service. If the  or  API call determines that the caller needs to\n            go through another challenge, they return a session with other challenge parameters.\n            This session should be passed as it is to the next <code>RespondToAuthChallenge</code>\n            API call.</p>\n      ",
            "shape_name": "SessionType",
            "min_length": 20,
            "max_length": 2048
          },
          "ChallengeParameters": {
            "type": "map",
            "zonbookDocumentation": "\n        <simpara>The challenge parameters. For more information, see <xref linkend=\"API_AdminInitiateAuth\"/>.</simpara>\n      ",
            "documentation": "\n        <p>The challenge parameters. For more information, see .</p>\n      ",
            "shape_name": "ChallengeParametersType",
            "keys": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            },
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          },
          "AuthenticationResult": {
            "type": "structure",
            "members": {
              "AccessToken": {
                "type": "string",
                "pattern": "[A-Za-z0-9-_=.]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The access token.</simpara>\n      ",
                "documentation": "\n        <p>The access token.</p>\n      ",
                "shape_name": "TokenModelType"
              },
              "ExpiresIn": {
                "type": "integer",
                "zonbookDocumentation": "\n        <simpara>The expiration period of the authentication result in seconds.</simpara>\n      ",
                "documentation": "\n        <p>The expiration period of the authentication result in seconds.</p>\n      ",
                "shape_name": "IntegerType"
              },
              "TokenType": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The token type.</simpara>\n      ",
                "documentation": "\n        <p>The token type.</p>\n      ",
                "shape_name": "StringType"
              },
              "RefreshToken": {
                "type": "string",
                "pattern": "[A-Za-z0-9-_=.]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The refresh token.</simpara>\n      ",
                "documentation": "\n        <p>The refresh token.</p>\n      ",
                "shape_name": "TokenModelType"
              },
              "IdToken": {
                "type": "string",
                "pattern": "[A-Za-z0-9-_=.]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The ID token.</simpara>\n      ",
                "documentation": "\n        <p>The ID token.</p>\n      ",
                "shape_name": "TokenModelType"
              },
              "NewDeviceMetadata": {
                "type": "structure",
                "members": {
                  "DeviceKey": {
                    "type": "string",
                    "pattern": "[\\w-]+_[0-9a-f-]+",
                    "zonbookDocumentation": "\n        <simpara>The device key.</simpara>\n      ",
                    "documentation": "\n        <p>The device key.</p>\n      ",
                    "shape_name": "DeviceKeyType",
                    "min_length": 1,
                    "max_length": 55
                  },
                  "DeviceGroupKey": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The device group key.</simpara>\n      ",
                    "documentation": "\n        <p>The device group key.</p>\n      ",
                    "shape_name": "StringType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The new device metadata from an authentication result.</simpara>\n      ",
                "documentation": "\n        <p>The new device metadata from an authentication result.</p>\n      ",
                "shape_name": "NewDeviceMetadataType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The result returned by the server in response to the authentication\n            request.</simpara>\n      ",
            "documentation": "\n        <p>The result returned by the server in response to the authentication\n            request.</p>\n      ",
            "shape_name": "AuthenticationResultType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Responds to the authentication challenge, as an administrator.</simpara>\n      ",
        "documentation": "\n        <p>Responds to the authentication challenge, as an administrator.</p>\n      ",
        "shape_name": "AdminRespondToAuthChallengeResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message provided when the code mismatch exception is thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message provided when the code mismatch exception is thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown if the provided code does not match what the server was\n            expecting.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown if the provided code does not match what the server was\n            expecting.</p>\n      ",
          "shape_name": "CodeMismatchException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the expired code exception is thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the expired code exception is thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown if a code has expired.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown if a code has expired.</p>\n      ",
          "shape_name": "ExpiredCodeException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UnexpectedLambdaException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid user\n            password exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid user\n            password exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            password.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            password.</p>\n      ",
          "shape_name": "InvalidPasswordException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UserLambdaValidationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</p>\n      ",
          "shape_name": "InvalidLambdaResponseException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the user pool configuration is invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the user pool configuration is invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user pool configuration is invalid.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user pool configuration is invalid.</p>\n      ",
          "shape_name": "InvalidUserPoolConfigurationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an MFA method not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an MFA method not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito cannot find a multi-factor\n            authentication (MFA) method.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito cannot find a multi-factor\n            authentication (MFA) method.</p>\n      ",
          "shape_name": "MFAMethodNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message retuned when the invalid SMS role access policy exception is\n            thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message retuned when the invalid SMS role access policy exception is\n            thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</simpara>\n      ",
          "documentation": "\n        <p>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</p>\n      ",
          "shape_name": "InvalidSmsRoleAccessPolicyException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the role trust relationship for the SMS message is\n            invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the role trust relationship for the SMS message is\n            invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <emphasis role=\"bold\">cognito-idp.amazonaws.com</emphasis> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <b>cognito-idp.amazonaws.com</b> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</p>\n      ",
          "shape_name": "InvalidSmsRoleTrustRelationshipException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message sent to the user when an alias exists.</simpara>\n      ",
              "documentation": "\n        <p>The message sent to the user when an alias exists.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user tries to confirm the account with an email or\n            phone number that has already been supplied as an alias from a different account. This\n            exception tells user that an account with this email or phone already exists.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user tries to confirm the account with an email or\n            phone number that has already been supplied as an alias from a different account. This\n            exception tells user that an account with this email or phone already exists.</p>\n      ",
          "shape_name": "AliasExistsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "MessageType",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the software token TOTP multi-factor authentication\n            (MFA) is not enabled for the user pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the software token TOTP multi-factor authentication\n            (MFA) is not enabled for the user pool.</p>\n      ",
          "shape_name": "SoftwareTokenMFANotFoundException"
        }
      ],
      "documentation": "\n        <p>Responds to an authentication challenge, as an administrator.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "AdminCreateUser": {
      "name": "AdminCreateUser",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool where the user will be created.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool where the user will be created.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The username for the user. Must be unique within the user pool. Must be a UTF-8\n            string between 1 and 128 characters. After the user is created, the username cannot be\n            changed.</simpara>\n      ",
            "documentation": "\n        <p>The username for the user. Must be unique within the user pool. Must be a UTF-8\n            string between 1 and 128 characters. After the user is created, the username cannot be\n            changed.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "UserAttributes": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>An array of name-value pairs that contain user attributes and attribute values to\n            be set for the user to be created. You can create a user without specifying any\n            attributes other than <code>Username</code>. However, any attributes that you specify as\n            required (in <xref linkend=\"API_CreateUserPool\"/> or in the <emphasis role=\"bold\">Attributes</emphasis> tab of the console) must be supplied either by you (in your\n            call to <code>AdminCreateUser</code>) or by the user (when he or she signs up in\n            response to your welcome message).</simpara>\n        <simpara>For custom attributes, you must prepend the <code>custom:</code> prefix to the\n            attribute name.</simpara>\n        <simpara>To send a message inviting the user to sign up, you must specify the user's email\n            address or phone number. This can be done in your call to AdminCreateUser or in the\n                <emphasis role=\"bold\">Users</emphasis> tab of the Amazon Cognito console for\n            managing your user pools.</simpara>\n        <simpara>In your call to <code>AdminCreateUser</code>, you can set the\n                <code>email_verified</code> attribute to <code>True</code>, and you can set the\n                <code>phone_number_verified</code> attribute to <code>True</code>. (You can also do\n            this by calling <xref linkend=\"API_AdminUpdateUserAttributes\"/>.)</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>\n                  <emphasis role=\"bold\">email</emphasis>: The email address of the user to\n                    whom the message that contains the code and username will be sent. Required if\n                    the <code>email_verified</code> attribute is set to <code>True</code>, or if\n                        <code>\"EMAIL\"</code> is specified in the <code>DesiredDeliveryMediums</code>\n                    parameter.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <emphasis role=\"bold\">phone_number</emphasis>: The phone number of the user\n                    to whom the message that contains the code and username will be sent. Required\n                    if the <code>phone_number_verified</code> attribute is set to <code>True</code>,\n                    or if <code>\"SMS\"</code> is specified in the <code>DesiredDeliveryMediums</code>\n                    parameter.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
            "documentation": "\n        <p>An array of name-value pairs that contain user attributes and attribute values to\n            be set for the user to be created. You can create a user without specifying any\n            attributes other than <code>Username</code>. However, any attributes that you specify as\n            required (in  or in the <b>Attributes</b> tab of the console) must be supplied either by you (in your\n            call to <code>AdminCreateUser</code>) or by the user (when he or she signs up in\n            response to your welcome message).</p>\n        <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the\n            attribute name.</p>\n        <p>To send a message inviting the user to sign up, you must specify the user's email\n            address or phone number. This can be done in your call to AdminCreateUser or in the\n                <b>Users</b> tab of the Amazon Cognito console for\n            managing your user pools.</p>\n        <p>In your call to <code>AdminCreateUser</code>, you can set the\n                <code>email_verified</code> attribute to <code>True</code>, and you can set the\n                <code>phone_number_verified</code> attribute to <code>True</code>. (You can also do\n            this by calling .)</p>\n        <ul>\n            <li>\n                <p>\n                  <b>email</b>: The email address of the user to\n                    whom the message that contains the code and username will be sent. Required if\n                    the <code>email_verified</code> attribute is set to <code>True</code>, or if\n                        <code>\"EMAIL\"</code> is specified in the <code>DesiredDeliveryMediums</code>\n                    parameter.</p>\n            </li>\n            <li>\n                <p>\n                  <b>phone_number</b>: The phone number of the user\n                    to whom the message that contains the code and username will be sent. Required\n                    if the <code>phone_number_verified</code> attribute is set to <code>True</code>,\n                    or if <code>\"SMS\"</code> is specified in the <code>DesiredDeliveryMediums</code>\n                    parameter.</p>\n            </li>\n         </ul>\n      ",
            "shape_name": "AttributeListType",
            "members": {
              "type": "structure",
              "members": {
                "Name": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "zonbookDocumentation": "\n        <simpara>The name of the attribute.</simpara>\n      ",
                  "documentation": "\n        <p>The name of the attribute.</p>\n      ",
                  "required": true,
                  "shape_name": "AttributeNameType",
                  "min_length": 1,
                  "max_length": 32
                },
                "Value": {
                  "type": "string",
                  "sensitive": true,
                  "zonbookDocumentation": "\n        <simpara>The value of the attribute.</simpara>\n      ",
                  "documentation": "\n        <p>The value of the attribute.</p>\n      ",
                  "shape_name": "AttributeValueType",
                  "max_length": 2048
                }
              },
              "zonbookDocumentation": "\n        <simpara>Specifies whether the attribute is standard or custom.</simpara>\n      ",
              "documentation": "\n        <p>Specifies whether the attribute is standard or custom.</p>\n      ",
              "shape_name": "AttributeType"
            }
          },
          "ValidationData": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The user's validation data. This is an array of name-value pairs that contain user\n            attributes and attribute values that you can use for custom validation, such as\n            restricting the types of user accounts that can be registered. For example, you might\n            choose to allow or disallow user sign-up based on the user's domain.</simpara>\n        <simpara>To configure custom validation, you must create a Pre Sign-up Lambda trigger for\n            the user pool as described in the Amazon Cognito Developer Guide. The Lambda trigger\n            receives the validation data and uses it in the validation process.</simpara>\n        <simpara>The user's validation data is not persisted.</simpara>\n      ",
            "documentation": "\n        <p>The user's validation data. This is an array of name-value pairs that contain user\n            attributes and attribute values that you can use for custom validation, such as\n            restricting the types of user accounts that can be registered. For example, you might\n            choose to allow or disallow user sign-up based on the user's domain.</p>\n        <p>To configure custom validation, you must create a Pre Sign-up Lambda trigger for\n            the user pool as described in the Amazon Cognito Developer Guide. The Lambda trigger\n            receives the validation data and uses it in the validation process.</p>\n        <p>The user's validation data is not persisted.</p>\n      ",
            "shape_name": "AttributeListType",
            "members": {
              "type": "structure",
              "members": {
                "Name": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "zonbookDocumentation": "\n        <simpara>The name of the attribute.</simpara>\n      ",
                  "documentation": "\n        <p>The name of the attribute.</p>\n      ",
                  "required": true,
                  "shape_name": "AttributeNameType",
                  "min_length": 1,
                  "max_length": 32
                },
                "Value": {
                  "type": "string",
                  "sensitive": true,
                  "zonbookDocumentation": "\n        <simpara>The value of the attribute.</simpara>\n      ",
                  "documentation": "\n        <p>The value of the attribute.</p>\n      ",
                  "shape_name": "AttributeValueType",
                  "max_length": 2048
                }
              },
              "zonbookDocumentation": "\n        <simpara>Specifies whether the attribute is standard or custom.</simpara>\n      ",
              "documentation": "\n        <p>Specifies whether the attribute is standard or custom.</p>\n      ",
              "shape_name": "AttributeType"
            }
          },
          "TemporaryPassword": {
            "type": "string",
            "sensitive": true,
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>The user's temporary password. This password must conform to the password policy\n            that you specified when you created the user pool.</simpara>\n        <simpara>The temporary password is valid only once. To complete the Admin Create User flow,\n            the user must enter the temporary password in the sign-in page along with a new password\n            to be used in all future sign-ins.</simpara>\n        <simpara>This parameter is not required. If you do not specify a value, Amazon Cognito\n            generates one for you.</simpara>\n        <simpara>The temporary password can only be used until the user account expiration limit\n            that you specified when you created the user pool. To reset the account after that time\n            limit, you must call <code>AdminCreateUser</code> again, specifying\n                <code>\"RESEND\"</code> for the <code>MessageAction</code> parameter.</simpara>\n      ",
            "documentation": "\n        <p>The user's temporary password. This password must conform to the password policy\n            that you specified when you created the user pool.</p>\n        <p>The temporary password is valid only once. To complete the Admin Create User flow,\n            the user must enter the temporary password in the sign-in page along with a new password\n            to be used in all future sign-ins.</p>\n        <p>This parameter is not required. If you do not specify a value, Amazon Cognito\n            generates one for you.</p>\n        <p>The temporary password can only be used until the user account expiration limit\n            that you specified when you created the user pool. To reset the account after that time\n            limit, you must call <code>AdminCreateUser</code> again, specifying\n                <code>\"RESEND\"</code> for the <code>MessageAction</code> parameter.</p>\n      ",
            "shape_name": "PasswordType",
            "min_length": 6,
            "max_length": 256
          },
          "ForceAliasCreation": {
            "type": "boolean",
            "zonbookDocumentation": "\n        <simpara>This parameter is only used if the <code>phone_number_verified</code> or\n                <code>email_verified</code> attribute is set to <code>True</code>. Otherwise, it is\n            ignored.</simpara>\n        <simpara>If this parameter is set to <code>True</code> and the phone number or email address\n            specified in the UserAttributes parameter already exists as an alias with a different\n            user, the API call will migrate the alias from the previous user to the newly created\n            user. The previous user will no longer be able to log in using that alias.</simpara>\n        <simpara>If this parameter is set to <code>False</code>, the API throws an\n                <code>AliasExistsException</code> error if the alias already exists. The default\n            value is <code>False</code>.</simpara>\n      ",
            "documentation": "\n        <p>This parameter is only used if the <code>phone_number_verified</code> or\n                <code>email_verified</code> attribute is set to <code>True</code>. Otherwise, it is\n            ignored.</p>\n        <p>If this parameter is set to <code>True</code> and the phone number or email address\n            specified in the UserAttributes parameter already exists as an alias with a different\n            user, the API call will migrate the alias from the previous user to the newly created\n            user. The previous user will no longer be able to log in using that alias.</p>\n        <p>If this parameter is set to <code>False</code>, the API throws an\n                <code>AliasExistsException</code> error if the alias already exists. The default\n            value is <code>False</code>.</p>\n      ",
            "shape_name": "ForceAliasCreation"
          },
          "MessageAction": {
            "type": "string",
            "enum": [
              "RESEND",
              "SUPPRESS"
            ],
            "zonbookDocumentation": "\n        <simpara>Set to <code>\"RESEND\"</code> to resend the invitation message to a user that\n            already exists and reset the expiration limit on the user's account. Set to\n                <code>\"SUPPRESS\"</code> to suppress sending the message. Only one value can be\n            specified.</simpara>\n      ",
            "documentation": "\n        <p>Set to <code>\"RESEND\"</code> to resend the invitation message to a user that\n            already exists and reset the expiration limit on the user's account. Set to\n                <code>\"SUPPRESS\"</code> to suppress sending the message. Only one value can be\n            specified.</p>\n      ",
            "shape_name": "MessageActionType"
          },
          "DesiredDeliveryMediums": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>Specify <code>\"EMAIL\"</code> if email will be used to send the welcome message.\n            Specify <code>\"SMS\"</code> if the phone number will be used. The default value is\n                <code>\"SMS\"</code>. More than one value can be specified.</simpara>\n      ",
            "documentation": "\n        <p>Specify <code>\"EMAIL\"</code> if email will be used to send the welcome message.\n            Specify <code>\"SMS\"</code> if the phone number will be used. The default value is\n                <code>\"SMS\"</code>. More than one value can be specified.</p>\n      ",
            "shape_name": "DeliveryMediumListType",
            "members": {
              "type": "string",
              "enum": [
                "SMS",
                "EMAIL"
              ],
              "shape_name": "DeliveryMediumType",
              "documentation": null
            }
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to create a user in the specified user pool.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to create a user in the specified user pool.</p>\n      ",
        "shape_name": "AdminCreateUserRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "User": {
            "type": "structure",
            "members": {
              "Username": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The user name of the user you wish to describe.</simpara>\n      ",
                "documentation": "\n        <p>The user name of the user you wish to describe.</p>\n      ",
                "shape_name": "UsernameType",
                "min_length": 1,
                "max_length": 128
              },
              "Attributes": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>A container with information about the user type attributes.</simpara>\n      ",
                "documentation": "\n        <p>A container with information about the user type attributes.</p>\n      ",
                "shape_name": "AttributeListType",
                "members": {
                  "type": "structure",
                  "members": {
                    "Name": {
                      "type": "string",
                      "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                      "zonbookDocumentation": "\n        <simpara>The name of the attribute.</simpara>\n      ",
                      "documentation": "\n        <p>The name of the attribute.</p>\n      ",
                      "required": true,
                      "shape_name": "AttributeNameType",
                      "min_length": 1,
                      "max_length": 32
                    },
                    "Value": {
                      "type": "string",
                      "sensitive": true,
                      "zonbookDocumentation": "\n        <simpara>The value of the attribute.</simpara>\n      ",
                      "documentation": "\n        <p>The value of the attribute.</p>\n      ",
                      "shape_name": "AttributeValueType",
                      "max_length": 2048
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>Specifies whether the attribute is standard or custom.</simpara>\n      ",
                  "documentation": "\n        <p>Specifies whether the attribute is standard or custom.</p>\n      ",
                  "shape_name": "AttributeType"
                }
              },
              "UserCreateDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The creation date of the user.</simpara>\n      ",
                "documentation": "\n        <p>The creation date of the user.</p>\n      ",
                "shape_name": "DateType"
              },
              "UserLastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The last modified date of the user.</simpara>\n      ",
                "documentation": "\n        <p>The last modified date of the user.</p>\n      ",
                "shape_name": "DateType"
              },
              "Enabled": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>Specifies whether the user is enabled.</simpara>\n      ",
                "documentation": "\n        <p>Specifies whether the user is enabled.</p>\n      ",
                "shape_name": "BooleanType"
              },
              "UserStatus": {
                "type": "string",
                "enum": [
                  "UNCONFIRMED",
                  "CONFIRMED",
                  "ARCHIVED",
                  "COMPROMISED",
                  "UNKNOWN",
                  "RESET_REQUIRED",
                  "FORCE_CHANGE_PASSWORD"
                ],
                "zonbookDocumentation": "\n        <simpara>The user status. Can be one of the following:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>UNCONFIRMED - User has been created but not confirmed.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>CONFIRMED - User has been confirmed.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>ARCHIVED - User is no longer active.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>COMPROMISED - User is disabled due to a potential security\n                    threat.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>UNKNOWN - User status is not known.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
                "documentation": "\n        <p>The user status. Can be one of the following:</p>\n        <ul>\n            <li>\n                <p>UNCONFIRMED - User has been created but not confirmed.</p>\n            </li>\n            <li>\n                <p>CONFIRMED - User has been confirmed.</p>\n            </li>\n            <li>\n                <p>ARCHIVED - User is no longer active.</p>\n            </li>\n            <li>\n                <p>COMPROMISED - User is disabled due to a potential security\n                    threat.</p>\n            </li>\n            <li>\n                <p>UNKNOWN - User status is not known.</p>\n            </li>\n         </ul>\n      ",
                "shape_name": "UserStatusType"
              },
              "MFAOptions": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>The MFA options for the user.</simpara>\n      ",
                "documentation": "\n        <p>The MFA options for the user.</p>\n      ",
                "shape_name": "MFAOptionListType",
                "members": {
                  "type": "structure",
                  "members": {
                    "DeliveryMedium": {
                      "type": "string",
                      "enum": [
                        "SMS",
                        "EMAIL"
                      ],
                      "zonbookDocumentation": "\n        <simpara>The delivery medium (email message or SMS message) to send the MFA code.</simpara>\n      ",
                      "documentation": "\n        <p>The delivery medium (email message or SMS message) to send the MFA code.</p>\n      ",
                      "shape_name": "DeliveryMediumType"
                    },
                    "AttributeName": {
                      "type": "string",
                      "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                      "zonbookDocumentation": "\n        <simpara>The attribute name of the MFA option type.</simpara>\n      ",
                      "documentation": "\n        <p>The attribute name of the MFA option type.</p>\n      ",
                      "shape_name": "AttributeNameType",
                      "min_length": 1,
                      "max_length": 32
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>Specifies the different settings for multi-factor authentication (MFA).</simpara>\n      ",
                  "documentation": "\n        <p>Specifies the different settings for multi-factor authentication (MFA).</p>\n      ",
                  "shape_name": "MFAOptionType"
                }
              }
            },
            "zonbookDocumentation": "\n        <simpara>The newly created user.</simpara>\n      ",
            "documentation": "\n        <p>The newly created user.</p>\n      ",
            "shape_name": "UserType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server to the request to create the\n            user.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server to the request to create the\n            user.</p>\n      ",
        "shape_name": "AdminCreateUserResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws a user name exists\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws a user name exists\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters a user name that already\n            exists in the user pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters a user name that already\n            exists in the user pool.</p>\n      ",
          "shape_name": "UsernameExistsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid user\n            password exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid user\n            password exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            password.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            password.</p>\n      ",
          "shape_name": "InvalidPasswordException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message sent when a verification code fails to deliver successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message sent when a verification code fails to deliver successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a verification code fails to deliver\n            successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a verification code fails to deliver\n            successfully.</p>\n      ",
          "shape_name": "CodeDeliveryFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns an unexpected AWS\n            Lambda exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an unexpected\n            exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UnexpectedLambdaException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a user validation\n            exception with the AWS Lambda service.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters a user\n            validation exception with the AWS Lambda service.</p>\n      ",
          "shape_name": "UserLambdaValidationException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid AWS Lambda\n            response exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid AWS\n            Lambda response.</p>\n      ",
          "shape_name": "InvalidLambdaResponseException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a precondition is not met.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a precondition is not met.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a precondition is not met.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a precondition is not met.</p>\n      ",
          "shape_name": "PreconditionNotMetException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message retuned when the invalid SMS role access policy exception is\n            thrown.</simpara>\n      ",
              "documentation": "\n        <p>The message retuned when the invalid SMS role access policy exception is\n            thrown.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</simpara>\n      ",
          "documentation": "\n        <p>This exception is returned when the role provided for SMS configuration does not\n            have permission to publish using Amazon SNS.</p>\n      ",
          "shape_name": "InvalidSmsRoleAccessPolicyException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the role trust relationship for the SMS message is\n            invalid.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the role trust relationship for the SMS message is\n            invalid.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <emphasis role=\"bold\">cognito-idp.amazonaws.com</emphasis> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the trust relationship is invalid for the role\n            provided for SMS configuration. This can happen if you do not trust <b>cognito-idp.amazonaws.com</b> or the external ID provided in the\n            role does not match what is provided in the SMS configuration for the user\n            pool.</p>\n      ",
          "shape_name": "InvalidSmsRoleTrustRelationshipException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the user is in an unsupported state.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the user is in an unsupported state.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>The request failed because the user is in an unsupported state.</simpara>\n      ",
          "documentation": "\n        <p>The request failed because the user is in an unsupported state.</p>\n      ",
          "shape_name": "UnsupportedUserStateException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Creates a new user in the specified user pool.</p>\n        <p>If <code>MessageAction</code> is not set, the default is to send a welcome\n            message via email or phone (SMS).</p>\n        <note>\n            <p>This message is based on a template that you configured in\n            your call to  or .\n            This template includes your custom sign-up instructions and placeholders for user name and\n            temporary password.</p>\n         </note>\n        <p>Alternatively, you can call AdminCreateUser with “SUPPRESS” for the\n                <code>MessageAction</code> parameter, and Amazon Cognito will not send any email. </p>\n        <p>In either case,  the user will be in the <code>FORCE_CHANGE_PASSWORD</code> state\n            until they sign in and change their password.</p>\n        <p>AdminCreateUser requires developer credentials.</p>\n      "
    },
    "AdminSetUserMFAPreference": {
      "name": "AdminSetUserMFAPreference",
      "input": {
        "type": "structure",
        "members": {
          "SMSMfaSettings": {
            "type": "structure",
            "members": {
              "Enabled": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>Specifies whether SMS text message MFA is enabled.</simpara>\n      ",
                "documentation": "\n        <p>Specifies whether SMS text message MFA is enabled.</p>\n      ",
                "shape_name": "BooleanType"
              },
              "PreferredMfa": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>The preferred MFA method.</simpara>\n      ",
                "documentation": "\n        <p>The preferred MFA method.</p>\n      ",
                "shape_name": "BooleanType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The SMS text message MFA settings.</simpara>\n      ",
            "documentation": "\n        <p>The SMS text message MFA settings.</p>\n      ",
            "shape_name": "SMSMfaSettingsType"
          },
          "SoftwareTokenMfaSettings": {
            "type": "structure",
            "members": {
              "Enabled": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>Specifies whether software token MFA is enabled.</simpara>\n      ",
                "documentation": "\n        <p>Specifies whether software token MFA is enabled.</p>\n      ",
                "shape_name": "BooleanType"
              },
              "PreferredMfa": {
                "type": "boolean",
                "zonbookDocumentation": "\n        <simpara>The preferred MFA method.</simpara>\n      ",
                "documentation": "\n        <p>The preferred MFA method.</p>\n      ",
                "shape_name": "BooleanType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The time-based one-time password software token MFA settings.</simpara>\n      ",
            "documentation": "\n        <p>The time-based one-time password software token MFA settings.</p>\n      ",
            "shape_name": "SoftwareTokenMfaSettingsType"
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user pool username or alias.</simpara>\n      ",
            "documentation": "\n        <p>The user pool username or alias.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          }
        },
        "shape_name": "AdminSetUserMFAPreferenceRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "AdminSetUserMFAPreferenceResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a password reset is required.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a password reset is required.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a password reset is required.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a password reset is required.</p>\n      ",
          "shape_name": "PasswordResetRequiredException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not confirmed successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not confirmed successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not confirmed successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not confirmed successfully.</p>\n      ",
          "shape_name": "UserNotConfirmedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Sets the user's multi-factor authentication (MFA) preference.</p>\n      "
    },
    "CreateUserImportJob": {
      "name": "CreateUserImportJob",
      "input": {
        "type": "structure",
        "members": {
          "JobName": {
            "type": "string",
            "pattern": "[\\w\\s+=,.@-]+",
            "zonbookDocumentation": "\n        <simpara>The job name for the user import job.</simpara>\n      ",
            "documentation": "\n        <p>The job name for the user import job.</p>\n      ",
            "required": true,
            "shape_name": "UserImportJobNameType",
            "min_length": 1,
            "max_length": 128
          },
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool that the users are being imported\n            into.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool that the users are being imported\n            into.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "CloudWatchLogsRoleArn": {
            "type": "string",
            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
            "zonbookDocumentation": "\n        <simpara>The role ARN for the Amazon CloudWatch Logging role for the user import\n            job.</simpara>\n      ",
            "documentation": "\n        <p>The role ARN for the Amazon CloudWatch Logging role for the user import\n            job.</p>\n      ",
            "required": true,
            "shape_name": "ArnType",
            "min_length": 20,
            "max_length": 2048
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to create the user import job.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to create the user import job.</p>\n      ",
        "shape_name": "CreateUserImportJobRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "UserImportJob": {
            "type": "structure",
            "members": {
              "JobName": {
                "type": "string",
                "pattern": "[\\w\\s+=,.@-]+",
                "zonbookDocumentation": "\n        <simpara>The job name for the user import job.</simpara>\n      ",
                "documentation": "\n        <p>The job name for the user import job.</p>\n      ",
                "shape_name": "UserImportJobNameType",
                "min_length": 1,
                "max_length": 128
              },
              "JobId": {
                "type": "string",
                "pattern": "import-[0-9a-zA-Z-]+",
                "zonbookDocumentation": "\n        <simpara>The job ID for the user import job.</simpara>\n      ",
                "documentation": "\n        <p>The job ID for the user import job.</p>\n      ",
                "shape_name": "UserImportJobIdType",
                "min_length": 1,
                "max_length": 55
              },
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool that the users are being imported\n            into.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID for the user pool that the users are being imported\n            into.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "PreSignedUrl": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The pre-signed URL to be used to upload the <code>.csv</code> file.</simpara>\n      ",
                "documentation": "\n        <p>The pre-signed URL to be used to upload the <code>.csv</code> file.</p>\n      ",
                "shape_name": "PreSignedUrlType",
                "min_length": 0,
                "max_length": 2048
              },
              "CreationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the user import job was created.</simpara>\n      ",
                "documentation": "\n        <p>The date the user import job was created.</p>\n      ",
                "shape_name": "DateType"
              },
              "StartDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date when the user import job was started.</simpara>\n      ",
                "documentation": "\n        <p>The date when the user import job was started.</p>\n      ",
                "shape_name": "DateType"
              },
              "CompletionDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date when the user import job was completed.</simpara>\n      ",
                "documentation": "\n        <p>The date when the user import job was completed.</p>\n      ",
                "shape_name": "DateType"
              },
              "Status": {
                "type": "string",
                "enum": [
                  "Created",
                  "Pending",
                  "InProgress",
                  "Stopping",
                  "Expired",
                  "Stopped",
                  "Failed",
                  "Succeeded"
                ],
                "zonbookDocumentation": "\n        <simpara>The status of the user import job. One of the following:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>\n                  <code>Created</code> - The job was created but not started.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Pending</code> - A transition state. You have started the job, but it\n                    has not begun importing users yet.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>InProgress</code> - The job has started, and users are being\n                    imported.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Stopping</code> - You have stopped the job, but the job has not\n                    stopped importing users yet.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Stopped</code> - You have stopped the job, and the job has stopped\n                    importing users.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Succeeded</code> - The job has completed successfully.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Failed</code> - The job has stopped due to an error.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Expired</code> - You created a job, but did not start the job within\n                    24-48 hours. All data associated with the job was deleted, and the job cannot be\n                    started.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
                "documentation": "\n        <p>The status of the user import job. One of the following:</p>\n        <ul>\n            <li>\n                <p>\n                  <code>Created</code> - The job was created but not started.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Pending</code> - A transition state. You have started the job, but it\n                    has not begun importing users yet.</p>\n            </li>\n            <li>\n                <p>\n                  <code>InProgress</code> - The job has started, and users are being\n                    imported.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Stopping</code> - You have stopped the job, but the job has not\n                    stopped importing users yet.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Stopped</code> - You have stopped the job, and the job has stopped\n                    importing users.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Succeeded</code> - The job has completed successfully.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Failed</code> - The job has stopped due to an error.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Expired</code> - You created a job, but did not start the job within\n                    24-48 hours. All data associated with the job was deleted, and the job cannot be\n                    started.</p>\n            </li>\n         </ul>\n      ",
                "shape_name": "UserImportJobStatusType"
              },
              "CloudWatchLogsRoleArn": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>The role ARN for the Amazon CloudWatch Logging role for the user import job. For\n            more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito\n            Developer Guide.</simpara>\n      ",
                "documentation": "\n        <p>The role ARN for the Amazon CloudWatch Logging role for the user import job. For\n            more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito\n            Developer Guide.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "ImportedUsers": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>The number of users that were successfully imported.</simpara>\n      ",
                "documentation": "\n        <p>The number of users that were successfully imported.</p>\n      ",
                "shape_name": "LongType"
              },
              "SkippedUsers": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>The number of users that were skipped.</simpara>\n      ",
                "documentation": "\n        <p>The number of users that were skipped.</p>\n      ",
                "shape_name": "LongType"
              },
              "FailedUsers": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>The number of users that could not be imported.</simpara>\n      ",
                "documentation": "\n        <p>The number of users that could not be imported.</p>\n      ",
                "shape_name": "LongType"
              },
              "CompletionMessage": {
                "type": "string",
                "pattern": "[\\w]+",
                "zonbookDocumentation": "\n        <simpara>The message returned when the user import job is completed.</simpara>\n      ",
                "documentation": "\n        <p>The message returned when the user import job is completed.</p>\n      ",
                "shape_name": "CompletionMessageType",
                "min_length": 1,
                "max_length": 128
              }
            },
            "zonbookDocumentation": "\n        <simpara>The job object that represents the user import job.</simpara>\n      ",
            "documentation": "\n        <p>The job object that represents the user import job.</p>\n      ",
            "shape_name": "UserImportJobType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server to the request to create the user import\n            job.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server to the request to create the user import\n            job.</p>\n      ",
        "shape_name": "CreateUserImportJobResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a precondition is not met.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a precondition is not met.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a precondition is not met.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a precondition is not met.</p>\n      ",
          "shape_name": "PreconditionNotMetException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Creates the user import job.</p>\n      "
    },
    "DescribeUserImportJob": {
      "name": "DescribeUserImportJob",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool that the users are being imported\n            into.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool that the users are being imported\n            into.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "JobId": {
            "type": "string",
            "pattern": "import-[0-9a-zA-Z-]+",
            "zonbookDocumentation": "\n        <simpara>The job ID for the user import job.</simpara>\n      ",
            "documentation": "\n        <p>The job ID for the user import job.</p>\n      ",
            "required": true,
            "shape_name": "UserImportJobIdType",
            "min_length": 1,
            "max_length": 55
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to describe the user import job.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to describe the user import job.</p>\n      ",
        "shape_name": "DescribeUserImportJobRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "UserImportJob": {
            "type": "structure",
            "members": {
              "JobName": {
                "type": "string",
                "pattern": "[\\w\\s+=,.@-]+",
                "zonbookDocumentation": "\n        <simpara>The job name for the user import job.</simpara>\n      ",
                "documentation": "\n        <p>The job name for the user import job.</p>\n      ",
                "shape_name": "UserImportJobNameType",
                "min_length": 1,
                "max_length": 128
              },
              "JobId": {
                "type": "string",
                "pattern": "import-[0-9a-zA-Z-]+",
                "zonbookDocumentation": "\n        <simpara>The job ID for the user import job.</simpara>\n      ",
                "documentation": "\n        <p>The job ID for the user import job.</p>\n      ",
                "shape_name": "UserImportJobIdType",
                "min_length": 1,
                "max_length": 55
              },
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool that the users are being imported\n            into.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID for the user pool that the users are being imported\n            into.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "PreSignedUrl": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The pre-signed URL to be used to upload the <code>.csv</code> file.</simpara>\n      ",
                "documentation": "\n        <p>The pre-signed URL to be used to upload the <code>.csv</code> file.</p>\n      ",
                "shape_name": "PreSignedUrlType",
                "min_length": 0,
                "max_length": 2048
              },
              "CreationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the user import job was created.</simpara>\n      ",
                "documentation": "\n        <p>The date the user import job was created.</p>\n      ",
                "shape_name": "DateType"
              },
              "StartDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date when the user import job was started.</simpara>\n      ",
                "documentation": "\n        <p>The date when the user import job was started.</p>\n      ",
                "shape_name": "DateType"
              },
              "CompletionDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date when the user import job was completed.</simpara>\n      ",
                "documentation": "\n        <p>The date when the user import job was completed.</p>\n      ",
                "shape_name": "DateType"
              },
              "Status": {
                "type": "string",
                "enum": [
                  "Created",
                  "Pending",
                  "InProgress",
                  "Stopping",
                  "Expired",
                  "Stopped",
                  "Failed",
                  "Succeeded"
                ],
                "zonbookDocumentation": "\n        <simpara>The status of the user import job. One of the following:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>\n                  <code>Created</code> - The job was created but not started.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Pending</code> - A transition state. You have started the job, but it\n                    has not begun importing users yet.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>InProgress</code> - The job has started, and users are being\n                    imported.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Stopping</code> - You have stopped the job, but the job has not\n                    stopped importing users yet.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Stopped</code> - You have stopped the job, and the job has stopped\n                    importing users.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Succeeded</code> - The job has completed successfully.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Failed</code> - The job has stopped due to an error.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Expired</code> - You created a job, but did not start the job within\n                    24-48 hours. All data associated with the job was deleted, and the job cannot be\n                    started.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
                "documentation": "\n        <p>The status of the user import job. One of the following:</p>\n        <ul>\n            <li>\n                <p>\n                  <code>Created</code> - The job was created but not started.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Pending</code> - A transition state. You have started the job, but it\n                    has not begun importing users yet.</p>\n            </li>\n            <li>\n                <p>\n                  <code>InProgress</code> - The job has started, and users are being\n                    imported.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Stopping</code> - You have stopped the job, but the job has not\n                    stopped importing users yet.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Stopped</code> - You have stopped the job, and the job has stopped\n                    importing users.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Succeeded</code> - The job has completed successfully.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Failed</code> - The job has stopped due to an error.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Expired</code> - You created a job, but did not start the job within\n                    24-48 hours. All data associated with the job was deleted, and the job cannot be\n                    started.</p>\n            </li>\n         </ul>\n      ",
                "shape_name": "UserImportJobStatusType"
              },
              "CloudWatchLogsRoleArn": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>The role ARN for the Amazon CloudWatch Logging role for the user import job. For\n            more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito\n            Developer Guide.</simpara>\n      ",
                "documentation": "\n        <p>The role ARN for the Amazon CloudWatch Logging role for the user import job. For\n            more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito\n            Developer Guide.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "ImportedUsers": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>The number of users that were successfully imported.</simpara>\n      ",
                "documentation": "\n        <p>The number of users that were successfully imported.</p>\n      ",
                "shape_name": "LongType"
              },
              "SkippedUsers": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>The number of users that were skipped.</simpara>\n      ",
                "documentation": "\n        <p>The number of users that were skipped.</p>\n      ",
                "shape_name": "LongType"
              },
              "FailedUsers": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>The number of users that could not be imported.</simpara>\n      ",
                "documentation": "\n        <p>The number of users that could not be imported.</p>\n      ",
                "shape_name": "LongType"
              },
              "CompletionMessage": {
                "type": "string",
                "pattern": "[\\w]+",
                "zonbookDocumentation": "\n        <simpara>The message returned when the user import job is completed.</simpara>\n      ",
                "documentation": "\n        <p>The message returned when the user import job is completed.</p>\n      ",
                "shape_name": "CompletionMessageType",
                "min_length": 1,
                "max_length": 128
              }
            },
            "zonbookDocumentation": "\n        <simpara>The job object that represents the user import job.</simpara>\n      ",
            "documentation": "\n        <p>The job object that represents the user import job.</p>\n      ",
            "shape_name": "UserImportJobType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server to the request to describe the user import\n            job.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server to the request to describe the user import\n            job.</p>\n      ",
        "shape_name": "DescribeUserImportJobResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Describes the user import job.</p>\n      "
    },
    "ListUserImportJobs": {
      "name": "ListUserImportJobs",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool that the users are being imported\n            into.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool that the users are being imported\n            into.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "MaxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n        <simpara>The maximum number of import jobs you want the request to return.</simpara>\n      ",
            "documentation": "\n        <p>The maximum number of import jobs you want the request to return.</p>\n      ",
            "required": true,
            "shape_name": "PoolQueryLimitType",
            "min_length": 1,
            "max_length": 60
          },
          "PaginationToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>An identifier that was returned from the previous call to\n                <code>ListUserImportJobs</code>, which can be used to return the next set of import\n            jobs in the list.</simpara>\n      ",
            "documentation": "\n        <p>An identifier that was returned from the previous call to\n                <code>ListUserImportJobs</code>, which can be used to return the next set of import\n            jobs in the list.</p>\n      ",
            "shape_name": "PaginationKeyType",
            "min_length": 1
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to list the user import jobs.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to list the user import jobs.</p>\n      ",
        "shape_name": "ListUserImportJobsRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "UserImportJobs": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The user import jobs.</simpara>\n      ",
            "documentation": "\n        <p>The user import jobs.</p>\n      ",
            "shape_name": "UserImportJobsListType",
            "min_length": 1,
            "max_length": 50,
            "members": {
              "type": "structure",
              "members": {
                "JobName": {
                  "type": "string",
                  "pattern": "[\\w\\s+=,.@-]+",
                  "zonbookDocumentation": "\n        <simpara>The job name for the user import job.</simpara>\n      ",
                  "documentation": "\n        <p>The job name for the user import job.</p>\n      ",
                  "shape_name": "UserImportJobNameType",
                  "min_length": 1,
                  "max_length": 128
                },
                "JobId": {
                  "type": "string",
                  "pattern": "import-[0-9a-zA-Z-]+",
                  "zonbookDocumentation": "\n        <simpara>The job ID for the user import job.</simpara>\n      ",
                  "documentation": "\n        <p>The job ID for the user import job.</p>\n      ",
                  "shape_name": "UserImportJobIdType",
                  "min_length": 1,
                  "max_length": 55
                },
                "UserPoolId": {
                  "type": "string",
                  "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                  "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool that the users are being imported\n            into.</simpara>\n      ",
                  "documentation": "\n        <p>The user pool ID for the user pool that the users are being imported\n            into.</p>\n      ",
                  "shape_name": "UserPoolIdType",
                  "min_length": 1,
                  "max_length": 55
                },
                "PreSignedUrl": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>The pre-signed URL to be used to upload the <code>.csv</code> file.</simpara>\n      ",
                  "documentation": "\n        <p>The pre-signed URL to be used to upload the <code>.csv</code> file.</p>\n      ",
                  "shape_name": "PreSignedUrlType",
                  "min_length": 0,
                  "max_length": 2048
                },
                "CreationDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The date the user import job was created.</simpara>\n      ",
                  "documentation": "\n        <p>The date the user import job was created.</p>\n      ",
                  "shape_name": "DateType"
                },
                "StartDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The date when the user import job was started.</simpara>\n      ",
                  "documentation": "\n        <p>The date when the user import job was started.</p>\n      ",
                  "shape_name": "DateType"
                },
                "CompletionDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The date when the user import job was completed.</simpara>\n      ",
                  "documentation": "\n        <p>The date when the user import job was completed.</p>\n      ",
                  "shape_name": "DateType"
                },
                "Status": {
                  "type": "string",
                  "enum": [
                    "Created",
                    "Pending",
                    "InProgress",
                    "Stopping",
                    "Expired",
                    "Stopped",
                    "Failed",
                    "Succeeded"
                  ],
                  "zonbookDocumentation": "\n        <simpara>The status of the user import job. One of the following:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>\n                  <code>Created</code> - The job was created but not started.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Pending</code> - A transition state. You have started the job, but it\n                    has not begun importing users yet.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>InProgress</code> - The job has started, and users are being\n                    imported.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Stopping</code> - You have stopped the job, but the job has not\n                    stopped importing users yet.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Stopped</code> - You have stopped the job, and the job has stopped\n                    importing users.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Succeeded</code> - The job has completed successfully.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Failed</code> - The job has stopped due to an error.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Expired</code> - You created a job, but did not start the job within\n                    24-48 hours. All data associated with the job was deleted, and the job cannot be\n                    started.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
                  "documentation": "\n        <p>The status of the user import job. One of the following:</p>\n        <ul>\n            <li>\n                <p>\n                  <code>Created</code> - The job was created but not started.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Pending</code> - A transition state. You have started the job, but it\n                    has not begun importing users yet.</p>\n            </li>\n            <li>\n                <p>\n                  <code>InProgress</code> - The job has started, and users are being\n                    imported.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Stopping</code> - You have stopped the job, but the job has not\n                    stopped importing users yet.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Stopped</code> - You have stopped the job, and the job has stopped\n                    importing users.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Succeeded</code> - The job has completed successfully.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Failed</code> - The job has stopped due to an error.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Expired</code> - You created a job, but did not start the job within\n                    24-48 hours. All data associated with the job was deleted, and the job cannot be\n                    started.</p>\n            </li>\n         </ul>\n      ",
                  "shape_name": "UserImportJobStatusType"
                },
                "CloudWatchLogsRoleArn": {
                  "type": "string",
                  "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                  "zonbookDocumentation": "\n        <simpara>The role ARN for the Amazon CloudWatch Logging role for the user import job. For\n            more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito\n            Developer Guide.</simpara>\n      ",
                  "documentation": "\n        <p>The role ARN for the Amazon CloudWatch Logging role for the user import job. For\n            more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito\n            Developer Guide.</p>\n      ",
                  "shape_name": "ArnType",
                  "min_length": 20,
                  "max_length": 2048
                },
                "ImportedUsers": {
                  "type": "long",
                  "zonbookDocumentation": "\n        <simpara>The number of users that were successfully imported.</simpara>\n      ",
                  "documentation": "\n        <p>The number of users that were successfully imported.</p>\n      ",
                  "shape_name": "LongType"
                },
                "SkippedUsers": {
                  "type": "long",
                  "zonbookDocumentation": "\n        <simpara>The number of users that were skipped.</simpara>\n      ",
                  "documentation": "\n        <p>The number of users that were skipped.</p>\n      ",
                  "shape_name": "LongType"
                },
                "FailedUsers": {
                  "type": "long",
                  "zonbookDocumentation": "\n        <simpara>The number of users that could not be imported.</simpara>\n      ",
                  "documentation": "\n        <p>The number of users that could not be imported.</p>\n      ",
                  "shape_name": "LongType"
                },
                "CompletionMessage": {
                  "type": "string",
                  "pattern": "[\\w]+",
                  "zonbookDocumentation": "\n        <simpara>The message returned when the user import job is completed.</simpara>\n      ",
                  "documentation": "\n        <p>The message returned when the user import job is completed.</p>\n      ",
                  "shape_name": "CompletionMessageType",
                  "min_length": 1,
                  "max_length": 128
                }
              },
              "zonbookDocumentation": "\n        <simpara>The user import job type.</simpara>\n      ",
              "documentation": "\n        <p>The user import job type.</p>\n      ",
              "shape_name": "UserImportJobType"
            }
          },
          "PaginationToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>An identifier that can be used to return the next set of user import jobs in the\n            list.</simpara>\n      ",
            "documentation": "\n        <p>An identifier that can be used to return the next set of user import jobs in the\n            list.</p>\n      ",
            "shape_name": "PaginationKeyType",
            "min_length": 1
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server to the request to list the user import\n            jobs.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server to the request to list the user import\n            jobs.</p>\n      ",
        "shape_name": "ListUserImportJobsResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Lists the user import jobs.</p>\n      "
    },
    "StartUserImportJob": {
      "name": "StartUserImportJob",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool that the users are being imported\n            into.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool that the users are being imported\n            into.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "JobId": {
            "type": "string",
            "pattern": "import-[0-9a-zA-Z-]+",
            "zonbookDocumentation": "\n        <simpara>The job ID for the user import job.</simpara>\n      ",
            "documentation": "\n        <p>The job ID for the user import job.</p>\n      ",
            "required": true,
            "shape_name": "UserImportJobIdType",
            "min_length": 1,
            "max_length": 55
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to start the user import job.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to start the user import job.</p>\n      ",
        "shape_name": "StartUserImportJobRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "UserImportJob": {
            "type": "structure",
            "members": {
              "JobName": {
                "type": "string",
                "pattern": "[\\w\\s+=,.@-]+",
                "zonbookDocumentation": "\n        <simpara>The job name for the user import job.</simpara>\n      ",
                "documentation": "\n        <p>The job name for the user import job.</p>\n      ",
                "shape_name": "UserImportJobNameType",
                "min_length": 1,
                "max_length": 128
              },
              "JobId": {
                "type": "string",
                "pattern": "import-[0-9a-zA-Z-]+",
                "zonbookDocumentation": "\n        <simpara>The job ID for the user import job.</simpara>\n      ",
                "documentation": "\n        <p>The job ID for the user import job.</p>\n      ",
                "shape_name": "UserImportJobIdType",
                "min_length": 1,
                "max_length": 55
              },
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool that the users are being imported\n            into.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID for the user pool that the users are being imported\n            into.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "PreSignedUrl": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The pre-signed URL to be used to upload the <code>.csv</code> file.</simpara>\n      ",
                "documentation": "\n        <p>The pre-signed URL to be used to upload the <code>.csv</code> file.</p>\n      ",
                "shape_name": "PreSignedUrlType",
                "min_length": 0,
                "max_length": 2048
              },
              "CreationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the user import job was created.</simpara>\n      ",
                "documentation": "\n        <p>The date the user import job was created.</p>\n      ",
                "shape_name": "DateType"
              },
              "StartDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date when the user import job was started.</simpara>\n      ",
                "documentation": "\n        <p>The date when the user import job was started.</p>\n      ",
                "shape_name": "DateType"
              },
              "CompletionDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date when the user import job was completed.</simpara>\n      ",
                "documentation": "\n        <p>The date when the user import job was completed.</p>\n      ",
                "shape_name": "DateType"
              },
              "Status": {
                "type": "string",
                "enum": [
                  "Created",
                  "Pending",
                  "InProgress",
                  "Stopping",
                  "Expired",
                  "Stopped",
                  "Failed",
                  "Succeeded"
                ],
                "zonbookDocumentation": "\n        <simpara>The status of the user import job. One of the following:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>\n                  <code>Created</code> - The job was created but not started.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Pending</code> - A transition state. You have started the job, but it\n                    has not begun importing users yet.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>InProgress</code> - The job has started, and users are being\n                    imported.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Stopping</code> - You have stopped the job, but the job has not\n                    stopped importing users yet.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Stopped</code> - You have stopped the job, and the job has stopped\n                    importing users.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Succeeded</code> - The job has completed successfully.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Failed</code> - The job has stopped due to an error.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Expired</code> - You created a job, but did not start the job within\n                    24-48 hours. All data associated with the job was deleted, and the job cannot be\n                    started.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
                "documentation": "\n        <p>The status of the user import job. One of the following:</p>\n        <ul>\n            <li>\n                <p>\n                  <code>Created</code> - The job was created but not started.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Pending</code> - A transition state. You have started the job, but it\n                    has not begun importing users yet.</p>\n            </li>\n            <li>\n                <p>\n                  <code>InProgress</code> - The job has started, and users are being\n                    imported.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Stopping</code> - You have stopped the job, but the job has not\n                    stopped importing users yet.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Stopped</code> - You have stopped the job, and the job has stopped\n                    importing users.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Succeeded</code> - The job has completed successfully.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Failed</code> - The job has stopped due to an error.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Expired</code> - You created a job, but did not start the job within\n                    24-48 hours. All data associated with the job was deleted, and the job cannot be\n                    started.</p>\n            </li>\n         </ul>\n      ",
                "shape_name": "UserImportJobStatusType"
              },
              "CloudWatchLogsRoleArn": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>The role ARN for the Amazon CloudWatch Logging role for the user import job. For\n            more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito\n            Developer Guide.</simpara>\n      ",
                "documentation": "\n        <p>The role ARN for the Amazon CloudWatch Logging role for the user import job. For\n            more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito\n            Developer Guide.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "ImportedUsers": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>The number of users that were successfully imported.</simpara>\n      ",
                "documentation": "\n        <p>The number of users that were successfully imported.</p>\n      ",
                "shape_name": "LongType"
              },
              "SkippedUsers": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>The number of users that were skipped.</simpara>\n      ",
                "documentation": "\n        <p>The number of users that were skipped.</p>\n      ",
                "shape_name": "LongType"
              },
              "FailedUsers": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>The number of users that could not be imported.</simpara>\n      ",
                "documentation": "\n        <p>The number of users that could not be imported.</p>\n      ",
                "shape_name": "LongType"
              },
              "CompletionMessage": {
                "type": "string",
                "pattern": "[\\w]+",
                "zonbookDocumentation": "\n        <simpara>The message returned when the user import job is completed.</simpara>\n      ",
                "documentation": "\n        <p>The message returned when the user import job is completed.</p>\n      ",
                "shape_name": "CompletionMessageType",
                "min_length": 1,
                "max_length": 128
              }
            },
            "zonbookDocumentation": "\n        <simpara>The job object that represents the user import job.</simpara>\n      ",
            "documentation": "\n        <p>The job object that represents the user import job.</p>\n      ",
            "shape_name": "UserImportJobType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server to the request to start the user import\n            job.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server to the request to start the user import\n            job.</p>\n      ",
        "shape_name": "StartUserImportJobResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a precondition is not met.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a precondition is not met.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a precondition is not met.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a precondition is not met.</p>\n      ",
          "shape_name": "PreconditionNotMetException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        }
      ],
      "documentation": "\n        <p>Starts the user import.</p>\n      "
    },
    "StopUserImportJob": {
      "name": "StopUserImportJob",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool that the users are being imported\n            into.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool that the users are being imported\n            into.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "JobId": {
            "type": "string",
            "pattern": "import-[0-9a-zA-Z-]+",
            "zonbookDocumentation": "\n        <simpara>The job ID for the user import job.</simpara>\n      ",
            "documentation": "\n        <p>The job ID for the user import job.</p>\n      ",
            "required": true,
            "shape_name": "UserImportJobIdType",
            "min_length": 1,
            "max_length": 55
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to stop the user import job.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to stop the user import job.</p>\n      ",
        "shape_name": "StopUserImportJobRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "UserImportJob": {
            "type": "structure",
            "members": {
              "JobName": {
                "type": "string",
                "pattern": "[\\w\\s+=,.@-]+",
                "zonbookDocumentation": "\n        <simpara>The job name for the user import job.</simpara>\n      ",
                "documentation": "\n        <p>The job name for the user import job.</p>\n      ",
                "shape_name": "UserImportJobNameType",
                "min_length": 1,
                "max_length": 128
              },
              "JobId": {
                "type": "string",
                "pattern": "import-[0-9a-zA-Z-]+",
                "zonbookDocumentation": "\n        <simpara>The job ID for the user import job.</simpara>\n      ",
                "documentation": "\n        <p>The job ID for the user import job.</p>\n      ",
                "shape_name": "UserImportJobIdType",
                "min_length": 1,
                "max_length": 55
              },
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool that the users are being imported\n            into.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID for the user pool that the users are being imported\n            into.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "PreSignedUrl": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The pre-signed URL to be used to upload the <code>.csv</code> file.</simpara>\n      ",
                "documentation": "\n        <p>The pre-signed URL to be used to upload the <code>.csv</code> file.</p>\n      ",
                "shape_name": "PreSignedUrlType",
                "min_length": 0,
                "max_length": 2048
              },
              "CreationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the user import job was created.</simpara>\n      ",
                "documentation": "\n        <p>The date the user import job was created.</p>\n      ",
                "shape_name": "DateType"
              },
              "StartDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date when the user import job was started.</simpara>\n      ",
                "documentation": "\n        <p>The date when the user import job was started.</p>\n      ",
                "shape_name": "DateType"
              },
              "CompletionDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date when the user import job was completed.</simpara>\n      ",
                "documentation": "\n        <p>The date when the user import job was completed.</p>\n      ",
                "shape_name": "DateType"
              },
              "Status": {
                "type": "string",
                "enum": [
                  "Created",
                  "Pending",
                  "InProgress",
                  "Stopping",
                  "Expired",
                  "Stopped",
                  "Failed",
                  "Succeeded"
                ],
                "zonbookDocumentation": "\n        <simpara>The status of the user import job. One of the following:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>\n                  <code>Created</code> - The job was created but not started.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Pending</code> - A transition state. You have started the job, but it\n                    has not begun importing users yet.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>InProgress</code> - The job has started, and users are being\n                    imported.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Stopping</code> - You have stopped the job, but the job has not\n                    stopped importing users yet.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Stopped</code> - You have stopped the job, and the job has stopped\n                    importing users.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Succeeded</code> - The job has completed successfully.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Failed</code> - The job has stopped due to an error.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>\n                  <code>Expired</code> - You created a job, but did not start the job within\n                    24-48 hours. All data associated with the job was deleted, and the job cannot be\n                    started.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
                "documentation": "\n        <p>The status of the user import job. One of the following:</p>\n        <ul>\n            <li>\n                <p>\n                  <code>Created</code> - The job was created but not started.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Pending</code> - A transition state. You have started the job, but it\n                    has not begun importing users yet.</p>\n            </li>\n            <li>\n                <p>\n                  <code>InProgress</code> - The job has started, and users are being\n                    imported.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Stopping</code> - You have stopped the job, but the job has not\n                    stopped importing users yet.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Stopped</code> - You have stopped the job, and the job has stopped\n                    importing users.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Succeeded</code> - The job has completed successfully.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Failed</code> - The job has stopped due to an error.</p>\n            </li>\n            <li>\n                <p>\n                  <code>Expired</code> - You created a job, but did not start the job within\n                    24-48 hours. All data associated with the job was deleted, and the job cannot be\n                    started.</p>\n            </li>\n         </ul>\n      ",
                "shape_name": "UserImportJobStatusType"
              },
              "CloudWatchLogsRoleArn": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>The role ARN for the Amazon CloudWatch Logging role for the user import job. For\n            more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito\n            Developer Guide.</simpara>\n      ",
                "documentation": "\n        <p>The role ARN for the Amazon CloudWatch Logging role for the user import job. For\n            more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito\n            Developer Guide.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "ImportedUsers": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>The number of users that were successfully imported.</simpara>\n      ",
                "documentation": "\n        <p>The number of users that were successfully imported.</p>\n      ",
                "shape_name": "LongType"
              },
              "SkippedUsers": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>The number of users that were skipped.</simpara>\n      ",
                "documentation": "\n        <p>The number of users that were skipped.</p>\n      ",
                "shape_name": "LongType"
              },
              "FailedUsers": {
                "type": "long",
                "zonbookDocumentation": "\n        <simpara>The number of users that could not be imported.</simpara>\n      ",
                "documentation": "\n        <p>The number of users that could not be imported.</p>\n      ",
                "shape_name": "LongType"
              },
              "CompletionMessage": {
                "type": "string",
                "pattern": "[\\w]+",
                "zonbookDocumentation": "\n        <simpara>The message returned when the user import job is completed.</simpara>\n      ",
                "documentation": "\n        <p>The message returned when the user import job is completed.</p>\n      ",
                "shape_name": "CompletionMessageType",
                "min_length": 1,
                "max_length": 128
              }
            },
            "zonbookDocumentation": "\n        <simpara>The job object that represents the user import job.</simpara>\n      ",
            "documentation": "\n        <p>The job object that represents the user import job.</p>\n      ",
            "shape_name": "UserImportJobType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server to the request to stop the user import\n            job.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server to the request to stop the user import\n            job.</p>\n      ",
        "shape_name": "StopUserImportJobResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a precondition is not met.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a precondition is not met.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a precondition is not met.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a precondition is not met.</p>\n      ",
          "shape_name": "PreconditionNotMetException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        }
      ],
      "documentation": "\n        <p>Stops the user import job.</p>\n      "
    },
    "GetCSVHeader": {
      "name": "GetCSVHeader",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool that the users are to be imported\n            into.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool that the users are to be imported\n            into.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to get the header information for the .csv file for the user\n            import job.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to get the header information for the .csv file for the user\n            import job.</p>\n      ",
        "shape_name": "GetCSVHeaderRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool that the users are to be imported\n            into.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool that the users are to be imported\n            into.</p>\n      ",
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "CSVHeader": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The header information for the .csv file for the user import job.</simpara>\n      ",
            "documentation": "\n        <p>The header information for the .csv file for the user import job.</p>\n      ",
            "shape_name": "ListOfStringTypes",
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server to the request to get the header\n            information for the .csv file for the user import job.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server to the request to get the header\n            information for the .csv file for the user import job.</p>\n      ",
        "shape_name": "GetCSVHeaderResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Gets the header information for the .csv file to be used as input for the user\n            import job.</p>\n      "
    },
    "CreateGroup": {
      "name": "CreateGroup",
      "input": {
        "type": "structure",
        "members": {
          "GroupName": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "zonbookDocumentation": "\n        <simpara>The name of the group. Must be unique.</simpara>\n      ",
            "documentation": "\n        <p>The name of the group. Must be unique.</p>\n      ",
            "required": true,
            "shape_name": "GroupNameType",
            "min_length": 1,
            "max_length": 128
          },
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Description": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>A string containing the description of the group.</simpara>\n      ",
            "documentation": "\n        <p>A string containing the description of the group.</p>\n      ",
            "shape_name": "DescriptionType",
            "max_length": 2048
          },
          "RoleArn": {
            "type": "string",
            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
            "zonbookDocumentation": "\n        <simpara>The role ARN for the group.</simpara>\n      ",
            "documentation": "\n        <p>The role ARN for the group.</p>\n      ",
            "shape_name": "ArnType",
            "min_length": 20,
            "max_length": 2048
          },
          "Precedence": {
            "type": "integer",
            "zonbookDocumentation": "\n        <simpara>A nonnegative integer value that specifies the precedence of this group relative to\n            the other groups that a user can belong to in the user pool. Zero is the highest\n            precedence value. Groups with lower <code>Precedence</code> values take precedence over\n            groups with higher or null <code>Precedence</code> values. If a user belongs to two or\n            more groups, it is the group with the lowest precedence value whose role ARN will be\n            used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in\n            the user's tokens.</simpara>\n        <simpara>Two groups can have the same <code>Precedence</code> value. If this happens,\n            neither group takes precedence over the other. If two groups with the same\n                <code>Precedence</code> have the same role ARN, that role is used in the\n                <code>cognito:preferred_role</code> claim in tokens for users in each group. If the\n            two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is\n            not set in users' tokens.</simpara>\n        <simpara>The default <code>Precedence</code> value is null.</simpara>\n      ",
            "documentation": "\n        <p>A nonnegative integer value that specifies the precedence of this group relative to\n            the other groups that a user can belong to in the user pool. Zero is the highest\n            precedence value. Groups with lower <code>Precedence</code> values take precedence over\n            groups with higher or null <code>Precedence</code> values. If a user belongs to two or\n            more groups, it is the group with the lowest precedence value whose role ARN will be\n            used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in\n            the user's tokens.</p>\n        <p>Two groups can have the same <code>Precedence</code> value. If this happens,\n            neither group takes precedence over the other. If two groups with the same\n                <code>Precedence</code> have the same role ARN, that role is used in the\n                <code>cognito:preferred_role</code> claim in tokens for users in each group. If the\n            two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is\n            not set in users' tokens.</p>\n        <p>The default <code>Precedence</code> value is null.</p>\n      ",
            "shape_name": "PrecedenceType",
            "min_length": 0
          }
        },
        "shape_name": "CreateGroupRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Group": {
            "type": "structure",
            "members": {
              "GroupName": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "zonbookDocumentation": "\n        <simpara>The name of the group.</simpara>\n      ",
                "documentation": "\n        <p>The name of the group.</p>\n      ",
                "shape_name": "GroupNameType",
                "min_length": 1,
                "max_length": 128
              },
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID for the user pool.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "Description": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>A string containing the description of the group.</simpara>\n      ",
                "documentation": "\n        <p>A string containing the description of the group.</p>\n      ",
                "shape_name": "DescriptionType",
                "max_length": 2048
              },
              "RoleArn": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>The role ARN for the group.</simpara>\n      ",
                "documentation": "\n        <p>The role ARN for the group.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "Precedence": {
                "type": "integer",
                "zonbookDocumentation": "\n        <simpara>A nonnegative integer value that specifies the precedence of this group relative to\n            the other groups that a user can belong to in the user pool. If a user belongs to two or\n            more groups, it is the group with the highest precedence whose role ARN will be used in\n            the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the\n            user's tokens. Groups with higher <code>Precedence</code> values take precedence over\n            groups with lower <code>Precedence</code> values or with null <code>Precedence</code>\n            values.</simpara>\n        <simpara>Two groups can have the same <code>Precedence</code> value. If this happens,\n            neither group takes precedence over the other. If two groups with the same\n                <code>Precedence</code> have the same role ARN, that role is used in the\n                <code>cognito:preferred_role</code> claim in tokens for users in each group. If the\n            two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is\n            not set in users' tokens.</simpara>\n        <simpara>The default <code>Precedence</code> value is null.</simpara>\n      ",
                "documentation": "\n        <p>A nonnegative integer value that specifies the precedence of this group relative to\n            the other groups that a user can belong to in the user pool. If a user belongs to two or\n            more groups, it is the group with the highest precedence whose role ARN will be used in\n            the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the\n            user's tokens. Groups with higher <code>Precedence</code> values take precedence over\n            groups with lower <code>Precedence</code> values or with null <code>Precedence</code>\n            values.</p>\n        <p>Two groups can have the same <code>Precedence</code> value. If this happens,\n            neither group takes precedence over the other. If two groups with the same\n                <code>Precedence</code> have the same role ARN, that role is used in the\n                <code>cognito:preferred_role</code> claim in tokens for users in each group. If the\n            two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is\n            not set in users' tokens.</p>\n        <p>The default <code>Precedence</code> value is null.</p>\n      ",
                "shape_name": "PrecedenceType",
                "min_length": 0
              },
              "LastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the group was last modified.</simpara>\n      ",
                "documentation": "\n        <p>The date the group was last modified.</p>\n      ",
                "shape_name": "DateType"
              },
              "CreationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the group was created.</simpara>\n      ",
                "documentation": "\n        <p>The date the group was created.</p>\n      ",
                "shape_name": "DateType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The group object for the group.</simpara>\n      ",
            "documentation": "\n        <p>The group object for the group.</p>\n      ",
            "shape_name": "GroupType"
          }
        },
        "shape_name": "CreateGroupResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "MessageType",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters a group that already exists\n            in the user pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters a group that already exists\n            in the user pool.</p>\n      ",
          "shape_name": "GroupExistsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Creates a new group in the specified user pool.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "UpdateGroup": {
      "name": "UpdateGroup",
      "input": {
        "type": "structure",
        "members": {
          "GroupName": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "zonbookDocumentation": "\n        <simpara>The name of the group.</simpara>\n      ",
            "documentation": "\n        <p>The name of the group.</p>\n      ",
            "required": true,
            "shape_name": "GroupNameType",
            "min_length": 1,
            "max_length": 128
          },
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Description": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>A string containing the new description of the group.</simpara>\n      ",
            "documentation": "\n        <p>A string containing the new description of the group.</p>\n      ",
            "shape_name": "DescriptionType",
            "max_length": 2048
          },
          "RoleArn": {
            "type": "string",
            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
            "zonbookDocumentation": "\n        <simpara>The new role ARN for the group. This is used for setting the\n                <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the\n            token.</simpara>\n      ",
            "documentation": "\n        <p>The new role ARN for the group. This is used for setting the\n                <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the\n            token.</p>\n      ",
            "shape_name": "ArnType",
            "min_length": 20,
            "max_length": 2048
          },
          "Precedence": {
            "type": "integer",
            "zonbookDocumentation": "\n        <simpara>The new precedence value for the group. For more information about this parameter,\n            see <xref linkend=\"API_CreateGroup\"/>.</simpara>\n      ",
            "documentation": "\n        <p>The new precedence value for the group. For more information about this parameter,\n            see .</p>\n      ",
            "shape_name": "PrecedenceType",
            "min_length": 0
          }
        },
        "shape_name": "UpdateGroupRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Group": {
            "type": "structure",
            "members": {
              "GroupName": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "zonbookDocumentation": "\n        <simpara>The name of the group.</simpara>\n      ",
                "documentation": "\n        <p>The name of the group.</p>\n      ",
                "shape_name": "GroupNameType",
                "min_length": 1,
                "max_length": 128
              },
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID for the user pool.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "Description": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>A string containing the description of the group.</simpara>\n      ",
                "documentation": "\n        <p>A string containing the description of the group.</p>\n      ",
                "shape_name": "DescriptionType",
                "max_length": 2048
              },
              "RoleArn": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>The role ARN for the group.</simpara>\n      ",
                "documentation": "\n        <p>The role ARN for the group.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "Precedence": {
                "type": "integer",
                "zonbookDocumentation": "\n        <simpara>A nonnegative integer value that specifies the precedence of this group relative to\n            the other groups that a user can belong to in the user pool. If a user belongs to two or\n            more groups, it is the group with the highest precedence whose role ARN will be used in\n            the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the\n            user's tokens. Groups with higher <code>Precedence</code> values take precedence over\n            groups with lower <code>Precedence</code> values or with null <code>Precedence</code>\n            values.</simpara>\n        <simpara>Two groups can have the same <code>Precedence</code> value. If this happens,\n            neither group takes precedence over the other. If two groups with the same\n                <code>Precedence</code> have the same role ARN, that role is used in the\n                <code>cognito:preferred_role</code> claim in tokens for users in each group. If the\n            two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is\n            not set in users' tokens.</simpara>\n        <simpara>The default <code>Precedence</code> value is null.</simpara>\n      ",
                "documentation": "\n        <p>A nonnegative integer value that specifies the precedence of this group relative to\n            the other groups that a user can belong to in the user pool. If a user belongs to two or\n            more groups, it is the group with the highest precedence whose role ARN will be used in\n            the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the\n            user's tokens. Groups with higher <code>Precedence</code> values take precedence over\n            groups with lower <code>Precedence</code> values or with null <code>Precedence</code>\n            values.</p>\n        <p>Two groups can have the same <code>Precedence</code> value. If this happens,\n            neither group takes precedence over the other. If two groups with the same\n                <code>Precedence</code> have the same role ARN, that role is used in the\n                <code>cognito:preferred_role</code> claim in tokens for users in each group. If the\n            two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is\n            not set in users' tokens.</p>\n        <p>The default <code>Precedence</code> value is null.</p>\n      ",
                "shape_name": "PrecedenceType",
                "min_length": 0
              },
              "LastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the group was last modified.</simpara>\n      ",
                "documentation": "\n        <p>The date the group was last modified.</p>\n      ",
                "shape_name": "DateType"
              },
              "CreationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the group was created.</simpara>\n      ",
                "documentation": "\n        <p>The date the group was created.</p>\n      ",
                "shape_name": "DateType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The group object for the group.</simpara>\n      ",
            "documentation": "\n        <p>The group object for the group.</p>\n      ",
            "shape_name": "GroupType"
          }
        },
        "shape_name": "UpdateGroupResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Updates the specified group with the specified attributes.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "GetGroup": {
      "name": "GetGroup",
      "input": {
        "type": "structure",
        "members": {
          "GroupName": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "zonbookDocumentation": "\n        <simpara>The name of the group.</simpara>\n      ",
            "documentation": "\n        <p>The name of the group.</p>\n      ",
            "required": true,
            "shape_name": "GroupNameType",
            "min_length": 1,
            "max_length": 128
          },
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          }
        },
        "shape_name": "GetGroupRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Group": {
            "type": "structure",
            "members": {
              "GroupName": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "zonbookDocumentation": "\n        <simpara>The name of the group.</simpara>\n      ",
                "documentation": "\n        <p>The name of the group.</p>\n      ",
                "shape_name": "GroupNameType",
                "min_length": 1,
                "max_length": 128
              },
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID for the user pool.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "Description": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>A string containing the description of the group.</simpara>\n      ",
                "documentation": "\n        <p>A string containing the description of the group.</p>\n      ",
                "shape_name": "DescriptionType",
                "max_length": 2048
              },
              "RoleArn": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>The role ARN for the group.</simpara>\n      ",
                "documentation": "\n        <p>The role ARN for the group.</p>\n      ",
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              },
              "Precedence": {
                "type": "integer",
                "zonbookDocumentation": "\n        <simpara>A nonnegative integer value that specifies the precedence of this group relative to\n            the other groups that a user can belong to in the user pool. If a user belongs to two or\n            more groups, it is the group with the highest precedence whose role ARN will be used in\n            the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the\n            user's tokens. Groups with higher <code>Precedence</code> values take precedence over\n            groups with lower <code>Precedence</code> values or with null <code>Precedence</code>\n            values.</simpara>\n        <simpara>Two groups can have the same <code>Precedence</code> value. If this happens,\n            neither group takes precedence over the other. If two groups with the same\n                <code>Precedence</code> have the same role ARN, that role is used in the\n                <code>cognito:preferred_role</code> claim in tokens for users in each group. If the\n            two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is\n            not set in users' tokens.</simpara>\n        <simpara>The default <code>Precedence</code> value is null.</simpara>\n      ",
                "documentation": "\n        <p>A nonnegative integer value that specifies the precedence of this group relative to\n            the other groups that a user can belong to in the user pool. If a user belongs to two or\n            more groups, it is the group with the highest precedence whose role ARN will be used in\n            the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the\n            user's tokens. Groups with higher <code>Precedence</code> values take precedence over\n            groups with lower <code>Precedence</code> values or with null <code>Precedence</code>\n            values.</p>\n        <p>Two groups can have the same <code>Precedence</code> value. If this happens,\n            neither group takes precedence over the other. If two groups with the same\n                <code>Precedence</code> have the same role ARN, that role is used in the\n                <code>cognito:preferred_role</code> claim in tokens for users in each group. If the\n            two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is\n            not set in users' tokens.</p>\n        <p>The default <code>Precedence</code> value is null.</p>\n      ",
                "shape_name": "PrecedenceType",
                "min_length": 0
              },
              "LastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the group was last modified.</simpara>\n      ",
                "documentation": "\n        <p>The date the group was last modified.</p>\n      ",
                "shape_name": "DateType"
              },
              "CreationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the group was created.</simpara>\n      ",
                "documentation": "\n        <p>The date the group was created.</p>\n      ",
                "shape_name": "DateType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The group object for the group.</simpara>\n      ",
            "documentation": "\n        <p>The group object for the group.</p>\n      ",
            "shape_name": "GroupType"
          }
        },
        "shape_name": "GetGroupResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Gets a group.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "DeleteGroup": {
      "name": "DeleteGroup",
      "input": {
        "type": "structure",
        "members": {
          "GroupName": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "zonbookDocumentation": "\n        <simpara>The name of the group.</simpara>\n      ",
            "documentation": "\n        <p>The name of the group.</p>\n      ",
            "required": true,
            "shape_name": "GroupNameType",
            "min_length": 1,
            "max_length": 128
          },
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          }
        },
        "shape_name": "DeleteGroupRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Deletes a group. Currently only groups with no members can be deleted.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "ListGroups": {
      "name": "ListGroups",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Limit": {
            "type": "integer",
            "zonbookDocumentation": "\n        <simpara>The limit of the request to list groups.</simpara>\n      ",
            "documentation": "\n        <p>The limit of the request to list groups.</p>\n      ",
            "shape_name": "QueryLimitType",
            "min_length": 0,
            "max_length": 60
          },
          "NextToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</simpara>\n      ",
            "documentation": "\n        <p>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</p>\n      ",
            "shape_name": "PaginationKey",
            "min_length": 1
          }
        },
        "shape_name": "ListGroupsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Groups": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The group objects for the groups.</simpara>\n      ",
            "documentation": "\n        <p>The group objects for the groups.</p>\n      ",
            "shape_name": "GroupListType",
            "members": {
              "type": "structure",
              "members": {
                "GroupName": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "zonbookDocumentation": "\n        <simpara>The name of the group.</simpara>\n      ",
                  "documentation": "\n        <p>The name of the group.</p>\n      ",
                  "shape_name": "GroupNameType",
                  "min_length": 1,
                  "max_length": 128
                },
                "UserPoolId": {
                  "type": "string",
                  "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                  "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool.</simpara>\n      ",
                  "documentation": "\n        <p>The user pool ID for the user pool.</p>\n      ",
                  "shape_name": "UserPoolIdType",
                  "min_length": 1,
                  "max_length": 55
                },
                "Description": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>A string containing the description of the group.</simpara>\n      ",
                  "documentation": "\n        <p>A string containing the description of the group.</p>\n      ",
                  "shape_name": "DescriptionType",
                  "max_length": 2048
                },
                "RoleArn": {
                  "type": "string",
                  "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                  "zonbookDocumentation": "\n        <simpara>The role ARN for the group.</simpara>\n      ",
                  "documentation": "\n        <p>The role ARN for the group.</p>\n      ",
                  "shape_name": "ArnType",
                  "min_length": 20,
                  "max_length": 2048
                },
                "Precedence": {
                  "type": "integer",
                  "zonbookDocumentation": "\n        <simpara>A nonnegative integer value that specifies the precedence of this group relative to\n            the other groups that a user can belong to in the user pool. If a user belongs to two or\n            more groups, it is the group with the highest precedence whose role ARN will be used in\n            the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the\n            user's tokens. Groups with higher <code>Precedence</code> values take precedence over\n            groups with lower <code>Precedence</code> values or with null <code>Precedence</code>\n            values.</simpara>\n        <simpara>Two groups can have the same <code>Precedence</code> value. If this happens,\n            neither group takes precedence over the other. If two groups with the same\n                <code>Precedence</code> have the same role ARN, that role is used in the\n                <code>cognito:preferred_role</code> claim in tokens for users in each group. If the\n            two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is\n            not set in users' tokens.</simpara>\n        <simpara>The default <code>Precedence</code> value is null.</simpara>\n      ",
                  "documentation": "\n        <p>A nonnegative integer value that specifies the precedence of this group relative to\n            the other groups that a user can belong to in the user pool. If a user belongs to two or\n            more groups, it is the group with the highest precedence whose role ARN will be used in\n            the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the\n            user's tokens. Groups with higher <code>Precedence</code> values take precedence over\n            groups with lower <code>Precedence</code> values or with null <code>Precedence</code>\n            values.</p>\n        <p>Two groups can have the same <code>Precedence</code> value. If this happens,\n            neither group takes precedence over the other. If two groups with the same\n                <code>Precedence</code> have the same role ARN, that role is used in the\n                <code>cognito:preferred_role</code> claim in tokens for users in each group. If the\n            two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is\n            not set in users' tokens.</p>\n        <p>The default <code>Precedence</code> value is null.</p>\n      ",
                  "shape_name": "PrecedenceType",
                  "min_length": 0
                },
                "LastModifiedDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The date the group was last modified.</simpara>\n      ",
                  "documentation": "\n        <p>The date the group was last modified.</p>\n      ",
                  "shape_name": "DateType"
                },
                "CreationDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The date the group was created.</simpara>\n      ",
                  "documentation": "\n        <p>The date the group was created.</p>\n      ",
                  "shape_name": "DateType"
                }
              },
              "zonbookDocumentation": "\n        <simpara>The group type.</simpara>\n      ",
              "documentation": "\n        <p>The group type.</p>\n      ",
              "shape_name": "GroupType"
            }
          },
          "NextToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</simpara>\n      ",
            "documentation": "\n        <p>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</p>\n      ",
            "shape_name": "PaginationKey",
            "min_length": 1
          }
        },
        "shape_name": "ListGroupsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Lists the groups associated with a user pool.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "ListUsersInGroup": {
      "name": "ListUsersInGroup",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "GroupName": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "zonbookDocumentation": "\n        <simpara>The name of the group.</simpara>\n      ",
            "documentation": "\n        <p>The name of the group.</p>\n      ",
            "required": true,
            "shape_name": "GroupNameType",
            "min_length": 1,
            "max_length": 128
          },
          "Limit": {
            "type": "integer",
            "zonbookDocumentation": "\n        <simpara>The limit of the request to list users.</simpara>\n      ",
            "documentation": "\n        <p>The limit of the request to list users.</p>\n      ",
            "shape_name": "QueryLimitType",
            "min_length": 0,
            "max_length": 60
          },
          "NextToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</simpara>\n      ",
            "documentation": "\n        <p>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</p>\n      ",
            "shape_name": "PaginationKey",
            "min_length": 1
          }
        },
        "shape_name": "ListUsersInGroupRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Users": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The users returned in the request to list users.</simpara>\n      ",
            "documentation": "\n        <p>The users returned in the request to list users.</p>\n      ",
            "shape_name": "UsersListType",
            "members": {
              "type": "structure",
              "members": {
                "Username": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "sensitive": true,
                  "zonbookDocumentation": "\n        <simpara>The user name of the user you wish to describe.</simpara>\n      ",
                  "documentation": "\n        <p>The user name of the user you wish to describe.</p>\n      ",
                  "shape_name": "UsernameType",
                  "min_length": 1,
                  "max_length": 128
                },
                "Attributes": {
                  "type": "list",
                  "zonbookDocumentation": "\n        <simpara>A container with information about the user type attributes.</simpara>\n      ",
                  "documentation": "\n        <p>A container with information about the user type attributes.</p>\n      ",
                  "shape_name": "AttributeListType",
                  "members": {
                    "type": "structure",
                    "members": {
                      "Name": {
                        "type": "string",
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "zonbookDocumentation": "\n        <simpara>The name of the attribute.</simpara>\n      ",
                        "documentation": "\n        <p>The name of the attribute.</p>\n      ",
                        "required": true,
                        "shape_name": "AttributeNameType",
                        "min_length": 1,
                        "max_length": 32
                      },
                      "Value": {
                        "type": "string",
                        "sensitive": true,
                        "zonbookDocumentation": "\n        <simpara>The value of the attribute.</simpara>\n      ",
                        "documentation": "\n        <p>The value of the attribute.</p>\n      ",
                        "shape_name": "AttributeValueType",
                        "max_length": 2048
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>Specifies whether the attribute is standard or custom.</simpara>\n      ",
                    "documentation": "\n        <p>Specifies whether the attribute is standard or custom.</p>\n      ",
                    "shape_name": "AttributeType"
                  }
                },
                "UserCreateDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The creation date of the user.</simpara>\n      ",
                  "documentation": "\n        <p>The creation date of the user.</p>\n      ",
                  "shape_name": "DateType"
                },
                "UserLastModifiedDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The last modified date of the user.</simpara>\n      ",
                  "documentation": "\n        <p>The last modified date of the user.</p>\n      ",
                  "shape_name": "DateType"
                },
                "Enabled": {
                  "type": "boolean",
                  "zonbookDocumentation": "\n        <simpara>Specifies whether the user is enabled.</simpara>\n      ",
                  "documentation": "\n        <p>Specifies whether the user is enabled.</p>\n      ",
                  "shape_name": "BooleanType"
                },
                "UserStatus": {
                  "type": "string",
                  "enum": [
                    "UNCONFIRMED",
                    "CONFIRMED",
                    "ARCHIVED",
                    "COMPROMISED",
                    "UNKNOWN",
                    "RESET_REQUIRED",
                    "FORCE_CHANGE_PASSWORD"
                  ],
                  "zonbookDocumentation": "\n        <simpara>The user status. Can be one of the following:</simpara>\n        <itemizedlist>\n            <listitem>\n                <simpara>UNCONFIRMED - User has been created but not confirmed.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>CONFIRMED - User has been confirmed.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>ARCHIVED - User is no longer active.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>COMPROMISED - User is disabled due to a potential security\n                    threat.</simpara>\n            </listitem>\n            <listitem>\n                <simpara>UNKNOWN - User status is not known.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
                  "documentation": "\n        <p>The user status. Can be one of the following:</p>\n        <ul>\n            <li>\n                <p>UNCONFIRMED - User has been created but not confirmed.</p>\n            </li>\n            <li>\n                <p>CONFIRMED - User has been confirmed.</p>\n            </li>\n            <li>\n                <p>ARCHIVED - User is no longer active.</p>\n            </li>\n            <li>\n                <p>COMPROMISED - User is disabled due to a potential security\n                    threat.</p>\n            </li>\n            <li>\n                <p>UNKNOWN - User status is not known.</p>\n            </li>\n         </ul>\n      ",
                  "shape_name": "UserStatusType"
                },
                "MFAOptions": {
                  "type": "list",
                  "zonbookDocumentation": "\n        <simpara>The MFA options for the user.</simpara>\n      ",
                  "documentation": "\n        <p>The MFA options for the user.</p>\n      ",
                  "shape_name": "MFAOptionListType",
                  "members": {
                    "type": "structure",
                    "members": {
                      "DeliveryMedium": {
                        "type": "string",
                        "enum": [
                          "SMS",
                          "EMAIL"
                        ],
                        "zonbookDocumentation": "\n        <simpara>The delivery medium (email message or SMS message) to send the MFA code.</simpara>\n      ",
                        "documentation": "\n        <p>The delivery medium (email message or SMS message) to send the MFA code.</p>\n      ",
                        "shape_name": "DeliveryMediumType"
                      },
                      "AttributeName": {
                        "type": "string",
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "zonbookDocumentation": "\n        <simpara>The attribute name of the MFA option type.</simpara>\n      ",
                        "documentation": "\n        <p>The attribute name of the MFA option type.</p>\n      ",
                        "shape_name": "AttributeNameType",
                        "min_length": 1,
                        "max_length": 32
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>Specifies the different settings for multi-factor authentication (MFA).</simpara>\n      ",
                    "documentation": "\n        <p>Specifies the different settings for multi-factor authentication (MFA).</p>\n      ",
                    "shape_name": "MFAOptionType"
                  }
                }
              },
              "zonbookDocumentation": "\n        <simpara>The user type.</simpara>\n      ",
              "documentation": "\n        <p>The user type.</p>\n      ",
              "shape_name": "UserType"
            }
          },
          "NextToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</simpara>\n      ",
            "documentation": "\n        <p>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</p>\n      ",
            "shape_name": "PaginationKey",
            "min_length": 1
          }
        },
        "shape_name": "ListUsersInGroupResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Lists the users in the specified group.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "AdminListGroupsForUser": {
      "name": "AdminListGroupsForUser",
      "input": {
        "type": "structure",
        "members": {
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The username for the user.</simpara>\n      ",
            "documentation": "\n        <p>The username for the user.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Limit": {
            "type": "integer",
            "zonbookDocumentation": "\n        <simpara>The limit of the request to list groups.</simpara>\n      ",
            "documentation": "\n        <p>The limit of the request to list groups.</p>\n      ",
            "shape_name": "QueryLimitType",
            "min_length": 0,
            "max_length": 60
          },
          "NextToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</simpara>\n      ",
            "documentation": "\n        <p>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</p>\n      ",
            "shape_name": "PaginationKey",
            "min_length": 1
          }
        },
        "shape_name": "AdminListGroupsForUserRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Groups": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The groups that the user belongs to.</simpara>\n      ",
            "documentation": "\n        <p>The groups that the user belongs to.</p>\n      ",
            "shape_name": "GroupListType",
            "members": {
              "type": "structure",
              "members": {
                "GroupName": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "zonbookDocumentation": "\n        <simpara>The name of the group.</simpara>\n      ",
                  "documentation": "\n        <p>The name of the group.</p>\n      ",
                  "shape_name": "GroupNameType",
                  "min_length": 1,
                  "max_length": 128
                },
                "UserPoolId": {
                  "type": "string",
                  "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                  "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool.</simpara>\n      ",
                  "documentation": "\n        <p>The user pool ID for the user pool.</p>\n      ",
                  "shape_name": "UserPoolIdType",
                  "min_length": 1,
                  "max_length": 55
                },
                "Description": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>A string containing the description of the group.</simpara>\n      ",
                  "documentation": "\n        <p>A string containing the description of the group.</p>\n      ",
                  "shape_name": "DescriptionType",
                  "max_length": 2048
                },
                "RoleArn": {
                  "type": "string",
                  "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                  "zonbookDocumentation": "\n        <simpara>The role ARN for the group.</simpara>\n      ",
                  "documentation": "\n        <p>The role ARN for the group.</p>\n      ",
                  "shape_name": "ArnType",
                  "min_length": 20,
                  "max_length": 2048
                },
                "Precedence": {
                  "type": "integer",
                  "zonbookDocumentation": "\n        <simpara>A nonnegative integer value that specifies the precedence of this group relative to\n            the other groups that a user can belong to in the user pool. If a user belongs to two or\n            more groups, it is the group with the highest precedence whose role ARN will be used in\n            the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the\n            user's tokens. Groups with higher <code>Precedence</code> values take precedence over\n            groups with lower <code>Precedence</code> values or with null <code>Precedence</code>\n            values.</simpara>\n        <simpara>Two groups can have the same <code>Precedence</code> value. If this happens,\n            neither group takes precedence over the other. If two groups with the same\n                <code>Precedence</code> have the same role ARN, that role is used in the\n                <code>cognito:preferred_role</code> claim in tokens for users in each group. If the\n            two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is\n            not set in users' tokens.</simpara>\n        <simpara>The default <code>Precedence</code> value is null.</simpara>\n      ",
                  "documentation": "\n        <p>A nonnegative integer value that specifies the precedence of this group relative to\n            the other groups that a user can belong to in the user pool. If a user belongs to two or\n            more groups, it is the group with the highest precedence whose role ARN will be used in\n            the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the\n            user's tokens. Groups with higher <code>Precedence</code> values take precedence over\n            groups with lower <code>Precedence</code> values or with null <code>Precedence</code>\n            values.</p>\n        <p>Two groups can have the same <code>Precedence</code> value. If this happens,\n            neither group takes precedence over the other. If two groups with the same\n                <code>Precedence</code> have the same role ARN, that role is used in the\n                <code>cognito:preferred_role</code> claim in tokens for users in each group. If the\n            two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is\n            not set in users' tokens.</p>\n        <p>The default <code>Precedence</code> value is null.</p>\n      ",
                  "shape_name": "PrecedenceType",
                  "min_length": 0
                },
                "LastModifiedDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The date the group was last modified.</simpara>\n      ",
                  "documentation": "\n        <p>The date the group was last modified.</p>\n      ",
                  "shape_name": "DateType"
                },
                "CreationDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The date the group was created.</simpara>\n      ",
                  "documentation": "\n        <p>The date the group was created.</p>\n      ",
                  "shape_name": "DateType"
                }
              },
              "zonbookDocumentation": "\n        <simpara>The group type.</simpara>\n      ",
              "documentation": "\n        <p>The group type.</p>\n      ",
              "shape_name": "GroupType"
            }
          },
          "NextToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</simpara>\n      ",
            "documentation": "\n        <p>An identifier that was returned from the previous call to this operation, which can\n            be used to return the next set of items in the list.</p>\n      ",
            "shape_name": "PaginationKey",
            "min_length": 1
          }
        },
        "shape_name": "AdminListGroupsForUserResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Lists the groups that the user belongs to.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "AdminAddUserToGroup": {
      "name": "AdminAddUserToGroup",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The username for the user.</simpara>\n      ",
            "documentation": "\n        <p>The username for the user.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "GroupName": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "zonbookDocumentation": "\n        <simpara>The group name.</simpara>\n      ",
            "documentation": "\n        <p>The group name.</p>\n      ",
            "required": true,
            "shape_name": "GroupNameType",
            "min_length": 1,
            "max_length": 128
          }
        },
        "shape_name": "AdminAddUserToGroupRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Adds the specified user to the specified group.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "AdminRemoveUserFromGroup": {
      "name": "AdminRemoveUserFromGroup",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The username for the user.</simpara>\n      ",
            "documentation": "\n        <p>The username for the user.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "GroupName": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "zonbookDocumentation": "\n        <simpara>The group name.</simpara>\n      ",
            "documentation": "\n        <p>The group name.</p>\n      ",
            "required": true,
            "shape_name": "GroupNameType",
            "min_length": 1,
            "max_length": 128
          }
        },
        "shape_name": "AdminRemoveUserFromGroupRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Removes the specified user from the specified group.</p>\n        <p>Requires developer credentials.</p>\n      "
    },
    "CreateIdentityProvider": {
      "name": "CreateIdentityProvider",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "ProviderName": {
            "type": "string",
            "pattern": "[^_][\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}][^_]+",
            "zonbookDocumentation": "\n        <simpara>The identity provider name.</simpara>\n      ",
            "documentation": "\n        <p>The identity provider name.</p>\n      ",
            "required": true,
            "shape_name": "ProviderNameTypeV1",
            "min_length": 1,
            "max_length": 32
          },
          "ProviderType": {
            "type": "string",
            "enum": [
              "SAML",
              "Facebook",
              "Google",
              "LoginWithAmazon",
              "OIDC"
            ],
            "zonbookDocumentation": "\n        <simpara>The identity provider type.</simpara>\n      ",
            "documentation": "\n        <p>The identity provider type.</p>\n      ",
            "required": true,
            "shape_name": "IdentityProviderTypeType"
          },
          "ProviderDetails": {
            "type": "map",
            "zonbookDocumentation": "\n        <simpara>The identity provider details, such as <code>MetadataURL</code> and\n                <code>MetadataFile</code>.</simpara>\n      ",
            "documentation": "\n        <p>The identity provider details, such as <code>MetadataURL</code> and\n                <code>MetadataFile</code>.</p>\n      ",
            "required": true,
            "shape_name": "ProviderDetailsType",
            "keys": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            },
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          },
          "AttributeMapping": {
            "type": "map",
            "zonbookDocumentation": "\n        <simpara>A mapping of identity provider attributes to standard and custom user pool\n            attributes.</simpara>\n      ",
            "documentation": "\n        <p>A mapping of identity provider attributes to standard and custom user pool\n            attributes.</p>\n      ",
            "shape_name": "AttributeMappingType",
            "keys": {
              "type": "string",
              "shape_name": "AttributeMappingKeyType",
              "documentation": null,
              "min_length": 1,
              "max_length": 32
            },
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          },
          "IdpIdentifiers": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>A list of identity provider identifiers.</simpara>\n      ",
            "documentation": "\n        <p>A list of identity provider identifiers.</p>\n      ",
            "shape_name": "IdpIdentifiersListType",
            "min_length": 0,
            "max_length": 50,
            "members": {
              "type": "string",
              "pattern": "[\\w\\s+=.@-]+",
              "shape_name": "IdpIdentifierType",
              "documentation": null,
              "min_length": 1,
              "max_length": 40
            }
          }
        },
        "shape_name": "CreateIdentityProviderRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "IdentityProvider": {
            "type": "structure",
            "members": {
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "ProviderName": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "zonbookDocumentation": "\n        <simpara>The identity provider name.</simpara>\n      ",
                "documentation": "\n        <p>The identity provider name.</p>\n      ",
                "shape_name": "ProviderNameType",
                "min_length": 1,
                "max_length": 32
              },
              "ProviderType": {
                "type": "string",
                "enum": [
                  "SAML",
                  "Facebook",
                  "Google",
                  "LoginWithAmazon",
                  "OIDC"
                ],
                "zonbookDocumentation": "\n        <simpara>The identity provider type.</simpara>\n      ",
                "documentation": "\n        <p>The identity provider type.</p>\n      ",
                "shape_name": "IdentityProviderTypeType"
              },
              "ProviderDetails": {
                "type": "map",
                "zonbookDocumentation": "\n        <simpara>The identity provider details, such as <code>MetadataURL</code> and\n                <code>MetadataFile</code>.</simpara>\n      ",
                "documentation": "\n        <p>The identity provider details, such as <code>MetadataURL</code> and\n                <code>MetadataFile</code>.</p>\n      ",
                "shape_name": "ProviderDetailsType",
                "keys": {
                  "type": "string",
                  "shape_name": "StringType",
                  "documentation": null
                },
                "members": {
                  "type": "string",
                  "shape_name": "StringType",
                  "documentation": null
                }
              },
              "AttributeMapping": {
                "type": "map",
                "zonbookDocumentation": "\n        <simpara>A mapping of identity provider attributes to standard and custom user pool\n            attributes.</simpara>\n      ",
                "documentation": "\n        <p>A mapping of identity provider attributes to standard and custom user pool\n            attributes.</p>\n      ",
                "shape_name": "AttributeMappingType",
                "keys": {
                  "type": "string",
                  "shape_name": "AttributeMappingKeyType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 32
                },
                "members": {
                  "type": "string",
                  "shape_name": "StringType",
                  "documentation": null
                }
              },
              "IdpIdentifiers": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>A list of identity provider identifiers.</simpara>\n      ",
                "documentation": "\n        <p>A list of identity provider identifiers.</p>\n      ",
                "shape_name": "IdpIdentifiersListType",
                "min_length": 0,
                "max_length": 50,
                "members": {
                  "type": "string",
                  "pattern": "[\\w\\s+=.@-]+",
                  "shape_name": "IdpIdentifierType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 40
                }
              },
              "LastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the identity provider was last modified.</simpara>\n      ",
                "documentation": "\n        <p>The date the identity provider was last modified.</p>\n      ",
                "shape_name": "DateType"
              },
              "CreationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the identity provider was created.</simpara>\n      ",
                "documentation": "\n        <p>The date the identity provider was created.</p>\n      ",
                "shape_name": "DateType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The newly created identity provider object.</simpara>\n      ",
            "documentation": "\n        <p>The newly created identity provider object.</p>\n      ",
            "required": true,
            "shape_name": "IdentityProviderType"
          }
        },
        "shape_name": "CreateIdentityProviderResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "MessageType",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the provider is already supported by the user\n            pool.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the provider is already supported by the user\n            pool.</p>\n      ",
          "shape_name": "DuplicateProviderException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Creates an identity provider for a user pool.</p>\n      "
    },
    "DescribeIdentityProvider": {
      "name": "DescribeIdentityProvider",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "ProviderName": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "zonbookDocumentation": "\n        <simpara>The identity provider name.</simpara>\n      ",
            "documentation": "\n        <p>The identity provider name.</p>\n      ",
            "required": true,
            "shape_name": "ProviderNameType",
            "min_length": 1,
            "max_length": 32
          }
        },
        "shape_name": "DescribeIdentityProviderRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "IdentityProvider": {
            "type": "structure",
            "members": {
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "ProviderName": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "zonbookDocumentation": "\n        <simpara>The identity provider name.</simpara>\n      ",
                "documentation": "\n        <p>The identity provider name.</p>\n      ",
                "shape_name": "ProviderNameType",
                "min_length": 1,
                "max_length": 32
              },
              "ProviderType": {
                "type": "string",
                "enum": [
                  "SAML",
                  "Facebook",
                  "Google",
                  "LoginWithAmazon",
                  "OIDC"
                ],
                "zonbookDocumentation": "\n        <simpara>The identity provider type.</simpara>\n      ",
                "documentation": "\n        <p>The identity provider type.</p>\n      ",
                "shape_name": "IdentityProviderTypeType"
              },
              "ProviderDetails": {
                "type": "map",
                "zonbookDocumentation": "\n        <simpara>The identity provider details, such as <code>MetadataURL</code> and\n                <code>MetadataFile</code>.</simpara>\n      ",
                "documentation": "\n        <p>The identity provider details, such as <code>MetadataURL</code> and\n                <code>MetadataFile</code>.</p>\n      ",
                "shape_name": "ProviderDetailsType",
                "keys": {
                  "type": "string",
                  "shape_name": "StringType",
                  "documentation": null
                },
                "members": {
                  "type": "string",
                  "shape_name": "StringType",
                  "documentation": null
                }
              },
              "AttributeMapping": {
                "type": "map",
                "zonbookDocumentation": "\n        <simpara>A mapping of identity provider attributes to standard and custom user pool\n            attributes.</simpara>\n      ",
                "documentation": "\n        <p>A mapping of identity provider attributes to standard and custom user pool\n            attributes.</p>\n      ",
                "shape_name": "AttributeMappingType",
                "keys": {
                  "type": "string",
                  "shape_name": "AttributeMappingKeyType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 32
                },
                "members": {
                  "type": "string",
                  "shape_name": "StringType",
                  "documentation": null
                }
              },
              "IdpIdentifiers": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>A list of identity provider identifiers.</simpara>\n      ",
                "documentation": "\n        <p>A list of identity provider identifiers.</p>\n      ",
                "shape_name": "IdpIdentifiersListType",
                "min_length": 0,
                "max_length": 50,
                "members": {
                  "type": "string",
                  "pattern": "[\\w\\s+=.@-]+",
                  "shape_name": "IdpIdentifierType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 40
                }
              },
              "LastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the identity provider was last modified.</simpara>\n      ",
                "documentation": "\n        <p>The date the identity provider was last modified.</p>\n      ",
                "shape_name": "DateType"
              },
              "CreationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the identity provider was created.</simpara>\n      ",
                "documentation": "\n        <p>The date the identity provider was created.</p>\n      ",
                "shape_name": "DateType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The identity provider that was deleted.</simpara>\n      ",
            "documentation": "\n        <p>The identity provider that was deleted.</p>\n      ",
            "required": true,
            "shape_name": "IdentityProviderType"
          }
        },
        "shape_name": "DescribeIdentityProviderResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Gets information about a specific identity provider.</p>\n      "
    },
    "ListIdentityProviders": {
      "name": "ListIdentityProviders",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "MaxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n        <simpara>The maximum number of identity providers to return.</simpara>\n      ",
            "documentation": "\n        <p>The maximum number of identity providers to return.</p>\n      ",
            "shape_name": "ListProvidersLimitType",
            "min_length": 1,
            "max_length": 60
          },
          "NextToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>A pagination token.</simpara>\n      ",
            "documentation": "\n        <p>A pagination token.</p>\n      ",
            "shape_name": "PaginationKeyType",
            "min_length": 1
          }
        },
        "shape_name": "ListIdentityProvidersRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Providers": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>A list of identity provider objects.</simpara>\n      ",
            "documentation": "\n        <p>A list of identity provider objects.</p>\n      ",
            "required": true,
            "shape_name": "ProvidersListType",
            "min_length": 0,
            "max_length": 50,
            "members": {
              "type": "structure",
              "members": {
                "ProviderName": {
                  "type": "string",
                  "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                  "zonbookDocumentation": "\n        <simpara>The identity provider name.</simpara>\n      ",
                  "documentation": "\n        <p>The identity provider name.</p>\n      ",
                  "shape_name": "ProviderNameType",
                  "min_length": 1,
                  "max_length": 32
                },
                "ProviderType": {
                  "type": "string",
                  "enum": [
                    "SAML",
                    "Facebook",
                    "Google",
                    "LoginWithAmazon",
                    "OIDC"
                  ],
                  "zonbookDocumentation": "\n        <simpara>The identity provider type.</simpara>\n      ",
                  "documentation": "\n        <p>The identity provider type.</p>\n      ",
                  "shape_name": "IdentityProviderTypeType"
                },
                "LastModifiedDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The date the provider was last modified.</simpara>\n      ",
                  "documentation": "\n        <p>The date the provider was last modified.</p>\n      ",
                  "shape_name": "DateType"
                },
                "CreationDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The date the provider was added to the user pool.</simpara>\n      ",
                  "documentation": "\n        <p>The date the provider was added to the user pool.</p>\n      ",
                  "shape_name": "DateType"
                }
              },
              "zonbookDocumentation": "\n        <simpara>A container for identity provider details.</simpara>\n      ",
              "documentation": "\n        <p>A container for identity provider details.</p>\n      ",
              "shape_name": "ProviderDescription"
            }
          },
          "NextToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>A pagination token.</simpara>\n      ",
            "documentation": "\n        <p>A pagination token.</p>\n      ",
            "shape_name": "PaginationKeyType",
            "min_length": 1
          }
        },
        "shape_name": "ListIdentityProvidersResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Lists information about all identity providers for a user pool.</p>\n      "
    },
    "GetIdentityProviderByIdentifier": {
      "name": "GetIdentityProviderByIdentifier",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "IdpIdentifier": {
            "type": "string",
            "pattern": "[\\w\\s+=.@-]+",
            "zonbookDocumentation": "\n        <simpara>The identity provider ID.</simpara>\n      ",
            "documentation": "\n        <p>The identity provider ID.</p>\n      ",
            "required": true,
            "shape_name": "IdpIdentifierType",
            "min_length": 1,
            "max_length": 40
          }
        },
        "shape_name": "GetIdentityProviderByIdentifierRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "IdentityProvider": {
            "type": "structure",
            "members": {
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "ProviderName": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "zonbookDocumentation": "\n        <simpara>The identity provider name.</simpara>\n      ",
                "documentation": "\n        <p>The identity provider name.</p>\n      ",
                "shape_name": "ProviderNameType",
                "min_length": 1,
                "max_length": 32
              },
              "ProviderType": {
                "type": "string",
                "enum": [
                  "SAML",
                  "Facebook",
                  "Google",
                  "LoginWithAmazon",
                  "OIDC"
                ],
                "zonbookDocumentation": "\n        <simpara>The identity provider type.</simpara>\n      ",
                "documentation": "\n        <p>The identity provider type.</p>\n      ",
                "shape_name": "IdentityProviderTypeType"
              },
              "ProviderDetails": {
                "type": "map",
                "zonbookDocumentation": "\n        <simpara>The identity provider details, such as <code>MetadataURL</code> and\n                <code>MetadataFile</code>.</simpara>\n      ",
                "documentation": "\n        <p>The identity provider details, such as <code>MetadataURL</code> and\n                <code>MetadataFile</code>.</p>\n      ",
                "shape_name": "ProviderDetailsType",
                "keys": {
                  "type": "string",
                  "shape_name": "StringType",
                  "documentation": null
                },
                "members": {
                  "type": "string",
                  "shape_name": "StringType",
                  "documentation": null
                }
              },
              "AttributeMapping": {
                "type": "map",
                "zonbookDocumentation": "\n        <simpara>A mapping of identity provider attributes to standard and custom user pool\n            attributes.</simpara>\n      ",
                "documentation": "\n        <p>A mapping of identity provider attributes to standard and custom user pool\n            attributes.</p>\n      ",
                "shape_name": "AttributeMappingType",
                "keys": {
                  "type": "string",
                  "shape_name": "AttributeMappingKeyType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 32
                },
                "members": {
                  "type": "string",
                  "shape_name": "StringType",
                  "documentation": null
                }
              },
              "IdpIdentifiers": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>A list of identity provider identifiers.</simpara>\n      ",
                "documentation": "\n        <p>A list of identity provider identifiers.</p>\n      ",
                "shape_name": "IdpIdentifiersListType",
                "min_length": 0,
                "max_length": 50,
                "members": {
                  "type": "string",
                  "pattern": "[\\w\\s+=.@-]+",
                  "shape_name": "IdpIdentifierType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 40
                }
              },
              "LastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the identity provider was last modified.</simpara>\n      ",
                "documentation": "\n        <p>The date the identity provider was last modified.</p>\n      ",
                "shape_name": "DateType"
              },
              "CreationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the identity provider was created.</simpara>\n      ",
                "documentation": "\n        <p>The date the identity provider was created.</p>\n      ",
                "shape_name": "DateType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The identity provider object.</simpara>\n      ",
            "documentation": "\n        <p>The identity provider object.</p>\n      ",
            "required": true,
            "shape_name": "IdentityProviderType"
          }
        },
        "shape_name": "GetIdentityProviderByIdentifierResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Gets the specified identity provider.</p>\n      "
    },
    "UpdateIdentityProvider": {
      "name": "UpdateIdentityProvider",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "ProviderName": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "zonbookDocumentation": "\n        <simpara>The identity provider name.</simpara>\n      ",
            "documentation": "\n        <p>The identity provider name.</p>\n      ",
            "required": true,
            "shape_name": "ProviderNameType",
            "min_length": 1,
            "max_length": 32
          },
          "ProviderDetails": {
            "type": "map",
            "zonbookDocumentation": "\n        <simpara>The identity provider details to be updated, such as <code>MetadataURL</code> and\n                <code>MetadataFile</code>.</simpara>\n      ",
            "documentation": "\n        <p>The identity provider details to be updated, such as <code>MetadataURL</code> and\n                <code>MetadataFile</code>.</p>\n      ",
            "shape_name": "ProviderDetailsType",
            "keys": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            },
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          },
          "AttributeMapping": {
            "type": "map",
            "zonbookDocumentation": "\n        <simpara>The identity provider attribute mapping to be changed.</simpara>\n      ",
            "documentation": "\n        <p>The identity provider attribute mapping to be changed.</p>\n      ",
            "shape_name": "AttributeMappingType",
            "keys": {
              "type": "string",
              "shape_name": "AttributeMappingKeyType",
              "documentation": null,
              "min_length": 1,
              "max_length": 32
            },
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          },
          "IdpIdentifiers": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>A list of identity provider identifiers.</simpara>\n      ",
            "documentation": "\n        <p>A list of identity provider identifiers.</p>\n      ",
            "shape_name": "IdpIdentifiersListType",
            "min_length": 0,
            "max_length": 50,
            "members": {
              "type": "string",
              "pattern": "[\\w\\s+=.@-]+",
              "shape_name": "IdpIdentifierType",
              "documentation": null,
              "min_length": 1,
              "max_length": 40
            }
          }
        },
        "shape_name": "UpdateIdentityProviderRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "IdentityProvider": {
            "type": "structure",
            "members": {
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "ProviderName": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "zonbookDocumentation": "\n        <simpara>The identity provider name.</simpara>\n      ",
                "documentation": "\n        <p>The identity provider name.</p>\n      ",
                "shape_name": "ProviderNameType",
                "min_length": 1,
                "max_length": 32
              },
              "ProviderType": {
                "type": "string",
                "enum": [
                  "SAML",
                  "Facebook",
                  "Google",
                  "LoginWithAmazon",
                  "OIDC"
                ],
                "zonbookDocumentation": "\n        <simpara>The identity provider type.</simpara>\n      ",
                "documentation": "\n        <p>The identity provider type.</p>\n      ",
                "shape_name": "IdentityProviderTypeType"
              },
              "ProviderDetails": {
                "type": "map",
                "zonbookDocumentation": "\n        <simpara>The identity provider details, such as <code>MetadataURL</code> and\n                <code>MetadataFile</code>.</simpara>\n      ",
                "documentation": "\n        <p>The identity provider details, such as <code>MetadataURL</code> and\n                <code>MetadataFile</code>.</p>\n      ",
                "shape_name": "ProviderDetailsType",
                "keys": {
                  "type": "string",
                  "shape_name": "StringType",
                  "documentation": null
                },
                "members": {
                  "type": "string",
                  "shape_name": "StringType",
                  "documentation": null
                }
              },
              "AttributeMapping": {
                "type": "map",
                "zonbookDocumentation": "\n        <simpara>A mapping of identity provider attributes to standard and custom user pool\n            attributes.</simpara>\n      ",
                "documentation": "\n        <p>A mapping of identity provider attributes to standard and custom user pool\n            attributes.</p>\n      ",
                "shape_name": "AttributeMappingType",
                "keys": {
                  "type": "string",
                  "shape_name": "AttributeMappingKeyType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 32
                },
                "members": {
                  "type": "string",
                  "shape_name": "StringType",
                  "documentation": null
                }
              },
              "IdpIdentifiers": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>A list of identity provider identifiers.</simpara>\n      ",
                "documentation": "\n        <p>A list of identity provider identifiers.</p>\n      ",
                "shape_name": "IdpIdentifiersListType",
                "min_length": 0,
                "max_length": 50,
                "members": {
                  "type": "string",
                  "pattern": "[\\w\\s+=.@-]+",
                  "shape_name": "IdpIdentifierType",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 40
                }
              },
              "LastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the identity provider was last modified.</simpara>\n      ",
                "documentation": "\n        <p>The date the identity provider was last modified.</p>\n      ",
                "shape_name": "DateType"
              },
              "CreationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The date the identity provider was created.</simpara>\n      ",
                "documentation": "\n        <p>The date the identity provider was created.</p>\n      ",
                "shape_name": "DateType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The identity provider object.</simpara>\n      ",
            "documentation": "\n        <p>The identity provider object.</p>\n      ",
            "required": true,
            "shape_name": "IdentityProviderType"
          }
        },
        "shape_name": "UpdateIdentityProviderResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "MessageType",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the specified identifier is not supported.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the specified identifier is not supported.</p>\n      ",
          "shape_name": "UnsupportedIdentityProviderException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Updates identity provider information for a user pool.</p>\n\n      "
    },
    "DeleteIdentityProvider": {
      "name": "DeleteIdentityProvider",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "ProviderName": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "zonbookDocumentation": "\n        <simpara>The identity provider name.</simpara>\n      ",
            "documentation": "\n        <p>The identity provider name.</p>\n      ",
            "required": true,
            "shape_name": "ProviderNameType",
            "min_length": 1,
            "max_length": 32
          }
        },
        "shape_name": "DeleteIdentityProviderRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "MessageType",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the specified identifier is not supported.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the specified identifier is not supported.</p>\n      ",
          "shape_name": "UnsupportedIdentityProviderException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Deletes an identity provider for a user pool.</p>\n      "
    },
    "CreateUserPoolDomain": {
      "name": "CreateUserPoolDomain",
      "input": {
        "type": "structure",
        "members": {
          "Domain": {
            "type": "string",
            "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
            "zonbookDocumentation": "\n        <simpara>The domain string.</simpara>\n      ",
            "documentation": "\n        <p>The domain string.</p>\n      ",
            "required": true,
            "shape_name": "DomainType",
            "min_length": 1,
            "max_length": 63
          },
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "CustomDomainConfig": {
            "type": "structure",
            "members": {
              "CertificateArn": {
                "type": "string",
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of an AWS Certificate Manager SSL certificate. You use this certificate for the subdomain of your custom domain.</simpara>\n      ",
                "documentation": "\n        <p>The Amazon Resource Name (ARN) of an AWS Certificate Manager SSL certificate. You use this certificate for the subdomain of your custom domain.</p>\n      ",
                "required": true,
                "shape_name": "ArnType",
                "min_length": 20,
                "max_length": 2048
              }
            },
            "zonbookDocumentation": "\n        <simpara>The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.</simpara>\n        <simpara>Provide this parameter only if you want to use own custom domain for your user pool. Otherwise, you can exclude this parameter and use the Amazon Cognito hosted domain instead.</simpara>\n        <simpara>For more information about the hosted domain and custom domains, see <ulink type=\"documentation\" url=\"cognito/latest/developerguide/cognito-user-pools-assign-domain.html\">Configuring a User Pool Domain</ulink>.</simpara>\n      ",
            "documentation": "\n        <p>The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.</p>\n        <p>Provide this parameter only if you want to use own custom domain for your user pool. Otherwise, you can exclude this parameter and use the Amazon Cognito hosted domain instead.</p>\n        <p>For more information about the hosted domain and custom domains, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-assign-domain.html\">Configuring a User Pool Domain</a>.</p>\n      ",
            "shape_name": "CustomDomainConfigType"
          }
        },
        "shape_name": "CreateUserPoolDomainRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "CloudFrontDomain": {
            "type": "string",
            "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
            "zonbookDocumentation": "\n        <simpara>The Amazon CloudFront endpoint that you use as the target of the alias that you set up with your Domain Name Service (DNS) provider.</simpara>\n      ",
            "documentation": "\n        <p>The Amazon CloudFront endpoint that you use as the target of the alias that you set up with your Domain Name Service (DNS) provider.</p>\n      ",
            "shape_name": "DomainType",
            "min_length": 1,
            "max_length": 63
          }
        },
        "shape_name": "CreateUserPoolDomainResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Creates a new domain for a user pool.</p>\n      "
    },
    "DescribeUserPoolDomain": {
      "name": "DescribeUserPoolDomain",
      "input": {
        "type": "structure",
        "members": {
          "Domain": {
            "type": "string",
            "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
            "zonbookDocumentation": "\n        <simpara>The domain string.</simpara>\n      ",
            "documentation": "\n        <p>The domain string.</p>\n      ",
            "required": true,
            "shape_name": "DomainType",
            "min_length": 1,
            "max_length": 63
          }
        },
        "shape_name": "DescribeUserPoolDomainRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "DomainDescription": {
            "type": "structure",
            "members": {
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "AWSAccountId": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The AWS account ID for the user pool owner.</simpara>\n      ",
                "documentation": "\n        <p>The AWS account ID for the user pool owner.</p>\n      ",
                "shape_name": "AWSAccountIdType"
              },
              "Domain": {
                "type": "string",
                "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                "zonbookDocumentation": "\n        <simpara>The domain string.</simpara>\n      ",
                "documentation": "\n        <p>The domain string.</p>\n      ",
                "shape_name": "DomainType",
                "min_length": 1,
                "max_length": 63
              },
              "S3Bucket": {
                "type": "string",
                "pattern": "^[0-9A-Za-z\\.\\-_]*(?<!\\.)$",
                "zonbookDocumentation": "\n        <simpara>The S3 bucket where the static files for this domain are stored.</simpara>\n      ",
                "documentation": "\n        <p>The S3 bucket where the static files for this domain are stored.</p>\n      ",
                "shape_name": "S3BucketType",
                "min_length": 3,
                "max_length": 1024
              },
              "CloudFrontDistribution": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The ARN of the CloudFront distribution.</simpara>\n      ",
                "documentation": "\n        <p>The ARN of the CloudFront distribution.</p>\n      ",
                "shape_name": "StringType"
              },
              "Version": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The app version.</simpara>\n      ",
                "documentation": "\n        <p>The app version.</p>\n      ",
                "shape_name": "DomainVersionType",
                "min_length": 1,
                "max_length": 20
              },
              "Status": {
                "type": "string",
                "enum": [
                  "CREATING",
                  "DELETING",
                  "UPDATING",
                  "ACTIVE",
                  "FAILED"
                ],
                "zonbookDocumentation": "\n        <simpara>The domain status.</simpara>\n      ",
                "documentation": "\n        <p>The domain status.</p>\n      ",
                "shape_name": "DomainStatusType"
              },
              "CustomDomainConfig": {
                "type": "structure",
                "members": {
                  "CertificateArn": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of an AWS Certificate Manager SSL certificate. You use this certificate for the subdomain of your custom domain.</simpara>\n      ",
                    "documentation": "\n        <p>The Amazon Resource Name (ARN) of an AWS Certificate Manager SSL certificate. You use this certificate for the subdomain of your custom domain.</p>\n      ",
                    "required": true,
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.</simpara>\n      ",
                "documentation": "\n        <p>The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.</p>\n      ",
                "shape_name": "CustomDomainConfigType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>A domain description object containing information about the domain.</simpara>\n      ",
            "documentation": "\n        <p>A domain description object containing information about the domain.</p>\n      ",
            "shape_name": "DomainDescriptionType"
          }
        },
        "shape_name": "DescribeUserPoolDomainResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Gets information about a domain.</p>\n      "
    },
    "DeleteUserPoolDomain": {
      "name": "DeleteUserPoolDomain",
      "input": {
        "type": "structure",
        "members": {
          "Domain": {
            "type": "string",
            "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
            "zonbookDocumentation": "\n        <simpara>The domain string.</simpara>\n      ",
            "documentation": "\n        <p>The domain string.</p>\n      ",
            "required": true,
            "shape_name": "DomainType",
            "min_length": 1,
            "max_length": 63
          },
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          }
        },
        "shape_name": "DeleteUserPoolDomainRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "DeleteUserPoolDomainResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Deletes a domain for a user pool.</p>\n      "
    },
    "GetOpenIdConfiguration": {
      "name": "GetOpenIdConfiguration",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool where you want to get Open ID configuration\n            information.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool where you want to get Open ID configuration\n            information.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to get the Open ID configuration.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to get the Open ID configuration.</p>\n      ",
        "shape_name": "GetOpenIdConfigurationRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "issuer": {
            "type": "string",
            "pattern": "https://cognito-idp\\.amazonaws\\.com/[\\w\\._/-]",
            "zonbookDocumentation": "\n        <simpara>The issuer of the Open ID configuration response.</simpara>\n      ",
            "documentation": "\n        <p>The issuer of the Open ID configuration response.</p>\n      ",
            "shape_name": "openIdUrlType",
            "min_length": 1,
            "max_length": 150
          },
          "jwks_uri": {
            "type": "string",
            "pattern": "https://cognito-idp\\.amazonaws\\.com/[\\w\\._/-]",
            "zonbookDocumentation": "\n        <simpara>The URI of the JSON Web keys in the server response to get Open ID configuration\n            information.</simpara>\n      ",
            "documentation": "\n        <p>The URI of the JSON Web keys in the server response to get Open ID configuration\n            information.</p>\n      ",
            "shape_name": "openIdUrlType",
            "min_length": 1,
            "max_length": 150
          },
          "userinfo_endpoint": {
            "type": "string",
            "pattern": "https://cognito-idp\\.amazonaws\\.com/[\\w\\._/-]",
            "shape_name": "openIdUrlType",
            "documentation": null,
            "min_length": 1,
            "max_length": 150
          },
          "scopes_supported": {
            "type": "list",
            "shape_name": "openIdListType",
            "documentation": null,
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          },
          "token_endpoint": {
            "type": "string",
            "pattern": "https://cognito-idp\\.amazonaws\\.com/[\\w\\._/-]",
            "shape_name": "openIdUrlType",
            "documentation": null,
            "min_length": 1,
            "max_length": 150
          },
          "authorization_endpoint": {
            "type": "string",
            "pattern": "https://cognito-idp\\.amazonaws\\.com/[\\w\\._/-]",
            "zonbookDocumentation": "\n        <simpara>The authorization endpoint returned by the server response to get the Open ID\n            configuration information.</simpara>\n      ",
            "documentation": "\n        <p>The authorization endpoint returned by the server response to get the Open ID\n            configuration information.</p>\n      ",
            "shape_name": "openIdUrlType",
            "min_length": 1,
            "max_length": 150
          },
          "subject_types_supported": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The subject types supported returned by the server response to get the Open ID\n            configuration information.</simpara>\n      ",
            "documentation": "\n        <p>The subject types supported returned by the server response to get the Open ID\n            configuration information.</p>\n      ",
            "shape_name": "openIdListType",
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          },
          "response_types_supported": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The response types supported returned by the server response to get the Open ID\n            configuration information.</simpara>\n      ",
            "documentation": "\n        <p>The response types supported returned by the server response to get the Open ID\n            configuration information.</p>\n      ",
            "shape_name": "openIdListType",
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          },
          "id_token_signing_alg_values_supported": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The token-signing algorithm values supported returned by the server response to get\n            the Open ID configuration information.</simpara>\n      ",
            "documentation": "\n        <p>The token-signing algorithm values supported returned by the server response to get\n            the Open ID configuration information.</p>\n      ",
            "shape_name": "openIdListType",
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server to get the Open ID configuration\n            information.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server to get the Open ID configuration\n            information.</p>\n      ",
        "shape_name": "GetOpenIdConfigurationResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Gets the OpenId configuration information for the specified user pool.</p>\n      "
    },
    "GetJWKS": {
      "name": "GetJWKS",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool where you want to get JSON Web keys.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool where you want to get JSON Web keys.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the request to get JSON Web keys.</simpara>\n      ",
        "documentation": "\n        <p>Represents the request to get JSON Web keys.</p>\n      ",
        "shape_name": "GetJWKSRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "keys": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The keys in a get JSON Web keys response.</simpara>\n      ",
            "documentation": "\n        <p>The keys in a get JSON Web keys response.</p>\n      ",
            "shape_name": "KeyListType",
            "members": {
              "type": "structure",
              "members": {
                "kty": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>A \"kty\" key type parameter. For more information, see <ulink url=\"http://self-issued.info/docs/draft-ietf-jose-json-web-key.html\">JSON Web Key\n                (JWK) Format</ulink>.</simpara>\n      ",
                  "documentation": "\n        <p>A \"kty\" key type parameter. For more information, see <a href=\"http://self-issued.info/docs/draft-ietf-jose-json-web-key.html\">JSON Web Key\n                (JWK) Format</a>.</p>\n      ",
                  "shape_name": "StringType"
                },
                "alg": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>A \"kty\" (Key Type) parameter. For more information, see <ulink url=\"http://self-issued.info/docs/draft-ietf-jose-json-web-key.html#ktyDef\">\"kty\"\n                (Key Type) Parameter</ulink>.</simpara>\n      ",
                  "documentation": "\n        <p>A \"kty\" (Key Type) parameter. For more information, see <a href=\"http://self-issued.info/docs/draft-ietf-jose-json-web-key.html#ktyDef\">\"kty\"\n                (Key Type) Parameter</a>.</p>\n      ",
                  "shape_name": "StringType"
                },
                "use": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>A \"use\" (Public Key Use) parameter. For more information, see <ulink url=\"http://self-issued.info/docs/draft-ietf-jose-json-web-key.html#useDef\">\"use\"\n                (Public Key Use) Parameter</ulink>.</simpara>\n      ",
                  "documentation": "\n        <p>A \"use\" (Public Key Use) parameter. For more information, see <a href=\"http://self-issued.info/docs/draft-ietf-jose-json-web-key.html#useDef\">\"use\"\n                (Public Key Use) Parameter</a>.</p>\n      ",
                  "shape_name": "StringType"
                },
                "kid": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>A \"kid\" (Key ID) parameter. For more information, see <ulink url=\"http://self-issued.info/docs/draft-ietf-jose-json-web-key.html#kidDef\">\"kid\"\n                (Key ID) Parameter</ulink>.</simpara>\n      ",
                  "documentation": "\n        <p>A \"kid\" (Key ID) parameter. For more information, see <a href=\"http://self-issued.info/docs/draft-ietf-jose-json-web-key.html#kidDef\">\"kid\"\n                (Key ID) Parameter</a>.</p>\n      ",
                  "shape_name": "StringType"
                },
                "n": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>An \"n\" parameter.</simpara>\n      ",
                  "documentation": "\n        <p>An \"n\" parameter.</p>\n      ",
                  "shape_name": "StringType"
                },
                "e": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>An \"e\" parameter.</simpara>\n      ",
                  "documentation": "\n        <p>An \"e\" parameter.</p>\n      ",
                  "shape_name": "StringType"
                }
              },
              "zonbookDocumentation": "\n        <simpara>A JSON Web Key key type in <ulink url=\"http://self-issued.info/docs/draft-ietf-jose-json-web-key.html#rfc.section.4\">JSON Web Key (JWK) Format</ulink>.</simpara>\n      ",
              "documentation": "\n        <p>A JSON Web Key key type in <a href=\"http://self-issued.info/docs/draft-ietf-jose-json-web-key.html#rfc.section.4\">JSON Web Key (JWK) Format</a>.</p>\n      ",
              "shape_name": "KeyType"
            }
          },
          "cacheControl": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The value of the <code>Cache-Control</code> HTTP header field for the JSON Web keys\n            response. For more information on <code>cacheControl</code>, see <ulink url=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\"/>.</simpara>\n      ",
            "documentation": "\n        <p>The value of the <code>Cache-Control</code> HTTP header field for the JSON Web keys\n            response. For more information on <code>cacheControl</code>, see <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\">https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.</p>\n      ",
            "shape_name": "StringType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Represents the response from the server to get JSON Web keys.</simpara>\n      ",
        "documentation": "\n        <p>Represents the response from the server to get JSON Web keys.</p>\n      ",
        "shape_name": "GetJWKSResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Gets the JSON Web keys for the specified user pool.</p>\n      "
    },
    "CreateResourceServer": {
      "name": "CreateResourceServer",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Identifier": {
            "type": "string",
            "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
            "zonbookDocumentation": "\n        <simpara>A unique resource server identifier for the resource server. This could be an HTTPS\n            endpoint where the resource server is located. For example,\n                <code>https://my-weather-api.example.com</code>.</simpara>\n      ",
            "documentation": "\n        <p>A unique resource server identifier for the resource server. This could be an HTTPS\n            endpoint where the resource server is located. For example,\n                <code>https://my-weather-api.example.com</code>.</p>\n      ",
            "required": true,
            "shape_name": "ResourceServerIdentifierType",
            "min_length": 1,
            "max_length": 256
          },
          "Name": {
            "type": "string",
            "pattern": "[\\w\\s+=,.@-]+",
            "zonbookDocumentation": "\n        <simpara>A friendly name for the resource server.</simpara>\n      ",
            "documentation": "\n        <p>A friendly name for the resource server.</p>\n      ",
            "required": true,
            "shape_name": "ResourceServerNameType",
            "min_length": 1,
            "max_length": 256
          },
          "Scopes": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>A list of scopes. Each scope is map, where the keys are <code>name</code> and\n                <code>description</code>.</simpara>\n      ",
            "documentation": "\n        <p>A list of scopes. Each scope is map, where the keys are <code>name</code> and\n                <code>description</code>.</p>\n      ",
            "shape_name": "ResourceServerScopeListType",
            "max_length": 25,
            "members": {
              "type": "structure",
              "members": {
                "ScopeName": {
                  "type": "string",
                  "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
                  "zonbookDocumentation": "\n        <simpara>The name of the scope.</simpara>\n      ",
                  "documentation": "\n        <p>The name of the scope.</p>\n      ",
                  "required": true,
                  "shape_name": "ResourceServerScopeNameType",
                  "min_length": 1,
                  "max_length": 256
                },
                "ScopeDescription": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>A description of the scope.</simpara>\n      ",
                  "documentation": "\n        <p>A description of the scope.</p>\n      ",
                  "required": true,
                  "shape_name": "ResourceServerScopeDescriptionType",
                  "min_length": 1,
                  "max_length": 256
                }
              },
              "zonbookDocumentation": "\n        <simpara>A resource server scope.</simpara>\n      ",
              "documentation": "\n        <p>A resource server scope.</p>\n      ",
              "shape_name": "ResourceServerScopeType"
            }
          }
        },
        "shape_name": "CreateResourceServerRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "ResourceServer": {
            "type": "structure",
            "members": {
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool that hosts the resource server.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID for the user pool that hosts the resource server.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "Identifier": {
                "type": "string",
                "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                "zonbookDocumentation": "\n        <simpara>The identifier for the resource server.</simpara>\n      ",
                "documentation": "\n        <p>The identifier for the resource server.</p>\n      ",
                "shape_name": "ResourceServerIdentifierType",
                "min_length": 1,
                "max_length": 256
              },
              "Name": {
                "type": "string",
                "pattern": "[\\w\\s+=,.@-]+",
                "zonbookDocumentation": "\n        <simpara>The name of the resource server.</simpara>\n      ",
                "documentation": "\n        <p>The name of the resource server.</p>\n      ",
                "shape_name": "ResourceServerNameType",
                "min_length": 1,
                "max_length": 256
              },
              "Scopes": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>A list of scopes that are defined for the resource server.</simpara>\n      ",
                "documentation": "\n        <p>A list of scopes that are defined for the resource server.</p>\n      ",
                "shape_name": "ResourceServerScopeListType",
                "max_length": 25,
                "members": {
                  "type": "structure",
                  "members": {
                    "ScopeName": {
                      "type": "string",
                      "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
                      "zonbookDocumentation": "\n        <simpara>The name of the scope.</simpara>\n      ",
                      "documentation": "\n        <p>The name of the scope.</p>\n      ",
                      "required": true,
                      "shape_name": "ResourceServerScopeNameType",
                      "min_length": 1,
                      "max_length": 256
                    },
                    "ScopeDescription": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>A description of the scope.</simpara>\n      ",
                      "documentation": "\n        <p>A description of the scope.</p>\n      ",
                      "required": true,
                      "shape_name": "ResourceServerScopeDescriptionType",
                      "min_length": 1,
                      "max_length": 256
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>A resource server scope.</simpara>\n      ",
                  "documentation": "\n        <p>A resource server scope.</p>\n      ",
                  "shape_name": "ResourceServerScopeType"
                }
              }
            },
            "zonbookDocumentation": "\n        <simpara>The newly created resource server.</simpara>\n      ",
            "documentation": "\n        <p>The newly created resource server.</p>\n      ",
            "required": true,
            "shape_name": "ResourceServerType"
          }
        },
        "shape_name": "CreateResourceServerResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws a limit exceeded\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user exceeds the limit for a requested AWS\n            resource.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Creates a new OAuth2.0 resource server and defines custom scopes in it.</p>\n      "
    },
    "UpdateResourceServer": {
      "name": "UpdateResourceServer",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Identifier": {
            "type": "string",
            "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
            "zonbookDocumentation": "\n        <simpara>The identifier for the resource server.</simpara>\n      ",
            "documentation": "\n        <p>The identifier for the resource server.</p>\n      ",
            "required": true,
            "shape_name": "ResourceServerIdentifierType",
            "min_length": 1,
            "max_length": 256
          },
          "Name": {
            "type": "string",
            "pattern": "[\\w\\s+=,.@-]+",
            "zonbookDocumentation": "\n        <simpara>The name of the resource server.</simpara>\n      ",
            "documentation": "\n        <p>The name of the resource server.</p>\n      ",
            "required": true,
            "shape_name": "ResourceServerNameType",
            "min_length": 1,
            "max_length": 256
          },
          "Scopes": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The scope values to be set for the resource server.</simpara>\n      ",
            "documentation": "\n        <p>The scope values to be set for the resource server.</p>\n      ",
            "shape_name": "ResourceServerScopeListType",
            "max_length": 25,
            "members": {
              "type": "structure",
              "members": {
                "ScopeName": {
                  "type": "string",
                  "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
                  "zonbookDocumentation": "\n        <simpara>The name of the scope.</simpara>\n      ",
                  "documentation": "\n        <p>The name of the scope.</p>\n      ",
                  "required": true,
                  "shape_name": "ResourceServerScopeNameType",
                  "min_length": 1,
                  "max_length": 256
                },
                "ScopeDescription": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>A description of the scope.</simpara>\n      ",
                  "documentation": "\n        <p>A description of the scope.</p>\n      ",
                  "required": true,
                  "shape_name": "ResourceServerScopeDescriptionType",
                  "min_length": 1,
                  "max_length": 256
                }
              },
              "zonbookDocumentation": "\n        <simpara>A resource server scope.</simpara>\n      ",
              "documentation": "\n        <p>A resource server scope.</p>\n      ",
              "shape_name": "ResourceServerScopeType"
            }
          }
        },
        "shape_name": "UpdateResourceServerRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "ResourceServer": {
            "type": "structure",
            "members": {
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool that hosts the resource server.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID for the user pool that hosts the resource server.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "Identifier": {
                "type": "string",
                "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                "zonbookDocumentation": "\n        <simpara>The identifier for the resource server.</simpara>\n      ",
                "documentation": "\n        <p>The identifier for the resource server.</p>\n      ",
                "shape_name": "ResourceServerIdentifierType",
                "min_length": 1,
                "max_length": 256
              },
              "Name": {
                "type": "string",
                "pattern": "[\\w\\s+=,.@-]+",
                "zonbookDocumentation": "\n        <simpara>The name of the resource server.</simpara>\n      ",
                "documentation": "\n        <p>The name of the resource server.</p>\n      ",
                "shape_name": "ResourceServerNameType",
                "min_length": 1,
                "max_length": 256
              },
              "Scopes": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>A list of scopes that are defined for the resource server.</simpara>\n      ",
                "documentation": "\n        <p>A list of scopes that are defined for the resource server.</p>\n      ",
                "shape_name": "ResourceServerScopeListType",
                "max_length": 25,
                "members": {
                  "type": "structure",
                  "members": {
                    "ScopeName": {
                      "type": "string",
                      "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
                      "zonbookDocumentation": "\n        <simpara>The name of the scope.</simpara>\n      ",
                      "documentation": "\n        <p>The name of the scope.</p>\n      ",
                      "required": true,
                      "shape_name": "ResourceServerScopeNameType",
                      "min_length": 1,
                      "max_length": 256
                    },
                    "ScopeDescription": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>A description of the scope.</simpara>\n      ",
                      "documentation": "\n        <p>A description of the scope.</p>\n      ",
                      "required": true,
                      "shape_name": "ResourceServerScopeDescriptionType",
                      "min_length": 1,
                      "max_length": 256
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>A resource server scope.</simpara>\n      ",
                  "documentation": "\n        <p>A resource server scope.</p>\n      ",
                  "shape_name": "ResourceServerScopeType"
                }
              }
            },
            "zonbookDocumentation": "\n        <simpara>The resource server.</simpara>\n      ",
            "documentation": "\n        <p>The resource server.</p>\n      ",
            "required": true,
            "shape_name": "ResourceServerType"
          }
        },
        "shape_name": "UpdateResourceServerResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Updates the name and scopes of resource server. All other fields are\n            read-only.</p>\n      "
    },
    "DescribeResourceServer": {
      "name": "DescribeResourceServer",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool that hosts the resource server.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool that hosts the resource server.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Identifier": {
            "type": "string",
            "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
            "zonbookDocumentation": "\n        <simpara>The identifier for the resource server</simpara>\n      ",
            "documentation": "\n        <p>The identifier for the resource server</p>\n      ",
            "required": true,
            "shape_name": "ResourceServerIdentifierType",
            "min_length": 1,
            "max_length": 256
          }
        },
        "shape_name": "DescribeResourceServerRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "ResourceServer": {
            "type": "structure",
            "members": {
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool that hosts the resource server.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID for the user pool that hosts the resource server.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "Identifier": {
                "type": "string",
                "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                "zonbookDocumentation": "\n        <simpara>The identifier for the resource server.</simpara>\n      ",
                "documentation": "\n        <p>The identifier for the resource server.</p>\n      ",
                "shape_name": "ResourceServerIdentifierType",
                "min_length": 1,
                "max_length": 256
              },
              "Name": {
                "type": "string",
                "pattern": "[\\w\\s+=,.@-]+",
                "zonbookDocumentation": "\n        <simpara>The name of the resource server.</simpara>\n      ",
                "documentation": "\n        <p>The name of the resource server.</p>\n      ",
                "shape_name": "ResourceServerNameType",
                "min_length": 1,
                "max_length": 256
              },
              "Scopes": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>A list of scopes that are defined for the resource server.</simpara>\n      ",
                "documentation": "\n        <p>A list of scopes that are defined for the resource server.</p>\n      ",
                "shape_name": "ResourceServerScopeListType",
                "max_length": 25,
                "members": {
                  "type": "structure",
                  "members": {
                    "ScopeName": {
                      "type": "string",
                      "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
                      "zonbookDocumentation": "\n        <simpara>The name of the scope.</simpara>\n      ",
                      "documentation": "\n        <p>The name of the scope.</p>\n      ",
                      "required": true,
                      "shape_name": "ResourceServerScopeNameType",
                      "min_length": 1,
                      "max_length": 256
                    },
                    "ScopeDescription": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>A description of the scope.</simpara>\n      ",
                      "documentation": "\n        <p>A description of the scope.</p>\n      ",
                      "required": true,
                      "shape_name": "ResourceServerScopeDescriptionType",
                      "min_length": 1,
                      "max_length": 256
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>A resource server scope.</simpara>\n      ",
                  "documentation": "\n        <p>A resource server scope.</p>\n      ",
                  "shape_name": "ResourceServerScopeType"
                }
              }
            },
            "zonbookDocumentation": "\n        <simpara>The resource server.</simpara>\n      ",
            "documentation": "\n        <p>The resource server.</p>\n      ",
            "required": true,
            "shape_name": "ResourceServerType"
          }
        },
        "shape_name": "DescribeResourceServerResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Describes a resource server.</p>\n      "
    },
    "ListResourceServers": {
      "name": "ListResourceServers",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "MaxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n        <simpara>The maximum number of resource servers to return.</simpara>\n      ",
            "documentation": "\n        <p>The maximum number of resource servers to return.</p>\n      ",
            "shape_name": "ListResourceServersLimitType",
            "min_length": 1,
            "max_length": 50
          },
          "NextToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>A pagination token.</simpara>\n      ",
            "documentation": "\n        <p>A pagination token.</p>\n      ",
            "shape_name": "PaginationKeyType",
            "min_length": 1
          }
        },
        "shape_name": "ListResourceServersRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "ResourceServers": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The resource servers.</simpara>\n      ",
            "documentation": "\n        <p>The resource servers.</p>\n      ",
            "required": true,
            "shape_name": "ResourceServersListType",
            "members": {
              "type": "structure",
              "members": {
                "UserPoolId": {
                  "type": "string",
                  "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                  "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool that hosts the resource server.</simpara>\n      ",
                  "documentation": "\n        <p>The user pool ID for the user pool that hosts the resource server.</p>\n      ",
                  "shape_name": "UserPoolIdType",
                  "min_length": 1,
                  "max_length": 55
                },
                "Identifier": {
                  "type": "string",
                  "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                  "zonbookDocumentation": "\n        <simpara>The identifier for the resource server.</simpara>\n      ",
                  "documentation": "\n        <p>The identifier for the resource server.</p>\n      ",
                  "shape_name": "ResourceServerIdentifierType",
                  "min_length": 1,
                  "max_length": 256
                },
                "Name": {
                  "type": "string",
                  "pattern": "[\\w\\s+=,.@-]+",
                  "zonbookDocumentation": "\n        <simpara>The name of the resource server.</simpara>\n      ",
                  "documentation": "\n        <p>The name of the resource server.</p>\n      ",
                  "shape_name": "ResourceServerNameType",
                  "min_length": 1,
                  "max_length": 256
                },
                "Scopes": {
                  "type": "list",
                  "zonbookDocumentation": "\n        <simpara>A list of scopes that are defined for the resource server.</simpara>\n      ",
                  "documentation": "\n        <p>A list of scopes that are defined for the resource server.</p>\n      ",
                  "shape_name": "ResourceServerScopeListType",
                  "max_length": 25,
                  "members": {
                    "type": "structure",
                    "members": {
                      "ScopeName": {
                        "type": "string",
                        "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
                        "zonbookDocumentation": "\n        <simpara>The name of the scope.</simpara>\n      ",
                        "documentation": "\n        <p>The name of the scope.</p>\n      ",
                        "required": true,
                        "shape_name": "ResourceServerScopeNameType",
                        "min_length": 1,
                        "max_length": 256
                      },
                      "ScopeDescription": {
                        "type": "string",
                        "zonbookDocumentation": "\n        <simpara>A description of the scope.</simpara>\n      ",
                        "documentation": "\n        <p>A description of the scope.</p>\n      ",
                        "required": true,
                        "shape_name": "ResourceServerScopeDescriptionType",
                        "min_length": 1,
                        "max_length": 256
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>A resource server scope.</simpara>\n      ",
                    "documentation": "\n        <p>A resource server scope.</p>\n      ",
                    "shape_name": "ResourceServerScopeType"
                  }
                }
              },
              "zonbookDocumentation": "\n        <simpara>A container for information about a resource server for a user pool.</simpara>\n      ",
              "documentation": "\n        <p>A container for information about a resource server for a user pool.</p>\n      ",
              "shape_name": "ResourceServerType"
            }
          },
          "NextToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>A pagination token.</simpara>\n      ",
            "documentation": "\n        <p>A pagination token.</p>\n      ",
            "shape_name": "PaginationKeyType",
            "min_length": 1
          }
        },
        "shape_name": "ListResourceServersResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Lists the resource servers for a user pool.</p>\n      "
    },
    "DeleteResourceServer": {
      "name": "DeleteResourceServer",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool that hosts the resource server.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool that hosts the resource server.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Identifier": {
            "type": "string",
            "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
            "zonbookDocumentation": "\n        <simpara>The identifier for the resource server.</simpara>\n      ",
            "documentation": "\n        <p>The identifier for the resource server.</p>\n      ",
            "required": true,
            "shape_name": "ResourceServerIdentifierType",
            "min_length": 1,
            "max_length": 256
          }
        },
        "shape_name": "DeleteResourceServerRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Deletes a resource server.</p>\n      "
    },
    "SetUserPoolUIConfiguration": {
      "name": "SetUserPoolUIConfiguration",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Details": {
            "type": "map",
            "zonbookDocumentation": "\n        <simpara>The user pool UI configuration details.</simpara>\n      ",
            "documentation": "\n        <p>The user pool UI configuration details.</p>\n      ",
            "shape_name": "UIDetailsMapType",
            "keys": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            },
            "members": {
              "type": "string",
              "shape_name": "StringType",
              "documentation": null
            }
          }
        },
        "shape_name": "SetUserPoolUIConfigurationRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "UserPoolUIConfiguration": {
            "type": "structure",
            "members": {
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "Details": {
                "type": "map",
                "zonbookDocumentation": "\n        <simpara>The user pool UI configuration details.</simpara>\n      ",
                "documentation": "\n        <p>The user pool UI configuration details.</p>\n      ",
                "shape_name": "UserPoolUIDetailsType",
                "keys": {
                  "type": "string",
                  "shape_name": "StringType",
                  "documentation": null
                },
                "members": {
                  "type": "map",
                  "shape_name": "UIDetailsMapType",
                  "documentation": null,
                  "keys": {
                    "type": "string",
                    "shape_name": "StringType",
                    "documentation": null
                  },
                  "members": {
                    "type": "string",
                    "shape_name": "StringType",
                    "documentation": null
                  }
                }
              },
              "LastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The user pool UI configuration last modified date.</simpara>\n      ",
                "documentation": "\n        <p>The user pool UI configuration last modified date.</p>\n      ",
                "shape_name": "DateType"
              },
              "CreationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The user pool UI configuration creation date.</simpara>\n      ",
                "documentation": "\n        <p>The user pool UI configuration creation date.</p>\n      ",
                "shape_name": "DateType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The user pool UI configuration.</simpara>\n      ",
            "documentation": "\n        <p>The user pool UI configuration.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolUIConfigurationType"
          }
        },
        "shape_name": "SetUserPoolUIConfigurationResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Set the user pool UI configuration.</p>\n      "
    },
    "GetUserPoolUIConfiguration": {
      "name": "GetUserPoolUIConfiguration",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          }
        },
        "shape_name": "GetUserPoolUIConfigurationRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "UserPoolUIConfiguration": {
            "type": "structure",
            "members": {
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "Details": {
                "type": "map",
                "zonbookDocumentation": "\n        <simpara>The user pool UI configuration details.</simpara>\n      ",
                "documentation": "\n        <p>The user pool UI configuration details.</p>\n      ",
                "shape_name": "UserPoolUIDetailsType",
                "keys": {
                  "type": "string",
                  "shape_name": "StringType",
                  "documentation": null
                },
                "members": {
                  "type": "map",
                  "shape_name": "UIDetailsMapType",
                  "documentation": null,
                  "keys": {
                    "type": "string",
                    "shape_name": "StringType",
                    "documentation": null
                  },
                  "members": {
                    "type": "string",
                    "shape_name": "StringType",
                    "documentation": null
                  }
                }
              },
              "LastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The user pool UI configuration last modified date.</simpara>\n      ",
                "documentation": "\n        <p>The user pool UI configuration last modified date.</p>\n      ",
                "shape_name": "DateType"
              },
              "CreationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The user pool UI configuration creation date.</simpara>\n      ",
                "documentation": "\n        <p>The user pool UI configuration creation date.</p>\n      ",
                "shape_name": "DateType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The user pool configuration</simpara>\n      ",
            "documentation": "\n        <p>The user pool configuration</p>\n      ",
            "required": true,
            "shape_name": "UserPoolUIConfigurationType"
          }
        },
        "shape_name": "GetUserPoolUIConfigurationResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Get the user pool UI configuration.</p>\n      "
    },
    "SetUICustomization": {
      "name": "SetUICustomization",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "ClientId": {
            "type": "string",
            "pattern": "[\\w+]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The client ID for the client app.</simpara>\n      ",
            "documentation": "\n        <p>The client ID for the client app.</p>\n      ",
            "shape_name": "ClientIdType",
            "min_length": 1,
            "max_length": 128
          },
          "CSS": {
            "type": "string",
            "zonbookDocumentation": "\n        \n        <simpara>The CSS values in the UI customization.</simpara>\n      ",
            "documentation": "\n        \n        <p>The CSS values in the UI customization.</p>\n      ",
            "shape_name": "CSSType"
          },
          "ImageFile": {
            "type": "blob",
            "zonbookDocumentation": "\n        <simpara>The uploaded logo image for the UI customization.</simpara>\n      ",
            "documentation": "\n        <p>The uploaded logo image for the UI customization.</p>\n      ",
            "shape_name": "ImageFileType"
          }
        },
        "shape_name": "SetUICustomizationRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "UICustomization": {
            "type": "structure",
            "members": {
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID for the user pool.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "ClientId": {
                "type": "string",
                "pattern": "[\\w+]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The client ID for the client app.</simpara>\n      ",
                "documentation": "\n        <p>The client ID for the client app.</p>\n      ",
                "shape_name": "ClientIdType",
                "min_length": 1,
                "max_length": 128
              },
              "ImageUrl": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The logo image for the UI customization.</simpara>\n      ",
                "documentation": "\n        <p>The logo image for the UI customization.</p>\n      ",
                "shape_name": "ImageUrlType"
              },
              "CSS": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The CSS values in the UI customization.</simpara>\n      ",
                "documentation": "\n        <p>The CSS values in the UI customization.</p>\n      ",
                "shape_name": "CSSType"
              },
              "CSSVersion": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The CSS version number.</simpara>\n      ",
                "documentation": "\n        <p>The CSS version number.</p>\n      ",
                "shape_name": "CSSVersionType"
              },
              "LastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The last-modified date for the UI customization.</simpara>\n      ",
                "documentation": "\n        <p>The last-modified date for the UI customization.</p>\n      ",
                "shape_name": "DateType"
              },
              "CreationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The creation date for the UI customization.</simpara>\n      ",
                "documentation": "\n        <p>The creation date for the UI customization.</p>\n      ",
                "shape_name": "DateType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The UI customization information.</simpara>\n      ",
            "documentation": "\n        <p>The UI customization information.</p>\n      ",
            "required": true,
            "shape_name": "UICustomizationType"
          }
        },
        "shape_name": "SetUICustomizationResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Sets the UI customization information for a user pool's built-in app UI.</p>\n        <p>You can specify app UI customization settings for a single client (with a specific\n                <code>clientId</code>) or for all clients (by setting the <code>clientId</code> to\n                <code>ALL</code>). If you specify <code>ALL</code>, the default configuration will\n            be used for every client that has no UI customization set previously. If you specify UI\n            customization settings for a particular client, it will no longer fall back to the\n                <code>ALL</code> configuration. </p>\n        <note>\n            <p>To use this API, your user pool must have a domain associated with it.\n                Otherwise, there is no place to host the app's pages, and the service will throw an\n                error.</p>\n        </note>\n      "
    },
    "GetUICustomization": {
      "name": "GetUICustomization",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "ClientId": {
            "type": "string",
            "pattern": "[\\w+]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The client ID for the client app.</simpara>\n      ",
            "documentation": "\n        <p>The client ID for the client app.</p>\n      ",
            "shape_name": "ClientIdType",
            "min_length": 1,
            "max_length": 128
          }
        },
        "shape_name": "GetUICustomizationRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "UICustomization": {
            "type": "structure",
            "members": {
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID for the user pool.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "ClientId": {
                "type": "string",
                "pattern": "[\\w+]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The client ID for the client app.</simpara>\n      ",
                "documentation": "\n        <p>The client ID for the client app.</p>\n      ",
                "shape_name": "ClientIdType",
                "min_length": 1,
                "max_length": 128
              },
              "ImageUrl": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The logo image for the UI customization.</simpara>\n      ",
                "documentation": "\n        <p>The logo image for the UI customization.</p>\n      ",
                "shape_name": "ImageUrlType"
              },
              "CSS": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The CSS values in the UI customization.</simpara>\n      ",
                "documentation": "\n        <p>The CSS values in the UI customization.</p>\n      ",
                "shape_name": "CSSType"
              },
              "CSSVersion": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The CSS version number.</simpara>\n      ",
                "documentation": "\n        <p>The CSS version number.</p>\n      ",
                "shape_name": "CSSVersionType"
              },
              "LastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The last-modified date for the UI customization.</simpara>\n      ",
                "documentation": "\n        <p>The last-modified date for the UI customization.</p>\n      ",
                "shape_name": "DateType"
              },
              "CreationDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The creation date for the UI customization.</simpara>\n      ",
                "documentation": "\n        <p>The creation date for the UI customization.</p>\n      ",
                "shape_name": "DateType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The UI customization information.</simpara>\n      ",
            "documentation": "\n        <p>The UI customization information.</p>\n      ",
            "required": true,
            "shape_name": "UICustomizationType"
          }
        },
        "shape_name": "GetUICustomizationResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Gets the UI Customization information for a particular app client's app UI, if\n            there is something set. If nothing is set for the particular client, but there is an\n            existing pool level customization (app <code>clientId</code> will be <code>ALL</code>),\n            then that is returned. If nothing is present, then an empty shape is returned.</p>\n      "
    },
    "AdminLinkProviderForUser": {
      "name": "AdminLinkProviderForUser",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool.</p>\n      ",
            "required": true,
            "shape_name": "StringType"
          },
          "DestinationUser": {
            "type": "structure",
            "members": {
              "ProviderName": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "zonbookDocumentation": "\n        <simpara>The name of the provider, for example, Facebook, Google, or Login with\n            Amazon.</simpara>\n      ",
                "documentation": "\n        <p>The name of the provider, for example, Facebook, Google, or Login with\n            Amazon.</p>\n      ",
                "shape_name": "ProviderNameType",
                "min_length": 1,
                "max_length": 32
              },
              "ProviderAttributeName": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The name of the provider attribute to link to, for example,\n            <code>NameID</code>.</simpara>\n      ",
                "documentation": "\n        <p>The name of the provider attribute to link to, for example,\n            <code>NameID</code>.</p>\n      ",
                "shape_name": "StringType"
              },
              "ProviderAttributeValue": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The value of the provider attribute to link to, for example,\n                <code>xxxxx_account</code>.</simpara>\n      ",
                "documentation": "\n        <p>The value of the provider attribute to link to, for example,\n                <code>xxxxx_account</code>.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The existing user in the user pool to be linked to the external identity provider\n            user account. Can be a native (Username + Password) Cognito User Pools user or a\n            federated user (for example, a SAML or Facebook user). If the user doesn't exist, an\n            exception is thrown. This is the user that is returned when the new user (with the\n            linked identity provider attribute) signs in.</simpara>\n        <simpara>For a native username + password user, the <code>ProviderAttributeValue</code> for\n            the <code>DestinationUser</code> should be the username in the user pool. For a\n            federated user, it should be the provider-specific <code>user_id</code>.</simpara>\n        <simpara>The <code>ProviderAttributeName</code> of the <code>DestinationUser</code> is\n            ignored.</simpara>\n        <simpara>The <code>ProviderName</code> should be set to <code>Cognito</code> for users in\n            Cognito user pools.</simpara>\n      ",
            "documentation": "\n        <p>The existing user in the user pool to be linked to the external identity provider\n            user account. Can be a native (Username + Password) Cognito User Pools user or a\n            federated user (for example, a SAML or Facebook user). If the user doesn't exist, an\n            exception is thrown. This is the user that is returned when the new user (with the\n            linked identity provider attribute) signs in.</p>\n        <p>For a native username + password user, the <code>ProviderAttributeValue</code> for\n            the <code>DestinationUser</code> should be the username in the user pool. For a\n            federated user, it should be the provider-specific <code>user_id</code>.</p>\n        <p>The <code>ProviderAttributeName</code> of the <code>DestinationUser</code> is\n            ignored.</p>\n        <p>The <code>ProviderName</code> should be set to <code>Cognito</code> for users in\n            Cognito user pools.</p>\n      ",
            "required": true,
            "shape_name": "ProviderUserIdentifierType"
          },
          "SourceUser": {
            "type": "structure",
            "members": {
              "ProviderName": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "zonbookDocumentation": "\n        <simpara>The name of the provider, for example, Facebook, Google, or Login with\n            Amazon.</simpara>\n      ",
                "documentation": "\n        <p>The name of the provider, for example, Facebook, Google, or Login with\n            Amazon.</p>\n      ",
                "shape_name": "ProviderNameType",
                "min_length": 1,
                "max_length": 32
              },
              "ProviderAttributeName": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The name of the provider attribute to link to, for example,\n            <code>NameID</code>.</simpara>\n      ",
                "documentation": "\n        <p>The name of the provider attribute to link to, for example,\n            <code>NameID</code>.</p>\n      ",
                "shape_name": "StringType"
              },
              "ProviderAttributeValue": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The value of the provider attribute to link to, for example,\n                <code>xxxxx_account</code>.</simpara>\n      ",
                "documentation": "\n        <p>The value of the provider attribute to link to, for example,\n                <code>xxxxx_account</code>.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>An external identity provider account for a user who does not currently exist yet\n            in the user pool. This user must be a federated user (for example, a SAML or Facebook\n            user), not another native user.</simpara>\n        <simpara>If the <code>SourceUser</code> is a federated social identity provider user\n            (Facebook, Google, or Login with Amazon), you must set the\n                <code>ProviderAttributeName</code> to <code>Cognito_Subject</code>. For social\n            identity providers, the <code>ProviderName</code> will be <code>Facebook</code>,\n                <code>Google</code>, or <code>LoginWithAmazon</code>, and Cognito will automatically\n            parse the Facebook, Google, and Login with Amazon tokens for <code>id</code>,\n                <code>sub</code>, and <code>user_id</code>, respectively. The\n                <code>ProviderAttributeValue</code> for the user must be the same value as the\n                <code>id</code>, <code>sub</code>, or <code>user_id</code> value found in the social\n            identity provider token.</simpara>\n        <simpara/>\n        <simpara>For SAML, the <code>ProviderAttributeName</code> can be any value that matches a\n            claim in the SAML assertion. If you wish to link SAML users based on the subject of the\n            SAML assertion, you should map the subject to a claim through the SAML identity provider\n            and submit that claim name as the <code>ProviderAttributeName</code>. If you set\n                <code>ProviderAttributeName</code> to <code>Cognito_Subject</code>, Cognito will\n            automatically parse the default unique identifier found in the subject from the SAML\n            token.</simpara>\n      ",
            "documentation": "\n        <p>An external identity provider account for a user who does not currently exist yet\n            in the user pool. This user must be a federated user (for example, a SAML or Facebook\n            user), not another native user.</p>\n        <p>If the <code>SourceUser</code> is a federated social identity provider user\n            (Facebook, Google, or Login with Amazon), you must set the\n                <code>ProviderAttributeName</code> to <code>Cognito_Subject</code>. For social\n            identity providers, the <code>ProviderName</code> will be <code>Facebook</code>,\n                <code>Google</code>, or <code>LoginWithAmazon</code>, and Cognito will automatically\n            parse the Facebook, Google, and Login with Amazon tokens for <code>id</code>,\n                <code>sub</code>, and <code>user_id</code>, respectively. The\n                <code>ProviderAttributeValue</code> for the user must be the same value as the\n                <code>id</code>, <code>sub</code>, or <code>user_id</code> value found in the social\n            identity provider token.</p>\n        <p/>\n        <p>For SAML, the <code>ProviderAttributeName</code> can be any value that matches a\n            claim in the SAML assertion. If you wish to link SAML users based on the subject of the\n            SAML assertion, you should map the subject to a claim through the SAML identity provider\n            and submit that claim name as the <code>ProviderAttributeName</code>. If you set\n                <code>ProviderAttributeName</code> to <code>Cognito_Subject</code>, Cognito will\n            automatically parse the default unique identifier found in the subject from the SAML\n            token.</p>\n      ",
            "required": true,
            "shape_name": "ProviderUserIdentifierType"
          }
        },
        "shape_name": "AdminLinkProviderForUserRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "AdminLinkProviderForUserResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message sent to the user when an alias exists.</simpara>\n      ",
              "documentation": "\n        <p>The message sent to the user when an alias exists.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user tries to confirm the account with an email or\n            phone number that has already been supplied as an alias from a different account. This\n            exception tells user that an account with this email or phone already exists.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user tries to confirm the account with an email or\n            phone number that has already been supplied as an alias from a different account. This\n            exception tells user that an account with this email or phone already exists.</p>\n      ",
          "shape_name": "AliasExistsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Links an existing user account in a user pool (<code>DestinationUser</code>) to an\n            identity from an external identity provider (<code>SourceUser</code>) based on a\n            specified attribute name and value from the external identity provider. This allows you\n            to create a link from the existing user account to an external federated user identity\n            that has not yet been used to sign in, so that the federated user identity can be used\n            to sign in as the existing user account. </p>\n        <p> For example, if there is an existing user with a username and password, this API\n            links that user to a federated user identity, so that when the federated user identity\n            is used, the user signs in as the existing user account. </p>\n        <important>\n            <p>Because this API allows a user with an external federated identity to sign in\n                as an existing user in the user pool, it is critical that it only be used with\n                external identity providers and provider attributes that have been trusted by the\n                application owner.</p>\n        </important>\n        <p>See also .</p>\n        <p>This action is enabled only for admin access and requires developer\n            credentials.</p>\n      "
    },
    "AdminDisableProviderForUser": {
      "name": "AdminDisableProviderForUser",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The user pool ID for the user pool.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID for the user pool.</p>\n      ",
            "required": true,
            "shape_name": "StringType"
          },
          "User": {
            "type": "structure",
            "members": {
              "ProviderName": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "zonbookDocumentation": "\n        <simpara>The name of the provider, for example, Facebook, Google, or Login with\n            Amazon.</simpara>\n      ",
                "documentation": "\n        <p>The name of the provider, for example, Facebook, Google, or Login with\n            Amazon.</p>\n      ",
                "shape_name": "ProviderNameType",
                "min_length": 1,
                "max_length": 32
              },
              "ProviderAttributeName": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The name of the provider attribute to link to, for example,\n            <code>NameID</code>.</simpara>\n      ",
                "documentation": "\n        <p>The name of the provider attribute to link to, for example,\n            <code>NameID</code>.</p>\n      ",
                "shape_name": "StringType"
              },
              "ProviderAttributeValue": {
                "type": "string",
                "zonbookDocumentation": "\n        <simpara>The value of the provider attribute to link to, for example,\n                <code>xxxxx_account</code>.</simpara>\n      ",
                "documentation": "\n        <p>The value of the provider attribute to link to, for example,\n                <code>xxxxx_account</code>.</p>\n      ",
                "shape_name": "StringType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The user to be disabled.</simpara>\n      ",
            "documentation": "\n        <p>The user to be disabled.</p>\n      ",
            "required": true,
            "shape_name": "ProviderUserIdentifierType"
          }
        },
        "shape_name": "AdminDisableProviderForUserRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "AdminDisableProviderForUserResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message sent to the user when an alias exists.</simpara>\n      ",
              "documentation": "\n        <p>The message sent to the user when an alias exists.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user tries to confirm the account with an email or\n            phone number that has already been supplied as an alias from a different account. This\n            exception tells user that an account with this email or phone already exists.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user tries to confirm the account with an email or\n            phone number that has already been supplied as an alias from a different account. This\n            exception tells user that an account with this email or phone already exists.</p>\n      ",
          "shape_name": "AliasExistsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Disables the user from signing in with the specified external (SAML or social)\n            identity provider. If the user to disable is a Cognito User Pools native username +\n            password user, they are not permitted to use their password to sign-in. If the user to\n            disable is a linked external IdP user, any link between that user and an existing user\n            is removed. The next time the external user (no longer attached to the previously linked\n                <code>DestinationUser</code>) signs in, they must create a new user account. See\n                .</p>\n        <p>This action is enabled only for admin access and requires developer\n            credentials.</p>\n        <p>The <code>ProviderName</code> must match the value specified when creating an IdP\n            for the pool. </p>\n        <p>To disable a native username + password user, the <code>ProviderName</code> value\n            must be <code>Cognito</code> and the <code>ProviderAttributeName</code> must be\n                <code>Cognito_Subject</code>, with the <code>ProviderAttributeValue</code> being the\n            name that is used in the user pool for the user.</p>\n        <p>The <code>ProviderAttributeName</code> must always be <code>Cognito_Subject</code>\n            for social identity providers. The <code>ProviderAttributeValue</code> must always be\n            the exact subject that was used when the user was originally linked as a source\n            user.</p>\n        <p>For de-linking a SAML identity, there are two scenarios. If the linked identity has\n            not yet been used to sign-in, the <code>ProviderAttributeName</code> and\n                <code>ProviderAttributeValue</code> must be the same values that were used for the\n                <code>SourceUser</code> when the identities were originally linked in the  call. (If the linking was done with\n                <code>ProviderAttributeName</code> set to <code>Cognito_Subject</code>, the same\n            applies here). However, if the user has already signed in, the\n                <code>ProviderAttributeName</code> must be <code>Cognito_Subject</code> and\n                <code>ProviderAttributeValue</code> must be the subject of the SAML\n            assertion.</p>\n      "
    },
    "GetSigningCertificate": {
      "name": "GetSigningCertificate",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          }
        },
        "zonbookDocumentation": "\n        <simpara>Request to get a signing certificate from Cognito.</simpara>\n      ",
        "documentation": "\n        <p>Request to get a signing certificate from Cognito.</p>\n      ",
        "shape_name": "GetSigningCertificateRequest"
      },
      "output": {
        "type": "structure",
        "members": {
          "Certificate": {
            "type": "string",
            "zonbookDocumentation": "\n        <simpara>The signing certificate.</simpara>\n      ",
            "documentation": "\n        <p>The signing certificate.</p>\n      ",
            "shape_name": "StringType"
          }
        },
        "zonbookDocumentation": "\n        <simpara>Response from Cognito for a signing certificate request.</simpara>\n      ",
        "documentation": "\n        <p>Response from Cognito for a signing certificate request.</p>\n      ",
        "shape_name": "GetSigningCertificateResponse"
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        }
      ],
      "documentation": "\n        <p>This method takes a user pool ID, and returns the signing certificate.</p>\n      "
    },
    "SetRiskConfiguration": {
      "name": "SetRiskConfiguration",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID. </simpara>\n      ",
            "documentation": "\n        <p>The user pool ID. </p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "ClientId": {
            "type": "string",
            "pattern": "[\\w+]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The app client ID.\n            If <code>ClientId</code> is null, then the risk configuration\n            is mapped to <code>userPoolId</code>. When the client ID is null, the same risk\n            configuration is applied to all the clients in the userPool.</simpara>\n        <simpara>Otherwise, <code>ClientId</code> is mapped to the client. When the client ID\n            is not null, the user pool configuration is overridden and the risk configuration\n            for the client is used instead.</simpara>\n      ",
            "documentation": "\n        <p>The app client ID.\n            If <code>ClientId</code> is null, then the risk configuration\n            is mapped to <code>userPoolId</code>. When the client ID is null, the same risk\n            configuration is applied to all the clients in the userPool.</p>\n        <p>Otherwise, <code>ClientId</code> is mapped to the client. When the client ID\n            is not null, the user pool configuration is overridden and the risk configuration\n            for the client is used instead.</p>\n      ",
            "shape_name": "ClientIdType",
            "min_length": 1,
            "max_length": 128
          },
          "CompromisedCredentialsRiskConfiguration": {
            "type": "structure",
            "members": {
              "EventFilter": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>Perform the action for these events. The default is to perform all events if no\n            event filter is specified.</simpara>\n      ",
                "documentation": "\n        <p>Perform the action for these events. The default is to perform all events if no\n            event filter is specified.</p>\n      ",
                "shape_name": "EventFiltersType",
                "members": {
                  "type": "string",
                  "enum": [
                    "SIGN_IN",
                    "PASSWORD_CHANGE",
                    "SIGN_UP"
                  ],
                  "shape_name": "EventFilterType",
                  "documentation": null
                }
              },
              "Actions": {
                "type": "structure",
                "members": {
                  "EventAction": {
                    "type": "string",
                    "enum": [
                      "BLOCK",
                      "NO_ACTION"
                    ],
                    "zonbookDocumentation": "\n        <simpara>The event action.</simpara>\n      ",
                    "documentation": "\n        <p>The event action.</p>\n      ",
                    "required": true,
                    "shape_name": "CompromisedCredentialsEventActionType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The compromised credentials risk configuration actions.</simpara>\n      ",
                "documentation": "\n        <p>The compromised credentials risk configuration actions.</p>\n      ",
                "required": true,
                "shape_name": "CompromisedCredentialsActionsType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The compromised credentials risk configuration.</simpara>\n      ",
            "documentation": "\n        <p>The compromised credentials risk configuration.</p>\n      ",
            "shape_name": "CompromisedCredentialsRiskConfigurationType"
          },
          "AccountTakeoverRiskConfiguration": {
            "type": "structure",
            "members": {
              "NotifyConfiguration": {
                "type": "structure",
                "members": {
                  "From": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The email address that is sending the email. It must be either individually\n            verified with Amazon SES, or from a domain that has been verified with Amazon\n            SES.</simpara>\n      ",
                    "documentation": "\n        <p>The email address that is sending the email. It must be either individually\n            verified with Amazon SES, or from a domain that has been verified with Amazon\n            SES.</p>\n      ",
                    "shape_name": "StringType"
                  },
                  "ReplyTo": {
                    "type": "string",
                    "zonbookDocumentation": "\n        <simpara>The destination to which the receiver of an email should reply to.</simpara>\n      ",
                    "documentation": "\n        <p>The destination to which the receiver of an email should reply to.</p>\n      ",
                    "shape_name": "StringType"
                  },
                  "SourceArn": {
                    "type": "string",
                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                    "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the identity that is associated with the sending\n            authorization policy. It permits Amazon Cognito to send for the email address specified\n            in the <code>From</code> parameter.</simpara>\n      ",
                    "documentation": "\n        <p>The Amazon Resource Name (ARN) of the identity that is associated with the sending\n            authorization policy. It permits Amazon Cognito to send for the email address specified\n            in the <code>From</code> parameter.</p>\n      ",
                    "required": true,
                    "shape_name": "ArnType",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "BlockEmail": {
                    "type": "structure",
                    "members": {
                      "Subject": {
                        "type": "string",
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                        "zonbookDocumentation": "\n        <simpara>The subject.</simpara>\n      ",
                        "documentation": "\n        <p>The subject.</p>\n      ",
                        "required": true,
                        "shape_name": "EmailNotificationSubjectType",
                        "min_length": 1,
                        "max_length": 140
                      },
                      "HtmlBody": {
                        "type": "string",
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                        "zonbookDocumentation": "\n        <simpara>The HTML body.</simpara>\n      ",
                        "documentation": "\n        <p>The HTML body.</p>\n      ",
                        "shape_name": "EmailNotificationBodyType",
                        "min_length": 6,
                        "max_length": 20000
                      },
                      "TextBody": {
                        "type": "string",
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                        "zonbookDocumentation": "\n        <simpara>The text body.</simpara>\n      ",
                        "documentation": "\n        <p>The text body.</p>\n      ",
                        "shape_name": "EmailNotificationBodyType",
                        "min_length": 6,
                        "max_length": 20000
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>Email template used when a detected risk event is blocked.</simpara>\n      ",
                    "documentation": "\n        <p>Email template used when a detected risk event is blocked.</p>\n      ",
                    "shape_name": "NotifyEmailType"
                  },
                  "NoActionEmail": {
                    "type": "structure",
                    "members": {
                      "Subject": {
                        "type": "string",
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                        "zonbookDocumentation": "\n        <simpara>The subject.</simpara>\n      ",
                        "documentation": "\n        <p>The subject.</p>\n      ",
                        "required": true,
                        "shape_name": "EmailNotificationSubjectType",
                        "min_length": 1,
                        "max_length": 140
                      },
                      "HtmlBody": {
                        "type": "string",
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                        "zonbookDocumentation": "\n        <simpara>The HTML body.</simpara>\n      ",
                        "documentation": "\n        <p>The HTML body.</p>\n      ",
                        "shape_name": "EmailNotificationBodyType",
                        "min_length": 6,
                        "max_length": 20000
                      },
                      "TextBody": {
                        "type": "string",
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                        "zonbookDocumentation": "\n        <simpara>The text body.</simpara>\n      ",
                        "documentation": "\n        <p>The text body.</p>\n      ",
                        "shape_name": "EmailNotificationBodyType",
                        "min_length": 6,
                        "max_length": 20000
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>The email template used when a detected risk event is allowed.</simpara>\n      ",
                    "documentation": "\n        <p>The email template used when a detected risk event is allowed.</p>\n      ",
                    "shape_name": "NotifyEmailType"
                  },
                  "MfaEmail": {
                    "type": "structure",
                    "members": {
                      "Subject": {
                        "type": "string",
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                        "zonbookDocumentation": "\n        <simpara>The subject.</simpara>\n      ",
                        "documentation": "\n        <p>The subject.</p>\n      ",
                        "required": true,
                        "shape_name": "EmailNotificationSubjectType",
                        "min_length": 1,
                        "max_length": 140
                      },
                      "HtmlBody": {
                        "type": "string",
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                        "zonbookDocumentation": "\n        <simpara>The HTML body.</simpara>\n      ",
                        "documentation": "\n        <p>The HTML body.</p>\n      ",
                        "shape_name": "EmailNotificationBodyType",
                        "min_length": 6,
                        "max_length": 20000
                      },
                      "TextBody": {
                        "type": "string",
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                        "zonbookDocumentation": "\n        <simpara>The text body.</simpara>\n      ",
                        "documentation": "\n        <p>The text body.</p>\n      ",
                        "shape_name": "EmailNotificationBodyType",
                        "min_length": 6,
                        "max_length": 20000
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>The MFA email template used when MFA is challenged as part of a detected\n            risk.</simpara>\n      ",
                    "documentation": "\n        <p>The MFA email template used when MFA is challenged as part of a detected\n            risk.</p>\n      ",
                    "shape_name": "NotifyEmailType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The notify configuration used to construct email notifications.</simpara>\n      ",
                "documentation": "\n        <p>The notify configuration used to construct email notifications.</p>\n      ",
                "shape_name": "NotifyConfigurationType"
              },
              "Actions": {
                "type": "structure",
                "members": {
                  "LowAction": {
                    "type": "structure",
                    "members": {
                      "Notify": {
                        "type": "boolean",
                        "zonbookDocumentation": "\n        <simpara>Flag specifying whether to send a notification.</simpara>\n      ",
                        "documentation": "\n        <p>Flag specifying whether to send a notification.</p>\n      ",
                        "required": true,
                        "shape_name": "AccountTakeoverActionNotifyType"
                      },
                      "EventAction": {
                        "type": "string",
                        "enum": [
                          "BLOCK",
                          "MFA_IF_CONFIGURED",
                          "MFA_REQUIRED",
                          "NO_ACTION"
                        ],
                        "zonbookDocumentation": "\n        <simpara>The event action.</simpara>\n        <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>BLOCK</code> Choosing this action will block the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>NO_ACTION</code> Allow the user sign-in.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
                        "documentation": "\n        <p>The event action.</p>\n        <ul>\n            <li>\n               <p>\n                  <code>BLOCK</code> Choosing this action will block the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>NO_ACTION</code> Allow the user sign-in.</p>\n            </li>\n         </ul>\n      ",
                        "required": true,
                        "shape_name": "AccountTakeoverEventActionType"
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>Action to take for a low risk.</simpara>\n      ",
                    "documentation": "\n        <p>Action to take for a low risk.</p>\n      ",
                    "shape_name": "AccountTakeoverActionType"
                  },
                  "MediumAction": {
                    "type": "structure",
                    "members": {
                      "Notify": {
                        "type": "boolean",
                        "zonbookDocumentation": "\n        <simpara>Flag specifying whether to send a notification.</simpara>\n      ",
                        "documentation": "\n        <p>Flag specifying whether to send a notification.</p>\n      ",
                        "required": true,
                        "shape_name": "AccountTakeoverActionNotifyType"
                      },
                      "EventAction": {
                        "type": "string",
                        "enum": [
                          "BLOCK",
                          "MFA_IF_CONFIGURED",
                          "MFA_REQUIRED",
                          "NO_ACTION"
                        ],
                        "zonbookDocumentation": "\n        <simpara>The event action.</simpara>\n        <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>BLOCK</code> Choosing this action will block the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>NO_ACTION</code> Allow the user sign-in.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
                        "documentation": "\n        <p>The event action.</p>\n        <ul>\n            <li>\n               <p>\n                  <code>BLOCK</code> Choosing this action will block the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>NO_ACTION</code> Allow the user sign-in.</p>\n            </li>\n         </ul>\n      ",
                        "required": true,
                        "shape_name": "AccountTakeoverEventActionType"
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>Action to take for a medium risk.</simpara>\n      ",
                    "documentation": "\n        <p>Action to take for a medium risk.</p>\n      ",
                    "shape_name": "AccountTakeoverActionType"
                  },
                  "HighAction": {
                    "type": "structure",
                    "members": {
                      "Notify": {
                        "type": "boolean",
                        "zonbookDocumentation": "\n        <simpara>Flag specifying whether to send a notification.</simpara>\n      ",
                        "documentation": "\n        <p>Flag specifying whether to send a notification.</p>\n      ",
                        "required": true,
                        "shape_name": "AccountTakeoverActionNotifyType"
                      },
                      "EventAction": {
                        "type": "string",
                        "enum": [
                          "BLOCK",
                          "MFA_IF_CONFIGURED",
                          "MFA_REQUIRED",
                          "NO_ACTION"
                        ],
                        "zonbookDocumentation": "\n        <simpara>The event action.</simpara>\n        <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>BLOCK</code> Choosing this action will block the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>NO_ACTION</code> Allow the user sign-in.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
                        "documentation": "\n        <p>The event action.</p>\n        <ul>\n            <li>\n               <p>\n                  <code>BLOCK</code> Choosing this action will block the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>NO_ACTION</code> Allow the user sign-in.</p>\n            </li>\n         </ul>\n      ",
                        "required": true,
                        "shape_name": "AccountTakeoverEventActionType"
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>Action to take for a high risk.</simpara>\n      ",
                    "documentation": "\n        <p>Action to take for a high risk.</p>\n      ",
                    "shape_name": "AccountTakeoverActionType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>Account takeover risk configuration actions</simpara>\n      ",
                "documentation": "\n        <p>Account takeover risk configuration actions</p>\n      ",
                "required": true,
                "shape_name": "AccountTakeoverActionsType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The account takeover risk configuration.</simpara>\n      ",
            "documentation": "\n        <p>The account takeover risk configuration.</p>\n      ",
            "shape_name": "AccountTakeoverRiskConfigurationType"
          },
          "RiskExceptionConfiguration": {
            "type": "structure",
            "members": {
              "BlockedIPRangeList": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>Overrides the risk decision to always block the pre-authentication requests.\n            The IP range is in CIDR notation: a compact representation of an IP address and\n            its associated routing prefix.</simpara>\n      ",
                "documentation": "\n        <p>Overrides the risk decision to always block the pre-authentication requests.\n            The IP range is in CIDR notation: a compact representation of an IP address and\n            its associated routing prefix.</p>\n      ",
                "shape_name": "BlockedIPRangeListType",
                "max_length": 20,
                "members": {
                  "type": "string",
                  "shape_name": "StringType",
                  "documentation": null
                }
              },
              "SkippedIPRangeList": {
                "type": "list",
                "zonbookDocumentation": "\n        <simpara>Risk detection is not performed on the IP addresses in the range list.\n            The IP range is in CIDR notation.</simpara>\n      ",
                "documentation": "\n        <p>Risk detection is not performed on the IP addresses in the range list.\n            The IP range is in CIDR notation.</p>\n      ",
                "shape_name": "SkippedIPRangeListType",
                "max_length": 20,
                "members": {
                  "type": "string",
                  "shape_name": "StringType",
                  "documentation": null
                }
              }
            },
            "zonbookDocumentation": "\n        <simpara>The configuration to override the risk decision.</simpara>\n      ",
            "documentation": "\n        <p>The configuration to override the risk decision.</p>\n      ",
            "shape_name": "RiskExceptionConfigurationType"
          }
        },
        "shape_name": "SetRiskConfigurationRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "RiskConfiguration": {
            "type": "structure",
            "members": {
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "ClientId": {
                "type": "string",
                "pattern": "[\\w+]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The app client ID.</simpara>\n      ",
                "documentation": "\n        <p>The app client ID.</p>\n      ",
                "shape_name": "ClientIdType",
                "min_length": 1,
                "max_length": 128
              },
              "CompromisedCredentialsRiskConfiguration": {
                "type": "structure",
                "members": {
                  "EventFilter": {
                    "type": "list",
                    "zonbookDocumentation": "\n        <simpara>Perform the action for these events. The default is to perform all events if no\n            event filter is specified.</simpara>\n      ",
                    "documentation": "\n        <p>Perform the action for these events. The default is to perform all events if no\n            event filter is specified.</p>\n      ",
                    "shape_name": "EventFiltersType",
                    "members": {
                      "type": "string",
                      "enum": [
                        "SIGN_IN",
                        "PASSWORD_CHANGE",
                        "SIGN_UP"
                      ],
                      "shape_name": "EventFilterType",
                      "documentation": null
                    }
                  },
                  "Actions": {
                    "type": "structure",
                    "members": {
                      "EventAction": {
                        "type": "string",
                        "enum": [
                          "BLOCK",
                          "NO_ACTION"
                        ],
                        "zonbookDocumentation": "\n        <simpara>The event action.</simpara>\n      ",
                        "documentation": "\n        <p>The event action.</p>\n      ",
                        "required": true,
                        "shape_name": "CompromisedCredentialsEventActionType"
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>The compromised credentials risk configuration actions.</simpara>\n      ",
                    "documentation": "\n        <p>The compromised credentials risk configuration actions.</p>\n      ",
                    "required": true,
                    "shape_name": "CompromisedCredentialsActionsType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The compromised credentials risk configuration object including the\n                <code>EventFilter</code> and the <code>EventAction</code>\n         </simpara>\n      ",
                "documentation": "\n        <p>The compromised credentials risk configuration object including the\n                <code>EventFilter</code> and the <code>EventAction</code>\n         </p>\n      ",
                "shape_name": "CompromisedCredentialsRiskConfigurationType"
              },
              "AccountTakeoverRiskConfiguration": {
                "type": "structure",
                "members": {
                  "NotifyConfiguration": {
                    "type": "structure",
                    "members": {
                      "From": {
                        "type": "string",
                        "zonbookDocumentation": "\n        <simpara>The email address that is sending the email. It must be either individually\n            verified with Amazon SES, or from a domain that has been verified with Amazon\n            SES.</simpara>\n      ",
                        "documentation": "\n        <p>The email address that is sending the email. It must be either individually\n            verified with Amazon SES, or from a domain that has been verified with Amazon\n            SES.</p>\n      ",
                        "shape_name": "StringType"
                      },
                      "ReplyTo": {
                        "type": "string",
                        "zonbookDocumentation": "\n        <simpara>The destination to which the receiver of an email should reply to.</simpara>\n      ",
                        "documentation": "\n        <p>The destination to which the receiver of an email should reply to.</p>\n      ",
                        "shape_name": "StringType"
                      },
                      "SourceArn": {
                        "type": "string",
                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                        "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the identity that is associated with the sending\n            authorization policy. It permits Amazon Cognito to send for the email address specified\n            in the <code>From</code> parameter.</simpara>\n      ",
                        "documentation": "\n        <p>The Amazon Resource Name (ARN) of the identity that is associated with the sending\n            authorization policy. It permits Amazon Cognito to send for the email address specified\n            in the <code>From</code> parameter.</p>\n      ",
                        "required": true,
                        "shape_name": "ArnType",
                        "min_length": 20,
                        "max_length": 2048
                      },
                      "BlockEmail": {
                        "type": "structure",
                        "members": {
                          "Subject": {
                            "type": "string",
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                            "zonbookDocumentation": "\n        <simpara>The subject.</simpara>\n      ",
                            "documentation": "\n        <p>The subject.</p>\n      ",
                            "required": true,
                            "shape_name": "EmailNotificationSubjectType",
                            "min_length": 1,
                            "max_length": 140
                          },
                          "HtmlBody": {
                            "type": "string",
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                            "zonbookDocumentation": "\n        <simpara>The HTML body.</simpara>\n      ",
                            "documentation": "\n        <p>The HTML body.</p>\n      ",
                            "shape_name": "EmailNotificationBodyType",
                            "min_length": 6,
                            "max_length": 20000
                          },
                          "TextBody": {
                            "type": "string",
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                            "zonbookDocumentation": "\n        <simpara>The text body.</simpara>\n      ",
                            "documentation": "\n        <p>The text body.</p>\n      ",
                            "shape_name": "EmailNotificationBodyType",
                            "min_length": 6,
                            "max_length": 20000
                          }
                        },
                        "zonbookDocumentation": "\n        <simpara>Email template used when a detected risk event is blocked.</simpara>\n      ",
                        "documentation": "\n        <p>Email template used when a detected risk event is blocked.</p>\n      ",
                        "shape_name": "NotifyEmailType"
                      },
                      "NoActionEmail": {
                        "type": "structure",
                        "members": {
                          "Subject": {
                            "type": "string",
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                            "zonbookDocumentation": "\n        <simpara>The subject.</simpara>\n      ",
                            "documentation": "\n        <p>The subject.</p>\n      ",
                            "required": true,
                            "shape_name": "EmailNotificationSubjectType",
                            "min_length": 1,
                            "max_length": 140
                          },
                          "HtmlBody": {
                            "type": "string",
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                            "zonbookDocumentation": "\n        <simpara>The HTML body.</simpara>\n      ",
                            "documentation": "\n        <p>The HTML body.</p>\n      ",
                            "shape_name": "EmailNotificationBodyType",
                            "min_length": 6,
                            "max_length": 20000
                          },
                          "TextBody": {
                            "type": "string",
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                            "zonbookDocumentation": "\n        <simpara>The text body.</simpara>\n      ",
                            "documentation": "\n        <p>The text body.</p>\n      ",
                            "shape_name": "EmailNotificationBodyType",
                            "min_length": 6,
                            "max_length": 20000
                          }
                        },
                        "zonbookDocumentation": "\n        <simpara>The email template used when a detected risk event is allowed.</simpara>\n      ",
                        "documentation": "\n        <p>The email template used when a detected risk event is allowed.</p>\n      ",
                        "shape_name": "NotifyEmailType"
                      },
                      "MfaEmail": {
                        "type": "structure",
                        "members": {
                          "Subject": {
                            "type": "string",
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                            "zonbookDocumentation": "\n        <simpara>The subject.</simpara>\n      ",
                            "documentation": "\n        <p>The subject.</p>\n      ",
                            "required": true,
                            "shape_name": "EmailNotificationSubjectType",
                            "min_length": 1,
                            "max_length": 140
                          },
                          "HtmlBody": {
                            "type": "string",
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                            "zonbookDocumentation": "\n        <simpara>The HTML body.</simpara>\n      ",
                            "documentation": "\n        <p>The HTML body.</p>\n      ",
                            "shape_name": "EmailNotificationBodyType",
                            "min_length": 6,
                            "max_length": 20000
                          },
                          "TextBody": {
                            "type": "string",
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                            "zonbookDocumentation": "\n        <simpara>The text body.</simpara>\n      ",
                            "documentation": "\n        <p>The text body.</p>\n      ",
                            "shape_name": "EmailNotificationBodyType",
                            "min_length": 6,
                            "max_length": 20000
                          }
                        },
                        "zonbookDocumentation": "\n        <simpara>The MFA email template used when MFA is challenged as part of a detected\n            risk.</simpara>\n      ",
                        "documentation": "\n        <p>The MFA email template used when MFA is challenged as part of a detected\n            risk.</p>\n      ",
                        "shape_name": "NotifyEmailType"
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>The notify configuration used to construct email notifications.</simpara>\n      ",
                    "documentation": "\n        <p>The notify configuration used to construct email notifications.</p>\n      ",
                    "shape_name": "NotifyConfigurationType"
                  },
                  "Actions": {
                    "type": "structure",
                    "members": {
                      "LowAction": {
                        "type": "structure",
                        "members": {
                          "Notify": {
                            "type": "boolean",
                            "zonbookDocumentation": "\n        <simpara>Flag specifying whether to send a notification.</simpara>\n      ",
                            "documentation": "\n        <p>Flag specifying whether to send a notification.</p>\n      ",
                            "required": true,
                            "shape_name": "AccountTakeoverActionNotifyType"
                          },
                          "EventAction": {
                            "type": "string",
                            "enum": [
                              "BLOCK",
                              "MFA_IF_CONFIGURED",
                              "MFA_REQUIRED",
                              "NO_ACTION"
                            ],
                            "zonbookDocumentation": "\n        <simpara>The event action.</simpara>\n        <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>BLOCK</code> Choosing this action will block the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>NO_ACTION</code> Allow the user sign-in.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
                            "documentation": "\n        <p>The event action.</p>\n        <ul>\n            <li>\n               <p>\n                  <code>BLOCK</code> Choosing this action will block the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>NO_ACTION</code> Allow the user sign-in.</p>\n            </li>\n         </ul>\n      ",
                            "required": true,
                            "shape_name": "AccountTakeoverEventActionType"
                          }
                        },
                        "zonbookDocumentation": "\n        <simpara>Action to take for a low risk.</simpara>\n      ",
                        "documentation": "\n        <p>Action to take for a low risk.</p>\n      ",
                        "shape_name": "AccountTakeoverActionType"
                      },
                      "MediumAction": {
                        "type": "structure",
                        "members": {
                          "Notify": {
                            "type": "boolean",
                            "zonbookDocumentation": "\n        <simpara>Flag specifying whether to send a notification.</simpara>\n      ",
                            "documentation": "\n        <p>Flag specifying whether to send a notification.</p>\n      ",
                            "required": true,
                            "shape_name": "AccountTakeoverActionNotifyType"
                          },
                          "EventAction": {
                            "type": "string",
                            "enum": [
                              "BLOCK",
                              "MFA_IF_CONFIGURED",
                              "MFA_REQUIRED",
                              "NO_ACTION"
                            ],
                            "zonbookDocumentation": "\n        <simpara>The event action.</simpara>\n        <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>BLOCK</code> Choosing this action will block the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>NO_ACTION</code> Allow the user sign-in.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
                            "documentation": "\n        <p>The event action.</p>\n        <ul>\n            <li>\n               <p>\n                  <code>BLOCK</code> Choosing this action will block the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>NO_ACTION</code> Allow the user sign-in.</p>\n            </li>\n         </ul>\n      ",
                            "required": true,
                            "shape_name": "AccountTakeoverEventActionType"
                          }
                        },
                        "zonbookDocumentation": "\n        <simpara>Action to take for a medium risk.</simpara>\n      ",
                        "documentation": "\n        <p>Action to take for a medium risk.</p>\n      ",
                        "shape_name": "AccountTakeoverActionType"
                      },
                      "HighAction": {
                        "type": "structure",
                        "members": {
                          "Notify": {
                            "type": "boolean",
                            "zonbookDocumentation": "\n        <simpara>Flag specifying whether to send a notification.</simpara>\n      ",
                            "documentation": "\n        <p>Flag specifying whether to send a notification.</p>\n      ",
                            "required": true,
                            "shape_name": "AccountTakeoverActionNotifyType"
                          },
                          "EventAction": {
                            "type": "string",
                            "enum": [
                              "BLOCK",
                              "MFA_IF_CONFIGURED",
                              "MFA_REQUIRED",
                              "NO_ACTION"
                            ],
                            "zonbookDocumentation": "\n        <simpara>The event action.</simpara>\n        <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>BLOCK</code> Choosing this action will block the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>NO_ACTION</code> Allow the user sign-in.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
                            "documentation": "\n        <p>The event action.</p>\n        <ul>\n            <li>\n               <p>\n                  <code>BLOCK</code> Choosing this action will block the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>NO_ACTION</code> Allow the user sign-in.</p>\n            </li>\n         </ul>\n      ",
                            "required": true,
                            "shape_name": "AccountTakeoverEventActionType"
                          }
                        },
                        "zonbookDocumentation": "\n        <simpara>Action to take for a high risk.</simpara>\n      ",
                        "documentation": "\n        <p>Action to take for a high risk.</p>\n      ",
                        "shape_name": "AccountTakeoverActionType"
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>Account takeover risk configuration actions</simpara>\n      ",
                    "documentation": "\n        <p>Account takeover risk configuration actions</p>\n      ",
                    "required": true,
                    "shape_name": "AccountTakeoverActionsType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The account takeover risk configuration object including the\n                <code>NotifyConfiguration</code> object and <code>Actions</code> to take in the case\n            of an account takeover.</simpara>\n      ",
                "documentation": "\n        <p>The account takeover risk configuration object including the\n                <code>NotifyConfiguration</code> object and <code>Actions</code> to take in the case\n            of an account takeover.</p>\n      ",
                "shape_name": "AccountTakeoverRiskConfigurationType"
              },
              "RiskExceptionConfiguration": {
                "type": "structure",
                "members": {
                  "BlockedIPRangeList": {
                    "type": "list",
                    "zonbookDocumentation": "\n        <simpara>Overrides the risk decision to always block the pre-authentication requests.\n            The IP range is in CIDR notation: a compact representation of an IP address and\n            its associated routing prefix.</simpara>\n      ",
                    "documentation": "\n        <p>Overrides the risk decision to always block the pre-authentication requests.\n            The IP range is in CIDR notation: a compact representation of an IP address and\n            its associated routing prefix.</p>\n      ",
                    "shape_name": "BlockedIPRangeListType",
                    "max_length": 20,
                    "members": {
                      "type": "string",
                      "shape_name": "StringType",
                      "documentation": null
                    }
                  },
                  "SkippedIPRangeList": {
                    "type": "list",
                    "zonbookDocumentation": "\n        <simpara>Risk detection is not performed on the IP addresses in the range list.\n            The IP range is in CIDR notation.</simpara>\n      ",
                    "documentation": "\n        <p>Risk detection is not performed on the IP addresses in the range list.\n            The IP range is in CIDR notation.</p>\n      ",
                    "shape_name": "SkippedIPRangeListType",
                    "max_length": 20,
                    "members": {
                      "type": "string",
                      "shape_name": "StringType",
                      "documentation": null
                    }
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The configuration to override the risk decision.</simpara>\n      ",
                "documentation": "\n        <p>The configuration to override the risk decision.</p>\n      ",
                "shape_name": "RiskExceptionConfigurationType"
              },
              "LastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The last modified date.</simpara>\n      ",
                "documentation": "\n        <p>The last modified date.</p>\n      ",
                "shape_name": "DateType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The risk configuration.</simpara>\n      ",
            "documentation": "\n        <p>The risk configuration.</p>\n      ",
            "required": true,
            "shape_name": "RiskConfigurationType"
          }
        },
        "shape_name": "SetRiskConfigurationResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "MessageType",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when user pool add-ons are not enabled.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when user pool add-ons are not enabled.</p>\n      ",
          "shape_name": "UserPoolAddOnNotEnabledException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message sent when a verification code fails to deliver successfully.</simpara>\n      ",
              "documentation": "\n        <p>The message sent when a verification code fails to deliver successfully.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a verification code fails to deliver\n            successfully.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a verification code fails to deliver\n            successfully.</p>\n      ",
          "shape_name": "CodeDeliveryFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when you have an unverified email address or the identity\n            policy is not set on an email address that Amazon Cognito can access.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when you have an unverified email address or the identity\n            policy is not set on an email address that Amazon Cognito can access.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito is not allowed to use your email\n            identity. HTTP status code: 400.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito is not allowed to use your email\n            identity. HTTP status code: 400.</p>\n      ",
          "shape_name": "InvalidEmailRoleAccessPolicyException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Configures actions on detected risks. To delete the risk configuration\n            for <code>UserPoolId</code> or <code>ClientId</code>, pass null values for all four\n            configuration types.</p>\n        <p>To enable Amazon Cognito advanced security features, update the user pool to\n            include the <code>UserPoolAddOns</code> key<code>AdvancedSecurityMode</code>.</p>\n        <p>See .</p>\n      "
    },
    "DescribeRiskConfiguration": {
      "name": "DescribeRiskConfiguration",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "ClientId": {
            "type": "string",
            "pattern": "[\\w+]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The app client ID.</simpara>\n      ",
            "documentation": "\n        <p>The app client ID.</p>\n      ",
            "shape_name": "ClientIdType",
            "min_length": 1,
            "max_length": 128
          }
        },
        "shape_name": "DescribeRiskConfigurationRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "RiskConfiguration": {
            "type": "structure",
            "members": {
              "UserPoolId": {
                "type": "string",
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
                "documentation": "\n        <p>The user pool ID.</p>\n      ",
                "shape_name": "UserPoolIdType",
                "min_length": 1,
                "max_length": 55
              },
              "ClientId": {
                "type": "string",
                "pattern": "[\\w+]+",
                "sensitive": true,
                "zonbookDocumentation": "\n        <simpara>The app client ID.</simpara>\n      ",
                "documentation": "\n        <p>The app client ID.</p>\n      ",
                "shape_name": "ClientIdType",
                "min_length": 1,
                "max_length": 128
              },
              "CompromisedCredentialsRiskConfiguration": {
                "type": "structure",
                "members": {
                  "EventFilter": {
                    "type": "list",
                    "zonbookDocumentation": "\n        <simpara>Perform the action for these events. The default is to perform all events if no\n            event filter is specified.</simpara>\n      ",
                    "documentation": "\n        <p>Perform the action for these events. The default is to perform all events if no\n            event filter is specified.</p>\n      ",
                    "shape_name": "EventFiltersType",
                    "members": {
                      "type": "string",
                      "enum": [
                        "SIGN_IN",
                        "PASSWORD_CHANGE",
                        "SIGN_UP"
                      ],
                      "shape_name": "EventFilterType",
                      "documentation": null
                    }
                  },
                  "Actions": {
                    "type": "structure",
                    "members": {
                      "EventAction": {
                        "type": "string",
                        "enum": [
                          "BLOCK",
                          "NO_ACTION"
                        ],
                        "zonbookDocumentation": "\n        <simpara>The event action.</simpara>\n      ",
                        "documentation": "\n        <p>The event action.</p>\n      ",
                        "required": true,
                        "shape_name": "CompromisedCredentialsEventActionType"
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>The compromised credentials risk configuration actions.</simpara>\n      ",
                    "documentation": "\n        <p>The compromised credentials risk configuration actions.</p>\n      ",
                    "required": true,
                    "shape_name": "CompromisedCredentialsActionsType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The compromised credentials risk configuration object including the\n                <code>EventFilter</code> and the <code>EventAction</code>\n         </simpara>\n      ",
                "documentation": "\n        <p>The compromised credentials risk configuration object including the\n                <code>EventFilter</code> and the <code>EventAction</code>\n         </p>\n      ",
                "shape_name": "CompromisedCredentialsRiskConfigurationType"
              },
              "AccountTakeoverRiskConfiguration": {
                "type": "structure",
                "members": {
                  "NotifyConfiguration": {
                    "type": "structure",
                    "members": {
                      "From": {
                        "type": "string",
                        "zonbookDocumentation": "\n        <simpara>The email address that is sending the email. It must be either individually\n            verified with Amazon SES, or from a domain that has been verified with Amazon\n            SES.</simpara>\n      ",
                        "documentation": "\n        <p>The email address that is sending the email. It must be either individually\n            verified with Amazon SES, or from a domain that has been verified with Amazon\n            SES.</p>\n      ",
                        "shape_name": "StringType"
                      },
                      "ReplyTo": {
                        "type": "string",
                        "zonbookDocumentation": "\n        <simpara>The destination to which the receiver of an email should reply to.</simpara>\n      ",
                        "documentation": "\n        <p>The destination to which the receiver of an email should reply to.</p>\n      ",
                        "shape_name": "StringType"
                      },
                      "SourceArn": {
                        "type": "string",
                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                        "zonbookDocumentation": "\n        <simpara>The Amazon Resource Name (ARN) of the identity that is associated with the sending\n            authorization policy. It permits Amazon Cognito to send for the email address specified\n            in the <code>From</code> parameter.</simpara>\n      ",
                        "documentation": "\n        <p>The Amazon Resource Name (ARN) of the identity that is associated with the sending\n            authorization policy. It permits Amazon Cognito to send for the email address specified\n            in the <code>From</code> parameter.</p>\n      ",
                        "required": true,
                        "shape_name": "ArnType",
                        "min_length": 20,
                        "max_length": 2048
                      },
                      "BlockEmail": {
                        "type": "structure",
                        "members": {
                          "Subject": {
                            "type": "string",
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                            "zonbookDocumentation": "\n        <simpara>The subject.</simpara>\n      ",
                            "documentation": "\n        <p>The subject.</p>\n      ",
                            "required": true,
                            "shape_name": "EmailNotificationSubjectType",
                            "min_length": 1,
                            "max_length": 140
                          },
                          "HtmlBody": {
                            "type": "string",
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                            "zonbookDocumentation": "\n        <simpara>The HTML body.</simpara>\n      ",
                            "documentation": "\n        <p>The HTML body.</p>\n      ",
                            "shape_name": "EmailNotificationBodyType",
                            "min_length": 6,
                            "max_length": 20000
                          },
                          "TextBody": {
                            "type": "string",
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                            "zonbookDocumentation": "\n        <simpara>The text body.</simpara>\n      ",
                            "documentation": "\n        <p>The text body.</p>\n      ",
                            "shape_name": "EmailNotificationBodyType",
                            "min_length": 6,
                            "max_length": 20000
                          }
                        },
                        "zonbookDocumentation": "\n        <simpara>Email template used when a detected risk event is blocked.</simpara>\n      ",
                        "documentation": "\n        <p>Email template used when a detected risk event is blocked.</p>\n      ",
                        "shape_name": "NotifyEmailType"
                      },
                      "NoActionEmail": {
                        "type": "structure",
                        "members": {
                          "Subject": {
                            "type": "string",
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                            "zonbookDocumentation": "\n        <simpara>The subject.</simpara>\n      ",
                            "documentation": "\n        <p>The subject.</p>\n      ",
                            "required": true,
                            "shape_name": "EmailNotificationSubjectType",
                            "min_length": 1,
                            "max_length": 140
                          },
                          "HtmlBody": {
                            "type": "string",
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                            "zonbookDocumentation": "\n        <simpara>The HTML body.</simpara>\n      ",
                            "documentation": "\n        <p>The HTML body.</p>\n      ",
                            "shape_name": "EmailNotificationBodyType",
                            "min_length": 6,
                            "max_length": 20000
                          },
                          "TextBody": {
                            "type": "string",
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                            "zonbookDocumentation": "\n        <simpara>The text body.</simpara>\n      ",
                            "documentation": "\n        <p>The text body.</p>\n      ",
                            "shape_name": "EmailNotificationBodyType",
                            "min_length": 6,
                            "max_length": 20000
                          }
                        },
                        "zonbookDocumentation": "\n        <simpara>The email template used when a detected risk event is allowed.</simpara>\n      ",
                        "documentation": "\n        <p>The email template used when a detected risk event is allowed.</p>\n      ",
                        "shape_name": "NotifyEmailType"
                      },
                      "MfaEmail": {
                        "type": "structure",
                        "members": {
                          "Subject": {
                            "type": "string",
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                            "zonbookDocumentation": "\n        <simpara>The subject.</simpara>\n      ",
                            "documentation": "\n        <p>The subject.</p>\n      ",
                            "required": true,
                            "shape_name": "EmailNotificationSubjectType",
                            "min_length": 1,
                            "max_length": 140
                          },
                          "HtmlBody": {
                            "type": "string",
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                            "zonbookDocumentation": "\n        <simpara>The HTML body.</simpara>\n      ",
                            "documentation": "\n        <p>The HTML body.</p>\n      ",
                            "shape_name": "EmailNotificationBodyType",
                            "min_length": 6,
                            "max_length": 20000
                          },
                          "TextBody": {
                            "type": "string",
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                            "zonbookDocumentation": "\n        <simpara>The text body.</simpara>\n      ",
                            "documentation": "\n        <p>The text body.</p>\n      ",
                            "shape_name": "EmailNotificationBodyType",
                            "min_length": 6,
                            "max_length": 20000
                          }
                        },
                        "zonbookDocumentation": "\n        <simpara>The MFA email template used when MFA is challenged as part of a detected\n            risk.</simpara>\n      ",
                        "documentation": "\n        <p>The MFA email template used when MFA is challenged as part of a detected\n            risk.</p>\n      ",
                        "shape_name": "NotifyEmailType"
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>The notify configuration used to construct email notifications.</simpara>\n      ",
                    "documentation": "\n        <p>The notify configuration used to construct email notifications.</p>\n      ",
                    "shape_name": "NotifyConfigurationType"
                  },
                  "Actions": {
                    "type": "structure",
                    "members": {
                      "LowAction": {
                        "type": "structure",
                        "members": {
                          "Notify": {
                            "type": "boolean",
                            "zonbookDocumentation": "\n        <simpara>Flag specifying whether to send a notification.</simpara>\n      ",
                            "documentation": "\n        <p>Flag specifying whether to send a notification.</p>\n      ",
                            "required": true,
                            "shape_name": "AccountTakeoverActionNotifyType"
                          },
                          "EventAction": {
                            "type": "string",
                            "enum": [
                              "BLOCK",
                              "MFA_IF_CONFIGURED",
                              "MFA_REQUIRED",
                              "NO_ACTION"
                            ],
                            "zonbookDocumentation": "\n        <simpara>The event action.</simpara>\n        <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>BLOCK</code> Choosing this action will block the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>NO_ACTION</code> Allow the user sign-in.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
                            "documentation": "\n        <p>The event action.</p>\n        <ul>\n            <li>\n               <p>\n                  <code>BLOCK</code> Choosing this action will block the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>NO_ACTION</code> Allow the user sign-in.</p>\n            </li>\n         </ul>\n      ",
                            "required": true,
                            "shape_name": "AccountTakeoverEventActionType"
                          }
                        },
                        "zonbookDocumentation": "\n        <simpara>Action to take for a low risk.</simpara>\n      ",
                        "documentation": "\n        <p>Action to take for a low risk.</p>\n      ",
                        "shape_name": "AccountTakeoverActionType"
                      },
                      "MediumAction": {
                        "type": "structure",
                        "members": {
                          "Notify": {
                            "type": "boolean",
                            "zonbookDocumentation": "\n        <simpara>Flag specifying whether to send a notification.</simpara>\n      ",
                            "documentation": "\n        <p>Flag specifying whether to send a notification.</p>\n      ",
                            "required": true,
                            "shape_name": "AccountTakeoverActionNotifyType"
                          },
                          "EventAction": {
                            "type": "string",
                            "enum": [
                              "BLOCK",
                              "MFA_IF_CONFIGURED",
                              "MFA_REQUIRED",
                              "NO_ACTION"
                            ],
                            "zonbookDocumentation": "\n        <simpara>The event action.</simpara>\n        <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>BLOCK</code> Choosing this action will block the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>NO_ACTION</code> Allow the user sign-in.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
                            "documentation": "\n        <p>The event action.</p>\n        <ul>\n            <li>\n               <p>\n                  <code>BLOCK</code> Choosing this action will block the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>NO_ACTION</code> Allow the user sign-in.</p>\n            </li>\n         </ul>\n      ",
                            "required": true,
                            "shape_name": "AccountTakeoverEventActionType"
                          }
                        },
                        "zonbookDocumentation": "\n        <simpara>Action to take for a medium risk.</simpara>\n      ",
                        "documentation": "\n        <p>Action to take for a medium risk.</p>\n      ",
                        "shape_name": "AccountTakeoverActionType"
                      },
                      "HighAction": {
                        "type": "structure",
                        "members": {
                          "Notify": {
                            "type": "boolean",
                            "zonbookDocumentation": "\n        <simpara>Flag specifying whether to send a notification.</simpara>\n      ",
                            "documentation": "\n        <p>Flag specifying whether to send a notification.</p>\n      ",
                            "required": true,
                            "shape_name": "AccountTakeoverActionNotifyType"
                          },
                          "EventAction": {
                            "type": "string",
                            "enum": [
                              "BLOCK",
                              "MFA_IF_CONFIGURED",
                              "MFA_REQUIRED",
                              "NO_ACTION"
                            ],
                            "zonbookDocumentation": "\n        <simpara>The event action.</simpara>\n        <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>BLOCK</code> Choosing this action will block the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>NO_ACTION</code> Allow the user sign-in.</simpara>\n            </listitem>\n        </itemizedlist>\n      ",
                            "documentation": "\n        <p>The event action.</p>\n        <ul>\n            <li>\n               <p>\n                  <code>BLOCK</code> Choosing this action will block the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p>\n            </li>\n            <li>\n               <p>\n                  <code>NO_ACTION</code> Allow the user sign-in.</p>\n            </li>\n         </ul>\n      ",
                            "required": true,
                            "shape_name": "AccountTakeoverEventActionType"
                          }
                        },
                        "zonbookDocumentation": "\n        <simpara>Action to take for a high risk.</simpara>\n      ",
                        "documentation": "\n        <p>Action to take for a high risk.</p>\n      ",
                        "shape_name": "AccountTakeoverActionType"
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>Account takeover risk configuration actions</simpara>\n      ",
                    "documentation": "\n        <p>Account takeover risk configuration actions</p>\n      ",
                    "required": true,
                    "shape_name": "AccountTakeoverActionsType"
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The account takeover risk configuration object including the\n                <code>NotifyConfiguration</code> object and <code>Actions</code> to take in the case\n            of an account takeover.</simpara>\n      ",
                "documentation": "\n        <p>The account takeover risk configuration object including the\n                <code>NotifyConfiguration</code> object and <code>Actions</code> to take in the case\n            of an account takeover.</p>\n      ",
                "shape_name": "AccountTakeoverRiskConfigurationType"
              },
              "RiskExceptionConfiguration": {
                "type": "structure",
                "members": {
                  "BlockedIPRangeList": {
                    "type": "list",
                    "zonbookDocumentation": "\n        <simpara>Overrides the risk decision to always block the pre-authentication requests.\n            The IP range is in CIDR notation: a compact representation of an IP address and\n            its associated routing prefix.</simpara>\n      ",
                    "documentation": "\n        <p>Overrides the risk decision to always block the pre-authentication requests.\n            The IP range is in CIDR notation: a compact representation of an IP address and\n            its associated routing prefix.</p>\n      ",
                    "shape_name": "BlockedIPRangeListType",
                    "max_length": 20,
                    "members": {
                      "type": "string",
                      "shape_name": "StringType",
                      "documentation": null
                    }
                  },
                  "SkippedIPRangeList": {
                    "type": "list",
                    "zonbookDocumentation": "\n        <simpara>Risk detection is not performed on the IP addresses in the range list.\n            The IP range is in CIDR notation.</simpara>\n      ",
                    "documentation": "\n        <p>Risk detection is not performed on the IP addresses in the range list.\n            The IP range is in CIDR notation.</p>\n      ",
                    "shape_name": "SkippedIPRangeListType",
                    "max_length": 20,
                    "members": {
                      "type": "string",
                      "shape_name": "StringType",
                      "documentation": null
                    }
                  }
                },
                "zonbookDocumentation": "\n        <simpara>The configuration to override the risk decision.</simpara>\n      ",
                "documentation": "\n        <p>The configuration to override the risk decision.</p>\n      ",
                "shape_name": "RiskExceptionConfigurationType"
              },
              "LastModifiedDate": {
                "type": "timestamp",
                "zonbookDocumentation": "\n        <simpara>The last modified date.</simpara>\n      ",
                "documentation": "\n        <p>The last modified date.</p>\n      ",
                "shape_name": "DateType"
              }
            },
            "zonbookDocumentation": "\n        <simpara>The risk configuration.</simpara>\n      ",
            "documentation": "\n        <p>The risk configuration.</p>\n      ",
            "required": true,
            "shape_name": "RiskConfigurationType"
          }
        },
        "shape_name": "DescribeRiskConfigurationResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "MessageType",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when user pool add-ons are not enabled.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when user pool add-ons are not enabled.</p>\n      ",
          "shape_name": "UserPoolAddOnNotEnabledException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Describes the risk configuration.</p>\n      "
    },
    "AdminListUserAuthEvents": {
      "name": "AdminListUserAuthEvents",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user pool username or an alias.</simpara>\n      ",
            "documentation": "\n        <p>The user pool username or an alias.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "MaxResults": {
            "type": "integer",
            "zonbookDocumentation": "\n        <simpara>The maximum number of authentication events to return.</simpara>\n      ",
            "documentation": "\n        <p>The maximum number of authentication events to return.</p>\n      ",
            "shape_name": "QueryLimitType",
            "min_length": 0,
            "max_length": 60
          },
          "NextToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>A pagination token.</simpara>\n      ",
            "documentation": "\n        <p>A pagination token.</p>\n      ",
            "shape_name": "PaginationKey",
            "min_length": 1
          }
        },
        "shape_name": "AdminListUserAuthEventsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "AuthEvents": {
            "type": "list",
            "zonbookDocumentation": "\n        <simpara>The response object. It includes the <code>EventID</code>, <code>EventType</code>,\n                <code>CreationDate</code>, <code>EventRisk</code>, and\n            <code>EventResponse</code>.</simpara>\n      ",
            "documentation": "\n        <p>The response object. It includes the <code>EventID</code>, <code>EventType</code>,\n                <code>CreationDate</code>, <code>EventRisk</code>, and\n            <code>EventResponse</code>.</p>\n      ",
            "shape_name": "AuthEventsType",
            "members": {
              "type": "structure",
              "members": {
                "EventId": {
                  "type": "string",
                  "zonbookDocumentation": "\n        <simpara>The event ID.</simpara>\n      ",
                  "documentation": "\n        <p>The event ID.</p>\n      ",
                  "shape_name": "StringType"
                },
                "EventType": {
                  "type": "string",
                  "enum": [
                    "SignIn",
                    "SignUp",
                    "ForgotPassword"
                  ],
                  "zonbookDocumentation": "\n        <simpara>The event type.</simpara>\n      ",
                  "documentation": "\n        <p>The event type.</p>\n      ",
                  "shape_name": "EventType"
                },
                "CreationDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n        <simpara>The creation date</simpara>\n      ",
                  "documentation": "\n        <p>The creation date</p>\n      ",
                  "shape_name": "DateType"
                },
                "EventResponse": {
                  "type": "string",
                  "enum": [
                    "Success",
                    "Failure"
                  ],
                  "zonbookDocumentation": "\n        <simpara>The event response.</simpara>\n      ",
                  "documentation": "\n        <p>The event response.</p>\n      ",
                  "shape_name": "EventResponseType"
                },
                "EventRisk": {
                  "type": "structure",
                  "members": {
                    "RiskDecision": {
                      "type": "string",
                      "enum": [
                        "NoRisk",
                        "AccountTakeover",
                        "Block"
                      ],
                      "zonbookDocumentation": "\n        <simpara>The risk decision.</simpara>\n      ",
                      "documentation": "\n        <p>The risk decision.</p>\n      ",
                      "shape_name": "RiskDecisionType"
                    },
                    "RiskLevel": {
                      "type": "string",
                      "enum": [
                        "Low",
                        "Medium",
                        "High"
                      ],
                      "zonbookDocumentation": "\n        <simpara>The risk level.</simpara>\n      ",
                      "documentation": "\n        <p>The risk level.</p>\n      ",
                      "shape_name": "RiskLevelType"
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>The event risk.</simpara>\n      ",
                  "documentation": "\n        <p>The event risk.</p>\n      ",
                  "shape_name": "EventRiskType"
                },
                "ChallengeResponses": {
                  "type": "list",
                  "zonbookDocumentation": "\n        <simpara>The challenge responses.</simpara>\n      ",
                  "documentation": "\n        <p>The challenge responses.</p>\n      ",
                  "shape_name": "ChallengeResponseListType",
                  "members": {
                    "type": "structure",
                    "members": {
                      "ChallengeName": {
                        "type": "string",
                        "enum": [
                          "Password",
                          "Mfa"
                        ],
                        "zonbookDocumentation": "\n        <simpara>The challenge name</simpara>\n      ",
                        "documentation": "\n        <p>The challenge name</p>\n      ",
                        "shape_name": "ChallengeName"
                      },
                      "ChallengeResponse": {
                        "type": "string",
                        "enum": [
                          "Success",
                          "Failure"
                        ],
                        "zonbookDocumentation": "\n        <simpara>The challenge response.</simpara>\n      ",
                        "documentation": "\n        <p>The challenge response.</p>\n      ",
                        "shape_name": "ChallengeResponse"
                      }
                    },
                    "zonbookDocumentation": "\n        <simpara>The challenge response type.</simpara>\n      ",
                    "documentation": "\n        <p>The challenge response type.</p>\n      ",
                    "shape_name": "ChallengeResponseType"
                  }
                },
                "EventContextData": {
                  "type": "structure",
                  "members": {
                    "IpAddress": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The user's IP address.</simpara>\n      ",
                      "documentation": "\n        <p>The user's IP address.</p>\n      ",
                      "shape_name": "StringType"
                    },
                    "DeviceName": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The user's device name.</simpara>\n      ",
                      "documentation": "\n        <p>The user's device name.</p>\n      ",
                      "shape_name": "StringType"
                    },
                    "Timezone": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The user's time zone.</simpara>\n      ",
                      "documentation": "\n        <p>The user's time zone.</p>\n      ",
                      "shape_name": "StringType"
                    },
                    "City": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The user's city.</simpara>\n      ",
                      "documentation": "\n        <p>The user's city.</p>\n      ",
                      "shape_name": "StringType"
                    },
                    "Country": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The user's country.</simpara>\n      ",
                      "documentation": "\n        <p>The user's country.</p>\n      ",
                      "shape_name": "StringType"
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>The user context data captured at the time of an event request. It provides\n            additional information about the client from which event the request is\n            received.</simpara>\n      ",
                  "documentation": "\n        <p>The user context data captured at the time of an event request. It provides\n            additional information about the client from which event the request is\n            received.</p>\n      ",
                  "shape_name": "EventContextDataType"
                },
                "EventFeedback": {
                  "type": "structure",
                  "members": {
                    "FeedbackValue": {
                      "type": "string",
                      "enum": [
                        "Valid",
                        "Invalid"
                      ],
                      "zonbookDocumentation": "\n        <simpara>The event feedback value.</simpara>\n      ",
                      "documentation": "\n        <p>The event feedback value.</p>\n      ",
                      "required": true,
                      "shape_name": "FeedbackValueType"
                    },
                    "Provider": {
                      "type": "string",
                      "zonbookDocumentation": "\n        <simpara>The provider.</simpara>\n      ",
                      "documentation": "\n        <p>The provider.</p>\n      ",
                      "required": true,
                      "shape_name": "StringType"
                    },
                    "FeedbackDate": {
                      "type": "timestamp",
                      "zonbookDocumentation": "\n        <simpara>The event feedback date.</simpara>\n      ",
                      "documentation": "\n        <p>The event feedback date.</p>\n      ",
                      "shape_name": "DateType"
                    }
                  },
                  "zonbookDocumentation": "\n        <simpara>A flag specifying the user feedback captured at the time of an event request is\n            good or bad. </simpara>\n      ",
                  "documentation": "\n        <p>A flag specifying the user feedback captured at the time of an event request is\n            good or bad. </p>\n      ",
                  "shape_name": "EventFeedbackType"
                }
              },
              "zonbookDocumentation": "\n        <simpara>The authentication event type.</simpara>\n      ",
              "documentation": "\n        <p>The authentication event type.</p>\n      ",
              "shape_name": "AuthEventType"
            }
          },
          "NextToken": {
            "type": "string",
            "pattern": "[\\S]+",
            "zonbookDocumentation": "\n        <simpara>A pagination token.</simpara>\n      ",
            "documentation": "\n        <p>A pagination token.</p>\n      ",
            "shape_name": "PaginationKey",
            "min_length": 1
          }
        },
        "shape_name": "AdminListUserAuthEventsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "MessageType",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when user pool add-ons are not enabled.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when user pool add-ons are not enabled.</p>\n      ",
          "shape_name": "UserPoolAddOnNotEnabledException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Lists a history of user activity and any risks detected as part of\n            Amazon Cognito advanced security.</p>\n      "
    },
    "AdminUpdateAuthEventFeedback": {
      "name": "AdminUpdateAuthEventFeedback",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user pool username.</simpara>\n      ",
            "documentation": "\n        <p>The user pool username.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "EventId": {
            "type": "string",
            "pattern": "[\\w+-]+",
            "zonbookDocumentation": "\n        <simpara>The authentication event ID.</simpara>\n      ",
            "documentation": "\n        <p>The authentication event ID.</p>\n      ",
            "required": true,
            "shape_name": "EventIdType",
            "min_length": 1,
            "max_length": 50
          },
          "FeedbackValue": {
            "type": "string",
            "enum": [
              "Valid",
              "Invalid"
            ],
            "zonbookDocumentation": "\n        <simpara>The authentication event feedback value.</simpara>\n      ",
            "documentation": "\n        <p>The authentication event feedback value.</p>\n      ",
            "required": true,
            "shape_name": "FeedbackValueType"
          }
        },
        "shape_name": "AdminUpdateAuthEventFeedbackRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "AdminUpdateAuthEventFeedbackResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "MessageType",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when user pool add-ons are not enabled.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when user pool add-ons are not enabled.</p>\n      ",
          "shape_name": "UserPoolAddOnNotEnabledException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Provides feedback for an authentication event as to whether it was from a valid user.\n            This feedback is used for improving the risk evaluation decision for the user pool as part\n            of Amazon Cognito advanced security.</p>\n      "
    },
    "UpdateAuthEventFeedback": {
      "name": "UpdateAuthEventFeedback",
      "input": {
        "type": "structure",
        "members": {
          "UserPoolId": {
            "type": "string",
            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
            "zonbookDocumentation": "\n        <simpara>The user pool ID.</simpara>\n      ",
            "documentation": "\n        <p>The user pool ID.</p>\n      ",
            "required": true,
            "shape_name": "UserPoolIdType",
            "min_length": 1,
            "max_length": 55
          },
          "Username": {
            "type": "string",
            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The user pool username.</simpara>\n      ",
            "documentation": "\n        <p>The user pool username.</p>\n      ",
            "required": true,
            "shape_name": "UsernameType",
            "min_length": 1,
            "max_length": 128
          },
          "EventId": {
            "type": "string",
            "pattern": "[\\w+-]+",
            "zonbookDocumentation": "\n        <simpara>The event ID.</simpara>\n      ",
            "documentation": "\n        <p>The event ID.</p>\n      ",
            "required": true,
            "shape_name": "EventIdType",
            "min_length": 1,
            "max_length": 50
          },
          "FeedbackToken": {
            "type": "string",
            "pattern": "[A-Za-z0-9-_=.]+",
            "sensitive": true,
            "zonbookDocumentation": "\n        <simpara>The feedback token.</simpara>\n      ",
            "documentation": "\n        <p>The feedback token.</p>\n      ",
            "required": true,
            "shape_name": "TokenModelType"
          },
          "FeedbackValue": {
            "type": "string",
            "enum": [
              "Valid",
              "Invalid"
            ],
            "zonbookDocumentation": "\n        <simpara>The authentication event feedback value.</simpara>\n      ",
            "documentation": "\n        <p>The authentication event feedback value.</p>\n      ",
            "required": true,
            "shape_name": "FeedbackValueType"
          }
        },
        "shape_name": "UpdateAuthEventFeedbackRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "UpdateAuthEventFeedbackResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service throws an invalid parameter\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service encounters an invalid\n            parameter.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a resource not found\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the Amazon Cognito service cannot find the requested\n            resource.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a too many requests\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when the user has made too many requests for a given\n            operation.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when the user has made too many requests for a given\n            operation.</p>\n      ",
          "shape_name": "TooManyRequestsException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when the Amazon Cognito service returns a not authorized\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not authorized.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not authorized.</p>\n      ",
          "shape_name": "NotAuthorizedException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when a user is not found.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when a user is not found.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when a user is not found.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when a user is not found.</p>\n      ",
          "shape_name": "UserNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "MessageType",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when user pool add-ons are not enabled.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when user pool add-ons are not enabled.</p>\n      ",
          "shape_name": "UserPoolAddOnNotEnabledException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "zonbookDocumentation": "\n        <simpara>The message returned when Amazon Cognito throws an internal error\n            exception.</simpara>\n      ",
              "documentation": "\n        <p>The message returned when Amazon Cognito throws an internal error\n            exception.</p>\n      ",
              "shape_name": "MessageType"
            }
          },
          "zonbookDocumentation": "\n        <simpara>This exception is thrown when Amazon Cognito encounters an internal\n            error.</simpara>\n      ",
          "documentation": "\n        <p>This exception is thrown when Amazon Cognito encounters an internal\n            error.</p>\n      ",
          "shape_name": "InternalErrorException"
        }
      ],
      "documentation": "\n        <p>Provides the feedback for an authentication event whether it was from a\n            valid user or not. This feedback is used for improving the risk evaluation\n            decision for the user pool as part of Amazon Cognito advanced security.</p>\n      "
    }
  }
}
