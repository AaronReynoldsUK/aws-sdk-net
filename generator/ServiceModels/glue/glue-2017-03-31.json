{
  "version": "1.0",
  "type": "json",
  "json_version": "1.1",
  "signature_version": "v4",
  "service_full_name": "AWS Glue",
  "service_id": "Glue",
  "uid": "glue-2017-03-31",
  "endpoint_prefix": "glue",
  "api_version": "2017-03-31",
  "target_prefix": "AWSGlue",
  "documentation": "\n         <fullname>AWS Glue</fullname>\n         <p>Defines the public endpoint for the AWS Glue service.</p>\n      ",
  "operations": {
    "CreateDatabase": {
      "name": "CreateDatabase",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog in which to create the database.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog in which to create the database.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseInput": {
            "type": "structure",
            "members": {
              "Name": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>Name of the database.  For Hive compatibility, this is folded to\n      lowercase when it is stored.</simpara>\n      ",
                "documentation": "\n         <p>Name of the database.  For Hive compatibility, this is folded to\n      lowercase when it is stored.</p>\n      ",
                "required": true,
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "Description": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                "zonbookDocumentation": "\n         <simpara>Description of the database</simpara>\n      ",
                "documentation": "\n         <p>Description of the database</p>\n      ",
                "shape_name": "DescriptionString",
                "min_length": 0,
                "max_length": 2048
              },
              "LocationUri": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                "zonbookDocumentation": "\n         <simpara>The location of the database (for example, an HDFS path).</simpara>\n      ",
                "documentation": "\n         <p>The location of the database (for example, an HDFS path).</p>\n      ",
                "shape_name": "URI",
                "min_length": 1,
                "max_length": 1024
              },
              "Parameters": {
                "type": "map",
                "zonbookDocumentation": "\n         <simpara>A list of key-value pairs that define parameters and properties\n      of the database.</simpara>\n      ",
                "documentation": "\n         <p>A list of key-value pairs that define parameters and properties\n      of the database.</p>\n      ",
                "shape_name": "ParametersMap",
                "keys": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "shape_name": "KeyString",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 255
                },
                "members": {
                  "type": "string",
                  "shape_name": "ParametersMapValue",
                  "documentation": null,
                  "max_length": 512000
                }
              }
            },
            "zonbookDocumentation": "\n         <simpara>A <code>DatabaseInput</code> object defining the metadata database\n      to create in the catalog.</simpara>\n      ",
            "documentation": "\n         <p>A <code>DatabaseInput</code> object defining the metadata database\n      to create in the catalog.</p>\n      ",
            "required": true,
            "shape_name": "DatabaseInput"
          }
        },
        "shape_name": "CreateDatabaseRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "CreateDatabaseResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource to be created or added already exists.</simpara>\n      ",
          "documentation": "\n         <p>A resource to be created or added already exists.</p>\n      ",
          "shape_name": "AlreadyExistsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource numerical limit was exceeded.</simpara>\n      ",
          "documentation": "\n         <p>A resource numerical limit was exceeded.</p>\n      ",
          "shape_name": "ResourceNumberLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Creates a new database in a Data Catalog.</p>\n      "
    },
    "UpdateDatabase": {
      "name": "UpdateDatabase",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog in which the metadata database\n      resides. If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog in which the metadata database\n      resides. If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the database to update in the catalog. For Hive\n      compatibility, this is folded to lowercase.</simpara>\n      ",
            "documentation": "\n         <p>The name of the database to update in the catalog. For Hive\n      compatibility, this is folded to lowercase.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseInput": {
            "type": "structure",
            "members": {
              "Name": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>Name of the database.  For Hive compatibility, this is folded to\n      lowercase when it is stored.</simpara>\n      ",
                "documentation": "\n         <p>Name of the database.  For Hive compatibility, this is folded to\n      lowercase when it is stored.</p>\n      ",
                "required": true,
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "Description": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                "zonbookDocumentation": "\n         <simpara>Description of the database</simpara>\n      ",
                "documentation": "\n         <p>Description of the database</p>\n      ",
                "shape_name": "DescriptionString",
                "min_length": 0,
                "max_length": 2048
              },
              "LocationUri": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                "zonbookDocumentation": "\n         <simpara>The location of the database (for example, an HDFS path).</simpara>\n      ",
                "documentation": "\n         <p>The location of the database (for example, an HDFS path).</p>\n      ",
                "shape_name": "URI",
                "min_length": 1,
                "max_length": 1024
              },
              "Parameters": {
                "type": "map",
                "zonbookDocumentation": "\n         <simpara>A list of key-value pairs that define parameters and properties\n      of the database.</simpara>\n      ",
                "documentation": "\n         <p>A list of key-value pairs that define parameters and properties\n      of the database.</p>\n      ",
                "shape_name": "ParametersMap",
                "keys": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "shape_name": "KeyString",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 255
                },
                "members": {
                  "type": "string",
                  "shape_name": "ParametersMapValue",
                  "documentation": null,
                  "max_length": 512000
                }
              }
            },
            "zonbookDocumentation": "\n         <simpara>A <code>DatabaseInput</code> object specifying the new definition\n      of the metadata database in the catalog.</simpara>\n      ",
            "documentation": "\n         <p>A <code>DatabaseInput</code> object specifying the new definition\n      of the metadata database in the catalog.</p>\n      ",
            "required": true,
            "shape_name": "DatabaseInput"
          }
        },
        "shape_name": "UpdateDatabaseRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "UpdateDatabaseResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Updates an existing database definition in a Data Catalog.</p>\n      "
    },
    "DeleteDatabase": {
      "name": "DeleteDatabase",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog in which the database\n      resides. If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog in which the database\n      resides. If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the Database to delete. For Hive compatibility, this\n      must be all lowercase.</simpara>\n      ",
            "documentation": "\n         <p>The name of the Database to delete. For Hive compatibility, this\n      must be all lowercase.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "DeleteDatabaseRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "DeleteDatabaseResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Removes a specified Database from a Data Catalog.</p>\n      "
    },
    "GetDatabase": {
      "name": "GetDatabase",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog in which the database\n      resides. If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog in which the database\n      resides. If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the database to retrieve. For Hive compatibility, this \n      should be all lowercase.</simpara>\n      ",
            "documentation": "\n         <p>The name of the database to retrieve. For Hive compatibility, this \n      should be all lowercase.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "GetDatabaseRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Database": {
            "type": "structure",
            "members": {
              "Name": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>Name of the database. For Hive compatibility, this is folded to\n      lowercase when it is stored.</simpara>\n      ",
                "documentation": "\n         <p>Name of the database. For Hive compatibility, this is folded to\n      lowercase when it is stored.</p>\n      ",
                "required": true,
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "Description": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                "zonbookDocumentation": "\n         <simpara>Description of the database.</simpara>\n      ",
                "documentation": "\n         <p>Description of the database.</p>\n      ",
                "shape_name": "DescriptionString",
                "min_length": 0,
                "max_length": 2048
              },
              "LocationUri": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                "zonbookDocumentation": "\n         <simpara>The location of the database (for example, an HDFS path).</simpara>\n      ",
                "documentation": "\n         <p>The location of the database (for example, an HDFS path).</p>\n      ",
                "shape_name": "URI",
                "min_length": 1,
                "max_length": 1024
              },
              "Parameters": {
                "type": "map",
                "zonbookDocumentation": "\n         <simpara>A list of key-value pairs that define parameters and properties\n      of the database.</simpara>\n      ",
                "documentation": "\n         <p>A list of key-value pairs that define parameters and properties\n      of the database.</p>\n      ",
                "shape_name": "ParametersMap",
                "keys": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "shape_name": "KeyString",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 255
                },
                "members": {
                  "type": "string",
                  "shape_name": "ParametersMapValue",
                  "documentation": null,
                  "max_length": 512000
                }
              },
              "CreateTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>The time at which the metadata database was created in the catalog.</simpara>\n      ",
                "documentation": "\n         <p>The time at which the metadata database was created in the catalog.</p>\n      ",
                "shape_name": "Timestamp"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The definition of the specified database in the catalog.</simpara>\n      ",
            "documentation": "\n         <p>The definition of the specified database in the catalog.</p>\n      ",
            "shape_name": "Database"
          }
        },
        "shape_name": "GetDatabaseResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Retrieves the definition of a specified database.</p>\n      "
    },
    "GetDatabases": {
      "name": "GetDatabases",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog from which to retrieve <code>Databases</code>.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog from which to retrieve <code>Databases</code>.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, if this is a continuation call.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, if this is a continuation call.</p>\n      ",
            "shape_name": "Token"
          },
          "MaxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The maximum number of databases to return in one response.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of databases to return in one response.</p>\n      ",
            "shape_name": "PageSize",
            "min_length": 1,
            "max_length": 1000
          }
        },
        "shape_name": "GetDatabasesRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "DatabaseList": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of <code>Database</code> objects from the specified catalog.</simpara>\n      ",
            "documentation": "\n         <p>A list of <code>Database</code> objects from the specified catalog.</p>\n      ",
            "required": true,
            "shape_name": "DatabaseList",
            "members": {
              "type": "structure",
              "members": {
                "Name": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>Name of the database. For Hive compatibility, this is folded to\n      lowercase when it is stored.</simpara>\n      ",
                  "documentation": "\n         <p>Name of the database. For Hive compatibility, this is folded to\n      lowercase when it is stored.</p>\n      ",
                  "required": true,
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "Description": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                  "zonbookDocumentation": "\n         <simpara>Description of the database.</simpara>\n      ",
                  "documentation": "\n         <p>Description of the database.</p>\n      ",
                  "shape_name": "DescriptionString",
                  "min_length": 0,
                  "max_length": 2048
                },
                "LocationUri": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The location of the database (for example, an HDFS path).</simpara>\n      ",
                  "documentation": "\n         <p>The location of the database (for example, an HDFS path).</p>\n      ",
                  "shape_name": "URI",
                  "min_length": 1,
                  "max_length": 1024
                },
                "Parameters": {
                  "type": "map",
                  "zonbookDocumentation": "\n         <simpara>A list of key-value pairs that define parameters and properties\n      of the database.</simpara>\n      ",
                  "documentation": "\n         <p>A list of key-value pairs that define parameters and properties\n      of the database.</p>\n      ",
                  "shape_name": "ParametersMap",
                  "keys": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "shape_name": "KeyString",
                    "documentation": null,
                    "min_length": 1,
                    "max_length": 255
                  },
                  "members": {
                    "type": "string",
                    "shape_name": "ParametersMapValue",
                    "documentation": null,
                    "max_length": 512000
                  }
                },
                "CreateTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The time at which the metadata database was created in the catalog.</simpara>\n      ",
                  "documentation": "\n         <p>The time at which the metadata database was created in the catalog.</p>\n      ",
                  "shape_name": "Timestamp"
                }
              },
              "zonbookDocumentation": "\n         <simpara>The <code>Database</code> object represents a logical grouping of\n      tables that may reside in a Hive metastore or an RDBMS.</simpara>\n      ",
              "documentation": "\n         <p>The <code>Database</code> object represents a logical grouping of\n      tables that may reside in a Hive metastore or an RDBMS.</p>\n      ",
              "shape_name": "Database"
            }
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token for paginating the returned list of tokens,\n      returned if the current segment of the list is not the last.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token for paginating the returned list of tokens,\n      returned if the current segment of the list is not the last.</p>\n      ",
            "shape_name": "Token"
          }
        },
        "shape_name": "GetDatabasesResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Retrieves all Databases defined in a given Data Catalog.</p>\n      "
    },
    "CreateTable": {
      "name": "CreateTable",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog in which to create the <code>Table</code>.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog in which to create the <code>Table</code>.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The catalog database in which to create the new table. For Hive\n      compatibility, this name is entirely lowercase.</simpara>\n      ",
            "documentation": "\n         <p>The catalog database in which to create the new table. For Hive\n      compatibility, this name is entirely lowercase.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "TableInput": {
            "type": "structure",
            "members": {
              "Name": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>Name of the table. For Hive compatibility, this is folded to\n      lowercase when it is stored.</simpara>\n      ",
                "documentation": "\n         <p>Name of the table. For Hive compatibility, this is folded to\n      lowercase when it is stored.</p>\n      ",
                "required": true,
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "Description": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                "zonbookDocumentation": "\n         <simpara>Description of the table.</simpara>\n      ",
                "documentation": "\n         <p>Description of the table.</p>\n      ",
                "shape_name": "DescriptionString",
                "min_length": 0,
                "max_length": 2048
              },
              "Owner": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>Owner of the table.</simpara>\n      ",
                "documentation": "\n         <p>Owner of the table.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "LastAccessTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>Last time the table was accessed.</simpara>\n      ",
                "documentation": "\n         <p>Last time the table was accessed.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "LastAnalyzedTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>Last time column statistics were computed for this table.</simpara>\n      ",
                "documentation": "\n         <p>Last time column statistics were computed for this table.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "Retention": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>Retention time for this table.</simpara>\n      ",
                "documentation": "\n         <p>Retention time for this table.</p>\n      ",
                "shape_name": "NonNegativeInteger",
                "min_length": 0
              },
              "StorageDescriptor": {
                "type": "structure",
                "members": {
                  "Columns": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list of the <code>Columns</code> in the table.</simpara>\n      ",
                    "documentation": "\n         <p>A list of the <code>Columns</code> in the table.</p>\n      ",
                    "shape_name": "ColumnList",
                    "members": {
                      "type": "structure",
                      "members": {
                        "Name": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The name of the <code>Column</code>.</simpara>\n      ",
                          "documentation": "\n         <p>The name of the <code>Column</code>.</p>\n      ",
                          "required": true,
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "Type": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The datatype of data in the <code>Column</code>.</simpara>\n      ",
                          "documentation": "\n         <p>The datatype of data in the <code>Column</code>.</p>\n      ",
                          "shape_name": "ColumnTypeString",
                          "min_length": 0,
                          "max_length": 131072
                        },
                        "Comment": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>Free-form text comment.</simpara>\n      ",
                          "documentation": "\n         <p>Free-form text comment.</p>\n      ",
                          "shape_name": "CommentString",
                          "min_length": 0,
                          "max_length": 255
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>A column in a <code>Table</code>.</simpara>\n      ",
                      "documentation": "\n         <p>A column in a <code>Table</code>.</p>\n      ",
                      "shape_name": "Column"
                    }
                  },
                  "Location": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</simpara>\n      ",
                    "documentation": "\n         <p>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</p>\n      ",
                    "shape_name": "LocationString",
                    "max_length": 2056
                  },
                  "InputFormat": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</simpara>\n      ",
                    "documentation": "\n         <p>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</p>\n      ",
                    "shape_name": "FormatString",
                    "max_length": 128
                  },
                  "OutputFormat": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</simpara>\n      ",
                    "documentation": "\n         <p>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</p>\n      ",
                    "shape_name": "FormatString",
                    "max_length": 128
                  },
                  "Compressed": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n         <simpara>True if the data in the table is compressed, or False if not.</simpara>\n      ",
                    "documentation": "\n         <p>True if the data in the table is compressed, or False if not.</p>\n      ",
                    "shape_name": "Boolean"
                  },
                  "NumberOfBuckets": {
                    "type": "integer",
                    "zonbookDocumentation": "\n         <simpara>Must be specified if the table contains any dimension columns.</simpara>\n      ",
                    "documentation": "\n         <p>Must be specified if the table contains any dimension columns.</p>\n      ",
                    "shape_name": "Integer"
                  },
                  "SerdeInfo": {
                    "type": "structure",
                    "members": {
                      "Name": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "zonbookDocumentation": "\n         <simpara>Name of the SerDe.</simpara>\n      ",
                        "documentation": "\n         <p>Name of the SerDe.</p>\n      ",
                        "shape_name": "NameString",
                        "min_length": 1,
                        "max_length": 255
                      },
                      "SerializationLibrary": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "zonbookDocumentation": "\n         <simpara>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</simpara>\n      ",
                        "documentation": "\n         <p>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</p>\n      ",
                        "shape_name": "NameString",
                        "min_length": 1,
                        "max_length": 255
                      },
                      "Parameters": {
                        "type": "map",
                        "zonbookDocumentation": "\n         <simpara>A list of initialization parameters for the SerDe, in key-value form.</simpara>\n      ",
                        "documentation": "\n         <p>A list of initialization parameters for the SerDe, in key-value form.</p>\n      ",
                        "shape_name": "ParametersMap",
                        "keys": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "shape_name": "KeyString",
                          "documentation": null,
                          "min_length": 1,
                          "max_length": 255
                        },
                        "members": {
                          "type": "string",
                          "shape_name": "ParametersMapValue",
                          "documentation": null,
                          "max_length": 512000
                        }
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>Serialization/deserialization (SerDe) information.</simpara>\n      ",
                    "documentation": "\n         <p>Serialization/deserialization (SerDe) information.</p>\n      ",
                    "shape_name": "SerDeInfo"
                  },
                  "BucketColumns": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</simpara>\n      ",
                    "documentation": "\n         <p>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</p>\n      ",
                    "shape_name": "NameStringList",
                    "members": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "shape_name": "NameString",
                      "documentation": null,
                      "min_length": 1,
                      "max_length": 255
                    }
                  },
                  "SortColumns": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list specifying the sort order of each bucket in the table.</simpara>\n      ",
                    "documentation": "\n         <p>A list specifying the sort order of each bucket in the table.</p>\n      ",
                    "shape_name": "OrderList",
                    "members": {
                      "type": "structure",
                      "members": {
                        "Column": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The name of the column.</simpara>\n      ",
                          "documentation": "\n         <p>The name of the column.</p>\n      ",
                          "required": true,
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "SortOrder": {
                          "type": "integer",
                          "zonbookDocumentation": "\n         <simpara>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</simpara>\n      ",
                          "documentation": "\n         <p>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</p>\n      ",
                          "required": true,
                          "shape_name": "IntegerFlag",
                          "min_length": 0,
                          "max_length": 1
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Specifies the sort order of a sorted column.</simpara>\n      ",
                      "documentation": "\n         <p>Specifies the sort order of a sorted column.</p>\n      ",
                      "shape_name": "Order"
                    }
                  },
                  "Parameters": {
                    "type": "map",
                    "zonbookDocumentation": "\n         <simpara>User-supplied properties in key-value form.</simpara>\n      ",
                    "documentation": "\n         <p>User-supplied properties in key-value form.</p>\n      ",
                    "shape_name": "ParametersMap",
                    "keys": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "shape_name": "KeyString",
                      "documentation": null,
                      "min_length": 1,
                      "max_length": 255
                    },
                    "members": {
                      "type": "string",
                      "shape_name": "ParametersMapValue",
                      "documentation": null,
                      "max_length": 512000
                    }
                  },
                  "SkewedInfo": {
                    "type": "structure",
                    "members": {
                      "SkewedColumnNames": {
                        "type": "list",
                        "zonbookDocumentation": "\n         <simpara>A list of names of columns that contain skewed values.</simpara>\n      ",
                        "documentation": "\n         <p>A list of names of columns that contain skewed values.</p>\n      ",
                        "shape_name": "NameStringList",
                        "members": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "shape_name": "NameString",
                          "documentation": null,
                          "min_length": 1,
                          "max_length": 255
                        }
                      },
                      "SkewedColumnValues": {
                        "type": "list",
                        "zonbookDocumentation": "\n         <simpara>A list of values that appear so frequently as to be considered\n      skewed.</simpara>\n      ",
                        "documentation": "\n         <p>A list of values that appear so frequently as to be considered\n      skewed.</p>\n      ",
                        "shape_name": "ColumnValueStringList",
                        "members": {
                          "type": "string",
                          "shape_name": "ColumnValuesString",
                          "documentation": null
                        }
                      },
                      "SkewedColumnValueLocationMaps": {
                        "type": "map",
                        "zonbookDocumentation": "\n         <simpara>A mapping of skewed values to the columns that contain them.</simpara>\n      ",
                        "documentation": "\n         <p>A mapping of skewed values to the columns that contain them.</p>\n      ",
                        "shape_name": "LocationMap",
                        "keys": {
                          "type": "string",
                          "shape_name": "ColumnValuesString",
                          "documentation": null
                        },
                        "members": {
                          "type": "string",
                          "shape_name": "ColumnValuesString",
                          "documentation": null
                        }
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>Information about values that appear very frequently in a column\n      (skewed values).</simpara>\n      ",
                    "documentation": "\n         <p>Information about values that appear very frequently in a column\n      (skewed values).</p>\n      ",
                    "shape_name": "SkewedInfo"
                  },
                  "StoredAsSubDirectories": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n         <simpara>True if the table data is stored in subdirectories, or False if not.</simpara>\n      ",
                    "documentation": "\n         <p>True if the table data is stored in subdirectories, or False if not.</p>\n      ",
                    "shape_name": "Boolean"
                  }
                },
                "zonbookDocumentation": "\n         <simpara>A storage descriptor containing information about the physical storage\n      of this table.</simpara>\n      ",
                "documentation": "\n         <p>A storage descriptor containing information about the physical storage\n      of this table.</p>\n      ",
                "shape_name": "StorageDescriptor"
              },
              "PartitionKeys": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A list of columns by which the table is partitioned. Only primitive\n      types are supported as partition keys.</simpara>\n      ",
                "documentation": "\n         <p>A list of columns by which the table is partitioned. Only primitive\n      types are supported as partition keys.</p>\n      ",
                "shape_name": "ColumnList",
                "members": {
                  "type": "structure",
                  "members": {
                    "Name": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The name of the <code>Column</code>.</simpara>\n      ",
                      "documentation": "\n         <p>The name of the <code>Column</code>.</p>\n      ",
                      "required": true,
                      "shape_name": "NameString",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "Type": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The datatype of data in the <code>Column</code>.</simpara>\n      ",
                      "documentation": "\n         <p>The datatype of data in the <code>Column</code>.</p>\n      ",
                      "shape_name": "ColumnTypeString",
                      "min_length": 0,
                      "max_length": 131072
                    },
                    "Comment": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>Free-form text comment.</simpara>\n      ",
                      "documentation": "\n         <p>Free-form text comment.</p>\n      ",
                      "shape_name": "CommentString",
                      "min_length": 0,
                      "max_length": 255
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>A column in a <code>Table</code>.</simpara>\n      ",
                  "documentation": "\n         <p>A column in a <code>Table</code>.</p>\n      ",
                  "shape_name": "Column"
                }
              },
              "ViewOriginalText": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>If the table is a view, the original text of the view; otherwise <code>null</code>.</simpara>\n      ",
                "documentation": "\n         <p>If the table is a view, the original text of the view; otherwise <code>null</code>.</p>\n      ",
                "shape_name": "ViewTextString",
                "max_length": 409600
              },
              "ViewExpandedText": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>If the table is a view, the expanded text of the view; otherwise <code>null</code>.</simpara>\n      ",
                "documentation": "\n         <p>If the table is a view, the expanded text of the view; otherwise <code>null</code>.</p>\n      ",
                "shape_name": "ViewTextString",
                "max_length": 409600
              },
              "TableType": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).</simpara>\n      ",
                "documentation": "\n         <p>The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).</p>\n      ",
                "shape_name": "TableTypeString",
                "max_length": 255
              },
              "Parameters": {
                "type": "map",
                "zonbookDocumentation": "\n         <simpara>Properties associated with this table, as a list of key-value pairs.</simpara>\n      ",
                "documentation": "\n         <p>Properties associated with this table, as a list of key-value pairs.</p>\n      ",
                "shape_name": "ParametersMap",
                "keys": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "shape_name": "KeyString",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 255
                },
                "members": {
                  "type": "string",
                  "shape_name": "ParametersMapValue",
                  "documentation": null,
                  "max_length": 512000
                }
              }
            },
            "zonbookDocumentation": "\n         <simpara>The <code>TableInput</code> object that defines the metadata table\n      to create in the catalog.</simpara>\n      ",
            "documentation": "\n         <p>The <code>TableInput</code> object that defines the metadata table\n      to create in the catalog.</p>\n      ",
            "required": true,
            "shape_name": "TableInput"
          }
        },
        "shape_name": "CreateTableRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "CreateTableResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource to be created or added already exists.</simpara>\n      ",
          "documentation": "\n         <p>A resource to be created or added already exists.</p>\n      ",
          "shape_name": "AlreadyExistsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource numerical limit was exceeded.</simpara>\n      ",
          "documentation": "\n         <p>A resource numerical limit was exceeded.</p>\n      ",
          "shape_name": "ResourceNumberLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Creates a new table definition in the Data Catalog.</p>\n      "
    },
    "DeleteTable": {
      "name": "DeleteTable",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog where the table resides.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog where the table resides.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the catalog database in which the table resides. For Hive\n      compatibility, this name is entirely lowercase.</simpara>\n      ",
            "documentation": "\n         <p>The name of the catalog database in which the table resides. For Hive\n      compatibility, this name is entirely lowercase.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the table to be deleted. For Hive\n      compatibility, this name is entirely lowercase.</simpara>\n      ",
            "documentation": "\n         <p>The name of the table to be deleted. For Hive\n      compatibility, this name is entirely lowercase.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "DeleteTableRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "DeleteTableResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Removes a table definition from the Data Catalog.</p>\n      "
    },
    "BatchDeleteTable": {
      "name": "BatchDeleteTable",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog where the table resides.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog where the table resides.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the catalog database where the tables to delete reside.\n      For Hive compatibility, this name is entirely lowercase.</simpara>\n      ",
            "documentation": "\n         <p>The name of the catalog database where the tables to delete reside.\n      For Hive compatibility, this name is entirely lowercase.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "TablesToDelete": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of the table to delete.</simpara>\n      ",
            "documentation": "\n         <p>A list of the table to delete.</p>\n      ",
            "required": true,
            "shape_name": "BatchDeleteTableNameList",
            "min_length": 0,
            "max_length": 100,
            "members": {
              "type": "string",
              "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
              "shape_name": "NameString",
              "documentation": null,
              "min_length": 1,
              "max_length": 255
            }
          }
        },
        "shape_name": "BatchDeleteTableRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Errors": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of errors encountered in attempting to delete the specified tables.</simpara>\n      ",
            "documentation": "\n         <p>A list of errors encountered in attempting to delete the specified tables.</p>\n      ",
            "shape_name": "TableErrors",
            "members": {
              "type": "structure",
              "members": {
                "TableName": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>Name of the table. For Hive compatibility, this must be entirely\n      lowercase.</simpara>\n      ",
                  "documentation": "\n         <p>Name of the table. For Hive compatibility, this must be entirely\n      lowercase.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "ErrorDetail": {
                  "type": "structure",
                  "members": {
                    "ErrorCode": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The code associated with this error.</simpara>\n      ",
                      "documentation": "\n         <p>The code associated with this error.</p>\n      ",
                      "shape_name": "NameString",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "ErrorMessage": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                      "zonbookDocumentation": "\n         <simpara>A message describing the error.</simpara>\n      ",
                      "documentation": "\n         <p>A message describing the error.</p>\n      ",
                      "shape_name": "DescriptionString",
                      "min_length": 0,
                      "max_length": 2048
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Detail about the error.</simpara>\n      ",
                  "documentation": "\n         <p>Detail about the error.</p>\n      ",
                  "shape_name": "ErrorDetail"
                }
              },
              "zonbookDocumentation": "\n         <simpara>An error record for table operations.</simpara>\n      ",
              "documentation": "\n         <p>An error record for table operations.</p>\n      ",
              "shape_name": "TableError"
            }
          }
        },
        "shape_name": "BatchDeleteTableResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Deletes multiple tables at once.</p>\n      "
    },
    "UpdateTable": {
      "name": "UpdateTable",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog where the table resides.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog where the table resides.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the catalog database in which the table resides. For Hive\n      compatibility, this name is entirely lowercase.</simpara>\n      ",
            "documentation": "\n         <p>The name of the catalog database in which the table resides. For Hive\n      compatibility, this name is entirely lowercase.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "TableInput": {
            "type": "structure",
            "members": {
              "Name": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>Name of the table. For Hive compatibility, this is folded to\n      lowercase when it is stored.</simpara>\n      ",
                "documentation": "\n         <p>Name of the table. For Hive compatibility, this is folded to\n      lowercase when it is stored.</p>\n      ",
                "required": true,
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "Description": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                "zonbookDocumentation": "\n         <simpara>Description of the table.</simpara>\n      ",
                "documentation": "\n         <p>Description of the table.</p>\n      ",
                "shape_name": "DescriptionString",
                "min_length": 0,
                "max_length": 2048
              },
              "Owner": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>Owner of the table.</simpara>\n      ",
                "documentation": "\n         <p>Owner of the table.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "LastAccessTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>Last time the table was accessed.</simpara>\n      ",
                "documentation": "\n         <p>Last time the table was accessed.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "LastAnalyzedTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>Last time column statistics were computed for this table.</simpara>\n      ",
                "documentation": "\n         <p>Last time column statistics were computed for this table.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "Retention": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>Retention time for this table.</simpara>\n      ",
                "documentation": "\n         <p>Retention time for this table.</p>\n      ",
                "shape_name": "NonNegativeInteger",
                "min_length": 0
              },
              "StorageDescriptor": {
                "type": "structure",
                "members": {
                  "Columns": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list of the <code>Columns</code> in the table.</simpara>\n      ",
                    "documentation": "\n         <p>A list of the <code>Columns</code> in the table.</p>\n      ",
                    "shape_name": "ColumnList",
                    "members": {
                      "type": "structure",
                      "members": {
                        "Name": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The name of the <code>Column</code>.</simpara>\n      ",
                          "documentation": "\n         <p>The name of the <code>Column</code>.</p>\n      ",
                          "required": true,
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "Type": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The datatype of data in the <code>Column</code>.</simpara>\n      ",
                          "documentation": "\n         <p>The datatype of data in the <code>Column</code>.</p>\n      ",
                          "shape_name": "ColumnTypeString",
                          "min_length": 0,
                          "max_length": 131072
                        },
                        "Comment": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>Free-form text comment.</simpara>\n      ",
                          "documentation": "\n         <p>Free-form text comment.</p>\n      ",
                          "shape_name": "CommentString",
                          "min_length": 0,
                          "max_length": 255
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>A column in a <code>Table</code>.</simpara>\n      ",
                      "documentation": "\n         <p>A column in a <code>Table</code>.</p>\n      ",
                      "shape_name": "Column"
                    }
                  },
                  "Location": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</simpara>\n      ",
                    "documentation": "\n         <p>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</p>\n      ",
                    "shape_name": "LocationString",
                    "max_length": 2056
                  },
                  "InputFormat": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</simpara>\n      ",
                    "documentation": "\n         <p>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</p>\n      ",
                    "shape_name": "FormatString",
                    "max_length": 128
                  },
                  "OutputFormat": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</simpara>\n      ",
                    "documentation": "\n         <p>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</p>\n      ",
                    "shape_name": "FormatString",
                    "max_length": 128
                  },
                  "Compressed": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n         <simpara>True if the data in the table is compressed, or False if not.</simpara>\n      ",
                    "documentation": "\n         <p>True if the data in the table is compressed, or False if not.</p>\n      ",
                    "shape_name": "Boolean"
                  },
                  "NumberOfBuckets": {
                    "type": "integer",
                    "zonbookDocumentation": "\n         <simpara>Must be specified if the table contains any dimension columns.</simpara>\n      ",
                    "documentation": "\n         <p>Must be specified if the table contains any dimension columns.</p>\n      ",
                    "shape_name": "Integer"
                  },
                  "SerdeInfo": {
                    "type": "structure",
                    "members": {
                      "Name": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "zonbookDocumentation": "\n         <simpara>Name of the SerDe.</simpara>\n      ",
                        "documentation": "\n         <p>Name of the SerDe.</p>\n      ",
                        "shape_name": "NameString",
                        "min_length": 1,
                        "max_length": 255
                      },
                      "SerializationLibrary": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "zonbookDocumentation": "\n         <simpara>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</simpara>\n      ",
                        "documentation": "\n         <p>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</p>\n      ",
                        "shape_name": "NameString",
                        "min_length": 1,
                        "max_length": 255
                      },
                      "Parameters": {
                        "type": "map",
                        "zonbookDocumentation": "\n         <simpara>A list of initialization parameters for the SerDe, in key-value form.</simpara>\n      ",
                        "documentation": "\n         <p>A list of initialization parameters for the SerDe, in key-value form.</p>\n      ",
                        "shape_name": "ParametersMap",
                        "keys": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "shape_name": "KeyString",
                          "documentation": null,
                          "min_length": 1,
                          "max_length": 255
                        },
                        "members": {
                          "type": "string",
                          "shape_name": "ParametersMapValue",
                          "documentation": null,
                          "max_length": 512000
                        }
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>Serialization/deserialization (SerDe) information.</simpara>\n      ",
                    "documentation": "\n         <p>Serialization/deserialization (SerDe) information.</p>\n      ",
                    "shape_name": "SerDeInfo"
                  },
                  "BucketColumns": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</simpara>\n      ",
                    "documentation": "\n         <p>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</p>\n      ",
                    "shape_name": "NameStringList",
                    "members": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "shape_name": "NameString",
                      "documentation": null,
                      "min_length": 1,
                      "max_length": 255
                    }
                  },
                  "SortColumns": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list specifying the sort order of each bucket in the table.</simpara>\n      ",
                    "documentation": "\n         <p>A list specifying the sort order of each bucket in the table.</p>\n      ",
                    "shape_name": "OrderList",
                    "members": {
                      "type": "structure",
                      "members": {
                        "Column": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The name of the column.</simpara>\n      ",
                          "documentation": "\n         <p>The name of the column.</p>\n      ",
                          "required": true,
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "SortOrder": {
                          "type": "integer",
                          "zonbookDocumentation": "\n         <simpara>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</simpara>\n      ",
                          "documentation": "\n         <p>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</p>\n      ",
                          "required": true,
                          "shape_name": "IntegerFlag",
                          "min_length": 0,
                          "max_length": 1
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Specifies the sort order of a sorted column.</simpara>\n      ",
                      "documentation": "\n         <p>Specifies the sort order of a sorted column.</p>\n      ",
                      "shape_name": "Order"
                    }
                  },
                  "Parameters": {
                    "type": "map",
                    "zonbookDocumentation": "\n         <simpara>User-supplied properties in key-value form.</simpara>\n      ",
                    "documentation": "\n         <p>User-supplied properties in key-value form.</p>\n      ",
                    "shape_name": "ParametersMap",
                    "keys": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "shape_name": "KeyString",
                      "documentation": null,
                      "min_length": 1,
                      "max_length": 255
                    },
                    "members": {
                      "type": "string",
                      "shape_name": "ParametersMapValue",
                      "documentation": null,
                      "max_length": 512000
                    }
                  },
                  "SkewedInfo": {
                    "type": "structure",
                    "members": {
                      "SkewedColumnNames": {
                        "type": "list",
                        "zonbookDocumentation": "\n         <simpara>A list of names of columns that contain skewed values.</simpara>\n      ",
                        "documentation": "\n         <p>A list of names of columns that contain skewed values.</p>\n      ",
                        "shape_name": "NameStringList",
                        "members": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "shape_name": "NameString",
                          "documentation": null,
                          "min_length": 1,
                          "max_length": 255
                        }
                      },
                      "SkewedColumnValues": {
                        "type": "list",
                        "zonbookDocumentation": "\n         <simpara>A list of values that appear so frequently as to be considered\n      skewed.</simpara>\n      ",
                        "documentation": "\n         <p>A list of values that appear so frequently as to be considered\n      skewed.</p>\n      ",
                        "shape_name": "ColumnValueStringList",
                        "members": {
                          "type": "string",
                          "shape_name": "ColumnValuesString",
                          "documentation": null
                        }
                      },
                      "SkewedColumnValueLocationMaps": {
                        "type": "map",
                        "zonbookDocumentation": "\n         <simpara>A mapping of skewed values to the columns that contain them.</simpara>\n      ",
                        "documentation": "\n         <p>A mapping of skewed values to the columns that contain them.</p>\n      ",
                        "shape_name": "LocationMap",
                        "keys": {
                          "type": "string",
                          "shape_name": "ColumnValuesString",
                          "documentation": null
                        },
                        "members": {
                          "type": "string",
                          "shape_name": "ColumnValuesString",
                          "documentation": null
                        }
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>Information about values that appear very frequently in a column\n      (skewed values).</simpara>\n      ",
                    "documentation": "\n         <p>Information about values that appear very frequently in a column\n      (skewed values).</p>\n      ",
                    "shape_name": "SkewedInfo"
                  },
                  "StoredAsSubDirectories": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n         <simpara>True if the table data is stored in subdirectories, or False if not.</simpara>\n      ",
                    "documentation": "\n         <p>True if the table data is stored in subdirectories, or False if not.</p>\n      ",
                    "shape_name": "Boolean"
                  }
                },
                "zonbookDocumentation": "\n         <simpara>A storage descriptor containing information about the physical storage\n      of this table.</simpara>\n      ",
                "documentation": "\n         <p>A storage descriptor containing information about the physical storage\n      of this table.</p>\n      ",
                "shape_name": "StorageDescriptor"
              },
              "PartitionKeys": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A list of columns by which the table is partitioned. Only primitive\n      types are supported as partition keys.</simpara>\n      ",
                "documentation": "\n         <p>A list of columns by which the table is partitioned. Only primitive\n      types are supported as partition keys.</p>\n      ",
                "shape_name": "ColumnList",
                "members": {
                  "type": "structure",
                  "members": {
                    "Name": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The name of the <code>Column</code>.</simpara>\n      ",
                      "documentation": "\n         <p>The name of the <code>Column</code>.</p>\n      ",
                      "required": true,
                      "shape_name": "NameString",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "Type": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The datatype of data in the <code>Column</code>.</simpara>\n      ",
                      "documentation": "\n         <p>The datatype of data in the <code>Column</code>.</p>\n      ",
                      "shape_name": "ColumnTypeString",
                      "min_length": 0,
                      "max_length": 131072
                    },
                    "Comment": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>Free-form text comment.</simpara>\n      ",
                      "documentation": "\n         <p>Free-form text comment.</p>\n      ",
                      "shape_name": "CommentString",
                      "min_length": 0,
                      "max_length": 255
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>A column in a <code>Table</code>.</simpara>\n      ",
                  "documentation": "\n         <p>A column in a <code>Table</code>.</p>\n      ",
                  "shape_name": "Column"
                }
              },
              "ViewOriginalText": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>If the table is a view, the original text of the view; otherwise <code>null</code>.</simpara>\n      ",
                "documentation": "\n         <p>If the table is a view, the original text of the view; otherwise <code>null</code>.</p>\n      ",
                "shape_name": "ViewTextString",
                "max_length": 409600
              },
              "ViewExpandedText": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>If the table is a view, the expanded text of the view; otherwise <code>null</code>.</simpara>\n      ",
                "documentation": "\n         <p>If the table is a view, the expanded text of the view; otherwise <code>null</code>.</p>\n      ",
                "shape_name": "ViewTextString",
                "max_length": 409600
              },
              "TableType": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).</simpara>\n      ",
                "documentation": "\n         <p>The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).</p>\n      ",
                "shape_name": "TableTypeString",
                "max_length": 255
              },
              "Parameters": {
                "type": "map",
                "zonbookDocumentation": "\n         <simpara>Properties associated with this table, as a list of key-value pairs.</simpara>\n      ",
                "documentation": "\n         <p>Properties associated with this table, as a list of key-value pairs.</p>\n      ",
                "shape_name": "ParametersMap",
                "keys": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "shape_name": "KeyString",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 255
                },
                "members": {
                  "type": "string",
                  "shape_name": "ParametersMapValue",
                  "documentation": null,
                  "max_length": 512000
                }
              }
            },
            "zonbookDocumentation": "\n         <simpara>An updated <code>TableInput</code> object to define the metadata table\n      in the catalog.</simpara>\n      ",
            "documentation": "\n         <p>An updated <code>TableInput</code> object to define the metadata table\n      in the catalog.</p>\n      ",
            "required": true,
            "shape_name": "TableInput"
          },
          "SkipArchive": {
            "type": "boolean",
            "zonbookDocumentation": "\n         <simpara>By default, <code>UpdateTable</code> always creates an\n      archived version of the table before updating it. If <code>skipArchive</code>\n      is set to true, however, <code>UpdateTable</code> does not create the archived\n      version.</simpara>\n      ",
            "documentation": "\n         <p>By default, <code>UpdateTable</code> always creates an\n      archived version of the table before updating it. If <code>skipArchive</code>\n      is set to true, however, <code>UpdateTable</code> does not create the archived\n      version.</p>\n      ",
            "shape_name": "BooleanNullable"
          }
        },
        "shape_name": "UpdateTableRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "UpdateTableResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>Two processes are trying to modify a resource simultaneously.</simpara>\n      ",
          "documentation": "\n         <p>Two processes are trying to modify a resource simultaneously.</p>\n      ",
          "shape_name": "ConcurrentModificationException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource numerical limit was exceeded.</simpara>\n      ",
          "documentation": "\n         <p>A resource numerical limit was exceeded.</p>\n      ",
          "shape_name": "ResourceNumberLimitExceededException"
        }
      ],
      "documentation": "\n         <p>Updates a metadata table in the Data Catalog.</p>\n      "
    },
    "GetTable": {
      "name": "GetTable",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog where the table resides.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog where the table resides.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the database in the catalog in which the table resides.\n      For Hive compatibility, this name is entirely lowercase.</simpara>\n      ",
            "documentation": "\n         <p>The name of the database in the catalog in which the table resides.\n      For Hive compatibility, this name is entirely lowercase.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the table for which to retrieve the definition. For Hive\n      compatibility, this name is entirely lowercase.</simpara>\n      ",
            "documentation": "\n         <p>The name of the table for which to retrieve the definition. For Hive\n      compatibility, this name is entirely lowercase.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "GetTableRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Table": {
            "type": "structure",
            "members": {
              "Name": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>Name of the table. For Hive compatibility, this must be entirely\n      lowercase.</simpara>\n      ",
                "documentation": "\n         <p>Name of the table. For Hive compatibility, this must be entirely\n      lowercase.</p>\n      ",
                "required": true,
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "DatabaseName": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>Name of the metadata database where the table metadata resides.\n      For Hive compatibility, this must be all lowercase.</simpara>\n      ",
                "documentation": "\n         <p>Name of the metadata database where the table metadata resides.\n      For Hive compatibility, this must be all lowercase.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "Description": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                "zonbookDocumentation": "\n         <simpara>Description of the table.</simpara>\n      ",
                "documentation": "\n         <p>Description of the table.</p>\n      ",
                "shape_name": "DescriptionString",
                "min_length": 0,
                "max_length": 2048
              },
              "Owner": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>Owner of the table.</simpara>\n      ",
                "documentation": "\n         <p>Owner of the table.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "CreateTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>Time when the table definition was created in the Data Catalog.</simpara>\n      ",
                "documentation": "\n         <p>Time when the table definition was created in the Data Catalog.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "UpdateTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>Last time the table was updated.</simpara>\n      ",
                "documentation": "\n         <p>Last time the table was updated.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "LastAccessTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>Last time the table was accessed. This is usually taken from HDFS,\n      and may not be reliable.</simpara>\n      ",
                "documentation": "\n         <p>Last time the table was accessed. This is usually taken from HDFS,\n      and may not be reliable.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "LastAnalyzedTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>Last time column statistics were computed for this table.</simpara>\n      ",
                "documentation": "\n         <p>Last time column statistics were computed for this table.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "Retention": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>Retention time for this table.</simpara>\n      ",
                "documentation": "\n         <p>Retention time for this table.</p>\n      ",
                "shape_name": "NonNegativeInteger",
                "min_length": 0
              },
              "StorageDescriptor": {
                "type": "structure",
                "members": {
                  "Columns": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list of the <code>Columns</code> in the table.</simpara>\n      ",
                    "documentation": "\n         <p>A list of the <code>Columns</code> in the table.</p>\n      ",
                    "shape_name": "ColumnList",
                    "members": {
                      "type": "structure",
                      "members": {
                        "Name": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The name of the <code>Column</code>.</simpara>\n      ",
                          "documentation": "\n         <p>The name of the <code>Column</code>.</p>\n      ",
                          "required": true,
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "Type": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The datatype of data in the <code>Column</code>.</simpara>\n      ",
                          "documentation": "\n         <p>The datatype of data in the <code>Column</code>.</p>\n      ",
                          "shape_name": "ColumnTypeString",
                          "min_length": 0,
                          "max_length": 131072
                        },
                        "Comment": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>Free-form text comment.</simpara>\n      ",
                          "documentation": "\n         <p>Free-form text comment.</p>\n      ",
                          "shape_name": "CommentString",
                          "min_length": 0,
                          "max_length": 255
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>A column in a <code>Table</code>.</simpara>\n      ",
                      "documentation": "\n         <p>A column in a <code>Table</code>.</p>\n      ",
                      "shape_name": "Column"
                    }
                  },
                  "Location": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</simpara>\n      ",
                    "documentation": "\n         <p>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</p>\n      ",
                    "shape_name": "LocationString",
                    "max_length": 2056
                  },
                  "InputFormat": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</simpara>\n      ",
                    "documentation": "\n         <p>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</p>\n      ",
                    "shape_name": "FormatString",
                    "max_length": 128
                  },
                  "OutputFormat": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</simpara>\n      ",
                    "documentation": "\n         <p>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</p>\n      ",
                    "shape_name": "FormatString",
                    "max_length": 128
                  },
                  "Compressed": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n         <simpara>True if the data in the table is compressed, or False if not.</simpara>\n      ",
                    "documentation": "\n         <p>True if the data in the table is compressed, or False if not.</p>\n      ",
                    "shape_name": "Boolean"
                  },
                  "NumberOfBuckets": {
                    "type": "integer",
                    "zonbookDocumentation": "\n         <simpara>Must be specified if the table contains any dimension columns.</simpara>\n      ",
                    "documentation": "\n         <p>Must be specified if the table contains any dimension columns.</p>\n      ",
                    "shape_name": "Integer"
                  },
                  "SerdeInfo": {
                    "type": "structure",
                    "members": {
                      "Name": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "zonbookDocumentation": "\n         <simpara>Name of the SerDe.</simpara>\n      ",
                        "documentation": "\n         <p>Name of the SerDe.</p>\n      ",
                        "shape_name": "NameString",
                        "min_length": 1,
                        "max_length": 255
                      },
                      "SerializationLibrary": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "zonbookDocumentation": "\n         <simpara>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</simpara>\n      ",
                        "documentation": "\n         <p>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</p>\n      ",
                        "shape_name": "NameString",
                        "min_length": 1,
                        "max_length": 255
                      },
                      "Parameters": {
                        "type": "map",
                        "zonbookDocumentation": "\n         <simpara>A list of initialization parameters for the SerDe, in key-value form.</simpara>\n      ",
                        "documentation": "\n         <p>A list of initialization parameters for the SerDe, in key-value form.</p>\n      ",
                        "shape_name": "ParametersMap",
                        "keys": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "shape_name": "KeyString",
                          "documentation": null,
                          "min_length": 1,
                          "max_length": 255
                        },
                        "members": {
                          "type": "string",
                          "shape_name": "ParametersMapValue",
                          "documentation": null,
                          "max_length": 512000
                        }
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>Serialization/deserialization (SerDe) information.</simpara>\n      ",
                    "documentation": "\n         <p>Serialization/deserialization (SerDe) information.</p>\n      ",
                    "shape_name": "SerDeInfo"
                  },
                  "BucketColumns": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</simpara>\n      ",
                    "documentation": "\n         <p>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</p>\n      ",
                    "shape_name": "NameStringList",
                    "members": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "shape_name": "NameString",
                      "documentation": null,
                      "min_length": 1,
                      "max_length": 255
                    }
                  },
                  "SortColumns": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list specifying the sort order of each bucket in the table.</simpara>\n      ",
                    "documentation": "\n         <p>A list specifying the sort order of each bucket in the table.</p>\n      ",
                    "shape_name": "OrderList",
                    "members": {
                      "type": "structure",
                      "members": {
                        "Column": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The name of the column.</simpara>\n      ",
                          "documentation": "\n         <p>The name of the column.</p>\n      ",
                          "required": true,
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "SortOrder": {
                          "type": "integer",
                          "zonbookDocumentation": "\n         <simpara>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</simpara>\n      ",
                          "documentation": "\n         <p>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</p>\n      ",
                          "required": true,
                          "shape_name": "IntegerFlag",
                          "min_length": 0,
                          "max_length": 1
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Specifies the sort order of a sorted column.</simpara>\n      ",
                      "documentation": "\n         <p>Specifies the sort order of a sorted column.</p>\n      ",
                      "shape_name": "Order"
                    }
                  },
                  "Parameters": {
                    "type": "map",
                    "zonbookDocumentation": "\n         <simpara>User-supplied properties in key-value form.</simpara>\n      ",
                    "documentation": "\n         <p>User-supplied properties in key-value form.</p>\n      ",
                    "shape_name": "ParametersMap",
                    "keys": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "shape_name": "KeyString",
                      "documentation": null,
                      "min_length": 1,
                      "max_length": 255
                    },
                    "members": {
                      "type": "string",
                      "shape_name": "ParametersMapValue",
                      "documentation": null,
                      "max_length": 512000
                    }
                  },
                  "SkewedInfo": {
                    "type": "structure",
                    "members": {
                      "SkewedColumnNames": {
                        "type": "list",
                        "zonbookDocumentation": "\n         <simpara>A list of names of columns that contain skewed values.</simpara>\n      ",
                        "documentation": "\n         <p>A list of names of columns that contain skewed values.</p>\n      ",
                        "shape_name": "NameStringList",
                        "members": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "shape_name": "NameString",
                          "documentation": null,
                          "min_length": 1,
                          "max_length": 255
                        }
                      },
                      "SkewedColumnValues": {
                        "type": "list",
                        "zonbookDocumentation": "\n         <simpara>A list of values that appear so frequently as to be considered\n      skewed.</simpara>\n      ",
                        "documentation": "\n         <p>A list of values that appear so frequently as to be considered\n      skewed.</p>\n      ",
                        "shape_name": "ColumnValueStringList",
                        "members": {
                          "type": "string",
                          "shape_name": "ColumnValuesString",
                          "documentation": null
                        }
                      },
                      "SkewedColumnValueLocationMaps": {
                        "type": "map",
                        "zonbookDocumentation": "\n         <simpara>A mapping of skewed values to the columns that contain them.</simpara>\n      ",
                        "documentation": "\n         <p>A mapping of skewed values to the columns that contain them.</p>\n      ",
                        "shape_name": "LocationMap",
                        "keys": {
                          "type": "string",
                          "shape_name": "ColumnValuesString",
                          "documentation": null
                        },
                        "members": {
                          "type": "string",
                          "shape_name": "ColumnValuesString",
                          "documentation": null
                        }
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>Information about values that appear very frequently in a column\n      (skewed values).</simpara>\n      ",
                    "documentation": "\n         <p>Information about values that appear very frequently in a column\n      (skewed values).</p>\n      ",
                    "shape_name": "SkewedInfo"
                  },
                  "StoredAsSubDirectories": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n         <simpara>True if the table data is stored in subdirectories, or False if not.</simpara>\n      ",
                    "documentation": "\n         <p>True if the table data is stored in subdirectories, or False if not.</p>\n      ",
                    "shape_name": "Boolean"
                  }
                },
                "zonbookDocumentation": "\n         <simpara>A storage descriptor containing information about the physical storage\n      of this table.</simpara>\n      ",
                "documentation": "\n         <p>A storage descriptor containing information about the physical storage\n      of this table.</p>\n      ",
                "shape_name": "StorageDescriptor"
              },
              "PartitionKeys": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A list of columns by which the table is partitioned. Only primitive\n      types are supported as partition keys.</simpara>\n      ",
                "documentation": "\n         <p>A list of columns by which the table is partitioned. Only primitive\n      types are supported as partition keys.</p>\n      ",
                "shape_name": "ColumnList",
                "members": {
                  "type": "structure",
                  "members": {
                    "Name": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The name of the <code>Column</code>.</simpara>\n      ",
                      "documentation": "\n         <p>The name of the <code>Column</code>.</p>\n      ",
                      "required": true,
                      "shape_name": "NameString",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "Type": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The datatype of data in the <code>Column</code>.</simpara>\n      ",
                      "documentation": "\n         <p>The datatype of data in the <code>Column</code>.</p>\n      ",
                      "shape_name": "ColumnTypeString",
                      "min_length": 0,
                      "max_length": 131072
                    },
                    "Comment": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>Free-form text comment.</simpara>\n      ",
                      "documentation": "\n         <p>Free-form text comment.</p>\n      ",
                      "shape_name": "CommentString",
                      "min_length": 0,
                      "max_length": 255
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>A column in a <code>Table</code>.</simpara>\n      ",
                  "documentation": "\n         <p>A column in a <code>Table</code>.</p>\n      ",
                  "shape_name": "Column"
                }
              },
              "ViewOriginalText": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>If the table is a view, the original text of the view; otherwise <code>null</code>.</simpara>\n      ",
                "documentation": "\n         <p>If the table is a view, the original text of the view; otherwise <code>null</code>.</p>\n      ",
                "shape_name": "ViewTextString",
                "max_length": 409600
              },
              "ViewExpandedText": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>If the table is a view, the expanded text of the view; otherwise <code>null</code>.</simpara>\n      ",
                "documentation": "\n         <p>If the table is a view, the expanded text of the view; otherwise <code>null</code>.</p>\n      ",
                "shape_name": "ViewTextString",
                "max_length": 409600
              },
              "TableType": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).</simpara>\n      ",
                "documentation": "\n         <p>The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).</p>\n      ",
                "shape_name": "TableTypeString",
                "max_length": 255
              },
              "Parameters": {
                "type": "map",
                "zonbookDocumentation": "\n         <simpara>Properties associated with this table, as a list of key-value pairs.</simpara>\n      ",
                "documentation": "\n         <p>Properties associated with this table, as a list of key-value pairs.</p>\n      ",
                "shape_name": "ParametersMap",
                "keys": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "shape_name": "KeyString",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 255
                },
                "members": {
                  "type": "string",
                  "shape_name": "ParametersMapValue",
                  "documentation": null,
                  "max_length": 512000
                }
              },
              "CreatedBy": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>Person or entity who created the table.</simpara>\n      ",
                "documentation": "\n         <p>Person or entity who created the table.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              }
            },
            "zonbookDocumentation": "\n         <simpara>The <code>Table</code> object that defines the specified table.</simpara>\n      ",
            "documentation": "\n         <p>The <code>Table</code> object that defines the specified table.</p>\n      ",
            "shape_name": "Table"
          }
        },
        "shape_name": "GetTableResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Retrieves the <code>Table</code> definition in a Data Catalog for\n      a specified table.</p>\n      "
    },
    "GetTables": {
      "name": "GetTables",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog where the tables reside.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog where the tables reside.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The database in the catalog whose tables to list. For Hive\n      compatibility, this name is entirely lowercase.</simpara>\n      ",
            "documentation": "\n         <p>The database in the catalog whose tables to list. For Hive\n      compatibility, this name is entirely lowercase.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "Expression": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>A regular expression pattern. If present, only those tables\n      whose names match the pattern are returned.</simpara>\n      ",
            "documentation": "\n         <p>A regular expression pattern. If present, only those tables\n      whose names match the pattern are returned.</p>\n      ",
            "shape_name": "FilterString",
            "min_length": 0,
            "max_length": 2048
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, included if this is a continuation call.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, included if this is a continuation call.</p>\n      ",
            "shape_name": "Token"
          },
          "MaxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The maximum number of tables to return in a single response.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of tables to return in a single response.</p>\n      ",
            "shape_name": "PageSize",
            "min_length": 1,
            "max_length": 1000
          }
        },
        "shape_name": "GetTablesRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "TableList": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of the requested <code>Table</code> objects.</simpara>\n      ",
            "documentation": "\n         <p>A list of the requested <code>Table</code> objects.</p>\n      ",
            "shape_name": "TableList",
            "members": {
              "type": "structure",
              "members": {
                "Name": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>Name of the table. For Hive compatibility, this must be entirely\n      lowercase.</simpara>\n      ",
                  "documentation": "\n         <p>Name of the table. For Hive compatibility, this must be entirely\n      lowercase.</p>\n      ",
                  "required": true,
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "DatabaseName": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>Name of the metadata database where the table metadata resides.\n      For Hive compatibility, this must be all lowercase.</simpara>\n      ",
                  "documentation": "\n         <p>Name of the metadata database where the table metadata resides.\n      For Hive compatibility, this must be all lowercase.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "Description": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                  "zonbookDocumentation": "\n         <simpara>Description of the table.</simpara>\n      ",
                  "documentation": "\n         <p>Description of the table.</p>\n      ",
                  "shape_name": "DescriptionString",
                  "min_length": 0,
                  "max_length": 2048
                },
                "Owner": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>Owner of the table.</simpara>\n      ",
                  "documentation": "\n         <p>Owner of the table.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "CreateTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>Time when the table definition was created in the Data Catalog.</simpara>\n      ",
                  "documentation": "\n         <p>Time when the table definition was created in the Data Catalog.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "UpdateTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>Last time the table was updated.</simpara>\n      ",
                  "documentation": "\n         <p>Last time the table was updated.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "LastAccessTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>Last time the table was accessed. This is usually taken from HDFS,\n      and may not be reliable.</simpara>\n      ",
                  "documentation": "\n         <p>Last time the table was accessed. This is usually taken from HDFS,\n      and may not be reliable.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "LastAnalyzedTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>Last time column statistics were computed for this table.</simpara>\n      ",
                  "documentation": "\n         <p>Last time column statistics were computed for this table.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "Retention": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>Retention time for this table.</simpara>\n      ",
                  "documentation": "\n         <p>Retention time for this table.</p>\n      ",
                  "shape_name": "NonNegativeInteger",
                  "min_length": 0
                },
                "StorageDescriptor": {
                  "type": "structure",
                  "members": {
                    "Columns": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>A list of the <code>Columns</code> in the table.</simpara>\n      ",
                      "documentation": "\n         <p>A list of the <code>Columns</code> in the table.</p>\n      ",
                      "shape_name": "ColumnList",
                      "members": {
                        "type": "structure",
                        "members": {
                          "Name": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "zonbookDocumentation": "\n         <simpara>The name of the <code>Column</code>.</simpara>\n      ",
                            "documentation": "\n         <p>The name of the <code>Column</code>.</p>\n      ",
                            "required": true,
                            "shape_name": "NameString",
                            "min_length": 1,
                            "max_length": 255
                          },
                          "Type": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "zonbookDocumentation": "\n         <simpara>The datatype of data in the <code>Column</code>.</simpara>\n      ",
                            "documentation": "\n         <p>The datatype of data in the <code>Column</code>.</p>\n      ",
                            "shape_name": "ColumnTypeString",
                            "min_length": 0,
                            "max_length": 131072
                          },
                          "Comment": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "zonbookDocumentation": "\n         <simpara>Free-form text comment.</simpara>\n      ",
                            "documentation": "\n         <p>Free-form text comment.</p>\n      ",
                            "shape_name": "CommentString",
                            "min_length": 0,
                            "max_length": 255
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>A column in a <code>Table</code>.</simpara>\n      ",
                        "documentation": "\n         <p>A column in a <code>Table</code>.</p>\n      ",
                        "shape_name": "Column"
                      }
                    },
                    "Location": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</simpara>\n      ",
                      "documentation": "\n         <p>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</p>\n      ",
                      "shape_name": "LocationString",
                      "max_length": 2056
                    },
                    "InputFormat": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</simpara>\n      ",
                      "documentation": "\n         <p>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</p>\n      ",
                      "shape_name": "FormatString",
                      "max_length": 128
                    },
                    "OutputFormat": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</simpara>\n      ",
                      "documentation": "\n         <p>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</p>\n      ",
                      "shape_name": "FormatString",
                      "max_length": 128
                    },
                    "Compressed": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n         <simpara>True if the data in the table is compressed, or False if not.</simpara>\n      ",
                      "documentation": "\n         <p>True if the data in the table is compressed, or False if not.</p>\n      ",
                      "shape_name": "Boolean"
                    },
                    "NumberOfBuckets": {
                      "type": "integer",
                      "zonbookDocumentation": "\n         <simpara>Must be specified if the table contains any dimension columns.</simpara>\n      ",
                      "documentation": "\n         <p>Must be specified if the table contains any dimension columns.</p>\n      ",
                      "shape_name": "Integer"
                    },
                    "SerdeInfo": {
                      "type": "structure",
                      "members": {
                        "Name": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>Name of the SerDe.</simpara>\n      ",
                          "documentation": "\n         <p>Name of the SerDe.</p>\n      ",
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "SerializationLibrary": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</simpara>\n      ",
                          "documentation": "\n         <p>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</p>\n      ",
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "Parameters": {
                          "type": "map",
                          "zonbookDocumentation": "\n         <simpara>A list of initialization parameters for the SerDe, in key-value form.</simpara>\n      ",
                          "documentation": "\n         <p>A list of initialization parameters for the SerDe, in key-value form.</p>\n      ",
                          "shape_name": "ParametersMap",
                          "keys": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "shape_name": "KeyString",
                            "documentation": null,
                            "min_length": 1,
                            "max_length": 255
                          },
                          "members": {
                            "type": "string",
                            "shape_name": "ParametersMapValue",
                            "documentation": null,
                            "max_length": 512000
                          }
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Serialization/deserialization (SerDe) information.</simpara>\n      ",
                      "documentation": "\n         <p>Serialization/deserialization (SerDe) information.</p>\n      ",
                      "shape_name": "SerDeInfo"
                    },
                    "BucketColumns": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</simpara>\n      ",
                      "documentation": "\n         <p>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</p>\n      ",
                      "shape_name": "NameStringList",
                      "members": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "shape_name": "NameString",
                        "documentation": null,
                        "min_length": 1,
                        "max_length": 255
                      }
                    },
                    "SortColumns": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>A list specifying the sort order of each bucket in the table.</simpara>\n      ",
                      "documentation": "\n         <p>A list specifying the sort order of each bucket in the table.</p>\n      ",
                      "shape_name": "OrderList",
                      "members": {
                        "type": "structure",
                        "members": {
                          "Column": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "zonbookDocumentation": "\n         <simpara>The name of the column.</simpara>\n      ",
                            "documentation": "\n         <p>The name of the column.</p>\n      ",
                            "required": true,
                            "shape_name": "NameString",
                            "min_length": 1,
                            "max_length": 255
                          },
                          "SortOrder": {
                            "type": "integer",
                            "zonbookDocumentation": "\n         <simpara>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</simpara>\n      ",
                            "documentation": "\n         <p>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</p>\n      ",
                            "required": true,
                            "shape_name": "IntegerFlag",
                            "min_length": 0,
                            "max_length": 1
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>Specifies the sort order of a sorted column.</simpara>\n      ",
                        "documentation": "\n         <p>Specifies the sort order of a sorted column.</p>\n      ",
                        "shape_name": "Order"
                      }
                    },
                    "Parameters": {
                      "type": "map",
                      "zonbookDocumentation": "\n         <simpara>User-supplied properties in key-value form.</simpara>\n      ",
                      "documentation": "\n         <p>User-supplied properties in key-value form.</p>\n      ",
                      "shape_name": "ParametersMap",
                      "keys": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "shape_name": "KeyString",
                        "documentation": null,
                        "min_length": 1,
                        "max_length": 255
                      },
                      "members": {
                        "type": "string",
                        "shape_name": "ParametersMapValue",
                        "documentation": null,
                        "max_length": 512000
                      }
                    },
                    "SkewedInfo": {
                      "type": "structure",
                      "members": {
                        "SkewedColumnNames": {
                          "type": "list",
                          "zonbookDocumentation": "\n         <simpara>A list of names of columns that contain skewed values.</simpara>\n      ",
                          "documentation": "\n         <p>A list of names of columns that contain skewed values.</p>\n      ",
                          "shape_name": "NameStringList",
                          "members": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "shape_name": "NameString",
                            "documentation": null,
                            "min_length": 1,
                            "max_length": 255
                          }
                        },
                        "SkewedColumnValues": {
                          "type": "list",
                          "zonbookDocumentation": "\n         <simpara>A list of values that appear so frequently as to be considered\n      skewed.</simpara>\n      ",
                          "documentation": "\n         <p>A list of values that appear so frequently as to be considered\n      skewed.</p>\n      ",
                          "shape_name": "ColumnValueStringList",
                          "members": {
                            "type": "string",
                            "shape_name": "ColumnValuesString",
                            "documentation": null
                          }
                        },
                        "SkewedColumnValueLocationMaps": {
                          "type": "map",
                          "zonbookDocumentation": "\n         <simpara>A mapping of skewed values to the columns that contain them.</simpara>\n      ",
                          "documentation": "\n         <p>A mapping of skewed values to the columns that contain them.</p>\n      ",
                          "shape_name": "LocationMap",
                          "keys": {
                            "type": "string",
                            "shape_name": "ColumnValuesString",
                            "documentation": null
                          },
                          "members": {
                            "type": "string",
                            "shape_name": "ColumnValuesString",
                            "documentation": null
                          }
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Information about values that appear very frequently in a column\n      (skewed values).</simpara>\n      ",
                      "documentation": "\n         <p>Information about values that appear very frequently in a column\n      (skewed values).</p>\n      ",
                      "shape_name": "SkewedInfo"
                    },
                    "StoredAsSubDirectories": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n         <simpara>True if the table data is stored in subdirectories, or False if not.</simpara>\n      ",
                      "documentation": "\n         <p>True if the table data is stored in subdirectories, or False if not.</p>\n      ",
                      "shape_name": "Boolean"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>A storage descriptor containing information about the physical storage\n      of this table.</simpara>\n      ",
                  "documentation": "\n         <p>A storage descriptor containing information about the physical storage\n      of this table.</p>\n      ",
                  "shape_name": "StorageDescriptor"
                },
                "PartitionKeys": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>A list of columns by which the table is partitioned. Only primitive\n      types are supported as partition keys.</simpara>\n      ",
                  "documentation": "\n         <p>A list of columns by which the table is partitioned. Only primitive\n      types are supported as partition keys.</p>\n      ",
                  "shape_name": "ColumnList",
                  "members": {
                    "type": "structure",
                    "members": {
                      "Name": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "zonbookDocumentation": "\n         <simpara>The name of the <code>Column</code>.</simpara>\n      ",
                        "documentation": "\n         <p>The name of the <code>Column</code>.</p>\n      ",
                        "required": true,
                        "shape_name": "NameString",
                        "min_length": 1,
                        "max_length": 255
                      },
                      "Type": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "zonbookDocumentation": "\n         <simpara>The datatype of data in the <code>Column</code>.</simpara>\n      ",
                        "documentation": "\n         <p>The datatype of data in the <code>Column</code>.</p>\n      ",
                        "shape_name": "ColumnTypeString",
                        "min_length": 0,
                        "max_length": 131072
                      },
                      "Comment": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "zonbookDocumentation": "\n         <simpara>Free-form text comment.</simpara>\n      ",
                        "documentation": "\n         <p>Free-form text comment.</p>\n      ",
                        "shape_name": "CommentString",
                        "min_length": 0,
                        "max_length": 255
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>A column in a <code>Table</code>.</simpara>\n      ",
                    "documentation": "\n         <p>A column in a <code>Table</code>.</p>\n      ",
                    "shape_name": "Column"
                  }
                },
                "ViewOriginalText": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>If the table is a view, the original text of the view; otherwise <code>null</code>.</simpara>\n      ",
                  "documentation": "\n         <p>If the table is a view, the original text of the view; otherwise <code>null</code>.</p>\n      ",
                  "shape_name": "ViewTextString",
                  "max_length": 409600
                },
                "ViewExpandedText": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>If the table is a view, the expanded text of the view; otherwise <code>null</code>.</simpara>\n      ",
                  "documentation": "\n         <p>If the table is a view, the expanded text of the view; otherwise <code>null</code>.</p>\n      ",
                  "shape_name": "ViewTextString",
                  "max_length": 409600
                },
                "TableType": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).</simpara>\n      ",
                  "documentation": "\n         <p>The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).</p>\n      ",
                  "shape_name": "TableTypeString",
                  "max_length": 255
                },
                "Parameters": {
                  "type": "map",
                  "zonbookDocumentation": "\n         <simpara>Properties associated with this table, as a list of key-value pairs.</simpara>\n      ",
                  "documentation": "\n         <p>Properties associated with this table, as a list of key-value pairs.</p>\n      ",
                  "shape_name": "ParametersMap",
                  "keys": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "shape_name": "KeyString",
                    "documentation": null,
                    "min_length": 1,
                    "max_length": 255
                  },
                  "members": {
                    "type": "string",
                    "shape_name": "ParametersMapValue",
                    "documentation": null,
                    "max_length": 512000
                  }
                },
                "CreatedBy": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>Person or entity who created the table.</simpara>\n      ",
                  "documentation": "\n         <p>Person or entity who created the table.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                }
              },
              "zonbookDocumentation": "\n         <simpara>Represents a collection of related data organized in columns and rows.</simpara>\n      ",
              "documentation": "\n         <p>Represents a collection of related data organized in columns and rows.</p>\n      ",
              "shape_name": "Table"
            }
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, present if the current list segment is\n      not the last.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, present if the current list segment is\n      not the last.</p>\n      ",
            "shape_name": "Token"
          }
        },
        "shape_name": "GetTablesResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        }
      ],
      "documentation": "\n         <p>Retrieves the definitions of some or all of the tables in a given\n      <code>Database</code>.</p>\n      "
    },
    "GetTableVersion": {
      "name": "GetTableVersion",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog where the tables reside.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog where the tables reside.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The database in the catalog in which the table resides. For Hive\n      compatibility, this name is entirely lowercase.</simpara>\n      ",
            "documentation": "\n         <p>The database in the catalog in which the table resides. For Hive\n      compatibility, this name is entirely lowercase.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "TableName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the table. For Hive compatibility,\n      this name is entirely lowercase.</simpara>\n      ",
            "documentation": "\n         <p>The name of the table. For Hive compatibility,\n      this name is entirely lowercase.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "VersionId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID value of the table version to be retrieved.</simpara>\n      ",
            "documentation": "\n         <p>The ID value of the table version to be retrieved.</p>\n      ",
            "shape_name": "VersionString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "GetTableVersionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "TableVersion": {
            "type": "structure",
            "members": {
              "Table": {
                "type": "structure",
                "members": {
                  "Name": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>Name of the table. For Hive compatibility, this must be entirely\n      lowercase.</simpara>\n      ",
                    "documentation": "\n         <p>Name of the table. For Hive compatibility, this must be entirely\n      lowercase.</p>\n      ",
                    "required": true,
                    "shape_name": "NameString",
                    "min_length": 1,
                    "max_length": 255
                  },
                  "DatabaseName": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>Name of the metadata database where the table metadata resides.\n      For Hive compatibility, this must be all lowercase.</simpara>\n      ",
                    "documentation": "\n         <p>Name of the metadata database where the table metadata resides.\n      For Hive compatibility, this must be all lowercase.</p>\n      ",
                    "shape_name": "NameString",
                    "min_length": 1,
                    "max_length": 255
                  },
                  "Description": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                    "zonbookDocumentation": "\n         <simpara>Description of the table.</simpara>\n      ",
                    "documentation": "\n         <p>Description of the table.</p>\n      ",
                    "shape_name": "DescriptionString",
                    "min_length": 0,
                    "max_length": 2048
                  },
                  "Owner": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>Owner of the table.</simpara>\n      ",
                    "documentation": "\n         <p>Owner of the table.</p>\n      ",
                    "shape_name": "NameString",
                    "min_length": 1,
                    "max_length": 255
                  },
                  "CreateTime": {
                    "type": "timestamp",
                    "zonbookDocumentation": "\n         <simpara>Time when the table definition was created in the Data Catalog.</simpara>\n      ",
                    "documentation": "\n         <p>Time when the table definition was created in the Data Catalog.</p>\n      ",
                    "shape_name": "Timestamp"
                  },
                  "UpdateTime": {
                    "type": "timestamp",
                    "zonbookDocumentation": "\n         <simpara>Last time the table was updated.</simpara>\n      ",
                    "documentation": "\n         <p>Last time the table was updated.</p>\n      ",
                    "shape_name": "Timestamp"
                  },
                  "LastAccessTime": {
                    "type": "timestamp",
                    "zonbookDocumentation": "\n         <simpara>Last time the table was accessed. This is usually taken from HDFS,\n      and may not be reliable.</simpara>\n      ",
                    "documentation": "\n         <p>Last time the table was accessed. This is usually taken from HDFS,\n      and may not be reliable.</p>\n      ",
                    "shape_name": "Timestamp"
                  },
                  "LastAnalyzedTime": {
                    "type": "timestamp",
                    "zonbookDocumentation": "\n         <simpara>Last time column statistics were computed for this table.</simpara>\n      ",
                    "documentation": "\n         <p>Last time column statistics were computed for this table.</p>\n      ",
                    "shape_name": "Timestamp"
                  },
                  "Retention": {
                    "type": "integer",
                    "zonbookDocumentation": "\n         <simpara>Retention time for this table.</simpara>\n      ",
                    "documentation": "\n         <p>Retention time for this table.</p>\n      ",
                    "shape_name": "NonNegativeInteger",
                    "min_length": 0
                  },
                  "StorageDescriptor": {
                    "type": "structure",
                    "members": {
                      "Columns": {
                        "type": "list",
                        "zonbookDocumentation": "\n         <simpara>A list of the <code>Columns</code> in the table.</simpara>\n      ",
                        "documentation": "\n         <p>A list of the <code>Columns</code> in the table.</p>\n      ",
                        "shape_name": "ColumnList",
                        "members": {
                          "type": "structure",
                          "members": {
                            "Name": {
                              "type": "string",
                              "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                              "zonbookDocumentation": "\n         <simpara>The name of the <code>Column</code>.</simpara>\n      ",
                              "documentation": "\n         <p>The name of the <code>Column</code>.</p>\n      ",
                              "required": true,
                              "shape_name": "NameString",
                              "min_length": 1,
                              "max_length": 255
                            },
                            "Type": {
                              "type": "string",
                              "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                              "zonbookDocumentation": "\n         <simpara>The datatype of data in the <code>Column</code>.</simpara>\n      ",
                              "documentation": "\n         <p>The datatype of data in the <code>Column</code>.</p>\n      ",
                              "shape_name": "ColumnTypeString",
                              "min_length": 0,
                              "max_length": 131072
                            },
                            "Comment": {
                              "type": "string",
                              "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                              "zonbookDocumentation": "\n         <simpara>Free-form text comment.</simpara>\n      ",
                              "documentation": "\n         <p>Free-form text comment.</p>\n      ",
                              "shape_name": "CommentString",
                              "min_length": 0,
                              "max_length": 255
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>A column in a <code>Table</code>.</simpara>\n      ",
                          "documentation": "\n         <p>A column in a <code>Table</code>.</p>\n      ",
                          "shape_name": "Column"
                        }
                      },
                      "Location": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                        "zonbookDocumentation": "\n         <simpara>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</simpara>\n      ",
                        "documentation": "\n         <p>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</p>\n      ",
                        "shape_name": "LocationString",
                        "max_length": 2056
                      },
                      "InputFormat": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "zonbookDocumentation": "\n         <simpara>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</simpara>\n      ",
                        "documentation": "\n         <p>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</p>\n      ",
                        "shape_name": "FormatString",
                        "max_length": 128
                      },
                      "OutputFormat": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "zonbookDocumentation": "\n         <simpara>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</simpara>\n      ",
                        "documentation": "\n         <p>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</p>\n      ",
                        "shape_name": "FormatString",
                        "max_length": 128
                      },
                      "Compressed": {
                        "type": "boolean",
                        "zonbookDocumentation": "\n         <simpara>True if the data in the table is compressed, or False if not.</simpara>\n      ",
                        "documentation": "\n         <p>True if the data in the table is compressed, or False if not.</p>\n      ",
                        "shape_name": "Boolean"
                      },
                      "NumberOfBuckets": {
                        "type": "integer",
                        "zonbookDocumentation": "\n         <simpara>Must be specified if the table contains any dimension columns.</simpara>\n      ",
                        "documentation": "\n         <p>Must be specified if the table contains any dimension columns.</p>\n      ",
                        "shape_name": "Integer"
                      },
                      "SerdeInfo": {
                        "type": "structure",
                        "members": {
                          "Name": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "zonbookDocumentation": "\n         <simpara>Name of the SerDe.</simpara>\n      ",
                            "documentation": "\n         <p>Name of the SerDe.</p>\n      ",
                            "shape_name": "NameString",
                            "min_length": 1,
                            "max_length": 255
                          },
                          "SerializationLibrary": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "zonbookDocumentation": "\n         <simpara>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</simpara>\n      ",
                            "documentation": "\n         <p>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</p>\n      ",
                            "shape_name": "NameString",
                            "min_length": 1,
                            "max_length": 255
                          },
                          "Parameters": {
                            "type": "map",
                            "zonbookDocumentation": "\n         <simpara>A list of initialization parameters for the SerDe, in key-value form.</simpara>\n      ",
                            "documentation": "\n         <p>A list of initialization parameters for the SerDe, in key-value form.</p>\n      ",
                            "shape_name": "ParametersMap",
                            "keys": {
                              "type": "string",
                              "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                              "shape_name": "KeyString",
                              "documentation": null,
                              "min_length": 1,
                              "max_length": 255
                            },
                            "members": {
                              "type": "string",
                              "shape_name": "ParametersMapValue",
                              "documentation": null,
                              "max_length": 512000
                            }
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>Serialization/deserialization (SerDe) information.</simpara>\n      ",
                        "documentation": "\n         <p>Serialization/deserialization (SerDe) information.</p>\n      ",
                        "shape_name": "SerDeInfo"
                      },
                      "BucketColumns": {
                        "type": "list",
                        "zonbookDocumentation": "\n         <simpara>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</simpara>\n      ",
                        "documentation": "\n         <p>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</p>\n      ",
                        "shape_name": "NameStringList",
                        "members": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "shape_name": "NameString",
                          "documentation": null,
                          "min_length": 1,
                          "max_length": 255
                        }
                      },
                      "SortColumns": {
                        "type": "list",
                        "zonbookDocumentation": "\n         <simpara>A list specifying the sort order of each bucket in the table.</simpara>\n      ",
                        "documentation": "\n         <p>A list specifying the sort order of each bucket in the table.</p>\n      ",
                        "shape_name": "OrderList",
                        "members": {
                          "type": "structure",
                          "members": {
                            "Column": {
                              "type": "string",
                              "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                              "zonbookDocumentation": "\n         <simpara>The name of the column.</simpara>\n      ",
                              "documentation": "\n         <p>The name of the column.</p>\n      ",
                              "required": true,
                              "shape_name": "NameString",
                              "min_length": 1,
                              "max_length": 255
                            },
                            "SortOrder": {
                              "type": "integer",
                              "zonbookDocumentation": "\n         <simpara>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</simpara>\n      ",
                              "documentation": "\n         <p>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</p>\n      ",
                              "required": true,
                              "shape_name": "IntegerFlag",
                              "min_length": 0,
                              "max_length": 1
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Specifies the sort order of a sorted column.</simpara>\n      ",
                          "documentation": "\n         <p>Specifies the sort order of a sorted column.</p>\n      ",
                          "shape_name": "Order"
                        }
                      },
                      "Parameters": {
                        "type": "map",
                        "zonbookDocumentation": "\n         <simpara>User-supplied properties in key-value form.</simpara>\n      ",
                        "documentation": "\n         <p>User-supplied properties in key-value form.</p>\n      ",
                        "shape_name": "ParametersMap",
                        "keys": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "shape_name": "KeyString",
                          "documentation": null,
                          "min_length": 1,
                          "max_length": 255
                        },
                        "members": {
                          "type": "string",
                          "shape_name": "ParametersMapValue",
                          "documentation": null,
                          "max_length": 512000
                        }
                      },
                      "SkewedInfo": {
                        "type": "structure",
                        "members": {
                          "SkewedColumnNames": {
                            "type": "list",
                            "zonbookDocumentation": "\n         <simpara>A list of names of columns that contain skewed values.</simpara>\n      ",
                            "documentation": "\n         <p>A list of names of columns that contain skewed values.</p>\n      ",
                            "shape_name": "NameStringList",
                            "members": {
                              "type": "string",
                              "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                              "shape_name": "NameString",
                              "documentation": null,
                              "min_length": 1,
                              "max_length": 255
                            }
                          },
                          "SkewedColumnValues": {
                            "type": "list",
                            "zonbookDocumentation": "\n         <simpara>A list of values that appear so frequently as to be considered\n      skewed.</simpara>\n      ",
                            "documentation": "\n         <p>A list of values that appear so frequently as to be considered\n      skewed.</p>\n      ",
                            "shape_name": "ColumnValueStringList",
                            "members": {
                              "type": "string",
                              "shape_name": "ColumnValuesString",
                              "documentation": null
                            }
                          },
                          "SkewedColumnValueLocationMaps": {
                            "type": "map",
                            "zonbookDocumentation": "\n         <simpara>A mapping of skewed values to the columns that contain them.</simpara>\n      ",
                            "documentation": "\n         <p>A mapping of skewed values to the columns that contain them.</p>\n      ",
                            "shape_name": "LocationMap",
                            "keys": {
                              "type": "string",
                              "shape_name": "ColumnValuesString",
                              "documentation": null
                            },
                            "members": {
                              "type": "string",
                              "shape_name": "ColumnValuesString",
                              "documentation": null
                            }
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>Information about values that appear very frequently in a column\n      (skewed values).</simpara>\n      ",
                        "documentation": "\n         <p>Information about values that appear very frequently in a column\n      (skewed values).</p>\n      ",
                        "shape_name": "SkewedInfo"
                      },
                      "StoredAsSubDirectories": {
                        "type": "boolean",
                        "zonbookDocumentation": "\n         <simpara>True if the table data is stored in subdirectories, or False if not.</simpara>\n      ",
                        "documentation": "\n         <p>True if the table data is stored in subdirectories, or False if not.</p>\n      ",
                        "shape_name": "Boolean"
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>A storage descriptor containing information about the physical storage\n      of this table.</simpara>\n      ",
                    "documentation": "\n         <p>A storage descriptor containing information about the physical storage\n      of this table.</p>\n      ",
                    "shape_name": "StorageDescriptor"
                  },
                  "PartitionKeys": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list of columns by which the table is partitioned. Only primitive\n      types are supported as partition keys.</simpara>\n      ",
                    "documentation": "\n         <p>A list of columns by which the table is partitioned. Only primitive\n      types are supported as partition keys.</p>\n      ",
                    "shape_name": "ColumnList",
                    "members": {
                      "type": "structure",
                      "members": {
                        "Name": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The name of the <code>Column</code>.</simpara>\n      ",
                          "documentation": "\n         <p>The name of the <code>Column</code>.</p>\n      ",
                          "required": true,
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "Type": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The datatype of data in the <code>Column</code>.</simpara>\n      ",
                          "documentation": "\n         <p>The datatype of data in the <code>Column</code>.</p>\n      ",
                          "shape_name": "ColumnTypeString",
                          "min_length": 0,
                          "max_length": 131072
                        },
                        "Comment": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>Free-form text comment.</simpara>\n      ",
                          "documentation": "\n         <p>Free-form text comment.</p>\n      ",
                          "shape_name": "CommentString",
                          "min_length": 0,
                          "max_length": 255
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>A column in a <code>Table</code>.</simpara>\n      ",
                      "documentation": "\n         <p>A column in a <code>Table</code>.</p>\n      ",
                      "shape_name": "Column"
                    }
                  },
                  "ViewOriginalText": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>If the table is a view, the original text of the view; otherwise <code>null</code>.</simpara>\n      ",
                    "documentation": "\n         <p>If the table is a view, the original text of the view; otherwise <code>null</code>.</p>\n      ",
                    "shape_name": "ViewTextString",
                    "max_length": 409600
                  },
                  "ViewExpandedText": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>If the table is a view, the expanded text of the view; otherwise <code>null</code>.</simpara>\n      ",
                    "documentation": "\n         <p>If the table is a view, the expanded text of the view; otherwise <code>null</code>.</p>\n      ",
                    "shape_name": "ViewTextString",
                    "max_length": 409600
                  },
                  "TableType": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).</simpara>\n      ",
                    "documentation": "\n         <p>The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).</p>\n      ",
                    "shape_name": "TableTypeString",
                    "max_length": 255
                  },
                  "Parameters": {
                    "type": "map",
                    "zonbookDocumentation": "\n         <simpara>Properties associated with this table, as a list of key-value pairs.</simpara>\n      ",
                    "documentation": "\n         <p>Properties associated with this table, as a list of key-value pairs.</p>\n      ",
                    "shape_name": "ParametersMap",
                    "keys": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "shape_name": "KeyString",
                      "documentation": null,
                      "min_length": 1,
                      "max_length": 255
                    },
                    "members": {
                      "type": "string",
                      "shape_name": "ParametersMapValue",
                      "documentation": null,
                      "max_length": 512000
                    }
                  },
                  "CreatedBy": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>Person or entity who created the table.</simpara>\n      ",
                    "documentation": "\n         <p>Person or entity who created the table.</p>\n      ",
                    "shape_name": "NameString",
                    "min_length": 1,
                    "max_length": 255
                  }
                },
                "zonbookDocumentation": "\n         <simpara>The table in question</simpara>\n      ",
                "documentation": "\n         <p>The table in question</p>\n      ",
                "shape_name": "Table"
              },
              "VersionId": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The ID value that identifies this table version.</simpara>\n      ",
                "documentation": "\n         <p>The ID value that identifies this table version.</p>\n      ",
                "shape_name": "VersionString",
                "min_length": 1,
                "max_length": 255
              }
            },
            "zonbookDocumentation": "\n         <simpara>The requested table version.</simpara>\n      ",
            "documentation": "\n         <p>The requested table version.</p>\n      ",
            "shape_name": "TableVersion"
          }
        },
        "shape_name": "GetTableVersionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Retrieves a specified version of a table.</p>\n      "
    },
    "GetTableVersions": {
      "name": "GetTableVersions",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog where the tables reside.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog where the tables reside.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The database in the catalog in which the table resides. For Hive\n      compatibility, this name is entirely lowercase.</simpara>\n      ",
            "documentation": "\n         <p>The database in the catalog in which the table resides. For Hive\n      compatibility, this name is entirely lowercase.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "TableName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the table. For Hive\n      compatibility, this name is entirely lowercase.</simpara>\n      ",
            "documentation": "\n         <p>The name of the table. For Hive\n      compatibility, this name is entirely lowercase.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, if this is not the first call.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, if this is not the first call.</p>\n      ",
            "shape_name": "Token"
          },
          "MaxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The maximum number of table versions to return in one response.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of table versions to return in one response.</p>\n      ",
            "shape_name": "PageSize",
            "min_length": 1,
            "max_length": 1000
          }
        },
        "shape_name": "GetTableVersionsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "TableVersions": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of strings identifying available versions of the\n      specified table.</simpara>\n      ",
            "documentation": "\n         <p>A list of strings identifying available versions of the\n      specified table.</p>\n      ",
            "shape_name": "GetTableVersionsList",
            "members": {
              "type": "structure",
              "members": {
                "Table": {
                  "type": "structure",
                  "members": {
                    "Name": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>Name of the table. For Hive compatibility, this must be entirely\n      lowercase.</simpara>\n      ",
                      "documentation": "\n         <p>Name of the table. For Hive compatibility, this must be entirely\n      lowercase.</p>\n      ",
                      "required": true,
                      "shape_name": "NameString",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "DatabaseName": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>Name of the metadata database where the table metadata resides.\n      For Hive compatibility, this must be all lowercase.</simpara>\n      ",
                      "documentation": "\n         <p>Name of the metadata database where the table metadata resides.\n      For Hive compatibility, this must be all lowercase.</p>\n      ",
                      "shape_name": "NameString",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "Description": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                      "zonbookDocumentation": "\n         <simpara>Description of the table.</simpara>\n      ",
                      "documentation": "\n         <p>Description of the table.</p>\n      ",
                      "shape_name": "DescriptionString",
                      "min_length": 0,
                      "max_length": 2048
                    },
                    "Owner": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>Owner of the table.</simpara>\n      ",
                      "documentation": "\n         <p>Owner of the table.</p>\n      ",
                      "shape_name": "NameString",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "CreateTime": {
                      "type": "timestamp",
                      "zonbookDocumentation": "\n         <simpara>Time when the table definition was created in the Data Catalog.</simpara>\n      ",
                      "documentation": "\n         <p>Time when the table definition was created in the Data Catalog.</p>\n      ",
                      "shape_name": "Timestamp"
                    },
                    "UpdateTime": {
                      "type": "timestamp",
                      "zonbookDocumentation": "\n         <simpara>Last time the table was updated.</simpara>\n      ",
                      "documentation": "\n         <p>Last time the table was updated.</p>\n      ",
                      "shape_name": "Timestamp"
                    },
                    "LastAccessTime": {
                      "type": "timestamp",
                      "zonbookDocumentation": "\n         <simpara>Last time the table was accessed. This is usually taken from HDFS,\n      and may not be reliable.</simpara>\n      ",
                      "documentation": "\n         <p>Last time the table was accessed. This is usually taken from HDFS,\n      and may not be reliable.</p>\n      ",
                      "shape_name": "Timestamp"
                    },
                    "LastAnalyzedTime": {
                      "type": "timestamp",
                      "zonbookDocumentation": "\n         <simpara>Last time column statistics were computed for this table.</simpara>\n      ",
                      "documentation": "\n         <p>Last time column statistics were computed for this table.</p>\n      ",
                      "shape_name": "Timestamp"
                    },
                    "Retention": {
                      "type": "integer",
                      "zonbookDocumentation": "\n         <simpara>Retention time for this table.</simpara>\n      ",
                      "documentation": "\n         <p>Retention time for this table.</p>\n      ",
                      "shape_name": "NonNegativeInteger",
                      "min_length": 0
                    },
                    "StorageDescriptor": {
                      "type": "structure",
                      "members": {
                        "Columns": {
                          "type": "list",
                          "zonbookDocumentation": "\n         <simpara>A list of the <code>Columns</code> in the table.</simpara>\n      ",
                          "documentation": "\n         <p>A list of the <code>Columns</code> in the table.</p>\n      ",
                          "shape_name": "ColumnList",
                          "members": {
                            "type": "structure",
                            "members": {
                              "Name": {
                                "type": "string",
                                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                                "zonbookDocumentation": "\n         <simpara>The name of the <code>Column</code>.</simpara>\n      ",
                                "documentation": "\n         <p>The name of the <code>Column</code>.</p>\n      ",
                                "required": true,
                                "shape_name": "NameString",
                                "min_length": 1,
                                "max_length": 255
                              },
                              "Type": {
                                "type": "string",
                                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                                "zonbookDocumentation": "\n         <simpara>The datatype of data in the <code>Column</code>.</simpara>\n      ",
                                "documentation": "\n         <p>The datatype of data in the <code>Column</code>.</p>\n      ",
                                "shape_name": "ColumnTypeString",
                                "min_length": 0,
                                "max_length": 131072
                              },
                              "Comment": {
                                "type": "string",
                                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                                "zonbookDocumentation": "\n         <simpara>Free-form text comment.</simpara>\n      ",
                                "documentation": "\n         <p>Free-form text comment.</p>\n      ",
                                "shape_name": "CommentString",
                                "min_length": 0,
                                "max_length": 255
                              }
                            },
                            "zonbookDocumentation": "\n         <simpara>A column in a <code>Table</code>.</simpara>\n      ",
                            "documentation": "\n         <p>A column in a <code>Table</code>.</p>\n      ",
                            "shape_name": "Column"
                          }
                        },
                        "Location": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</simpara>\n      ",
                          "documentation": "\n         <p>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</p>\n      ",
                          "shape_name": "LocationString",
                          "max_length": 2056
                        },
                        "InputFormat": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</simpara>\n      ",
                          "documentation": "\n         <p>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</p>\n      ",
                          "shape_name": "FormatString",
                          "max_length": 128
                        },
                        "OutputFormat": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</simpara>\n      ",
                          "documentation": "\n         <p>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</p>\n      ",
                          "shape_name": "FormatString",
                          "max_length": 128
                        },
                        "Compressed": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n         <simpara>True if the data in the table is compressed, or False if not.</simpara>\n      ",
                          "documentation": "\n         <p>True if the data in the table is compressed, or False if not.</p>\n      ",
                          "shape_name": "Boolean"
                        },
                        "NumberOfBuckets": {
                          "type": "integer",
                          "zonbookDocumentation": "\n         <simpara>Must be specified if the table contains any dimension columns.</simpara>\n      ",
                          "documentation": "\n         <p>Must be specified if the table contains any dimension columns.</p>\n      ",
                          "shape_name": "Integer"
                        },
                        "SerdeInfo": {
                          "type": "structure",
                          "members": {
                            "Name": {
                              "type": "string",
                              "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                              "zonbookDocumentation": "\n         <simpara>Name of the SerDe.</simpara>\n      ",
                              "documentation": "\n         <p>Name of the SerDe.</p>\n      ",
                              "shape_name": "NameString",
                              "min_length": 1,
                              "max_length": 255
                            },
                            "SerializationLibrary": {
                              "type": "string",
                              "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                              "zonbookDocumentation": "\n         <simpara>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</simpara>\n      ",
                              "documentation": "\n         <p>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</p>\n      ",
                              "shape_name": "NameString",
                              "min_length": 1,
                              "max_length": 255
                            },
                            "Parameters": {
                              "type": "map",
                              "zonbookDocumentation": "\n         <simpara>A list of initialization parameters for the SerDe, in key-value form.</simpara>\n      ",
                              "documentation": "\n         <p>A list of initialization parameters for the SerDe, in key-value form.</p>\n      ",
                              "shape_name": "ParametersMap",
                              "keys": {
                                "type": "string",
                                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                                "shape_name": "KeyString",
                                "documentation": null,
                                "min_length": 1,
                                "max_length": 255
                              },
                              "members": {
                                "type": "string",
                                "shape_name": "ParametersMapValue",
                                "documentation": null,
                                "max_length": 512000
                              }
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Serialization/deserialization (SerDe) information.</simpara>\n      ",
                          "documentation": "\n         <p>Serialization/deserialization (SerDe) information.</p>\n      ",
                          "shape_name": "SerDeInfo"
                        },
                        "BucketColumns": {
                          "type": "list",
                          "zonbookDocumentation": "\n         <simpara>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</simpara>\n      ",
                          "documentation": "\n         <p>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</p>\n      ",
                          "shape_name": "NameStringList",
                          "members": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "shape_name": "NameString",
                            "documentation": null,
                            "min_length": 1,
                            "max_length": 255
                          }
                        },
                        "SortColumns": {
                          "type": "list",
                          "zonbookDocumentation": "\n         <simpara>A list specifying the sort order of each bucket in the table.</simpara>\n      ",
                          "documentation": "\n         <p>A list specifying the sort order of each bucket in the table.</p>\n      ",
                          "shape_name": "OrderList",
                          "members": {
                            "type": "structure",
                            "members": {
                              "Column": {
                                "type": "string",
                                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                                "zonbookDocumentation": "\n         <simpara>The name of the column.</simpara>\n      ",
                                "documentation": "\n         <p>The name of the column.</p>\n      ",
                                "required": true,
                                "shape_name": "NameString",
                                "min_length": 1,
                                "max_length": 255
                              },
                              "SortOrder": {
                                "type": "integer",
                                "zonbookDocumentation": "\n         <simpara>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</simpara>\n      ",
                                "documentation": "\n         <p>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</p>\n      ",
                                "required": true,
                                "shape_name": "IntegerFlag",
                                "min_length": 0,
                                "max_length": 1
                              }
                            },
                            "zonbookDocumentation": "\n         <simpara>Specifies the sort order of a sorted column.</simpara>\n      ",
                            "documentation": "\n         <p>Specifies the sort order of a sorted column.</p>\n      ",
                            "shape_name": "Order"
                          }
                        },
                        "Parameters": {
                          "type": "map",
                          "zonbookDocumentation": "\n         <simpara>User-supplied properties in key-value form.</simpara>\n      ",
                          "documentation": "\n         <p>User-supplied properties in key-value form.</p>\n      ",
                          "shape_name": "ParametersMap",
                          "keys": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "shape_name": "KeyString",
                            "documentation": null,
                            "min_length": 1,
                            "max_length": 255
                          },
                          "members": {
                            "type": "string",
                            "shape_name": "ParametersMapValue",
                            "documentation": null,
                            "max_length": 512000
                          }
                        },
                        "SkewedInfo": {
                          "type": "structure",
                          "members": {
                            "SkewedColumnNames": {
                              "type": "list",
                              "zonbookDocumentation": "\n         <simpara>A list of names of columns that contain skewed values.</simpara>\n      ",
                              "documentation": "\n         <p>A list of names of columns that contain skewed values.</p>\n      ",
                              "shape_name": "NameStringList",
                              "members": {
                                "type": "string",
                                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                                "shape_name": "NameString",
                                "documentation": null,
                                "min_length": 1,
                                "max_length": 255
                              }
                            },
                            "SkewedColumnValues": {
                              "type": "list",
                              "zonbookDocumentation": "\n         <simpara>A list of values that appear so frequently as to be considered\n      skewed.</simpara>\n      ",
                              "documentation": "\n         <p>A list of values that appear so frequently as to be considered\n      skewed.</p>\n      ",
                              "shape_name": "ColumnValueStringList",
                              "members": {
                                "type": "string",
                                "shape_name": "ColumnValuesString",
                                "documentation": null
                              }
                            },
                            "SkewedColumnValueLocationMaps": {
                              "type": "map",
                              "zonbookDocumentation": "\n         <simpara>A mapping of skewed values to the columns that contain them.</simpara>\n      ",
                              "documentation": "\n         <p>A mapping of skewed values to the columns that contain them.</p>\n      ",
                              "shape_name": "LocationMap",
                              "keys": {
                                "type": "string",
                                "shape_name": "ColumnValuesString",
                                "documentation": null
                              },
                              "members": {
                                "type": "string",
                                "shape_name": "ColumnValuesString",
                                "documentation": null
                              }
                            }
                          },
                          "zonbookDocumentation": "\n         <simpara>Information about values that appear very frequently in a column\n      (skewed values).</simpara>\n      ",
                          "documentation": "\n         <p>Information about values that appear very frequently in a column\n      (skewed values).</p>\n      ",
                          "shape_name": "SkewedInfo"
                        },
                        "StoredAsSubDirectories": {
                          "type": "boolean",
                          "zonbookDocumentation": "\n         <simpara>True if the table data is stored in subdirectories, or False if not.</simpara>\n      ",
                          "documentation": "\n         <p>True if the table data is stored in subdirectories, or False if not.</p>\n      ",
                          "shape_name": "Boolean"
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>A storage descriptor containing information about the physical storage\n      of this table.</simpara>\n      ",
                      "documentation": "\n         <p>A storage descriptor containing information about the physical storage\n      of this table.</p>\n      ",
                      "shape_name": "StorageDescriptor"
                    },
                    "PartitionKeys": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>A list of columns by which the table is partitioned. Only primitive\n      types are supported as partition keys.</simpara>\n      ",
                      "documentation": "\n         <p>A list of columns by which the table is partitioned. Only primitive\n      types are supported as partition keys.</p>\n      ",
                      "shape_name": "ColumnList",
                      "members": {
                        "type": "structure",
                        "members": {
                          "Name": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "zonbookDocumentation": "\n         <simpara>The name of the <code>Column</code>.</simpara>\n      ",
                            "documentation": "\n         <p>The name of the <code>Column</code>.</p>\n      ",
                            "required": true,
                            "shape_name": "NameString",
                            "min_length": 1,
                            "max_length": 255
                          },
                          "Type": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "zonbookDocumentation": "\n         <simpara>The datatype of data in the <code>Column</code>.</simpara>\n      ",
                            "documentation": "\n         <p>The datatype of data in the <code>Column</code>.</p>\n      ",
                            "shape_name": "ColumnTypeString",
                            "min_length": 0,
                            "max_length": 131072
                          },
                          "Comment": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "zonbookDocumentation": "\n         <simpara>Free-form text comment.</simpara>\n      ",
                            "documentation": "\n         <p>Free-form text comment.</p>\n      ",
                            "shape_name": "CommentString",
                            "min_length": 0,
                            "max_length": 255
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>A column in a <code>Table</code>.</simpara>\n      ",
                        "documentation": "\n         <p>A column in a <code>Table</code>.</p>\n      ",
                        "shape_name": "Column"
                      }
                    },
                    "ViewOriginalText": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>If the table is a view, the original text of the view; otherwise <code>null</code>.</simpara>\n      ",
                      "documentation": "\n         <p>If the table is a view, the original text of the view; otherwise <code>null</code>.</p>\n      ",
                      "shape_name": "ViewTextString",
                      "max_length": 409600
                    },
                    "ViewExpandedText": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>If the table is a view, the expanded text of the view; otherwise <code>null</code>.</simpara>\n      ",
                      "documentation": "\n         <p>If the table is a view, the expanded text of the view; otherwise <code>null</code>.</p>\n      ",
                      "shape_name": "ViewTextString",
                      "max_length": 409600
                    },
                    "TableType": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).</simpara>\n      ",
                      "documentation": "\n         <p>The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).</p>\n      ",
                      "shape_name": "TableTypeString",
                      "max_length": 255
                    },
                    "Parameters": {
                      "type": "map",
                      "zonbookDocumentation": "\n         <simpara>Properties associated with this table, as a list of key-value pairs.</simpara>\n      ",
                      "documentation": "\n         <p>Properties associated with this table, as a list of key-value pairs.</p>\n      ",
                      "shape_name": "ParametersMap",
                      "keys": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "shape_name": "KeyString",
                        "documentation": null,
                        "min_length": 1,
                        "max_length": 255
                      },
                      "members": {
                        "type": "string",
                        "shape_name": "ParametersMapValue",
                        "documentation": null,
                        "max_length": 512000
                      }
                    },
                    "CreatedBy": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>Person or entity who created the table.</simpara>\n      ",
                      "documentation": "\n         <p>Person or entity who created the table.</p>\n      ",
                      "shape_name": "NameString",
                      "min_length": 1,
                      "max_length": 255
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The table in question</simpara>\n      ",
                  "documentation": "\n         <p>The table in question</p>\n      ",
                  "shape_name": "Table"
                },
                "VersionId": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The ID value that identifies this table version.</simpara>\n      ",
                  "documentation": "\n         <p>The ID value that identifies this table version.</p>\n      ",
                  "shape_name": "VersionString",
                  "min_length": 1,
                  "max_length": 255
                }
              },
              "zonbookDocumentation": "\n         <simpara>Specifies a version of a table.</simpara>\n      ",
              "documentation": "\n         <p>Specifies a version of a table.</p>\n      ",
              "shape_name": "TableVersion"
            }
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, if the list of available versions does\n      not include the last one.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, if the list of available versions does\n      not include the last one.</p>\n      ",
            "shape_name": "Token"
          }
        },
        "shape_name": "GetTableVersionsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Retrieves a list of strings that identify available versions of\n      a specified table.</p>\n      "
    },
    "DeleteTableVersion": {
      "name": "DeleteTableVersion",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog where the tables reside.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog where the tables reside.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The database in the catalog in which the table resides. For Hive\n      compatibility, this name is entirely lowercase.</simpara>\n      ",
            "documentation": "\n         <p>The database in the catalog in which the table resides. For Hive\n      compatibility, this name is entirely lowercase.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "TableName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the table. For Hive compatibility, \n      this name is entirely lowercase.</simpara>\n      ",
            "documentation": "\n         <p>The name of the table. For Hive compatibility, \n      this name is entirely lowercase.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "VersionId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the table version to be deleted.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the table version to be deleted.</p>\n      ",
            "required": true,
            "shape_name": "VersionString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "DeleteTableVersionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "DeleteTableVersionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Deletes a specified version of a table.</p>\n      "
    },
    "BatchDeleteTableVersion": {
      "name": "BatchDeleteTableVersion",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog where the tables reside.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog where the tables reside.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The database in the catalog in which the table resides. For Hive\n      compatibility, this name is entirely lowercase.</simpara>\n      ",
            "documentation": "\n         <p>The database in the catalog in which the table resides. For Hive\n      compatibility, this name is entirely lowercase.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "TableName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the table. For Hive compatibility, \n      this name is entirely lowercase.</simpara>\n      ",
            "documentation": "\n         <p>The name of the table. For Hive compatibility, \n      this name is entirely lowercase.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "VersionIds": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of the IDs of versions to be deleted.</simpara>\n      ",
            "documentation": "\n         <p>A list of the IDs of versions to be deleted.</p>\n      ",
            "required": true,
            "shape_name": "BatchDeleteTableVersionList",
            "min_length": 0,
            "max_length": 100,
            "members": {
              "type": "string",
              "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
              "shape_name": "VersionString",
              "documentation": null,
              "min_length": 1,
              "max_length": 255
            }
          }
        },
        "shape_name": "BatchDeleteTableVersionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Errors": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of errors encountered while trying to delete\n      the specified table versions.</simpara>\n      ",
            "documentation": "\n         <p>A list of errors encountered while trying to delete\n      the specified table versions.</p>\n      ",
            "shape_name": "TableVersionErrors",
            "members": {
              "type": "structure",
              "members": {
                "TableName": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The name of the table in question.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the table in question.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "VersionId": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The ID value of the version in question.</simpara>\n      ",
                  "documentation": "\n         <p>The ID value of the version in question.</p>\n      ",
                  "shape_name": "VersionString",
                  "min_length": 1,
                  "max_length": 255
                },
                "ErrorDetail": {
                  "type": "structure",
                  "members": {
                    "ErrorCode": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The code associated with this error.</simpara>\n      ",
                      "documentation": "\n         <p>The code associated with this error.</p>\n      ",
                      "shape_name": "NameString",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "ErrorMessage": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                      "zonbookDocumentation": "\n         <simpara>A message describing the error.</simpara>\n      ",
                      "documentation": "\n         <p>A message describing the error.</p>\n      ",
                      "shape_name": "DescriptionString",
                      "min_length": 0,
                      "max_length": 2048
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Detail about the error.</simpara>\n      ",
                  "documentation": "\n         <p>Detail about the error.</p>\n      ",
                  "shape_name": "ErrorDetail"
                }
              },
              "zonbookDocumentation": "\n         <simpara>An error record for table-version operations.</simpara>\n      ",
              "documentation": "\n         <p>An error record for table-version operations.</p>\n      ",
              "shape_name": "TableVersionError"
            }
          }
        },
        "shape_name": "BatchDeleteTableVersionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Deletes a specified batch of versions of a table.</p>\n      "
    },
    "BatchCreatePartition": {
      "name": "BatchCreatePartition",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the catalog in which the partion is to be created.\n      Currently, this should be the AWS account ID.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the catalog in which the partion is to be created.\n      Currently, this should be the AWS account ID.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the metadata database in which the partition is\n      to be created.</simpara>\n      ",
            "documentation": "\n         <p>The name of the metadata database in which the partition is\n      to be created.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "TableName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the metadata table in which the partition is to be created.</simpara>\n      ",
            "documentation": "\n         <p>The name of the metadata table in which the partition is to be created.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "PartitionInputList": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of <code>PartitionInput</code> structures that define\n      the partitions to be created.</simpara>\n      ",
            "documentation": "\n         <p>A list of <code>PartitionInput</code> structures that define\n      the partitions to be created.</p>\n      ",
            "required": true,
            "shape_name": "PartitionInputList",
            "min_length": 0,
            "max_length": 100,
            "members": {
              "type": "structure",
              "members": {
                "Values": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>The values of the partition.</simpara>\n      ",
                  "documentation": "\n         <p>The values of the partition.</p>\n      ",
                  "shape_name": "ValueStringList",
                  "members": {
                    "type": "string",
                    "shape_name": "ValueString",
                    "documentation": null,
                    "max_length": 1024
                  }
                },
                "LastAccessTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The last time at which the partition was accessed.</simpara>\n      ",
                  "documentation": "\n         <p>The last time at which the partition was accessed.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "StorageDescriptor": {
                  "type": "structure",
                  "members": {
                    "Columns": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>A list of the <code>Columns</code> in the table.</simpara>\n      ",
                      "documentation": "\n         <p>A list of the <code>Columns</code> in the table.</p>\n      ",
                      "shape_name": "ColumnList",
                      "members": {
                        "type": "structure",
                        "members": {
                          "Name": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "zonbookDocumentation": "\n         <simpara>The name of the <code>Column</code>.</simpara>\n      ",
                            "documentation": "\n         <p>The name of the <code>Column</code>.</p>\n      ",
                            "required": true,
                            "shape_name": "NameString",
                            "min_length": 1,
                            "max_length": 255
                          },
                          "Type": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "zonbookDocumentation": "\n         <simpara>The datatype of data in the <code>Column</code>.</simpara>\n      ",
                            "documentation": "\n         <p>The datatype of data in the <code>Column</code>.</p>\n      ",
                            "shape_name": "ColumnTypeString",
                            "min_length": 0,
                            "max_length": 131072
                          },
                          "Comment": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "zonbookDocumentation": "\n         <simpara>Free-form text comment.</simpara>\n      ",
                            "documentation": "\n         <p>Free-form text comment.</p>\n      ",
                            "shape_name": "CommentString",
                            "min_length": 0,
                            "max_length": 255
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>A column in a <code>Table</code>.</simpara>\n      ",
                        "documentation": "\n         <p>A column in a <code>Table</code>.</p>\n      ",
                        "shape_name": "Column"
                      }
                    },
                    "Location": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</simpara>\n      ",
                      "documentation": "\n         <p>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</p>\n      ",
                      "shape_name": "LocationString",
                      "max_length": 2056
                    },
                    "InputFormat": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</simpara>\n      ",
                      "documentation": "\n         <p>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</p>\n      ",
                      "shape_name": "FormatString",
                      "max_length": 128
                    },
                    "OutputFormat": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</simpara>\n      ",
                      "documentation": "\n         <p>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</p>\n      ",
                      "shape_name": "FormatString",
                      "max_length": 128
                    },
                    "Compressed": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n         <simpara>True if the data in the table is compressed, or False if not.</simpara>\n      ",
                      "documentation": "\n         <p>True if the data in the table is compressed, or False if not.</p>\n      ",
                      "shape_name": "Boolean"
                    },
                    "NumberOfBuckets": {
                      "type": "integer",
                      "zonbookDocumentation": "\n         <simpara>Must be specified if the table contains any dimension columns.</simpara>\n      ",
                      "documentation": "\n         <p>Must be specified if the table contains any dimension columns.</p>\n      ",
                      "shape_name": "Integer"
                    },
                    "SerdeInfo": {
                      "type": "structure",
                      "members": {
                        "Name": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>Name of the SerDe.</simpara>\n      ",
                          "documentation": "\n         <p>Name of the SerDe.</p>\n      ",
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "SerializationLibrary": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</simpara>\n      ",
                          "documentation": "\n         <p>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</p>\n      ",
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "Parameters": {
                          "type": "map",
                          "zonbookDocumentation": "\n         <simpara>A list of initialization parameters for the SerDe, in key-value form.</simpara>\n      ",
                          "documentation": "\n         <p>A list of initialization parameters for the SerDe, in key-value form.</p>\n      ",
                          "shape_name": "ParametersMap",
                          "keys": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "shape_name": "KeyString",
                            "documentation": null,
                            "min_length": 1,
                            "max_length": 255
                          },
                          "members": {
                            "type": "string",
                            "shape_name": "ParametersMapValue",
                            "documentation": null,
                            "max_length": 512000
                          }
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Serialization/deserialization (SerDe) information.</simpara>\n      ",
                      "documentation": "\n         <p>Serialization/deserialization (SerDe) information.</p>\n      ",
                      "shape_name": "SerDeInfo"
                    },
                    "BucketColumns": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</simpara>\n      ",
                      "documentation": "\n         <p>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</p>\n      ",
                      "shape_name": "NameStringList",
                      "members": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "shape_name": "NameString",
                        "documentation": null,
                        "min_length": 1,
                        "max_length": 255
                      }
                    },
                    "SortColumns": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>A list specifying the sort order of each bucket in the table.</simpara>\n      ",
                      "documentation": "\n         <p>A list specifying the sort order of each bucket in the table.</p>\n      ",
                      "shape_name": "OrderList",
                      "members": {
                        "type": "structure",
                        "members": {
                          "Column": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "zonbookDocumentation": "\n         <simpara>The name of the column.</simpara>\n      ",
                            "documentation": "\n         <p>The name of the column.</p>\n      ",
                            "required": true,
                            "shape_name": "NameString",
                            "min_length": 1,
                            "max_length": 255
                          },
                          "SortOrder": {
                            "type": "integer",
                            "zonbookDocumentation": "\n         <simpara>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</simpara>\n      ",
                            "documentation": "\n         <p>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</p>\n      ",
                            "required": true,
                            "shape_name": "IntegerFlag",
                            "min_length": 0,
                            "max_length": 1
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>Specifies the sort order of a sorted column.</simpara>\n      ",
                        "documentation": "\n         <p>Specifies the sort order of a sorted column.</p>\n      ",
                        "shape_name": "Order"
                      }
                    },
                    "Parameters": {
                      "type": "map",
                      "zonbookDocumentation": "\n         <simpara>User-supplied properties in key-value form.</simpara>\n      ",
                      "documentation": "\n         <p>User-supplied properties in key-value form.</p>\n      ",
                      "shape_name": "ParametersMap",
                      "keys": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "shape_name": "KeyString",
                        "documentation": null,
                        "min_length": 1,
                        "max_length": 255
                      },
                      "members": {
                        "type": "string",
                        "shape_name": "ParametersMapValue",
                        "documentation": null,
                        "max_length": 512000
                      }
                    },
                    "SkewedInfo": {
                      "type": "structure",
                      "members": {
                        "SkewedColumnNames": {
                          "type": "list",
                          "zonbookDocumentation": "\n         <simpara>A list of names of columns that contain skewed values.</simpara>\n      ",
                          "documentation": "\n         <p>A list of names of columns that contain skewed values.</p>\n      ",
                          "shape_name": "NameStringList",
                          "members": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "shape_name": "NameString",
                            "documentation": null,
                            "min_length": 1,
                            "max_length": 255
                          }
                        },
                        "SkewedColumnValues": {
                          "type": "list",
                          "zonbookDocumentation": "\n         <simpara>A list of values that appear so frequently as to be considered\n      skewed.</simpara>\n      ",
                          "documentation": "\n         <p>A list of values that appear so frequently as to be considered\n      skewed.</p>\n      ",
                          "shape_name": "ColumnValueStringList",
                          "members": {
                            "type": "string",
                            "shape_name": "ColumnValuesString",
                            "documentation": null
                          }
                        },
                        "SkewedColumnValueLocationMaps": {
                          "type": "map",
                          "zonbookDocumentation": "\n         <simpara>A mapping of skewed values to the columns that contain them.</simpara>\n      ",
                          "documentation": "\n         <p>A mapping of skewed values to the columns that contain them.</p>\n      ",
                          "shape_name": "LocationMap",
                          "keys": {
                            "type": "string",
                            "shape_name": "ColumnValuesString",
                            "documentation": null
                          },
                          "members": {
                            "type": "string",
                            "shape_name": "ColumnValuesString",
                            "documentation": null
                          }
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Information about values that appear very frequently in a column\n      (skewed values).</simpara>\n      ",
                      "documentation": "\n         <p>Information about values that appear very frequently in a column\n      (skewed values).</p>\n      ",
                      "shape_name": "SkewedInfo"
                    },
                    "StoredAsSubDirectories": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n         <simpara>True if the table data is stored in subdirectories, or False if not.</simpara>\n      ",
                      "documentation": "\n         <p>True if the table data is stored in subdirectories, or False if not.</p>\n      ",
                      "shape_name": "Boolean"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Provides information about the physical\n      location where the partition is stored.</simpara>\n      ",
                  "documentation": "\n         <p>Provides information about the physical\n      location where the partition is stored.</p>\n      ",
                  "shape_name": "StorageDescriptor"
                },
                "Parameters": {
                  "type": "map",
                  "zonbookDocumentation": "\n         <simpara>Partition parameters, in the form of a list of key-value pairs.</simpara>\n      ",
                  "documentation": "\n         <p>Partition parameters, in the form of a list of key-value pairs.</p>\n      ",
                  "shape_name": "ParametersMap",
                  "keys": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "shape_name": "KeyString",
                    "documentation": null,
                    "min_length": 1,
                    "max_length": 255
                  },
                  "members": {
                    "type": "string",
                    "shape_name": "ParametersMapValue",
                    "documentation": null,
                    "max_length": 512000
                  }
                },
                "LastAnalyzedTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The last time at which column statistics were computed for this partition.</simpara>\n      ",
                  "documentation": "\n         <p>The last time at which column statistics were computed for this partition.</p>\n      ",
                  "shape_name": "Timestamp"
                }
              },
              "zonbookDocumentation": "\n         <simpara>The structure used to create and update a partion.</simpara>\n      ",
              "documentation": "\n         <p>The structure used to create and update a partion.</p>\n      ",
              "shape_name": "PartitionInput"
            }
          }
        },
        "shape_name": "BatchCreatePartitionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Errors": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>Errors encountered when trying to create the requested partitions.</simpara>\n      ",
            "documentation": "\n         <p>Errors encountered when trying to create the requested partitions.</p>\n      ",
            "shape_name": "PartitionErrors",
            "members": {
              "type": "structure",
              "members": {
                "PartitionValues": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>The values that define the partition.</simpara>\n      ",
                  "documentation": "\n         <p>The values that define the partition.</p>\n      ",
                  "shape_name": "ValueStringList",
                  "members": {
                    "type": "string",
                    "shape_name": "ValueString",
                    "documentation": null,
                    "max_length": 1024
                  }
                },
                "ErrorDetail": {
                  "type": "structure",
                  "members": {
                    "ErrorCode": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The code associated with this error.</simpara>\n      ",
                      "documentation": "\n         <p>The code associated with this error.</p>\n      ",
                      "shape_name": "NameString",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "ErrorMessage": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                      "zonbookDocumentation": "\n         <simpara>A message describing the error.</simpara>\n      ",
                      "documentation": "\n         <p>A message describing the error.</p>\n      ",
                      "shape_name": "DescriptionString",
                      "min_length": 0,
                      "max_length": 2048
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Details about the partition error.</simpara>\n      ",
                  "documentation": "\n         <p>Details about the partition error.</p>\n      ",
                  "shape_name": "ErrorDetail"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Contains information about a partition error.</simpara>\n      ",
              "documentation": "\n         <p>Contains information about a partition error.</p>\n      ",
              "shape_name": "PartitionError"
            }
          }
        },
        "shape_name": "BatchCreatePartitionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource to be created or added already exists.</simpara>\n      ",
          "documentation": "\n         <p>A resource to be created or added already exists.</p>\n      ",
          "shape_name": "AlreadyExistsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource numerical limit was exceeded.</simpara>\n      ",
          "documentation": "\n         <p>A resource numerical limit was exceeded.</p>\n      ",
          "shape_name": "ResourceNumberLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Creates one or more partitions in a batch operation.</p>\n      "
    },
    "CreatePartition": {
      "name": "CreatePartition",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the catalog in which the partion is to be created.\n      Currently, this should be the AWS account ID.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the catalog in which the partion is to be created.\n      Currently, this should be the AWS account ID.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the metadata database in which the partition is\n      to be created.</simpara>\n      ",
            "documentation": "\n         <p>The name of the metadata database in which the partition is\n      to be created.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "TableName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the metadata table in which the partition is to be created.</simpara>\n      ",
            "documentation": "\n         <p>The name of the metadata table in which the partition is to be created.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "PartitionInput": {
            "type": "structure",
            "members": {
              "Values": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>The values of the partition.</simpara>\n      ",
                "documentation": "\n         <p>The values of the partition.</p>\n      ",
                "shape_name": "ValueStringList",
                "members": {
                  "type": "string",
                  "shape_name": "ValueString",
                  "documentation": null,
                  "max_length": 1024
                }
              },
              "LastAccessTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>The last time at which the partition was accessed.</simpara>\n      ",
                "documentation": "\n         <p>The last time at which the partition was accessed.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "StorageDescriptor": {
                "type": "structure",
                "members": {
                  "Columns": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list of the <code>Columns</code> in the table.</simpara>\n      ",
                    "documentation": "\n         <p>A list of the <code>Columns</code> in the table.</p>\n      ",
                    "shape_name": "ColumnList",
                    "members": {
                      "type": "structure",
                      "members": {
                        "Name": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The name of the <code>Column</code>.</simpara>\n      ",
                          "documentation": "\n         <p>The name of the <code>Column</code>.</p>\n      ",
                          "required": true,
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "Type": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The datatype of data in the <code>Column</code>.</simpara>\n      ",
                          "documentation": "\n         <p>The datatype of data in the <code>Column</code>.</p>\n      ",
                          "shape_name": "ColumnTypeString",
                          "min_length": 0,
                          "max_length": 131072
                        },
                        "Comment": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>Free-form text comment.</simpara>\n      ",
                          "documentation": "\n         <p>Free-form text comment.</p>\n      ",
                          "shape_name": "CommentString",
                          "min_length": 0,
                          "max_length": 255
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>A column in a <code>Table</code>.</simpara>\n      ",
                      "documentation": "\n         <p>A column in a <code>Table</code>.</p>\n      ",
                      "shape_name": "Column"
                    }
                  },
                  "Location": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</simpara>\n      ",
                    "documentation": "\n         <p>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</p>\n      ",
                    "shape_name": "LocationString",
                    "max_length": 2056
                  },
                  "InputFormat": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</simpara>\n      ",
                    "documentation": "\n         <p>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</p>\n      ",
                    "shape_name": "FormatString",
                    "max_length": 128
                  },
                  "OutputFormat": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</simpara>\n      ",
                    "documentation": "\n         <p>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</p>\n      ",
                    "shape_name": "FormatString",
                    "max_length": 128
                  },
                  "Compressed": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n         <simpara>True if the data in the table is compressed, or False if not.</simpara>\n      ",
                    "documentation": "\n         <p>True if the data in the table is compressed, or False if not.</p>\n      ",
                    "shape_name": "Boolean"
                  },
                  "NumberOfBuckets": {
                    "type": "integer",
                    "zonbookDocumentation": "\n         <simpara>Must be specified if the table contains any dimension columns.</simpara>\n      ",
                    "documentation": "\n         <p>Must be specified if the table contains any dimension columns.</p>\n      ",
                    "shape_name": "Integer"
                  },
                  "SerdeInfo": {
                    "type": "structure",
                    "members": {
                      "Name": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "zonbookDocumentation": "\n         <simpara>Name of the SerDe.</simpara>\n      ",
                        "documentation": "\n         <p>Name of the SerDe.</p>\n      ",
                        "shape_name": "NameString",
                        "min_length": 1,
                        "max_length": 255
                      },
                      "SerializationLibrary": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "zonbookDocumentation": "\n         <simpara>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</simpara>\n      ",
                        "documentation": "\n         <p>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</p>\n      ",
                        "shape_name": "NameString",
                        "min_length": 1,
                        "max_length": 255
                      },
                      "Parameters": {
                        "type": "map",
                        "zonbookDocumentation": "\n         <simpara>A list of initialization parameters for the SerDe, in key-value form.</simpara>\n      ",
                        "documentation": "\n         <p>A list of initialization parameters for the SerDe, in key-value form.</p>\n      ",
                        "shape_name": "ParametersMap",
                        "keys": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "shape_name": "KeyString",
                          "documentation": null,
                          "min_length": 1,
                          "max_length": 255
                        },
                        "members": {
                          "type": "string",
                          "shape_name": "ParametersMapValue",
                          "documentation": null,
                          "max_length": 512000
                        }
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>Serialization/deserialization (SerDe) information.</simpara>\n      ",
                    "documentation": "\n         <p>Serialization/deserialization (SerDe) information.</p>\n      ",
                    "shape_name": "SerDeInfo"
                  },
                  "BucketColumns": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</simpara>\n      ",
                    "documentation": "\n         <p>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</p>\n      ",
                    "shape_name": "NameStringList",
                    "members": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "shape_name": "NameString",
                      "documentation": null,
                      "min_length": 1,
                      "max_length": 255
                    }
                  },
                  "SortColumns": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list specifying the sort order of each bucket in the table.</simpara>\n      ",
                    "documentation": "\n         <p>A list specifying the sort order of each bucket in the table.</p>\n      ",
                    "shape_name": "OrderList",
                    "members": {
                      "type": "structure",
                      "members": {
                        "Column": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The name of the column.</simpara>\n      ",
                          "documentation": "\n         <p>The name of the column.</p>\n      ",
                          "required": true,
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "SortOrder": {
                          "type": "integer",
                          "zonbookDocumentation": "\n         <simpara>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</simpara>\n      ",
                          "documentation": "\n         <p>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</p>\n      ",
                          "required": true,
                          "shape_name": "IntegerFlag",
                          "min_length": 0,
                          "max_length": 1
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Specifies the sort order of a sorted column.</simpara>\n      ",
                      "documentation": "\n         <p>Specifies the sort order of a sorted column.</p>\n      ",
                      "shape_name": "Order"
                    }
                  },
                  "Parameters": {
                    "type": "map",
                    "zonbookDocumentation": "\n         <simpara>User-supplied properties in key-value form.</simpara>\n      ",
                    "documentation": "\n         <p>User-supplied properties in key-value form.</p>\n      ",
                    "shape_name": "ParametersMap",
                    "keys": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "shape_name": "KeyString",
                      "documentation": null,
                      "min_length": 1,
                      "max_length": 255
                    },
                    "members": {
                      "type": "string",
                      "shape_name": "ParametersMapValue",
                      "documentation": null,
                      "max_length": 512000
                    }
                  },
                  "SkewedInfo": {
                    "type": "structure",
                    "members": {
                      "SkewedColumnNames": {
                        "type": "list",
                        "zonbookDocumentation": "\n         <simpara>A list of names of columns that contain skewed values.</simpara>\n      ",
                        "documentation": "\n         <p>A list of names of columns that contain skewed values.</p>\n      ",
                        "shape_name": "NameStringList",
                        "members": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "shape_name": "NameString",
                          "documentation": null,
                          "min_length": 1,
                          "max_length": 255
                        }
                      },
                      "SkewedColumnValues": {
                        "type": "list",
                        "zonbookDocumentation": "\n         <simpara>A list of values that appear so frequently as to be considered\n      skewed.</simpara>\n      ",
                        "documentation": "\n         <p>A list of values that appear so frequently as to be considered\n      skewed.</p>\n      ",
                        "shape_name": "ColumnValueStringList",
                        "members": {
                          "type": "string",
                          "shape_name": "ColumnValuesString",
                          "documentation": null
                        }
                      },
                      "SkewedColumnValueLocationMaps": {
                        "type": "map",
                        "zonbookDocumentation": "\n         <simpara>A mapping of skewed values to the columns that contain them.</simpara>\n      ",
                        "documentation": "\n         <p>A mapping of skewed values to the columns that contain them.</p>\n      ",
                        "shape_name": "LocationMap",
                        "keys": {
                          "type": "string",
                          "shape_name": "ColumnValuesString",
                          "documentation": null
                        },
                        "members": {
                          "type": "string",
                          "shape_name": "ColumnValuesString",
                          "documentation": null
                        }
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>Information about values that appear very frequently in a column\n      (skewed values).</simpara>\n      ",
                    "documentation": "\n         <p>Information about values that appear very frequently in a column\n      (skewed values).</p>\n      ",
                    "shape_name": "SkewedInfo"
                  },
                  "StoredAsSubDirectories": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n         <simpara>True if the table data is stored in subdirectories, or False if not.</simpara>\n      ",
                    "documentation": "\n         <p>True if the table data is stored in subdirectories, or False if not.</p>\n      ",
                    "shape_name": "Boolean"
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Provides information about the physical\n      location where the partition is stored.</simpara>\n      ",
                "documentation": "\n         <p>Provides information about the physical\n      location where the partition is stored.</p>\n      ",
                "shape_name": "StorageDescriptor"
              },
              "Parameters": {
                "type": "map",
                "zonbookDocumentation": "\n         <simpara>Partition parameters, in the form of a list of key-value pairs.</simpara>\n      ",
                "documentation": "\n         <p>Partition parameters, in the form of a list of key-value pairs.</p>\n      ",
                "shape_name": "ParametersMap",
                "keys": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "shape_name": "KeyString",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 255
                },
                "members": {
                  "type": "string",
                  "shape_name": "ParametersMapValue",
                  "documentation": null,
                  "max_length": 512000
                }
              },
              "LastAnalyzedTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>The last time at which column statistics were computed for this partition.</simpara>\n      ",
                "documentation": "\n         <p>The last time at which column statistics were computed for this partition.</p>\n      ",
                "shape_name": "Timestamp"
              }
            },
            "zonbookDocumentation": "\n         <simpara>A <code>PartitionInput</code> structure defining the partition\n      to be created.</simpara>\n      ",
            "documentation": "\n         <p>A <code>PartitionInput</code> structure defining the partition\n      to be created.</p>\n      ",
            "required": true,
            "shape_name": "PartitionInput"
          }
        },
        "shape_name": "CreatePartitionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "CreatePartitionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource to be created or added already exists.</simpara>\n      ",
          "documentation": "\n         <p>A resource to be created or added already exists.</p>\n      ",
          "shape_name": "AlreadyExistsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource numerical limit was exceeded.</simpara>\n      ",
          "documentation": "\n         <p>A resource numerical limit was exceeded.</p>\n      ",
          "shape_name": "ResourceNumberLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Creates a new partition.</p>\n      "
    },
    "DeletePartition": {
      "name": "DeletePartition",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog where the partition to be deleted resides.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog where the partition to be deleted resides.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the catalog database in which the table in question\n      resides.</simpara>\n      ",
            "documentation": "\n         <p>The name of the catalog database in which the table in question\n      resides.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "TableName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the table where the partition to be deleted is located.</simpara>\n      ",
            "documentation": "\n         <p>The name of the table where the partition to be deleted is located.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "PartitionValues": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The values that define the partition.</simpara>\n      ",
            "documentation": "\n         <p>The values that define the partition.</p>\n      ",
            "required": true,
            "shape_name": "ValueStringList",
            "members": {
              "type": "string",
              "shape_name": "ValueString",
              "documentation": null,
              "max_length": 1024
            }
          }
        },
        "shape_name": "DeletePartitionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "DeletePartitionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Deletes a specified partition.</p>\n      "
    },
    "BatchDeletePartition": {
      "name": "BatchDeletePartition",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog where the partition to be deleted resides.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog where the partition to be deleted resides.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the catalog database in which the table in question\n      resides.</simpara>\n      ",
            "documentation": "\n         <p>The name of the catalog database in which the table in question\n      resides.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "TableName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the table where the partitions to be deleted is located.</simpara>\n      ",
            "documentation": "\n         <p>The name of the table where the partitions to be deleted is located.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "PartitionsToDelete": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of <code>PartitionInput</code> structures that define\n      the partitions to be deleted.</simpara>\n      ",
            "documentation": "\n         <p>A list of <code>PartitionInput</code> structures that define\n      the partitions to be deleted.</p>\n      ",
            "required": true,
            "shape_name": "BatchDeletePartitionValueList",
            "min_length": 0,
            "max_length": 25,
            "members": {
              "type": "structure",
              "members": {
                "Values": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>The list of values.</simpara>\n      ",
                  "documentation": "\n         <p>The list of values.</p>\n      ",
                  "required": true,
                  "shape_name": "ValueStringList",
                  "members": {
                    "type": "string",
                    "shape_name": "ValueString",
                    "documentation": null,
                    "max_length": 1024
                  }
                }
              },
              "zonbookDocumentation": "\n         <simpara>Contains a list of values defining partitions.</simpara>\n      ",
              "documentation": "\n         <p>Contains a list of values defining partitions.</p>\n      ",
              "shape_name": "PartitionValueList"
            }
          }
        },
        "shape_name": "BatchDeletePartitionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Errors": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>Errors encountered when trying to delete the requested partitions.</simpara>\n      ",
            "documentation": "\n         <p>Errors encountered when trying to delete the requested partitions.</p>\n      ",
            "shape_name": "PartitionErrors",
            "members": {
              "type": "structure",
              "members": {
                "PartitionValues": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>The values that define the partition.</simpara>\n      ",
                  "documentation": "\n         <p>The values that define the partition.</p>\n      ",
                  "shape_name": "ValueStringList",
                  "members": {
                    "type": "string",
                    "shape_name": "ValueString",
                    "documentation": null,
                    "max_length": 1024
                  }
                },
                "ErrorDetail": {
                  "type": "structure",
                  "members": {
                    "ErrorCode": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The code associated with this error.</simpara>\n      ",
                      "documentation": "\n         <p>The code associated with this error.</p>\n      ",
                      "shape_name": "NameString",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "ErrorMessage": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                      "zonbookDocumentation": "\n         <simpara>A message describing the error.</simpara>\n      ",
                      "documentation": "\n         <p>A message describing the error.</p>\n      ",
                      "shape_name": "DescriptionString",
                      "min_length": 0,
                      "max_length": 2048
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Details about the partition error.</simpara>\n      ",
                  "documentation": "\n         <p>Details about the partition error.</p>\n      ",
                  "shape_name": "ErrorDetail"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Contains information about a partition error.</simpara>\n      ",
              "documentation": "\n         <p>Contains information about a partition error.</p>\n      ",
              "shape_name": "PartitionError"
            }
          }
        },
        "shape_name": "BatchDeletePartitionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Deletes one or more partitions in a batch operation.</p>\n      "
    },
    "UpdatePartition": {
      "name": "UpdatePartition",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog where the partition to be updated resides.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog where the partition to be updated resides.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the catalog database in which the table in question\n      resides.</simpara>\n      ",
            "documentation": "\n         <p>The name of the catalog database in which the table in question\n      resides.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "TableName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the table where the partition to be updated is located.</simpara>\n      ",
            "documentation": "\n         <p>The name of the table where the partition to be updated is located.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "PartitionValueList": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of the values defining the partition.</simpara>\n      ",
            "documentation": "\n         <p>A list of the values defining the partition.</p>\n      ",
            "required": true,
            "shape_name": "BoundedPartitionValueList",
            "min_length": 0,
            "max_length": 100,
            "members": {
              "type": "string",
              "shape_name": "ValueString",
              "documentation": null,
              "max_length": 1024
            }
          },
          "PartitionInput": {
            "type": "structure",
            "members": {
              "Values": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>The values of the partition.</simpara>\n      ",
                "documentation": "\n         <p>The values of the partition.</p>\n      ",
                "shape_name": "ValueStringList",
                "members": {
                  "type": "string",
                  "shape_name": "ValueString",
                  "documentation": null,
                  "max_length": 1024
                }
              },
              "LastAccessTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>The last time at which the partition was accessed.</simpara>\n      ",
                "documentation": "\n         <p>The last time at which the partition was accessed.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "StorageDescriptor": {
                "type": "structure",
                "members": {
                  "Columns": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list of the <code>Columns</code> in the table.</simpara>\n      ",
                    "documentation": "\n         <p>A list of the <code>Columns</code> in the table.</p>\n      ",
                    "shape_name": "ColumnList",
                    "members": {
                      "type": "structure",
                      "members": {
                        "Name": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The name of the <code>Column</code>.</simpara>\n      ",
                          "documentation": "\n         <p>The name of the <code>Column</code>.</p>\n      ",
                          "required": true,
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "Type": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The datatype of data in the <code>Column</code>.</simpara>\n      ",
                          "documentation": "\n         <p>The datatype of data in the <code>Column</code>.</p>\n      ",
                          "shape_name": "ColumnTypeString",
                          "min_length": 0,
                          "max_length": 131072
                        },
                        "Comment": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>Free-form text comment.</simpara>\n      ",
                          "documentation": "\n         <p>Free-form text comment.</p>\n      ",
                          "shape_name": "CommentString",
                          "min_length": 0,
                          "max_length": 255
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>A column in a <code>Table</code>.</simpara>\n      ",
                      "documentation": "\n         <p>A column in a <code>Table</code>.</p>\n      ",
                      "shape_name": "Column"
                    }
                  },
                  "Location": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</simpara>\n      ",
                    "documentation": "\n         <p>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</p>\n      ",
                    "shape_name": "LocationString",
                    "max_length": 2056
                  },
                  "InputFormat": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</simpara>\n      ",
                    "documentation": "\n         <p>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</p>\n      ",
                    "shape_name": "FormatString",
                    "max_length": 128
                  },
                  "OutputFormat": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</simpara>\n      ",
                    "documentation": "\n         <p>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</p>\n      ",
                    "shape_name": "FormatString",
                    "max_length": 128
                  },
                  "Compressed": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n         <simpara>True if the data in the table is compressed, or False if not.</simpara>\n      ",
                    "documentation": "\n         <p>True if the data in the table is compressed, or False if not.</p>\n      ",
                    "shape_name": "Boolean"
                  },
                  "NumberOfBuckets": {
                    "type": "integer",
                    "zonbookDocumentation": "\n         <simpara>Must be specified if the table contains any dimension columns.</simpara>\n      ",
                    "documentation": "\n         <p>Must be specified if the table contains any dimension columns.</p>\n      ",
                    "shape_name": "Integer"
                  },
                  "SerdeInfo": {
                    "type": "structure",
                    "members": {
                      "Name": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "zonbookDocumentation": "\n         <simpara>Name of the SerDe.</simpara>\n      ",
                        "documentation": "\n         <p>Name of the SerDe.</p>\n      ",
                        "shape_name": "NameString",
                        "min_length": 1,
                        "max_length": 255
                      },
                      "SerializationLibrary": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "zonbookDocumentation": "\n         <simpara>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</simpara>\n      ",
                        "documentation": "\n         <p>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</p>\n      ",
                        "shape_name": "NameString",
                        "min_length": 1,
                        "max_length": 255
                      },
                      "Parameters": {
                        "type": "map",
                        "zonbookDocumentation": "\n         <simpara>A list of initialization parameters for the SerDe, in key-value form.</simpara>\n      ",
                        "documentation": "\n         <p>A list of initialization parameters for the SerDe, in key-value form.</p>\n      ",
                        "shape_name": "ParametersMap",
                        "keys": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "shape_name": "KeyString",
                          "documentation": null,
                          "min_length": 1,
                          "max_length": 255
                        },
                        "members": {
                          "type": "string",
                          "shape_name": "ParametersMapValue",
                          "documentation": null,
                          "max_length": 512000
                        }
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>Serialization/deserialization (SerDe) information.</simpara>\n      ",
                    "documentation": "\n         <p>Serialization/deserialization (SerDe) information.</p>\n      ",
                    "shape_name": "SerDeInfo"
                  },
                  "BucketColumns": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</simpara>\n      ",
                    "documentation": "\n         <p>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</p>\n      ",
                    "shape_name": "NameStringList",
                    "members": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "shape_name": "NameString",
                      "documentation": null,
                      "min_length": 1,
                      "max_length": 255
                    }
                  },
                  "SortColumns": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list specifying the sort order of each bucket in the table.</simpara>\n      ",
                    "documentation": "\n         <p>A list specifying the sort order of each bucket in the table.</p>\n      ",
                    "shape_name": "OrderList",
                    "members": {
                      "type": "structure",
                      "members": {
                        "Column": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The name of the column.</simpara>\n      ",
                          "documentation": "\n         <p>The name of the column.</p>\n      ",
                          "required": true,
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "SortOrder": {
                          "type": "integer",
                          "zonbookDocumentation": "\n         <simpara>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</simpara>\n      ",
                          "documentation": "\n         <p>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</p>\n      ",
                          "required": true,
                          "shape_name": "IntegerFlag",
                          "min_length": 0,
                          "max_length": 1
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Specifies the sort order of a sorted column.</simpara>\n      ",
                      "documentation": "\n         <p>Specifies the sort order of a sorted column.</p>\n      ",
                      "shape_name": "Order"
                    }
                  },
                  "Parameters": {
                    "type": "map",
                    "zonbookDocumentation": "\n         <simpara>User-supplied properties in key-value form.</simpara>\n      ",
                    "documentation": "\n         <p>User-supplied properties in key-value form.</p>\n      ",
                    "shape_name": "ParametersMap",
                    "keys": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "shape_name": "KeyString",
                      "documentation": null,
                      "min_length": 1,
                      "max_length": 255
                    },
                    "members": {
                      "type": "string",
                      "shape_name": "ParametersMapValue",
                      "documentation": null,
                      "max_length": 512000
                    }
                  },
                  "SkewedInfo": {
                    "type": "structure",
                    "members": {
                      "SkewedColumnNames": {
                        "type": "list",
                        "zonbookDocumentation": "\n         <simpara>A list of names of columns that contain skewed values.</simpara>\n      ",
                        "documentation": "\n         <p>A list of names of columns that contain skewed values.</p>\n      ",
                        "shape_name": "NameStringList",
                        "members": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "shape_name": "NameString",
                          "documentation": null,
                          "min_length": 1,
                          "max_length": 255
                        }
                      },
                      "SkewedColumnValues": {
                        "type": "list",
                        "zonbookDocumentation": "\n         <simpara>A list of values that appear so frequently as to be considered\n      skewed.</simpara>\n      ",
                        "documentation": "\n         <p>A list of values that appear so frequently as to be considered\n      skewed.</p>\n      ",
                        "shape_name": "ColumnValueStringList",
                        "members": {
                          "type": "string",
                          "shape_name": "ColumnValuesString",
                          "documentation": null
                        }
                      },
                      "SkewedColumnValueLocationMaps": {
                        "type": "map",
                        "zonbookDocumentation": "\n         <simpara>A mapping of skewed values to the columns that contain them.</simpara>\n      ",
                        "documentation": "\n         <p>A mapping of skewed values to the columns that contain them.</p>\n      ",
                        "shape_name": "LocationMap",
                        "keys": {
                          "type": "string",
                          "shape_name": "ColumnValuesString",
                          "documentation": null
                        },
                        "members": {
                          "type": "string",
                          "shape_name": "ColumnValuesString",
                          "documentation": null
                        }
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>Information about values that appear very frequently in a column\n      (skewed values).</simpara>\n      ",
                    "documentation": "\n         <p>Information about values that appear very frequently in a column\n      (skewed values).</p>\n      ",
                    "shape_name": "SkewedInfo"
                  },
                  "StoredAsSubDirectories": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n         <simpara>True if the table data is stored in subdirectories, or False if not.</simpara>\n      ",
                    "documentation": "\n         <p>True if the table data is stored in subdirectories, or False if not.</p>\n      ",
                    "shape_name": "Boolean"
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Provides information about the physical\n      location where the partition is stored.</simpara>\n      ",
                "documentation": "\n         <p>Provides information about the physical\n      location where the partition is stored.</p>\n      ",
                "shape_name": "StorageDescriptor"
              },
              "Parameters": {
                "type": "map",
                "zonbookDocumentation": "\n         <simpara>Partition parameters, in the form of a list of key-value pairs.</simpara>\n      ",
                "documentation": "\n         <p>Partition parameters, in the form of a list of key-value pairs.</p>\n      ",
                "shape_name": "ParametersMap",
                "keys": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "shape_name": "KeyString",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 255
                },
                "members": {
                  "type": "string",
                  "shape_name": "ParametersMapValue",
                  "documentation": null,
                  "max_length": 512000
                }
              },
              "LastAnalyzedTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>The last time at which column statistics were computed for this partition.</simpara>\n      ",
                "documentation": "\n         <p>The last time at which column statistics were computed for this partition.</p>\n      ",
                "shape_name": "Timestamp"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The new partition object to which to update the partition.</simpara>\n      ",
            "documentation": "\n         <p>The new partition object to which to update the partition.</p>\n      ",
            "required": true,
            "shape_name": "PartitionInput"
          }
        },
        "shape_name": "UpdatePartitionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "UpdatePartitionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Updates a partition.</p>\n      "
    },
    "GetPartition": {
      "name": "GetPartition",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog where the partition in question resides.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog where the partition in question resides.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the catalog database where the partition resides.</simpara>\n      ",
            "documentation": "\n         <p>The name of the catalog database where the partition resides.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "TableName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the partition's table.</simpara>\n      ",
            "documentation": "\n         <p>The name of the partition's table.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "PartitionValues": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The values that define the partition.</simpara>\n      ",
            "documentation": "\n         <p>The values that define the partition.</p>\n      ",
            "required": true,
            "shape_name": "ValueStringList",
            "members": {
              "type": "string",
              "shape_name": "ValueString",
              "documentation": null,
              "max_length": 1024
            }
          }
        },
        "shape_name": "GetPartitionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Partition": {
            "type": "structure",
            "members": {
              "Values": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>The values of the partition.</simpara>\n      ",
                "documentation": "\n         <p>The values of the partition.</p>\n      ",
                "shape_name": "ValueStringList",
                "members": {
                  "type": "string",
                  "shape_name": "ValueString",
                  "documentation": null,
                  "max_length": 1024
                }
              },
              "DatabaseName": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The name of the catalog database where the table in question is located.</simpara>\n      ",
                "documentation": "\n         <p>The name of the catalog database where the table in question is located.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "TableName": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The name of the table in question.</simpara>\n      ",
                "documentation": "\n         <p>The name of the table in question.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "CreationTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>The time at which the partition was created.</simpara>\n      ",
                "documentation": "\n         <p>The time at which the partition was created.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "LastAccessTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>The last time at which the partition was accessed.</simpara>\n      ",
                "documentation": "\n         <p>The last time at which the partition was accessed.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "StorageDescriptor": {
                "type": "structure",
                "members": {
                  "Columns": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list of the <code>Columns</code> in the table.</simpara>\n      ",
                    "documentation": "\n         <p>A list of the <code>Columns</code> in the table.</p>\n      ",
                    "shape_name": "ColumnList",
                    "members": {
                      "type": "structure",
                      "members": {
                        "Name": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The name of the <code>Column</code>.</simpara>\n      ",
                          "documentation": "\n         <p>The name of the <code>Column</code>.</p>\n      ",
                          "required": true,
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "Type": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The datatype of data in the <code>Column</code>.</simpara>\n      ",
                          "documentation": "\n         <p>The datatype of data in the <code>Column</code>.</p>\n      ",
                          "shape_name": "ColumnTypeString",
                          "min_length": 0,
                          "max_length": 131072
                        },
                        "Comment": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>Free-form text comment.</simpara>\n      ",
                          "documentation": "\n         <p>Free-form text comment.</p>\n      ",
                          "shape_name": "CommentString",
                          "min_length": 0,
                          "max_length": 255
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>A column in a <code>Table</code>.</simpara>\n      ",
                      "documentation": "\n         <p>A column in a <code>Table</code>.</p>\n      ",
                      "shape_name": "Column"
                    }
                  },
                  "Location": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</simpara>\n      ",
                    "documentation": "\n         <p>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</p>\n      ",
                    "shape_name": "LocationString",
                    "max_length": 2056
                  },
                  "InputFormat": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</simpara>\n      ",
                    "documentation": "\n         <p>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</p>\n      ",
                    "shape_name": "FormatString",
                    "max_length": 128
                  },
                  "OutputFormat": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</simpara>\n      ",
                    "documentation": "\n         <p>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</p>\n      ",
                    "shape_name": "FormatString",
                    "max_length": 128
                  },
                  "Compressed": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n         <simpara>True if the data in the table is compressed, or False if not.</simpara>\n      ",
                    "documentation": "\n         <p>True if the data in the table is compressed, or False if not.</p>\n      ",
                    "shape_name": "Boolean"
                  },
                  "NumberOfBuckets": {
                    "type": "integer",
                    "zonbookDocumentation": "\n         <simpara>Must be specified if the table contains any dimension columns.</simpara>\n      ",
                    "documentation": "\n         <p>Must be specified if the table contains any dimension columns.</p>\n      ",
                    "shape_name": "Integer"
                  },
                  "SerdeInfo": {
                    "type": "structure",
                    "members": {
                      "Name": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "zonbookDocumentation": "\n         <simpara>Name of the SerDe.</simpara>\n      ",
                        "documentation": "\n         <p>Name of the SerDe.</p>\n      ",
                        "shape_name": "NameString",
                        "min_length": 1,
                        "max_length": 255
                      },
                      "SerializationLibrary": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "zonbookDocumentation": "\n         <simpara>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</simpara>\n      ",
                        "documentation": "\n         <p>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</p>\n      ",
                        "shape_name": "NameString",
                        "min_length": 1,
                        "max_length": 255
                      },
                      "Parameters": {
                        "type": "map",
                        "zonbookDocumentation": "\n         <simpara>A list of initialization parameters for the SerDe, in key-value form.</simpara>\n      ",
                        "documentation": "\n         <p>A list of initialization parameters for the SerDe, in key-value form.</p>\n      ",
                        "shape_name": "ParametersMap",
                        "keys": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "shape_name": "KeyString",
                          "documentation": null,
                          "min_length": 1,
                          "max_length": 255
                        },
                        "members": {
                          "type": "string",
                          "shape_name": "ParametersMapValue",
                          "documentation": null,
                          "max_length": 512000
                        }
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>Serialization/deserialization (SerDe) information.</simpara>\n      ",
                    "documentation": "\n         <p>Serialization/deserialization (SerDe) information.</p>\n      ",
                    "shape_name": "SerDeInfo"
                  },
                  "BucketColumns": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</simpara>\n      ",
                    "documentation": "\n         <p>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</p>\n      ",
                    "shape_name": "NameStringList",
                    "members": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "shape_name": "NameString",
                      "documentation": null,
                      "min_length": 1,
                      "max_length": 255
                    }
                  },
                  "SortColumns": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list specifying the sort order of each bucket in the table.</simpara>\n      ",
                    "documentation": "\n         <p>A list specifying the sort order of each bucket in the table.</p>\n      ",
                    "shape_name": "OrderList",
                    "members": {
                      "type": "structure",
                      "members": {
                        "Column": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The name of the column.</simpara>\n      ",
                          "documentation": "\n         <p>The name of the column.</p>\n      ",
                          "required": true,
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "SortOrder": {
                          "type": "integer",
                          "zonbookDocumentation": "\n         <simpara>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</simpara>\n      ",
                          "documentation": "\n         <p>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</p>\n      ",
                          "required": true,
                          "shape_name": "IntegerFlag",
                          "min_length": 0,
                          "max_length": 1
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Specifies the sort order of a sorted column.</simpara>\n      ",
                      "documentation": "\n         <p>Specifies the sort order of a sorted column.</p>\n      ",
                      "shape_name": "Order"
                    }
                  },
                  "Parameters": {
                    "type": "map",
                    "zonbookDocumentation": "\n         <simpara>User-supplied properties in key-value form.</simpara>\n      ",
                    "documentation": "\n         <p>User-supplied properties in key-value form.</p>\n      ",
                    "shape_name": "ParametersMap",
                    "keys": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "shape_name": "KeyString",
                      "documentation": null,
                      "min_length": 1,
                      "max_length": 255
                    },
                    "members": {
                      "type": "string",
                      "shape_name": "ParametersMapValue",
                      "documentation": null,
                      "max_length": 512000
                    }
                  },
                  "SkewedInfo": {
                    "type": "structure",
                    "members": {
                      "SkewedColumnNames": {
                        "type": "list",
                        "zonbookDocumentation": "\n         <simpara>A list of names of columns that contain skewed values.</simpara>\n      ",
                        "documentation": "\n         <p>A list of names of columns that contain skewed values.</p>\n      ",
                        "shape_name": "NameStringList",
                        "members": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "shape_name": "NameString",
                          "documentation": null,
                          "min_length": 1,
                          "max_length": 255
                        }
                      },
                      "SkewedColumnValues": {
                        "type": "list",
                        "zonbookDocumentation": "\n         <simpara>A list of values that appear so frequently as to be considered\n      skewed.</simpara>\n      ",
                        "documentation": "\n         <p>A list of values that appear so frequently as to be considered\n      skewed.</p>\n      ",
                        "shape_name": "ColumnValueStringList",
                        "members": {
                          "type": "string",
                          "shape_name": "ColumnValuesString",
                          "documentation": null
                        }
                      },
                      "SkewedColumnValueLocationMaps": {
                        "type": "map",
                        "zonbookDocumentation": "\n         <simpara>A mapping of skewed values to the columns that contain them.</simpara>\n      ",
                        "documentation": "\n         <p>A mapping of skewed values to the columns that contain them.</p>\n      ",
                        "shape_name": "LocationMap",
                        "keys": {
                          "type": "string",
                          "shape_name": "ColumnValuesString",
                          "documentation": null
                        },
                        "members": {
                          "type": "string",
                          "shape_name": "ColumnValuesString",
                          "documentation": null
                        }
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>Information about values that appear very frequently in a column\n      (skewed values).</simpara>\n      ",
                    "documentation": "\n         <p>Information about values that appear very frequently in a column\n      (skewed values).</p>\n      ",
                    "shape_name": "SkewedInfo"
                  },
                  "StoredAsSubDirectories": {
                    "type": "boolean",
                    "zonbookDocumentation": "\n         <simpara>True if the table data is stored in subdirectories, or False if not.</simpara>\n      ",
                    "documentation": "\n         <p>True if the table data is stored in subdirectories, or False if not.</p>\n      ",
                    "shape_name": "Boolean"
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Provides information about the physical\n      location where the partition is stored.</simpara>\n      ",
                "documentation": "\n         <p>Provides information about the physical\n      location where the partition is stored.</p>\n      ",
                "shape_name": "StorageDescriptor"
              },
              "Parameters": {
                "type": "map",
                "zonbookDocumentation": "\n         <simpara>Partition parameters, in the form of a list of key-value pairs.</simpara>\n      ",
                "documentation": "\n         <p>Partition parameters, in the form of a list of key-value pairs.</p>\n      ",
                "shape_name": "ParametersMap",
                "keys": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "shape_name": "KeyString",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 255
                },
                "members": {
                  "type": "string",
                  "shape_name": "ParametersMapValue",
                  "documentation": null,
                  "max_length": 512000
                }
              },
              "LastAnalyzedTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>The last time at which column statistics were computed for this\n      partition.</simpara>\n      ",
                "documentation": "\n         <p>The last time at which column statistics were computed for this\n      partition.</p>\n      ",
                "shape_name": "Timestamp"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The requested information, in the form of a <code>Partition</code>\n      object.</simpara>\n      ",
            "documentation": "\n         <p>The requested information, in the form of a <code>Partition</code>\n      object.</p>\n      ",
            "shape_name": "Partition"
          }
        },
        "shape_name": "GetPartitionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Retrieves information about a specified partition.</p>\n      "
    },
    "GetPartitions": {
      "name": "GetPartitions",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog where the partitions in question reside.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog where the partitions in question reside.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the catalog database where the partitions reside.</simpara>\n      ",
            "documentation": "\n         <p>The name of the catalog database where the partitions reside.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "TableName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the partitions' table.</simpara>\n      ",
            "documentation": "\n         <p>The name of the partitions' table.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "Expression": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
            "zonbookDocumentation": "\n         <simpara>An expression filtering the partitions to be returned.</simpara>\n      ",
            "documentation": "\n         <p>An expression filtering the partitions to be returned.</p>\n      ",
            "shape_name": "PredicateString",
            "min_length": 0,
            "max_length": 2048
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, if this is not the first call to retrieve\n      these partitions.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, if this is not the first call to retrieve\n      these partitions.</p>\n      ",
            "shape_name": "Token"
          },
          "Segment": {
            "type": "structure",
            "members": {
              "SegmentNumber": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The zero-based index number of the this segment. For example, if\n      the total number of segments is 4, SegmentNumber values will range from\n      zero through three.</simpara>\n      ",
                "documentation": "\n         <p>The zero-based index number of the this segment. For example, if\n      the total number of segments is 4, SegmentNumber values will range from\n      zero through three.</p>\n      ",
                "required": true,
                "shape_name": "NonNegativeInteger",
                "min_length": 0
              },
              "TotalSegments": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The total numer of segments.</simpara>\n      ",
                "documentation": "\n         <p>The total numer of segments.</p>\n      ",
                "required": true,
                "shape_name": "TotalSegmentsInteger",
                "min_length": 1,
                "max_length": 10
              }
            },
            "zonbookDocumentation": "\n         <simpara>The segment of the table's partitions to scan in this request.</simpara>\n      ",
            "documentation": "\n         <p>The segment of the table's partitions to scan in this request.</p>\n      ",
            "shape_name": "Segment"
          },
          "MaxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The maximum number of partitions to return in a single response.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of partitions to return in a single response.</p>\n      ",
            "shape_name": "PageSize",
            "min_length": 1,
            "max_length": 1000
          }
        },
        "shape_name": "GetPartitionsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Partitions": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of requested partitions.</simpara>\n      ",
            "documentation": "\n         <p>A list of requested partitions.</p>\n      ",
            "shape_name": "PartitionList",
            "members": {
              "type": "structure",
              "members": {
                "Values": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>The values of the partition.</simpara>\n      ",
                  "documentation": "\n         <p>The values of the partition.</p>\n      ",
                  "shape_name": "ValueStringList",
                  "members": {
                    "type": "string",
                    "shape_name": "ValueString",
                    "documentation": null,
                    "max_length": 1024
                  }
                },
                "DatabaseName": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The name of the catalog database where the table in question is located.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the catalog database where the table in question is located.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "TableName": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The name of the table in question.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the table in question.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "CreationTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The time at which the partition was created.</simpara>\n      ",
                  "documentation": "\n         <p>The time at which the partition was created.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "LastAccessTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The last time at which the partition was accessed.</simpara>\n      ",
                  "documentation": "\n         <p>The last time at which the partition was accessed.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "StorageDescriptor": {
                  "type": "structure",
                  "members": {
                    "Columns": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>A list of the <code>Columns</code> in the table.</simpara>\n      ",
                      "documentation": "\n         <p>A list of the <code>Columns</code> in the table.</p>\n      ",
                      "shape_name": "ColumnList",
                      "members": {
                        "type": "structure",
                        "members": {
                          "Name": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "zonbookDocumentation": "\n         <simpara>The name of the <code>Column</code>.</simpara>\n      ",
                            "documentation": "\n         <p>The name of the <code>Column</code>.</p>\n      ",
                            "required": true,
                            "shape_name": "NameString",
                            "min_length": 1,
                            "max_length": 255
                          },
                          "Type": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "zonbookDocumentation": "\n         <simpara>The datatype of data in the <code>Column</code>.</simpara>\n      ",
                            "documentation": "\n         <p>The datatype of data in the <code>Column</code>.</p>\n      ",
                            "shape_name": "ColumnTypeString",
                            "min_length": 0,
                            "max_length": 131072
                          },
                          "Comment": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "zonbookDocumentation": "\n         <simpara>Free-form text comment.</simpara>\n      ",
                            "documentation": "\n         <p>Free-form text comment.</p>\n      ",
                            "shape_name": "CommentString",
                            "min_length": 0,
                            "max_length": 255
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>A column in a <code>Table</code>.</simpara>\n      ",
                        "documentation": "\n         <p>A column in a <code>Table</code>.</p>\n      ",
                        "shape_name": "Column"
                      }
                    },
                    "Location": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</simpara>\n      ",
                      "documentation": "\n         <p>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</p>\n      ",
                      "shape_name": "LocationString",
                      "max_length": 2056
                    },
                    "InputFormat": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</simpara>\n      ",
                      "documentation": "\n         <p>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</p>\n      ",
                      "shape_name": "FormatString",
                      "max_length": 128
                    },
                    "OutputFormat": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</simpara>\n      ",
                      "documentation": "\n         <p>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</p>\n      ",
                      "shape_name": "FormatString",
                      "max_length": 128
                    },
                    "Compressed": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n         <simpara>True if the data in the table is compressed, or False if not.</simpara>\n      ",
                      "documentation": "\n         <p>True if the data in the table is compressed, or False if not.</p>\n      ",
                      "shape_name": "Boolean"
                    },
                    "NumberOfBuckets": {
                      "type": "integer",
                      "zonbookDocumentation": "\n         <simpara>Must be specified if the table contains any dimension columns.</simpara>\n      ",
                      "documentation": "\n         <p>Must be specified if the table contains any dimension columns.</p>\n      ",
                      "shape_name": "Integer"
                    },
                    "SerdeInfo": {
                      "type": "structure",
                      "members": {
                        "Name": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>Name of the SerDe.</simpara>\n      ",
                          "documentation": "\n         <p>Name of the SerDe.</p>\n      ",
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "SerializationLibrary": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</simpara>\n      ",
                          "documentation": "\n         <p>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</p>\n      ",
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "Parameters": {
                          "type": "map",
                          "zonbookDocumentation": "\n         <simpara>A list of initialization parameters for the SerDe, in key-value form.</simpara>\n      ",
                          "documentation": "\n         <p>A list of initialization parameters for the SerDe, in key-value form.</p>\n      ",
                          "shape_name": "ParametersMap",
                          "keys": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "shape_name": "KeyString",
                            "documentation": null,
                            "min_length": 1,
                            "max_length": 255
                          },
                          "members": {
                            "type": "string",
                            "shape_name": "ParametersMapValue",
                            "documentation": null,
                            "max_length": 512000
                          }
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Serialization/deserialization (SerDe) information.</simpara>\n      ",
                      "documentation": "\n         <p>Serialization/deserialization (SerDe) information.</p>\n      ",
                      "shape_name": "SerDeInfo"
                    },
                    "BucketColumns": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</simpara>\n      ",
                      "documentation": "\n         <p>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</p>\n      ",
                      "shape_name": "NameStringList",
                      "members": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "shape_name": "NameString",
                        "documentation": null,
                        "min_length": 1,
                        "max_length": 255
                      }
                    },
                    "SortColumns": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>A list specifying the sort order of each bucket in the table.</simpara>\n      ",
                      "documentation": "\n         <p>A list specifying the sort order of each bucket in the table.</p>\n      ",
                      "shape_name": "OrderList",
                      "members": {
                        "type": "structure",
                        "members": {
                          "Column": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "zonbookDocumentation": "\n         <simpara>The name of the column.</simpara>\n      ",
                            "documentation": "\n         <p>The name of the column.</p>\n      ",
                            "required": true,
                            "shape_name": "NameString",
                            "min_length": 1,
                            "max_length": 255
                          },
                          "SortOrder": {
                            "type": "integer",
                            "zonbookDocumentation": "\n         <simpara>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</simpara>\n      ",
                            "documentation": "\n         <p>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</p>\n      ",
                            "required": true,
                            "shape_name": "IntegerFlag",
                            "min_length": 0,
                            "max_length": 1
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>Specifies the sort order of a sorted column.</simpara>\n      ",
                        "documentation": "\n         <p>Specifies the sort order of a sorted column.</p>\n      ",
                        "shape_name": "Order"
                      }
                    },
                    "Parameters": {
                      "type": "map",
                      "zonbookDocumentation": "\n         <simpara>User-supplied properties in key-value form.</simpara>\n      ",
                      "documentation": "\n         <p>User-supplied properties in key-value form.</p>\n      ",
                      "shape_name": "ParametersMap",
                      "keys": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "shape_name": "KeyString",
                        "documentation": null,
                        "min_length": 1,
                        "max_length": 255
                      },
                      "members": {
                        "type": "string",
                        "shape_name": "ParametersMapValue",
                        "documentation": null,
                        "max_length": 512000
                      }
                    },
                    "SkewedInfo": {
                      "type": "structure",
                      "members": {
                        "SkewedColumnNames": {
                          "type": "list",
                          "zonbookDocumentation": "\n         <simpara>A list of names of columns that contain skewed values.</simpara>\n      ",
                          "documentation": "\n         <p>A list of names of columns that contain skewed values.</p>\n      ",
                          "shape_name": "NameStringList",
                          "members": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "shape_name": "NameString",
                            "documentation": null,
                            "min_length": 1,
                            "max_length": 255
                          }
                        },
                        "SkewedColumnValues": {
                          "type": "list",
                          "zonbookDocumentation": "\n         <simpara>A list of values that appear so frequently as to be considered\n      skewed.</simpara>\n      ",
                          "documentation": "\n         <p>A list of values that appear so frequently as to be considered\n      skewed.</p>\n      ",
                          "shape_name": "ColumnValueStringList",
                          "members": {
                            "type": "string",
                            "shape_name": "ColumnValuesString",
                            "documentation": null
                          }
                        },
                        "SkewedColumnValueLocationMaps": {
                          "type": "map",
                          "zonbookDocumentation": "\n         <simpara>A mapping of skewed values to the columns that contain them.</simpara>\n      ",
                          "documentation": "\n         <p>A mapping of skewed values to the columns that contain them.</p>\n      ",
                          "shape_name": "LocationMap",
                          "keys": {
                            "type": "string",
                            "shape_name": "ColumnValuesString",
                            "documentation": null
                          },
                          "members": {
                            "type": "string",
                            "shape_name": "ColumnValuesString",
                            "documentation": null
                          }
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Information about values that appear very frequently in a column\n      (skewed values).</simpara>\n      ",
                      "documentation": "\n         <p>Information about values that appear very frequently in a column\n      (skewed values).</p>\n      ",
                      "shape_name": "SkewedInfo"
                    },
                    "StoredAsSubDirectories": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n         <simpara>True if the table data is stored in subdirectories, or False if not.</simpara>\n      ",
                      "documentation": "\n         <p>True if the table data is stored in subdirectories, or False if not.</p>\n      ",
                      "shape_name": "Boolean"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Provides information about the physical\n      location where the partition is stored.</simpara>\n      ",
                  "documentation": "\n         <p>Provides information about the physical\n      location where the partition is stored.</p>\n      ",
                  "shape_name": "StorageDescriptor"
                },
                "Parameters": {
                  "type": "map",
                  "zonbookDocumentation": "\n         <simpara>Partition parameters, in the form of a list of key-value pairs.</simpara>\n      ",
                  "documentation": "\n         <p>Partition parameters, in the form of a list of key-value pairs.</p>\n      ",
                  "shape_name": "ParametersMap",
                  "keys": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "shape_name": "KeyString",
                    "documentation": null,
                    "min_length": 1,
                    "max_length": 255
                  },
                  "members": {
                    "type": "string",
                    "shape_name": "ParametersMapValue",
                    "documentation": null,
                    "max_length": 512000
                  }
                },
                "LastAnalyzedTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The last time at which column statistics were computed for this\n      partition.</simpara>\n      ",
                  "documentation": "\n         <p>The last time at which column statistics were computed for this\n      partition.</p>\n      ",
                  "shape_name": "Timestamp"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Represents a slice of table data.</simpara>\n      ",
              "documentation": "\n         <p>Represents a slice of table data.</p>\n      ",
              "shape_name": "Partition"
            }
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, if the returned list of partitions does not\n      does not include the last one.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, if the returned list of partitions does not\n      does not include the last one.</p>\n      ",
            "shape_name": "Token"
          }
        },
        "shape_name": "GetPartitionsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        }
      ],
      "documentation": "\n         <p>Retrieves information about the partitions in a table.</p>\n      "
    },
    "BatchGetPartition": {
      "name": "BatchGetPartition",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog where the partitions in question reside.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog where the partitions in question reside.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the catalog database where the partitions reside.</simpara>\n      ",
            "documentation": "\n         <p>The name of the catalog database where the partitions reside.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "TableName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the partitions' table.</simpara>\n      ",
            "documentation": "\n         <p>The name of the partitions' table.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "PartitionsToGet": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of partition values identifying the partitions to retrieve.</simpara>\n      ",
            "documentation": "\n         <p>A list of partition values identifying the partitions to retrieve.</p>\n      ",
            "required": true,
            "shape_name": "BatchGetPartitionValueList",
            "min_length": 0,
            "max_length": 1000,
            "members": {
              "type": "structure",
              "members": {
                "Values": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>The list of values.</simpara>\n      ",
                  "documentation": "\n         <p>The list of values.</p>\n      ",
                  "required": true,
                  "shape_name": "ValueStringList",
                  "members": {
                    "type": "string",
                    "shape_name": "ValueString",
                    "documentation": null,
                    "max_length": 1024
                  }
                }
              },
              "zonbookDocumentation": "\n         <simpara>Contains a list of values defining partitions.</simpara>\n      ",
              "documentation": "\n         <p>Contains a list of values defining partitions.</p>\n      ",
              "shape_name": "PartitionValueList"
            }
          }
        },
        "shape_name": "BatchGetPartitionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Partitions": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of the requested partitions.</simpara>\n      ",
            "documentation": "\n         <p>A list of the requested partitions.</p>\n      ",
            "shape_name": "PartitionList",
            "members": {
              "type": "structure",
              "members": {
                "Values": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>The values of the partition.</simpara>\n      ",
                  "documentation": "\n         <p>The values of the partition.</p>\n      ",
                  "shape_name": "ValueStringList",
                  "members": {
                    "type": "string",
                    "shape_name": "ValueString",
                    "documentation": null,
                    "max_length": 1024
                  }
                },
                "DatabaseName": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The name of the catalog database where the table in question is located.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the catalog database where the table in question is located.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "TableName": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The name of the table in question.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the table in question.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "CreationTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The time at which the partition was created.</simpara>\n      ",
                  "documentation": "\n         <p>The time at which the partition was created.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "LastAccessTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The last time at which the partition was accessed.</simpara>\n      ",
                  "documentation": "\n         <p>The last time at which the partition was accessed.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "StorageDescriptor": {
                  "type": "structure",
                  "members": {
                    "Columns": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>A list of the <code>Columns</code> in the table.</simpara>\n      ",
                      "documentation": "\n         <p>A list of the <code>Columns</code> in the table.</p>\n      ",
                      "shape_name": "ColumnList",
                      "members": {
                        "type": "structure",
                        "members": {
                          "Name": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "zonbookDocumentation": "\n         <simpara>The name of the <code>Column</code>.</simpara>\n      ",
                            "documentation": "\n         <p>The name of the <code>Column</code>.</p>\n      ",
                            "required": true,
                            "shape_name": "NameString",
                            "min_length": 1,
                            "max_length": 255
                          },
                          "Type": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "zonbookDocumentation": "\n         <simpara>The datatype of data in the <code>Column</code>.</simpara>\n      ",
                            "documentation": "\n         <p>The datatype of data in the <code>Column</code>.</p>\n      ",
                            "shape_name": "ColumnTypeString",
                            "min_length": 0,
                            "max_length": 131072
                          },
                          "Comment": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "zonbookDocumentation": "\n         <simpara>Free-form text comment.</simpara>\n      ",
                            "documentation": "\n         <p>Free-form text comment.</p>\n      ",
                            "shape_name": "CommentString",
                            "min_length": 0,
                            "max_length": 255
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>A column in a <code>Table</code>.</simpara>\n      ",
                        "documentation": "\n         <p>A column in a <code>Table</code>.</p>\n      ",
                        "shape_name": "Column"
                      }
                    },
                    "Location": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</simpara>\n      ",
                      "documentation": "\n         <p>The physical location of the table. By default this takes the form\n      of the warehouse location, followed by the database location in the\n      warehouse, followed by the table name.</p>\n      ",
                      "shape_name": "LocationString",
                      "max_length": 2056
                    },
                    "InputFormat": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</simpara>\n      ",
                      "documentation": "\n         <p>The input format: <code>SequenceFileInputFormat</code> (binary),\n      or <code>TextInputFormat</code>, or a custom format.</p>\n      ",
                      "shape_name": "FormatString",
                      "max_length": 128
                    },
                    "OutputFormat": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</simpara>\n      ",
                      "documentation": "\n         <p>The output format: <code>SequenceFileOutputFormat</code> (binary),\n      or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</p>\n      ",
                      "shape_name": "FormatString",
                      "max_length": 128
                    },
                    "Compressed": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n         <simpara>True if the data in the table is compressed, or False if not.</simpara>\n      ",
                      "documentation": "\n         <p>True if the data in the table is compressed, or False if not.</p>\n      ",
                      "shape_name": "Boolean"
                    },
                    "NumberOfBuckets": {
                      "type": "integer",
                      "zonbookDocumentation": "\n         <simpara>Must be specified if the table contains any dimension columns.</simpara>\n      ",
                      "documentation": "\n         <p>Must be specified if the table contains any dimension columns.</p>\n      ",
                      "shape_name": "Integer"
                    },
                    "SerdeInfo": {
                      "type": "structure",
                      "members": {
                        "Name": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>Name of the SerDe.</simpara>\n      ",
                          "documentation": "\n         <p>Name of the SerDe.</p>\n      ",
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "SerializationLibrary": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</simpara>\n      ",
                          "documentation": "\n         <p>Usually the class that implements the SerDe. An example is:\n      <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</p>\n      ",
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "Parameters": {
                          "type": "map",
                          "zonbookDocumentation": "\n         <simpara>A list of initialization parameters for the SerDe, in key-value form.</simpara>\n      ",
                          "documentation": "\n         <p>A list of initialization parameters for the SerDe, in key-value form.</p>\n      ",
                          "shape_name": "ParametersMap",
                          "keys": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "shape_name": "KeyString",
                            "documentation": null,
                            "min_length": 1,
                            "max_length": 255
                          },
                          "members": {
                            "type": "string",
                            "shape_name": "ParametersMapValue",
                            "documentation": null,
                            "max_length": 512000
                          }
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Serialization/deserialization (SerDe) information.</simpara>\n      ",
                      "documentation": "\n         <p>Serialization/deserialization (SerDe) information.</p>\n      ",
                      "shape_name": "SerDeInfo"
                    },
                    "BucketColumns": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</simpara>\n      ",
                      "documentation": "\n         <p>A list of reducer grouping columns, clustering columns, and\n      bucketing columns in the table.</p>\n      ",
                      "shape_name": "NameStringList",
                      "members": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "shape_name": "NameString",
                        "documentation": null,
                        "min_length": 1,
                        "max_length": 255
                      }
                    },
                    "SortColumns": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>A list specifying the sort order of each bucket in the table.</simpara>\n      ",
                      "documentation": "\n         <p>A list specifying the sort order of each bucket in the table.</p>\n      ",
                      "shape_name": "OrderList",
                      "members": {
                        "type": "structure",
                        "members": {
                          "Column": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "zonbookDocumentation": "\n         <simpara>The name of the column.</simpara>\n      ",
                            "documentation": "\n         <p>The name of the column.</p>\n      ",
                            "required": true,
                            "shape_name": "NameString",
                            "min_length": 1,
                            "max_length": 255
                          },
                          "SortOrder": {
                            "type": "integer",
                            "zonbookDocumentation": "\n         <simpara>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</simpara>\n      ",
                            "documentation": "\n         <p>Indicates that the column is sorted in ascending order\n      (<code>== 1</code>), or in descending order (<code>==0</code>).</p>\n      ",
                            "required": true,
                            "shape_name": "IntegerFlag",
                            "min_length": 0,
                            "max_length": 1
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>Specifies the sort order of a sorted column.</simpara>\n      ",
                        "documentation": "\n         <p>Specifies the sort order of a sorted column.</p>\n      ",
                        "shape_name": "Order"
                      }
                    },
                    "Parameters": {
                      "type": "map",
                      "zonbookDocumentation": "\n         <simpara>User-supplied properties in key-value form.</simpara>\n      ",
                      "documentation": "\n         <p>User-supplied properties in key-value form.</p>\n      ",
                      "shape_name": "ParametersMap",
                      "keys": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "shape_name": "KeyString",
                        "documentation": null,
                        "min_length": 1,
                        "max_length": 255
                      },
                      "members": {
                        "type": "string",
                        "shape_name": "ParametersMapValue",
                        "documentation": null,
                        "max_length": 512000
                      }
                    },
                    "SkewedInfo": {
                      "type": "structure",
                      "members": {
                        "SkewedColumnNames": {
                          "type": "list",
                          "zonbookDocumentation": "\n         <simpara>A list of names of columns that contain skewed values.</simpara>\n      ",
                          "documentation": "\n         <p>A list of names of columns that contain skewed values.</p>\n      ",
                          "shape_name": "NameStringList",
                          "members": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "shape_name": "NameString",
                            "documentation": null,
                            "min_length": 1,
                            "max_length": 255
                          }
                        },
                        "SkewedColumnValues": {
                          "type": "list",
                          "zonbookDocumentation": "\n         <simpara>A list of values that appear so frequently as to be considered\n      skewed.</simpara>\n      ",
                          "documentation": "\n         <p>A list of values that appear so frequently as to be considered\n      skewed.</p>\n      ",
                          "shape_name": "ColumnValueStringList",
                          "members": {
                            "type": "string",
                            "shape_name": "ColumnValuesString",
                            "documentation": null
                          }
                        },
                        "SkewedColumnValueLocationMaps": {
                          "type": "map",
                          "zonbookDocumentation": "\n         <simpara>A mapping of skewed values to the columns that contain them.</simpara>\n      ",
                          "documentation": "\n         <p>A mapping of skewed values to the columns that contain them.</p>\n      ",
                          "shape_name": "LocationMap",
                          "keys": {
                            "type": "string",
                            "shape_name": "ColumnValuesString",
                            "documentation": null
                          },
                          "members": {
                            "type": "string",
                            "shape_name": "ColumnValuesString",
                            "documentation": null
                          }
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Information about values that appear very frequently in a column\n      (skewed values).</simpara>\n      ",
                      "documentation": "\n         <p>Information about values that appear very frequently in a column\n      (skewed values).</p>\n      ",
                      "shape_name": "SkewedInfo"
                    },
                    "StoredAsSubDirectories": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n         <simpara>True if the table data is stored in subdirectories, or False if not.</simpara>\n      ",
                      "documentation": "\n         <p>True if the table data is stored in subdirectories, or False if not.</p>\n      ",
                      "shape_name": "Boolean"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Provides information about the physical\n      location where the partition is stored.</simpara>\n      ",
                  "documentation": "\n         <p>Provides information about the physical\n      location where the partition is stored.</p>\n      ",
                  "shape_name": "StorageDescriptor"
                },
                "Parameters": {
                  "type": "map",
                  "zonbookDocumentation": "\n         <simpara>Partition parameters, in the form of a list of key-value pairs.</simpara>\n      ",
                  "documentation": "\n         <p>Partition parameters, in the form of a list of key-value pairs.</p>\n      ",
                  "shape_name": "ParametersMap",
                  "keys": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "shape_name": "KeyString",
                    "documentation": null,
                    "min_length": 1,
                    "max_length": 255
                  },
                  "members": {
                    "type": "string",
                    "shape_name": "ParametersMapValue",
                    "documentation": null,
                    "max_length": 512000
                  }
                },
                "LastAnalyzedTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The last time at which column statistics were computed for this\n      partition.</simpara>\n      ",
                  "documentation": "\n         <p>The last time at which column statistics were computed for this\n      partition.</p>\n      ",
                  "shape_name": "Timestamp"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Represents a slice of table data.</simpara>\n      ",
              "documentation": "\n         <p>Represents a slice of table data.</p>\n      ",
              "shape_name": "Partition"
            }
          },
          "UnprocessedKeys": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of the partition values in the request for\n      which partions were not returned.</simpara>\n      ",
            "documentation": "\n         <p>A list of the partition values in the request for\n      which partions were not returned.</p>\n      ",
            "shape_name": "BatchGetPartitionValueList",
            "min_length": 0,
            "max_length": 1000,
            "members": {
              "type": "structure",
              "members": {
                "Values": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>The list of values.</simpara>\n      ",
                  "documentation": "\n         <p>The list of values.</p>\n      ",
                  "required": true,
                  "shape_name": "ValueStringList",
                  "members": {
                    "type": "string",
                    "shape_name": "ValueString",
                    "documentation": null,
                    "max_length": 1024
                  }
                }
              },
              "zonbookDocumentation": "\n         <simpara>Contains a list of values defining partitions.</simpara>\n      ",
              "documentation": "\n         <p>Contains a list of values defining partitions.</p>\n      ",
              "shape_name": "PartitionValueList"
            }
          }
        },
        "shape_name": "BatchGetPartitionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        }
      ],
      "documentation": "\n         <p>Retrieves partitions in a batch request.</p>\n      "
    },
    "CreateUserDefinedFunction": {
      "name": "CreateUserDefinedFunction",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog in which to create the function.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog in which to create the function.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the catalog database in which to create the function.</simpara>\n      ",
            "documentation": "\n         <p>The name of the catalog database in which to create the function.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "FunctionInput": {
            "type": "structure",
            "members": {
              "FunctionName": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The name of the function.</simpara>\n      ",
                "documentation": "\n         <p>The name of the function.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "ClassName": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The Java class that contains the function code.</simpara>\n      ",
                "documentation": "\n         <p>The Java class that contains the function code.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "OwnerName": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The owner of the function.</simpara>\n      ",
                "documentation": "\n         <p>The owner of the function.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "OwnerType": {
                "type": "string",
                "enum": [
                  "USER",
                  "ROLE",
                  "GROUP"
                ],
                "zonbookDocumentation": "\n         <simpara>The owner type.</simpara>\n      ",
                "documentation": "\n         <p>The owner type.</p>\n      ",
                "shape_name": "PrincipalType"
              },
              "ResourceUris": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>The resource URIs for the function.</simpara>\n      ",
                "documentation": "\n         <p>The resource URIs for the function.</p>\n      ",
                "shape_name": "ResourceUriList",
                "min_length": 0,
                "max_length": 1000,
                "members": {
                  "type": "structure",
                  "members": {
                    "ResourceType": {
                      "type": "string",
                      "enum": [
                        "JAR",
                        "FILE",
                        "ARCHIVE"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The type of the resource.</simpara>\n      ",
                      "documentation": "\n         <p>The type of the resource.</p>\n      ",
                      "shape_name": "ResourceType"
                    },
                    "Uri": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The URI for accessing the resource.</simpara>\n      ",
                      "documentation": "\n         <p>The URI for accessing the resource.</p>\n      ",
                      "shape_name": "URI",
                      "min_length": 1,
                      "max_length": 1024
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>URIs for function resources.</simpara>\n      ",
                  "documentation": "\n         <p>URIs for function resources.</p>\n      ",
                  "shape_name": "ResourceUri"
                }
              }
            },
            "zonbookDocumentation": "\n         <simpara>A <code>FunctionInput</code> object that defines the function\n      to create in the Data Catalog.</simpara>\n      ",
            "documentation": "\n         <p>A <code>FunctionInput</code> object that defines the function\n      to create in the Data Catalog.</p>\n      ",
            "required": true,
            "shape_name": "UserDefinedFunctionInput"
          }
        },
        "shape_name": "CreateUserDefinedFunctionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "CreateUserDefinedFunctionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource to be created or added already exists.</simpara>\n      ",
          "documentation": "\n         <p>A resource to be created or added already exists.</p>\n      ",
          "shape_name": "AlreadyExistsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource numerical limit was exceeded.</simpara>\n      ",
          "documentation": "\n         <p>A resource numerical limit was exceeded.</p>\n      ",
          "shape_name": "ResourceNumberLimitExceededException"
        }
      ],
      "documentation": "\n         <p>Creates a new function definition in the Data Catalog.</p>\n      "
    },
    "DeleteUserDefinedFunction": {
      "name": "DeleteUserDefinedFunction",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog where the function to be deleted is\n      located. If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog where the function to be deleted is\n      located. If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the catalog database where the function is located.</simpara>\n      ",
            "documentation": "\n         <p>The name of the catalog database where the function is located.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "FunctionName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the function definition to be deleted.</simpara>\n      ",
            "documentation": "\n         <p>The name of the function definition to be deleted.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "DeleteUserDefinedFunctionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "DeleteUserDefinedFunctionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Deletes an existing function definition from the Data Catalog.</p>\n      "
    },
    "GetUserDefinedFunctions": {
      "name": "GetUserDefinedFunctions",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog where the functions to be retrieved are\n      located. If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog where the functions to be retrieved are\n      located. If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the catalog database where the functions are located.</simpara>\n      ",
            "documentation": "\n         <p>The name of the catalog database where the functions are located.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "Pattern": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>An optional function-name pattern string that filters the function\n      definitions returned.</simpara>\n      ",
            "documentation": "\n         <p>An optional function-name pattern string that filters the function\n      definitions returned.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, if this is a continuation call.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, if this is a continuation call.</p>\n      ",
            "shape_name": "Token"
          },
          "MaxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The maximum number of functions to return in one response.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of functions to return in one response.</p>\n      ",
            "shape_name": "PageSize",
            "min_length": 1,
            "max_length": 1000
          }
        },
        "shape_name": "GetUserDefinedFunctionsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "UserDefinedFunctions": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of requested function definitions.</simpara>\n      ",
            "documentation": "\n         <p>A list of requested function definitions.</p>\n      ",
            "shape_name": "UserDefinedFunctionList",
            "members": {
              "type": "structure",
              "members": {
                "FunctionName": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The name of the function.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the function.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "ClassName": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The Java class that contains the function code.</simpara>\n      ",
                  "documentation": "\n         <p>The Java class that contains the function code.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "OwnerName": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The owner of the function.</simpara>\n      ",
                  "documentation": "\n         <p>The owner of the function.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "OwnerType": {
                  "type": "string",
                  "enum": [
                    "USER",
                    "ROLE",
                    "GROUP"
                  ],
                  "zonbookDocumentation": "\n         <simpara>The owner type.</simpara>\n      ",
                  "documentation": "\n         <p>The owner type.</p>\n      ",
                  "shape_name": "PrincipalType"
                },
                "CreateTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The time at which the function was created.</simpara>\n      ",
                  "documentation": "\n         <p>The time at which the function was created.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "ResourceUris": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>The resource URIs for the function.</simpara>\n      ",
                  "documentation": "\n         <p>The resource URIs for the function.</p>\n      ",
                  "shape_name": "ResourceUriList",
                  "min_length": 0,
                  "max_length": 1000,
                  "members": {
                    "type": "structure",
                    "members": {
                      "ResourceType": {
                        "type": "string",
                        "enum": [
                          "JAR",
                          "FILE",
                          "ARCHIVE"
                        ],
                        "zonbookDocumentation": "\n         <simpara>The type of the resource.</simpara>\n      ",
                        "documentation": "\n         <p>The type of the resource.</p>\n      ",
                        "shape_name": "ResourceType"
                      },
                      "Uri": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                        "zonbookDocumentation": "\n         <simpara>The URI for accessing the resource.</simpara>\n      ",
                        "documentation": "\n         <p>The URI for accessing the resource.</p>\n      ",
                        "shape_name": "URI",
                        "min_length": 1,
                        "max_length": 1024
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>URIs for function resources.</simpara>\n      ",
                    "documentation": "\n         <p>URIs for function resources.</p>\n      ",
                    "shape_name": "ResourceUri"
                  }
                }
              },
              "zonbookDocumentation": "\n         <simpara>Represents the equivalent of a Hive user-defined function\n      (<code>UDF</code>) definition.</simpara>\n      ",
              "documentation": "\n         <p>Represents the equivalent of a Hive user-defined function\n      (<code>UDF</code>) definition.</p>\n      ",
              "shape_name": "UserDefinedFunction"
            }
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, if the list of functions returned does\n      not include the last requested function.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, if the list of functions returned does\n      not include the last requested function.</p>\n      ",
            "shape_name": "Token"
          }
        },
        "shape_name": "GetUserDefinedFunctionsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        }
      ],
      "documentation": "\n         <p>Retrieves a multiple function definitions from the Data Catalog.</p>\n      "
    },
    "UpdateUserDefinedFunction": {
      "name": "UpdateUserDefinedFunction",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog where the function to be updated is\n      located. If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog where the function to be updated is\n      located. If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the catalog database where the function to be updated is\n      located.</simpara>\n      ",
            "documentation": "\n         <p>The name of the catalog database where the function to be updated is\n      located.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "FunctionName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the function.</simpara>\n      ",
            "documentation": "\n         <p>The name of the function.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "FunctionInput": {
            "type": "structure",
            "members": {
              "FunctionName": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The name of the function.</simpara>\n      ",
                "documentation": "\n         <p>The name of the function.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "ClassName": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The Java class that contains the function code.</simpara>\n      ",
                "documentation": "\n         <p>The Java class that contains the function code.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "OwnerName": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The owner of the function.</simpara>\n      ",
                "documentation": "\n         <p>The owner of the function.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "OwnerType": {
                "type": "string",
                "enum": [
                  "USER",
                  "ROLE",
                  "GROUP"
                ],
                "zonbookDocumentation": "\n         <simpara>The owner type.</simpara>\n      ",
                "documentation": "\n         <p>The owner type.</p>\n      ",
                "shape_name": "PrincipalType"
              },
              "ResourceUris": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>The resource URIs for the function.</simpara>\n      ",
                "documentation": "\n         <p>The resource URIs for the function.</p>\n      ",
                "shape_name": "ResourceUriList",
                "min_length": 0,
                "max_length": 1000,
                "members": {
                  "type": "structure",
                  "members": {
                    "ResourceType": {
                      "type": "string",
                      "enum": [
                        "JAR",
                        "FILE",
                        "ARCHIVE"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The type of the resource.</simpara>\n      ",
                      "documentation": "\n         <p>The type of the resource.</p>\n      ",
                      "shape_name": "ResourceType"
                    },
                    "Uri": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The URI for accessing the resource.</simpara>\n      ",
                      "documentation": "\n         <p>The URI for accessing the resource.</p>\n      ",
                      "shape_name": "URI",
                      "min_length": 1,
                      "max_length": 1024
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>URIs for function resources.</simpara>\n      ",
                  "documentation": "\n         <p>URIs for function resources.</p>\n      ",
                  "shape_name": "ResourceUri"
                }
              }
            },
            "zonbookDocumentation": "\n         <simpara>A <code>FunctionInput</code> object that re-defines the function\n      in the Data Catalog.</simpara>\n      ",
            "documentation": "\n         <p>A <code>FunctionInput</code> object that re-defines the function\n      in the Data Catalog.</p>\n      ",
            "required": true,
            "shape_name": "UserDefinedFunctionInput"
          }
        },
        "shape_name": "UpdateUserDefinedFunctionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "UpdateUserDefinedFunctionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Updates an existing function definition in the Data Catalog.</p>\n      "
    },
    "GetUserDefinedFunction": {
      "name": "GetUserDefinedFunction",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog where the function to be retrieved is\n      located. If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog where the function to be retrieved is\n      located. If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "DatabaseName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the catalog database where the function is located.</simpara>\n      ",
            "documentation": "\n         <p>The name of the catalog database where the function is located.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "FunctionName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the function.</simpara>\n      ",
            "documentation": "\n         <p>The name of the function.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "GetUserDefinedFunctionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "UserDefinedFunction": {
            "type": "structure",
            "members": {
              "FunctionName": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The name of the function.</simpara>\n      ",
                "documentation": "\n         <p>The name of the function.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "ClassName": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The Java class that contains the function code.</simpara>\n      ",
                "documentation": "\n         <p>The Java class that contains the function code.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "OwnerName": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The owner of the function.</simpara>\n      ",
                "documentation": "\n         <p>The owner of the function.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "OwnerType": {
                "type": "string",
                "enum": [
                  "USER",
                  "ROLE",
                  "GROUP"
                ],
                "zonbookDocumentation": "\n         <simpara>The owner type.</simpara>\n      ",
                "documentation": "\n         <p>The owner type.</p>\n      ",
                "shape_name": "PrincipalType"
              },
              "CreateTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>The time at which the function was created.</simpara>\n      ",
                "documentation": "\n         <p>The time at which the function was created.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "ResourceUris": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>The resource URIs for the function.</simpara>\n      ",
                "documentation": "\n         <p>The resource URIs for the function.</p>\n      ",
                "shape_name": "ResourceUriList",
                "min_length": 0,
                "max_length": 1000,
                "members": {
                  "type": "structure",
                  "members": {
                    "ResourceType": {
                      "type": "string",
                      "enum": [
                        "JAR",
                        "FILE",
                        "ARCHIVE"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The type of the resource.</simpara>\n      ",
                      "documentation": "\n         <p>The type of the resource.</p>\n      ",
                      "shape_name": "ResourceType"
                    },
                    "Uri": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The URI for accessing the resource.</simpara>\n      ",
                      "documentation": "\n         <p>The URI for accessing the resource.</p>\n      ",
                      "shape_name": "URI",
                      "min_length": 1,
                      "max_length": 1024
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>URIs for function resources.</simpara>\n      ",
                  "documentation": "\n         <p>URIs for function resources.</p>\n      ",
                  "shape_name": "ResourceUri"
                }
              }
            },
            "zonbookDocumentation": "\n         <simpara>The requested function definition.</simpara>\n      ",
            "documentation": "\n         <p>The requested function definition.</p>\n      ",
            "shape_name": "UserDefinedFunction"
          }
        },
        "shape_name": "GetUserDefinedFunctionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Retrieves a specified function definition from the Data Catalog.</p>\n      "
    },
    "CreateConnection": {
      "name": "CreateConnection",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog in which to create the connection.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog in which to create the connection.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "ConnectionInput": {
            "type": "structure",
            "members": {
              "Name": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The name of the connection.</simpara>\n      ",
                "documentation": "\n         <p>The name of the connection.</p>\n      ",
                "required": true,
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "Description": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                "zonbookDocumentation": "\n         <simpara>Description of the connection.</simpara>\n      ",
                "documentation": "\n         <p>Description of the connection.</p>\n      ",
                "shape_name": "DescriptionString",
                "min_length": 0,
                "max_length": 2048
              },
              "ConnectionType": {
                "type": "string",
                "enum": [
                  "JDBC",
                  "SFTP"
                ],
                "zonbookDocumentation": "\n         <simpara>The type of the connection. Currently, only JDBC is supported; \n      SFTP is not supported.</simpara>\n      ",
                "documentation": "\n         <p>The type of the connection. Currently, only JDBC is supported; \n      SFTP is not supported.</p>\n      ",
                "required": true,
                "shape_name": "ConnectionType"
              },
              "MatchCriteria": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A list of criteria that can be used in selecting this connection.</simpara>\n      ",
                "documentation": "\n         <p>A list of criteria that can be used in selecting this connection.</p>\n      ",
                "shape_name": "MatchCriteria",
                "min_length": 0,
                "max_length": 10,
                "members": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "shape_name": "NameString",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 255
                }
              },
              "ConnectionProperties": {
                "type": "map",
                "zonbookDocumentation": "\n         <simpara>A list of key-value pairs used as parameters for this connection.</simpara>\n      ",
                "documentation": "\n         <p>A list of key-value pairs used as parameters for this connection.</p>\n      ",
                "required": true,
                "shape_name": "ConnectionProperties",
                "min_length": 0,
                "max_length": 100,
                "keys": {
                  "type": "string",
                  "enum": [
                    "HOST",
                    "PORT",
                    "USERNAME",
                    "PASSWORD",
                    "JDBC_DRIVER_JAR_URI",
                    "JDBC_DRIVER_CLASS_NAME",
                    "JDBC_ENGINE",
                    "JDBC_ENGINE_VERSION",
                    "CONFIG_FILES",
                    "INSTANCE_ID",
                    "JDBC_CONNECTION_URL"
                  ],
                  "shape_name": "ConnectionPropertyKey",
                  "documentation": null
                },
                "members": {
                  "type": "string",
                  "shape_name": "ValueString",
                  "documentation": null,
                  "max_length": 1024
                }
              },
              "PhysicalConnectionRequirements": {
                "type": "structure",
                "members": {
                  "SubnetId": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The subnet ID used by the connection.</simpara>\n      ",
                    "documentation": "\n         <p>The subnet ID used by the connection.</p>\n      ",
                    "shape_name": "NameString",
                    "min_length": 1,
                    "max_length": 255
                  },
                  "SecurityGroupIdList": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>The security group ID list used by the connection.</simpara>\n      ",
                    "documentation": "\n         <p>The security group ID list used by the connection.</p>\n      ",
                    "shape_name": "SecurityGroupIdList",
                    "min_length": 0,
                    "max_length": 50,
                    "members": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "shape_name": "NameString",
                      "documentation": null,
                      "min_length": 1,
                      "max_length": 255
                    }
                  },
                  "AvailabilityZone": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The connection's availability zone. This field is deprecated and has no effect.</simpara>\n      ",
                    "documentation": "\n         <p>The connection's availability zone. This field is deprecated and has no effect.</p>\n      ",
                    "shape_name": "NameString",
                    "min_length": 1,
                    "max_length": 255
                  }
                },
                "zonbookDocumentation": "\n         <simpara>A map of physical connection requirements, such as VPC and SecurityGroup,\n      needed for making this connection successfully.</simpara>\n      ",
                "documentation": "\n         <p>A map of physical connection requirements, such as VPC and SecurityGroup,\n      needed for making this connection successfully.</p>\n      ",
                "shape_name": "PhysicalConnectionRequirements"
              }
            },
            "zonbookDocumentation": "\n         <simpara>A <code>ConnectionInput</code> object defining the connection\n      to create.</simpara>\n      ",
            "documentation": "\n         <p>A <code>ConnectionInput</code> object defining the connection\n      to create.</p>\n      ",
            "required": true,
            "shape_name": "ConnectionInput"
          }
        },
        "shape_name": "CreateConnectionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "CreateConnectionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource to be created or added already exists.</simpara>\n      ",
          "documentation": "\n         <p>A resource to be created or added already exists.</p>\n      ",
          "shape_name": "AlreadyExistsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource numerical limit was exceeded.</simpara>\n      ",
          "documentation": "\n         <p>A resource numerical limit was exceeded.</p>\n      ",
          "shape_name": "ResourceNumberLimitExceededException"
        }
      ],
      "documentation": "\n         <p>Creates a connection definition in the Data Catalog.</p>\n      "
    },
    "DeleteConnection": {
      "name": "DeleteConnection",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog in which the connection resides.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog in which the connection resides.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "ConnectionName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the connection to delete.</simpara>\n      ",
            "documentation": "\n         <p>The name of the connection to delete.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "DeleteConnectionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "DeleteConnectionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Deletes a connection from the Data Catalog.</p>\n      "
    },
    "GetConnection": {
      "name": "GetConnection",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog in which the connection resides.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog in which the connection resides.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the connection definition to retrieve.</simpara>\n      ",
            "documentation": "\n         <p>The name of the connection definition to retrieve.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "GetConnectionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Connection": {
            "type": "structure",
            "members": {
              "Name": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The name of the connection definition.</simpara>\n      ",
                "documentation": "\n         <p>The name of the connection definition.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "Description": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                "zonbookDocumentation": "\n         <simpara>Description of the connection.</simpara>\n      ",
                "documentation": "\n         <p>Description of the connection.</p>\n      ",
                "shape_name": "DescriptionString",
                "min_length": 0,
                "max_length": 2048
              },
              "ConnectionType": {
                "type": "string",
                "enum": [
                  "JDBC",
                  "SFTP"
                ],
                "zonbookDocumentation": "\n         <simpara>The type of the connection. Currently, only JDBC is supported; \n      SFTP is not supported.</simpara>\n      ",
                "documentation": "\n         <p>The type of the connection. Currently, only JDBC is supported; \n      SFTP is not supported.</p>\n      ",
                "shape_name": "ConnectionType"
              },
              "MatchCriteria": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A list of criteria that can be used in selecting this connection.</simpara>\n      ",
                "documentation": "\n         <p>A list of criteria that can be used in selecting this connection.</p>\n      ",
                "shape_name": "MatchCriteria",
                "min_length": 0,
                "max_length": 10,
                "members": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "shape_name": "NameString",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 255
                }
              },
              "ConnectionProperties": {
                "type": "map",
                "zonbookDocumentation": "\n         <simpara>A list of key-value pairs used as parameters for this connection.</simpara>\n      ",
                "documentation": "\n         <p>A list of key-value pairs used as parameters for this connection.</p>\n      ",
                "shape_name": "ConnectionProperties",
                "min_length": 0,
                "max_length": 100,
                "keys": {
                  "type": "string",
                  "enum": [
                    "HOST",
                    "PORT",
                    "USERNAME",
                    "PASSWORD",
                    "JDBC_DRIVER_JAR_URI",
                    "JDBC_DRIVER_CLASS_NAME",
                    "JDBC_ENGINE",
                    "JDBC_ENGINE_VERSION",
                    "CONFIG_FILES",
                    "INSTANCE_ID",
                    "JDBC_CONNECTION_URL"
                  ],
                  "shape_name": "ConnectionPropertyKey",
                  "documentation": null
                },
                "members": {
                  "type": "string",
                  "shape_name": "ValueString",
                  "documentation": null,
                  "max_length": 1024
                }
              },
              "PhysicalConnectionRequirements": {
                "type": "structure",
                "members": {
                  "SubnetId": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The subnet ID used by the connection.</simpara>\n      ",
                    "documentation": "\n         <p>The subnet ID used by the connection.</p>\n      ",
                    "shape_name": "NameString",
                    "min_length": 1,
                    "max_length": 255
                  },
                  "SecurityGroupIdList": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>The security group ID list used by the connection.</simpara>\n      ",
                    "documentation": "\n         <p>The security group ID list used by the connection.</p>\n      ",
                    "shape_name": "SecurityGroupIdList",
                    "min_length": 0,
                    "max_length": 50,
                    "members": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "shape_name": "NameString",
                      "documentation": null,
                      "min_length": 1,
                      "max_length": 255
                    }
                  },
                  "AvailabilityZone": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The connection's availability zone. This field is deprecated and has no effect.</simpara>\n      ",
                    "documentation": "\n         <p>The connection's availability zone. This field is deprecated and has no effect.</p>\n      ",
                    "shape_name": "NameString",
                    "min_length": 1,
                    "max_length": 255
                  }
                },
                "zonbookDocumentation": "\n         <simpara>A map of physical connection requirements, such as VPC and SecurityGroup,\n      needed for making this connection successfully.</simpara>\n      ",
                "documentation": "\n         <p>A map of physical connection requirements, such as VPC and SecurityGroup,\n      needed for making this connection successfully.</p>\n      ",
                "shape_name": "PhysicalConnectionRequirements"
              },
              "CreationTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>The time this connection definition was created.</simpara>\n      ",
                "documentation": "\n         <p>The time this connection definition was created.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "LastUpdatedTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>The last time this connection definition was updated.</simpara>\n      ",
                "documentation": "\n         <p>The last time this connection definition was updated.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "LastUpdatedBy": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The user, group or role that last updated this connection definition.</simpara>\n      ",
                "documentation": "\n         <p>The user, group or role that last updated this connection definition.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              }
            },
            "zonbookDocumentation": "\n         <simpara>The requested connection definition.</simpara>\n      ",
            "documentation": "\n         <p>The requested connection definition.</p>\n      ",
            "shape_name": "Connection"
          }
        },
        "shape_name": "GetConnectionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Retrieves a connection definition from the Data Catalog.</p>\n      "
    },
    "BatchDeleteConnection": {
      "name": "BatchDeleteConnection",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog in which the connections reside.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog in which the connections reside.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "ConnectionNameList": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of names of the connections to delete.</simpara>\n      ",
            "documentation": "\n         <p>A list of names of the connections to delete.</p>\n      ",
            "required": true,
            "shape_name": "DeleteConnectionNameList",
            "min_length": 0,
            "max_length": 25,
            "members": {
              "type": "string",
              "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
              "shape_name": "NameString",
              "documentation": null,
              "min_length": 1,
              "max_length": 255
            }
          }
        },
        "shape_name": "BatchDeleteConnectionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Succeeded": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of names of the connection definitions that were\n       successfully deleted.</simpara>\n      ",
            "documentation": "\n         <p>A list of names of the connection definitions that were\n       successfully deleted.</p>\n      ",
            "shape_name": "NameStringList",
            "members": {
              "type": "string",
              "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
              "shape_name": "NameString",
              "documentation": null,
              "min_length": 1,
              "max_length": 255
            }
          },
          "Errors": {
            "type": "map",
            "zonbookDocumentation": "\n         <simpara>A map of the names of connections that were not successfully\n       deleted to error details.</simpara>\n      ",
            "documentation": "\n         <p>A map of the names of connections that were not successfully\n       deleted to error details.</p>\n      ",
            "shape_name": "ErrorByName",
            "keys": {
              "type": "string",
              "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
              "shape_name": "NameString",
              "documentation": null,
              "min_length": 1,
              "max_length": 255
            },
            "members": {
              "type": "structure",
              "members": {
                "ErrorCode": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The code associated with this error.</simpara>\n      ",
                  "documentation": "\n         <p>The code associated with this error.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "ErrorMessage": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                  "zonbookDocumentation": "\n         <simpara>A message describing the error.</simpara>\n      ",
                  "documentation": "\n         <p>A message describing the error.</p>\n      ",
                  "shape_name": "DescriptionString",
                  "min_length": 0,
                  "max_length": 2048
                }
              },
              "zonbookDocumentation": "\n         <simpara>Contains details about an error.</simpara>\n      ",
              "documentation": "\n         <p>Contains details about an error.</p>\n      ",
              "shape_name": "ErrorDetail"
            }
          }
        },
        "shape_name": "BatchDeleteConnectionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Deletes a list of connection definitions from the Data Catalog.</p>\n      "
    },
    "GetConnections": {
      "name": "GetConnections",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog in which the connections reside.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog in which the connections reside.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "Filter": {
            "type": "structure",
            "members": {
              "MatchCriteria": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A criteria string that must match the criteria recorded in the\n       connection definition for that connection definition to be returned.</simpara>\n      ",
                "documentation": "\n         <p>A criteria string that must match the criteria recorded in the\n       connection definition for that connection definition to be returned.</p>\n      ",
                "shape_name": "MatchCriteria",
                "min_length": 0,
                "max_length": 10,
                "members": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "shape_name": "NameString",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 255
                }
              },
              "ConnectionType": {
                "type": "string",
                "enum": [
                  "JDBC",
                  "SFTP"
                ],
                "zonbookDocumentation": "\n         <simpara>The type of connections to return. Currently, only JDBC is supported; \n      SFTP is not supported.</simpara>\n      ",
                "documentation": "\n         <p>The type of connections to return. Currently, only JDBC is supported; \n      SFTP is not supported.</p>\n      ",
                "shape_name": "ConnectionType"
              }
            },
            "zonbookDocumentation": "\n         <simpara>A filter that controls which connections will be returned.</simpara>\n      ",
            "documentation": "\n         <p>A filter that controls which connections will be returned.</p>\n      ",
            "shape_name": "GetConnectionsFilter"
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, if this is a continuation call.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, if this is a continuation call.</p>\n      ",
            "shape_name": "Token"
          },
          "MaxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The maximum number of connections to return in one response.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of connections to return in one response.</p>\n      ",
            "shape_name": "PageSize",
            "min_length": 1,
            "max_length": 1000
          }
        },
        "shape_name": "GetConnectionsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "ConnectionList": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of requested connection definitions.</simpara>\n      ",
            "documentation": "\n         <p>A list of requested connection definitions.</p>\n      ",
            "shape_name": "ConnectionList",
            "members": {
              "type": "structure",
              "members": {
                "Name": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The name of the connection definition.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the connection definition.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "Description": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                  "zonbookDocumentation": "\n         <simpara>Description of the connection.</simpara>\n      ",
                  "documentation": "\n         <p>Description of the connection.</p>\n      ",
                  "shape_name": "DescriptionString",
                  "min_length": 0,
                  "max_length": 2048
                },
                "ConnectionType": {
                  "type": "string",
                  "enum": [
                    "JDBC",
                    "SFTP"
                  ],
                  "zonbookDocumentation": "\n         <simpara>The type of the connection. Currently, only JDBC is supported; \n      SFTP is not supported.</simpara>\n      ",
                  "documentation": "\n         <p>The type of the connection. Currently, only JDBC is supported; \n      SFTP is not supported.</p>\n      ",
                  "shape_name": "ConnectionType"
                },
                "MatchCriteria": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>A list of criteria that can be used in selecting this connection.</simpara>\n      ",
                  "documentation": "\n         <p>A list of criteria that can be used in selecting this connection.</p>\n      ",
                  "shape_name": "MatchCriteria",
                  "min_length": 0,
                  "max_length": 10,
                  "members": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "shape_name": "NameString",
                    "documentation": null,
                    "min_length": 1,
                    "max_length": 255
                  }
                },
                "ConnectionProperties": {
                  "type": "map",
                  "zonbookDocumentation": "\n         <simpara>A list of key-value pairs used as parameters for this connection.</simpara>\n      ",
                  "documentation": "\n         <p>A list of key-value pairs used as parameters for this connection.</p>\n      ",
                  "shape_name": "ConnectionProperties",
                  "min_length": 0,
                  "max_length": 100,
                  "keys": {
                    "type": "string",
                    "enum": [
                      "HOST",
                      "PORT",
                      "USERNAME",
                      "PASSWORD",
                      "JDBC_DRIVER_JAR_URI",
                      "JDBC_DRIVER_CLASS_NAME",
                      "JDBC_ENGINE",
                      "JDBC_ENGINE_VERSION",
                      "CONFIG_FILES",
                      "INSTANCE_ID",
                      "JDBC_CONNECTION_URL"
                    ],
                    "shape_name": "ConnectionPropertyKey",
                    "documentation": null
                  },
                  "members": {
                    "type": "string",
                    "shape_name": "ValueString",
                    "documentation": null,
                    "max_length": 1024
                  }
                },
                "PhysicalConnectionRequirements": {
                  "type": "structure",
                  "members": {
                    "SubnetId": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The subnet ID used by the connection.</simpara>\n      ",
                      "documentation": "\n         <p>The subnet ID used by the connection.</p>\n      ",
                      "shape_name": "NameString",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "SecurityGroupIdList": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>The security group ID list used by the connection.</simpara>\n      ",
                      "documentation": "\n         <p>The security group ID list used by the connection.</p>\n      ",
                      "shape_name": "SecurityGroupIdList",
                      "min_length": 0,
                      "max_length": 50,
                      "members": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "shape_name": "NameString",
                        "documentation": null,
                        "min_length": 1,
                        "max_length": 255
                      }
                    },
                    "AvailabilityZone": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The connection's availability zone. This field is deprecated and has no effect.</simpara>\n      ",
                      "documentation": "\n         <p>The connection's availability zone. This field is deprecated and has no effect.</p>\n      ",
                      "shape_name": "NameString",
                      "min_length": 1,
                      "max_length": 255
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>A map of physical connection requirements, such as VPC and SecurityGroup,\n      needed for making this connection successfully.</simpara>\n      ",
                  "documentation": "\n         <p>A map of physical connection requirements, such as VPC and SecurityGroup,\n      needed for making this connection successfully.</p>\n      ",
                  "shape_name": "PhysicalConnectionRequirements"
                },
                "CreationTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The time this connection definition was created.</simpara>\n      ",
                  "documentation": "\n         <p>The time this connection definition was created.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "LastUpdatedTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The last time this connection definition was updated.</simpara>\n      ",
                  "documentation": "\n         <p>The last time this connection definition was updated.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "LastUpdatedBy": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The user, group or role that last updated this connection definition.</simpara>\n      ",
                  "documentation": "\n         <p>The user, group or role that last updated this connection definition.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                }
              },
              "zonbookDocumentation": "\n         <simpara>Defines a connection to a data source.</simpara>\n      ",
              "documentation": "\n         <p>Defines a connection to a data source.</p>\n      ",
              "shape_name": "Connection"
            }
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, if the list of connections returned does not\n      include the last of the filtered connections.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, if the list of connections returned does not\n      include the last of the filtered connections.</p>\n      ",
            "shape_name": "Token"
          }
        },
        "shape_name": "GetConnectionsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Retrieves a list of connection definitions from the Data Catalog.</p>\n      "
    },
    "UpdateConnection": {
      "name": "UpdateConnection",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog in which the connection resides.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog in which the connection resides.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the connection definition to update.</simpara>\n      ",
            "documentation": "\n         <p>The name of the connection definition to update.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "ConnectionInput": {
            "type": "structure",
            "members": {
              "Name": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The name of the connection.</simpara>\n      ",
                "documentation": "\n         <p>The name of the connection.</p>\n      ",
                "required": true,
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "Description": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                "zonbookDocumentation": "\n         <simpara>Description of the connection.</simpara>\n      ",
                "documentation": "\n         <p>Description of the connection.</p>\n      ",
                "shape_name": "DescriptionString",
                "min_length": 0,
                "max_length": 2048
              },
              "ConnectionType": {
                "type": "string",
                "enum": [
                  "JDBC",
                  "SFTP"
                ],
                "zonbookDocumentation": "\n         <simpara>The type of the connection. Currently, only JDBC is supported; \n      SFTP is not supported.</simpara>\n      ",
                "documentation": "\n         <p>The type of the connection. Currently, only JDBC is supported; \n      SFTP is not supported.</p>\n      ",
                "required": true,
                "shape_name": "ConnectionType"
              },
              "MatchCriteria": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A list of criteria that can be used in selecting this connection.</simpara>\n      ",
                "documentation": "\n         <p>A list of criteria that can be used in selecting this connection.</p>\n      ",
                "shape_name": "MatchCriteria",
                "min_length": 0,
                "max_length": 10,
                "members": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "shape_name": "NameString",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 255
                }
              },
              "ConnectionProperties": {
                "type": "map",
                "zonbookDocumentation": "\n         <simpara>A list of key-value pairs used as parameters for this connection.</simpara>\n      ",
                "documentation": "\n         <p>A list of key-value pairs used as parameters for this connection.</p>\n      ",
                "required": true,
                "shape_name": "ConnectionProperties",
                "min_length": 0,
                "max_length": 100,
                "keys": {
                  "type": "string",
                  "enum": [
                    "HOST",
                    "PORT",
                    "USERNAME",
                    "PASSWORD",
                    "JDBC_DRIVER_JAR_URI",
                    "JDBC_DRIVER_CLASS_NAME",
                    "JDBC_ENGINE",
                    "JDBC_ENGINE_VERSION",
                    "CONFIG_FILES",
                    "INSTANCE_ID",
                    "JDBC_CONNECTION_URL"
                  ],
                  "shape_name": "ConnectionPropertyKey",
                  "documentation": null
                },
                "members": {
                  "type": "string",
                  "shape_name": "ValueString",
                  "documentation": null,
                  "max_length": 1024
                }
              },
              "PhysicalConnectionRequirements": {
                "type": "structure",
                "members": {
                  "SubnetId": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The subnet ID used by the connection.</simpara>\n      ",
                    "documentation": "\n         <p>The subnet ID used by the connection.</p>\n      ",
                    "shape_name": "NameString",
                    "min_length": 1,
                    "max_length": 255
                  },
                  "SecurityGroupIdList": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>The security group ID list used by the connection.</simpara>\n      ",
                    "documentation": "\n         <p>The security group ID list used by the connection.</p>\n      ",
                    "shape_name": "SecurityGroupIdList",
                    "min_length": 0,
                    "max_length": 50,
                    "members": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "shape_name": "NameString",
                      "documentation": null,
                      "min_length": 1,
                      "max_length": 255
                    }
                  },
                  "AvailabilityZone": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The connection's availability zone. This field is deprecated and has no effect.</simpara>\n      ",
                    "documentation": "\n         <p>The connection's availability zone. This field is deprecated and has no effect.</p>\n      ",
                    "shape_name": "NameString",
                    "min_length": 1,
                    "max_length": 255
                  }
                },
                "zonbookDocumentation": "\n         <simpara>A map of physical connection requirements, such as VPC and SecurityGroup,\n      needed for making this connection successfully.</simpara>\n      ",
                "documentation": "\n         <p>A map of physical connection requirements, such as VPC and SecurityGroup,\n      needed for making this connection successfully.</p>\n      ",
                "shape_name": "PhysicalConnectionRequirements"
              }
            },
            "zonbookDocumentation": "\n         <simpara>A <code>ConnectionInput</code> object that redefines the connection\n      in question.</simpara>\n      ",
            "documentation": "\n         <p>A <code>ConnectionInput</code> object that redefines the connection\n      in question.</p>\n      ",
            "required": true,
            "shape_name": "ConnectionInput"
          }
        },
        "shape_name": "UpdateConnectionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "UpdateConnectionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Updates a connection definition in the Data Catalog.</p>\n      "
    },
    "ImportCatalogToGlue": {
      "name": "ImportCatalogToGlue",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the catalog to import. Currently, this should be the AWS account ID.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the catalog to import. Currently, this should be the AWS account ID.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "ImportCatalogToGlueRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "ImportCatalogToGlueResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Imports an existing Athena Data Catalog to AWS Glue</p>\n      "
    },
    "GetCatalogImportStatus": {
      "name": "GetCatalogImportStatus",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the catalog to migrate. Currently, this should be the AWS account ID.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the catalog to migrate. Currently, this should be the AWS account ID.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "GetCatalogImportStatusRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "ImportStatus": {
            "type": "structure",
            "members": {
              "ImportCompleted": {
                "type": "boolean",
                "zonbookDocumentation": "\n         <simpara>True if the migration has completed, or False otherwise.</simpara>\n      ",
                "documentation": "\n         <p>True if the migration has completed, or False otherwise.</p>\n      ",
                "shape_name": "Boolean"
              },
              "ImportTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>The time that the migration was started.</simpara>\n      ",
                "documentation": "\n         <p>The time that the migration was started.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "ImportedBy": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The name of the person who initiated the migration.</simpara>\n      ",
                "documentation": "\n         <p>The name of the person who initiated the migration.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              }
            },
            "zonbookDocumentation": "\n         <simpara>The status of the specified catalog migration.</simpara>\n      ",
            "documentation": "\n         <p>The status of the specified catalog migration.</p>\n      ",
            "shape_name": "CatalogImportStatus"
          }
        },
        "shape_name": "GetCatalogImportStatusResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Retrieves the status of a migration operation.</p>\n      "
    },
    "CreateClassifier": {
      "name": "CreateClassifier",
      "input": {
        "type": "structure",
        "members": {
          "GrokClassifier": {
            "type": "structure",
            "members": {
              "Classification": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>An identifier of the data format that the classifier matches,\n      such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.</simpara>\n      ",
                "documentation": "\n         <p>An identifier of the data format that the classifier matches,\n      such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.</p>\n      ",
                "required": true,
                "shape_name": "Classification"
              },
              "Name": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The name of the new classifier.</simpara>\n      ",
                "documentation": "\n         <p>The name of the new classifier.</p>\n      ",
                "required": true,
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "GrokPattern": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\t]*",
                "zonbookDocumentation": "\n         <simpara>The grok pattern used by this classifier.</simpara>\n      ",
                "documentation": "\n         <p>The grok pattern used by this classifier.</p>\n      ",
                "required": true,
                "shape_name": "GrokPattern",
                "min_length": 1,
                "max_length": 2048
              },
              "CustomPatterns": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                "zonbookDocumentation": "\n         <simpara>Optional custom grok patterns used by this classifier.</simpara>\n      ",
                "documentation": "\n         <p>Optional custom grok patterns used by this classifier.</p>\n      ",
                "shape_name": "CustomPatterns",
                "min_length": 0,
                "max_length": 16000
              }
            },
            "zonbookDocumentation": "\n         <simpara>A <code>GrokClassifier</code> object specifying the classifier\n      to create.</simpara>\n      ",
            "documentation": "\n         <p>A <code>GrokClassifier</code> object specifying the classifier\n      to create.</p>\n      ",
            "shape_name": "CreateGrokClassifierRequest"
          },
          "XMLClassifier": {
            "type": "structure",
            "members": {
              "Classification": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>An identifier of the data format that the classifier matches.</simpara>\n      ",
                "documentation": "\n         <p>An identifier of the data format that the classifier matches.</p>\n      ",
                "required": true,
                "shape_name": "Classification"
              },
              "Name": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The name of the classifier.</simpara>\n      ",
                "documentation": "\n         <p>The name of the classifier.</p>\n      ",
                "required": true,
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "RowTag": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The XML tag designating the element that contains each record\n      in an XML document being parsed. Note that this cannot identify a self-closing\n      element (closed by <code>/&gt;</code>).  An empty row element that contains only\n      attributes can be parsed as long as it ends with a closing tag (for example,\n      <code>&lt;row item_a=\"A\" item_b=\"B\"&gt;&lt;/row&gt;</code> is okay,\n      but <code>&lt;row item_a=\"A\" item_b=\"B\" /&gt;</code> is not).</simpara>\n      ",
                "documentation": "\n         <p>The XML tag designating the element that contains each record\n      in an XML document being parsed. Note that this cannot identify a self-closing\n      element (closed by <code>/&gt;</code>).  An empty row element that contains only\n      attributes can be parsed as long as it ends with a closing tag (for example,\n      <code>&lt;row item_a=\"A\" item_b=\"B\"&gt;&lt;/row&gt;</code> is okay,\n      but <code>&lt;row item_a=\"A\" item_b=\"B\" /&gt;</code> is not).</p>\n      ",
                "shape_name": "RowTag"
              }
            },
            "zonbookDocumentation": "\n         <simpara>An <code>XMLClassifier</code> object specifying the classifier\n      to create.</simpara>\n      ",
            "documentation": "\n         <p>An <code>XMLClassifier</code> object specifying the classifier\n      to create.</p>\n      ",
            "shape_name": "CreateXMLClassifierRequest"
          },
          "JsonClassifier": {
            "type": "structure",
            "members": {
              "Name": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The name of the classifier.</simpara>\n      ",
                "documentation": "\n         <p>The name of the classifier.</p>\n      ",
                "required": true,
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "JsonPath": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>A <code>JsonPath</code> string defining the JSON data for the classifier to classify.\n      AWS Glue supports a subset of JsonPath, as described in <ulink url=\"https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json\">Writing JsonPath Custom Classifiers</ulink>.</simpara>\n      ",
                "documentation": "\n         <p>A <code>JsonPath</code> string defining the JSON data for the classifier to classify.\n      AWS Glue supports a subset of JsonPath, as described in <a href=\"https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json\">Writing JsonPath Custom Classifiers</a>.</p>\n      ",
                "required": true,
                "shape_name": "JsonPath"
              }
            },
            "zonbookDocumentation": "\n         <simpara>A <code>JsonClassifier</code> object specifying the classifier\n      to create.</simpara>\n      ",
            "documentation": "\n         <p>A <code>JsonClassifier</code> object specifying the classifier\n      to create.</p>\n      ",
            "shape_name": "CreateJsonClassifierRequest"
          }
        },
        "shape_name": "CreateClassifierRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "CreateClassifierResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource to be created or added already exists.</simpara>\n      ",
          "documentation": "\n         <p>A resource to be created or added already exists.</p>\n      ",
          "shape_name": "AlreadyExistsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Creates a classifier in the user's account. This may be a\n      <code>GrokClassifier</code>, an <code>XMLClassifier</code>, or abbrev\n      <code>JsonClassifier</code>, depending on which field of the request\n      is present.</p>\n      "
    },
    "DeleteClassifier": {
      "name": "DeleteClassifier",
      "input": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>Name of the classifier to remove.</simpara>\n      ",
            "documentation": "\n         <p>Name of the classifier to remove.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "DeleteClassifierRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "DeleteClassifierResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Removes a classifier from the Data Catalog.</p>\n      "
    },
    "CreateCrawler": {
      "name": "CreateCrawler",
      "input": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>Name of the new crawler.</simpara>\n      ",
            "documentation": "\n         <p>Name of the new crawler.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "Role": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The IAM role (or ARN of an IAM role) used by the new crawler\n      to access customer resources.</simpara>\n      ",
            "documentation": "\n         <p>The IAM role (or ARN of an IAM role) used by the new crawler\n      to access customer resources.</p>\n      ",
            "required": true,
            "shape_name": "Role"
          },
          "DatabaseName": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The AWS Glue database where results are written, such as:\n        <code>arn:aws:daylight:us-east-1::database/sometable/*</code>.</simpara>\n      ",
            "documentation": "\n         <p>The AWS Glue database where results are written, such as:\n        <code>arn:aws:daylight:us-east-1::database/sometable/*</code>.</p>\n      ",
            "required": true,
            "shape_name": "DatabaseName"
          },
          "Description": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
            "zonbookDocumentation": "\n         <simpara>A description of the new crawler.</simpara>\n      ",
            "documentation": "\n         <p>A description of the new crawler.</p>\n      ",
            "shape_name": "DescriptionString",
            "min_length": 0,
            "max_length": 2048
          },
          "Targets": {
            "type": "structure",
            "members": {
              "S3Targets": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>Specifies Amazon S3 targets.</simpara>\n      ",
                "documentation": "\n         <p>Specifies Amazon S3 targets.</p>\n      ",
                "shape_name": "S3TargetList",
                "members": {
                  "type": "structure",
                  "members": {
                    "Path": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The path to the Amazon S3 target.</simpara>\n      ",
                      "documentation": "\n         <p>The path to the Amazon S3 target.</p>\n      ",
                      "shape_name": "Path"
                    },
                    "Exclusions": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>A list of glob patterns used to exclude from the crawl.\n      For more information, see <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</ulink>.</simpara>\n      ",
                      "documentation": "\n         <p>A list of glob patterns used to exclude from the crawl.\n      For more information, see <a href=\"http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</a>.</p>\n      ",
                      "shape_name": "PathList",
                      "members": {
                        "type": "string",
                        "shape_name": "Path",
                        "documentation": null
                      }
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Specifies a data store in Amazon S3.</simpara>\n      ",
                  "documentation": "\n         <p>Specifies a data store in Amazon S3.</p>\n      ",
                  "shape_name": "S3Target"
                }
              },
              "JdbcTargets": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>Specifies JDBC targets.</simpara>\n      ",
                "documentation": "\n         <p>Specifies JDBC targets.</p>\n      ",
                "shape_name": "JdbcTargetList",
                "members": {
                  "type": "structure",
                  "members": {
                    "ConnectionName": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The name of the connection to use to connect to the JDBC target.</simpara>\n      ",
                      "documentation": "\n         <p>The name of the connection to use to connect to the JDBC target.</p>\n      ",
                      "shape_name": "ConnectionName"
                    },
                    "Path": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The path of the JDBC target.</simpara>\n      ",
                      "documentation": "\n         <p>The path of the JDBC target.</p>\n      ",
                      "shape_name": "Path"
                    },
                    "Exclusions": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>A list of glob patterns used to exclude from the crawl.\n      For more information, see <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</ulink>.</simpara>\n      ",
                      "documentation": "\n         <p>A list of glob patterns used to exclude from the crawl.\n      For more information, see <a href=\"http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</a>.</p>\n      ",
                      "shape_name": "PathList",
                      "members": {
                        "type": "string",
                        "shape_name": "Path",
                        "documentation": null
                      }
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Specifies a JDBC data store to crawl.</simpara>\n      ",
                  "documentation": "\n         <p>Specifies a JDBC data store to crawl.</p>\n      ",
                  "shape_name": "JdbcTarget"
                }
              },
              "DynamoDBTargets": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>Specifies DynamoDB targets.</simpara>\n      ",
                "documentation": "\n         <p>Specifies DynamoDB targets.</p>\n      ",
                "shape_name": "DynamoDBTargetList",
                "members": {
                  "type": "structure",
                  "members": {
                    "Path": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The name of the DynamoDB table to crawl.</simpara>\n      ",
                      "documentation": "\n         <p>The name of the DynamoDB table to crawl.</p>\n      ",
                      "shape_name": "Path"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Specifies a DynamoDB table to crawl.</simpara>\n      ",
                  "documentation": "\n         <p>Specifies a DynamoDB table to crawl.</p>\n      ",
                  "shape_name": "DynamoDBTarget"
                }
              }
            },
            "zonbookDocumentation": "\n         <simpara>A list of collection of targets to crawl.</simpara>\n      ",
            "documentation": "\n         <p>A list of collection of targets to crawl.</p>\n      ",
            "required": true,
            "shape_name": "CrawlerTargets"
          },
          "Schedule": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A <code>cron</code> expression used to specify the schedule (see <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</ulink>. For example, to run\n      something every day at 12:15 UTC, you would specify:\n      <code>cron(15 12 * * ? *)</code>.</simpara>\n      ",
            "documentation": "\n         <p>A <code>cron</code> expression used to specify the schedule (see <a href=\"http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run\n      something every day at 12:15 UTC, you would specify:\n      <code>cron(15 12 * * ? *)</code>.</p>\n      ",
            "shape_name": "CronExpression"
          },
          "Classifiers": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of custom classifiers that the user\n      has registered. By default, all built-in classifiers are included in a crawl,\n      but these custom classifiers always override the default classifiers\n      for a given classification.</simpara>\n      ",
            "documentation": "\n         <p>A list of custom classifiers that the user\n      has registered. By default, all built-in classifiers are included in a crawl,\n      but these custom classifiers always override the default classifiers\n      for a given classification.</p>\n      ",
            "shape_name": "ClassifierNameList",
            "members": {
              "type": "string",
              "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
              "shape_name": "NameString",
              "documentation": null,
              "min_length": 1,
              "max_length": 255
            }
          },
          "TablePrefix": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The table prefix used for catalog tables that are created.</simpara>\n      ",
            "documentation": "\n         <p>The table prefix used for catalog tables that are created.</p>\n      ",
            "shape_name": "TablePrefix",
            "min_length": 0,
            "max_length": 128
          },
          "SchemaChangePolicy": {
            "type": "structure",
            "members": {
              "UpdateBehavior": {
                "type": "string",
                "enum": [
                  "LOG",
                  "UPDATE_IN_DATABASE"
                ],
                "zonbookDocumentation": "\n         <simpara>The update behavior when the crawler finds a changed schema.</simpara>\n      ",
                "documentation": "\n         <p>The update behavior when the crawler finds a changed schema.</p>\n      ",
                "shape_name": "UpdateBehavior"
              },
              "DeleteBehavior": {
                "type": "string",
                "enum": [
                  "LOG",
                  "DELETE_FROM_DATABASE",
                  "DEPRECATE_IN_DATABASE"
                ],
                "zonbookDocumentation": "\n         <simpara>The deletion behavior when the crawler finds a deleted object.</simpara>\n      ",
                "documentation": "\n         <p>The deletion behavior when the crawler finds a deleted object.</p>\n      ",
                "shape_name": "DeleteBehavior"
              }
            },
            "zonbookDocumentation": "\n         <simpara>Policy for the crawler's update and deletion behavior.</simpara>\n      ",
            "documentation": "\n         <p>Policy for the crawler's update and deletion behavior.</p>\n      ",
            "shape_name": "SchemaChangePolicy"
          },
          "Configuration": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Crawler configuration information. This versioned JSON\n      string allows users to specify aspects of a crawler's behavior.\n      For more information, see <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html\">Configuring a Crawler</ulink>.</simpara>\n      ",
            "documentation": "\n         <p>Crawler configuration information. This versioned JSON\n      string allows users to specify aspects of a crawler's behavior.\n      For more information, see <a href=\"http://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html\">Configuring a Crawler</a>.</p>\n      ",
            "shape_name": "CrawlerConfiguration"
          }
        },
        "shape_name": "CreateCrawlerRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "CreateCrawlerResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource to be created or added already exists.</simpara>\n      ",
          "documentation": "\n         <p>A resource to be created or added already exists.</p>\n      ",
          "shape_name": "AlreadyExistsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource numerical limit was exceeded.</simpara>\n      ",
          "documentation": "\n         <p>A resource numerical limit was exceeded.</p>\n      ",
          "shape_name": "ResourceNumberLimitExceededException"
        }
      ],
      "documentation": "\n         <p>Creates a new crawler with specified targets, role,\n      configuration, and optional schedule. At least one crawl target\n      must be specified, in the <i>s3Targets</i> field,\n      the <i>jdbcTargets</i> field, or the\n      <i>DynamoDBTargets</i> field.</p>\n      "
    },
    "DeleteCrawler": {
      "name": "DeleteCrawler",
      "input": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>Name of the crawler to remove.</simpara>\n      ",
            "documentation": "\n         <p>Name of the crawler to remove.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "DeleteCrawlerRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "DeleteCrawlerResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation cannot be performed because the crawler is already running.</simpara>\n      ",
          "documentation": "\n         <p>The operation cannot be performed because the crawler is already running.</p>\n      ",
          "shape_name": "CrawlerRunningException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The specified scheduler is transitioning.</simpara>\n      ",
          "documentation": "\n         <p>The specified scheduler is transitioning.</p>\n      ",
          "shape_name": "SchedulerTransitioningException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Removes a specified crawler from the Data Catalog,\n      unless the crawler state is <code>RUNNING</code>.</p>\n      "
    },
    "GetCrawler": {
      "name": "GetCrawler",
      "input": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>Name of the crawler to retrieve metadata for.</simpara>\n      ",
            "documentation": "\n         <p>Name of the crawler to retrieve metadata for.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "GetCrawlerRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Crawler": {
            "type": "structure",
            "members": {
              "Name": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The crawler name.</simpara>\n      ",
                "documentation": "\n         <p>The crawler name.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "Role": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The IAM role (or ARN of an IAM role) used to access customer resources, such as data\n      in Amazon S3.</simpara>\n      ",
                "documentation": "\n         <p>The IAM role (or ARN of an IAM role) used to access customer resources, such as data\n      in Amazon S3.</p>\n      ",
                "shape_name": "Role"
              },
              "Targets": {
                "type": "structure",
                "members": {
                  "S3Targets": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>Specifies Amazon S3 targets.</simpara>\n      ",
                    "documentation": "\n         <p>Specifies Amazon S3 targets.</p>\n      ",
                    "shape_name": "S3TargetList",
                    "members": {
                      "type": "structure",
                      "members": {
                        "Path": {
                          "type": "string",
                          "zonbookDocumentation": "\n         <simpara>The path to the Amazon S3 target.</simpara>\n      ",
                          "documentation": "\n         <p>The path to the Amazon S3 target.</p>\n      ",
                          "shape_name": "Path"
                        },
                        "Exclusions": {
                          "type": "list",
                          "zonbookDocumentation": "\n         <simpara>A list of glob patterns used to exclude from the crawl.\n      For more information, see <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</ulink>.</simpara>\n      ",
                          "documentation": "\n         <p>A list of glob patterns used to exclude from the crawl.\n      For more information, see <a href=\"http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</a>.</p>\n      ",
                          "shape_name": "PathList",
                          "members": {
                            "type": "string",
                            "shape_name": "Path",
                            "documentation": null
                          }
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Specifies a data store in Amazon S3.</simpara>\n      ",
                      "documentation": "\n         <p>Specifies a data store in Amazon S3.</p>\n      ",
                      "shape_name": "S3Target"
                    }
                  },
                  "JdbcTargets": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>Specifies JDBC targets.</simpara>\n      ",
                    "documentation": "\n         <p>Specifies JDBC targets.</p>\n      ",
                    "shape_name": "JdbcTargetList",
                    "members": {
                      "type": "structure",
                      "members": {
                        "ConnectionName": {
                          "type": "string",
                          "zonbookDocumentation": "\n         <simpara>The name of the connection to use to connect to the JDBC target.</simpara>\n      ",
                          "documentation": "\n         <p>The name of the connection to use to connect to the JDBC target.</p>\n      ",
                          "shape_name": "ConnectionName"
                        },
                        "Path": {
                          "type": "string",
                          "zonbookDocumentation": "\n         <simpara>The path of the JDBC target.</simpara>\n      ",
                          "documentation": "\n         <p>The path of the JDBC target.</p>\n      ",
                          "shape_name": "Path"
                        },
                        "Exclusions": {
                          "type": "list",
                          "zonbookDocumentation": "\n         <simpara>A list of glob patterns used to exclude from the crawl.\n      For more information, see <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</ulink>.</simpara>\n      ",
                          "documentation": "\n         <p>A list of glob patterns used to exclude from the crawl.\n      For more information, see <a href=\"http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</a>.</p>\n      ",
                          "shape_name": "PathList",
                          "members": {
                            "type": "string",
                            "shape_name": "Path",
                            "documentation": null
                          }
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Specifies a JDBC data store to crawl.</simpara>\n      ",
                      "documentation": "\n         <p>Specifies a JDBC data store to crawl.</p>\n      ",
                      "shape_name": "JdbcTarget"
                    }
                  },
                  "DynamoDBTargets": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>Specifies DynamoDB targets.</simpara>\n      ",
                    "documentation": "\n         <p>Specifies DynamoDB targets.</p>\n      ",
                    "shape_name": "DynamoDBTargetList",
                    "members": {
                      "type": "structure",
                      "members": {
                        "Path": {
                          "type": "string",
                          "zonbookDocumentation": "\n         <simpara>The name of the DynamoDB table to crawl.</simpara>\n      ",
                          "documentation": "\n         <p>The name of the DynamoDB table to crawl.</p>\n      ",
                          "shape_name": "Path"
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Specifies a DynamoDB table to crawl.</simpara>\n      ",
                      "documentation": "\n         <p>Specifies a DynamoDB table to crawl.</p>\n      ",
                      "shape_name": "DynamoDBTarget"
                    }
                  }
                },
                "zonbookDocumentation": "\n         <simpara>A collection of targets to crawl.</simpara>\n      ",
                "documentation": "\n         <p>A collection of targets to crawl.</p>\n      ",
                "shape_name": "CrawlerTargets"
              },
              "DatabaseName": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The database where metadata is written by this crawler.</simpara>\n      ",
                "documentation": "\n         <p>The database where metadata is written by this crawler.</p>\n      ",
                "shape_name": "DatabaseName"
              },
              "Description": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                "zonbookDocumentation": "\n         <simpara>A description of the crawler.</simpara>\n      ",
                "documentation": "\n         <p>A description of the crawler.</p>\n      ",
                "shape_name": "DescriptionString",
                "min_length": 0,
                "max_length": 2048
              },
              "Classifiers": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A list of custom classifiers associated with the crawler.</simpara>\n      ",
                "documentation": "\n         <p>A list of custom classifiers associated with the crawler.</p>\n      ",
                "shape_name": "ClassifierNameList",
                "members": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "shape_name": "NameString",
                  "documentation": null,
                  "min_length": 1,
                  "max_length": 255
                }
              },
              "SchemaChangePolicy": {
                "type": "structure",
                "members": {
                  "UpdateBehavior": {
                    "type": "string",
                    "enum": [
                      "LOG",
                      "UPDATE_IN_DATABASE"
                    ],
                    "zonbookDocumentation": "\n         <simpara>The update behavior when the crawler finds a changed schema.</simpara>\n      ",
                    "documentation": "\n         <p>The update behavior when the crawler finds a changed schema.</p>\n      ",
                    "shape_name": "UpdateBehavior"
                  },
                  "DeleteBehavior": {
                    "type": "string",
                    "enum": [
                      "LOG",
                      "DELETE_FROM_DATABASE",
                      "DEPRECATE_IN_DATABASE"
                    ],
                    "zonbookDocumentation": "\n         <simpara>The deletion behavior when the crawler finds a deleted object.</simpara>\n      ",
                    "documentation": "\n         <p>The deletion behavior when the crawler finds a deleted object.</p>\n      ",
                    "shape_name": "DeleteBehavior"
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Sets the behavior when the crawler finds a changed or deleted object.</simpara>\n      ",
                "documentation": "\n         <p>Sets the behavior when the crawler finds a changed or deleted object.</p>\n      ",
                "shape_name": "SchemaChangePolicy"
              },
              "State": {
                "type": "string",
                "enum": [
                  "READY",
                  "RUNNING",
                  "STOPPING"
                ],
                "zonbookDocumentation": "\n         <simpara>Indicates whether the crawler is running, or whether a run is pending.</simpara>\n      ",
                "documentation": "\n         <p>Indicates whether the crawler is running, or whether a run is pending.</p>\n      ",
                "shape_name": "CrawlerState"
              },
              "TablePrefix": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The prefix added to the names of tables that are created.</simpara>\n      ",
                "documentation": "\n         <p>The prefix added to the names of tables that are created.</p>\n      ",
                "shape_name": "TablePrefix",
                "min_length": 0,
                "max_length": 128
              },
              "Schedule": {
                "type": "structure",
                "members": {
                  "ScheduleExpression": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>A <code>cron</code> expression used to specify the schedule (see <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</ulink>. For example, to run\n      something every day at 12:15 UTC, you would specify:\n      <code>cron(15 12 * * ? *)</code>.</simpara>\n      ",
                    "documentation": "\n         <p>A <code>cron</code> expression used to specify the schedule (see <a href=\"http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run\n      something every day at 12:15 UTC, you would specify:\n      <code>cron(15 12 * * ? *)</code>.</p>\n      ",
                    "shape_name": "CronExpression"
                  },
                  "State": {
                    "type": "string",
                    "enum": [
                      "SCHEDULED",
                      "NOT_SCHEDULED",
                      "TRANSITIONING"
                    ],
                    "zonbookDocumentation": "\n         <simpara>The state of the schedule.</simpara>\n      ",
                    "documentation": "\n         <p>The state of the schedule.</p>\n      ",
                    "shape_name": "ScheduleState"
                  }
                },
                "zonbookDocumentation": "\n         <simpara>For scheduled crawlers, the schedule when the crawler runs.</simpara>\n      ",
                "documentation": "\n         <p>For scheduled crawlers, the schedule when the crawler runs.</p>\n      ",
                "shape_name": "Schedule"
              },
              "CrawlElapsedTime": {
                "type": "long",
                "zonbookDocumentation": "\n         <simpara>If the crawler is running, contains the total time elapsed since the last crawl\n      began.</simpara>\n      ",
                "documentation": "\n         <p>If the crawler is running, contains the total time elapsed since the last crawl\n      began.</p>\n      ",
                "shape_name": "MillisecondsCount"
              },
              "CreationTime": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>The time when the crawler was created.</simpara>\n      ",
                "documentation": "\n         <p>The time when the crawler was created.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "LastUpdated": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>The time the crawler was last updated.</simpara>\n      ",
                "documentation": "\n         <p>The time the crawler was last updated.</p>\n      ",
                "shape_name": "Timestamp"
              },
              "LastCrawl": {
                "type": "structure",
                "members": {
                  "Status": {
                    "type": "string",
                    "enum": [
                      "SUCCEEDED",
                      "CANCELLED",
                      "FAILED"
                    ],
                    "zonbookDocumentation": "\n         <simpara>Status of the last crawl.</simpara>\n      ",
                    "documentation": "\n         <p>Status of the last crawl.</p>\n      ",
                    "shape_name": "LastCrawlStatus"
                  },
                  "ErrorMessage": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                    "zonbookDocumentation": "\n         <simpara>If an error occurred, the error information about the last crawl.</simpara>\n      ",
                    "documentation": "\n         <p>If an error occurred, the error information about the last crawl.</p>\n      ",
                    "shape_name": "DescriptionString",
                    "min_length": 0,
                    "max_length": 2048
                  },
                  "LogGroup": {
                    "type": "string",
                    "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                    "zonbookDocumentation": "\n         <simpara>The log group for the last crawl.</simpara>\n      ",
                    "documentation": "\n         <p>The log group for the last crawl.</p>\n      ",
                    "shape_name": "LogGroup",
                    "min_length": 1,
                    "max_length": 512
                  },
                  "LogStream": {
                    "type": "string",
                    "pattern": "[^:*]*",
                    "zonbookDocumentation": "\n         <simpara>The log stream for the last crawl.</simpara>\n      ",
                    "documentation": "\n         <p>The log stream for the last crawl.</p>\n      ",
                    "shape_name": "LogStream",
                    "min_length": 1,
                    "max_length": 512
                  },
                  "MessagePrefix": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The prefix for a message about this crawl.</simpara>\n      ",
                    "documentation": "\n         <p>The prefix for a message about this crawl.</p>\n      ",
                    "shape_name": "MessagePrefix",
                    "min_length": 1,
                    "max_length": 255
                  },
                  "StartTime": {
                    "type": "timestamp",
                    "zonbookDocumentation": "\n         <simpara>The time at which the crawl started.</simpara>\n      ",
                    "documentation": "\n         <p>The time at which the crawl started.</p>\n      ",
                    "shape_name": "Timestamp"
                  }
                },
                "zonbookDocumentation": "\n         <simpara>The status of the last crawl, and potentially error information if\n      an error occurred.</simpara>\n      ",
                "documentation": "\n         <p>The status of the last crawl, and potentially error information if\n      an error occurred.</p>\n      ",
                "shape_name": "LastCrawlInfo"
              },
              "Version": {
                "type": "long",
                "zonbookDocumentation": "\n         <simpara>The version of the crawler.</simpara>\n      ",
                "documentation": "\n         <p>The version of the crawler.</p>\n      ",
                "shape_name": "VersionId"
              },
              "Configuration": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>Crawler configuration information. This versioned JSON string allows users\n        to specify aspects of a crawler's behavior.\n        For more information, see <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html\">Configuring a Crawler</ulink>.</simpara>\n      ",
                "documentation": "\n         <p>Crawler configuration information. This versioned JSON string allows users\n        to specify aspects of a crawler's behavior.\n        For more information, see <a href=\"http://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html\">Configuring a Crawler</a>.</p>\n      ",
                "shape_name": "CrawlerConfiguration"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The metadata for the specified crawler.</simpara>\n      ",
            "documentation": "\n         <p>The metadata for the specified crawler.</p>\n      ",
            "shape_name": "Crawler"
          }
        },
        "shape_name": "GetCrawlerResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Retrieves metadata for a specified crawler.</p>\n      "
    },
    "GetCrawlers": {
      "name": "GetCrawlers",
      "input": {
        "type": "structure",
        "members": {
          "MaxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The number of crawlers to return on each call.</simpara>\n      ",
            "documentation": "\n         <p>The number of crawlers to return on each call.</p>\n      ",
            "shape_name": "PageSize",
            "min_length": 1,
            "max_length": 1000
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, if this is a continuation request.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, if this is a continuation request.</p>\n      ",
            "shape_name": "Token"
          }
        },
        "shape_name": "GetCrawlersRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Crawlers": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of crawler metadata.</simpara>\n      ",
            "documentation": "\n         <p>A list of crawler metadata.</p>\n      ",
            "shape_name": "CrawlerList",
            "members": {
              "type": "structure",
              "members": {
                "Name": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The crawler name.</simpara>\n      ",
                  "documentation": "\n         <p>The crawler name.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "Role": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The IAM role (or ARN of an IAM role) used to access customer resources, such as data\n      in Amazon S3.</simpara>\n      ",
                  "documentation": "\n         <p>The IAM role (or ARN of an IAM role) used to access customer resources, such as data\n      in Amazon S3.</p>\n      ",
                  "shape_name": "Role"
                },
                "Targets": {
                  "type": "structure",
                  "members": {
                    "S3Targets": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>Specifies Amazon S3 targets.</simpara>\n      ",
                      "documentation": "\n         <p>Specifies Amazon S3 targets.</p>\n      ",
                      "shape_name": "S3TargetList",
                      "members": {
                        "type": "structure",
                        "members": {
                          "Path": {
                            "type": "string",
                            "zonbookDocumentation": "\n         <simpara>The path to the Amazon S3 target.</simpara>\n      ",
                            "documentation": "\n         <p>The path to the Amazon S3 target.</p>\n      ",
                            "shape_name": "Path"
                          },
                          "Exclusions": {
                            "type": "list",
                            "zonbookDocumentation": "\n         <simpara>A list of glob patterns used to exclude from the crawl.\n      For more information, see <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</ulink>.</simpara>\n      ",
                            "documentation": "\n         <p>A list of glob patterns used to exclude from the crawl.\n      For more information, see <a href=\"http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</a>.</p>\n      ",
                            "shape_name": "PathList",
                            "members": {
                              "type": "string",
                              "shape_name": "Path",
                              "documentation": null
                            }
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>Specifies a data store in Amazon S3.</simpara>\n      ",
                        "documentation": "\n         <p>Specifies a data store in Amazon S3.</p>\n      ",
                        "shape_name": "S3Target"
                      }
                    },
                    "JdbcTargets": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>Specifies JDBC targets.</simpara>\n      ",
                      "documentation": "\n         <p>Specifies JDBC targets.</p>\n      ",
                      "shape_name": "JdbcTargetList",
                      "members": {
                        "type": "structure",
                        "members": {
                          "ConnectionName": {
                            "type": "string",
                            "zonbookDocumentation": "\n         <simpara>The name of the connection to use to connect to the JDBC target.</simpara>\n      ",
                            "documentation": "\n         <p>The name of the connection to use to connect to the JDBC target.</p>\n      ",
                            "shape_name": "ConnectionName"
                          },
                          "Path": {
                            "type": "string",
                            "zonbookDocumentation": "\n         <simpara>The path of the JDBC target.</simpara>\n      ",
                            "documentation": "\n         <p>The path of the JDBC target.</p>\n      ",
                            "shape_name": "Path"
                          },
                          "Exclusions": {
                            "type": "list",
                            "zonbookDocumentation": "\n         <simpara>A list of glob patterns used to exclude from the crawl.\n      For more information, see <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</ulink>.</simpara>\n      ",
                            "documentation": "\n         <p>A list of glob patterns used to exclude from the crawl.\n      For more information, see <a href=\"http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</a>.</p>\n      ",
                            "shape_name": "PathList",
                            "members": {
                              "type": "string",
                              "shape_name": "Path",
                              "documentation": null
                            }
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>Specifies a JDBC data store to crawl.</simpara>\n      ",
                        "documentation": "\n         <p>Specifies a JDBC data store to crawl.</p>\n      ",
                        "shape_name": "JdbcTarget"
                      }
                    },
                    "DynamoDBTargets": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>Specifies DynamoDB targets.</simpara>\n      ",
                      "documentation": "\n         <p>Specifies DynamoDB targets.</p>\n      ",
                      "shape_name": "DynamoDBTargetList",
                      "members": {
                        "type": "structure",
                        "members": {
                          "Path": {
                            "type": "string",
                            "zonbookDocumentation": "\n         <simpara>The name of the DynamoDB table to crawl.</simpara>\n      ",
                            "documentation": "\n         <p>The name of the DynamoDB table to crawl.</p>\n      ",
                            "shape_name": "Path"
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>Specifies a DynamoDB table to crawl.</simpara>\n      ",
                        "documentation": "\n         <p>Specifies a DynamoDB table to crawl.</p>\n      ",
                        "shape_name": "DynamoDBTarget"
                      }
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>A collection of targets to crawl.</simpara>\n      ",
                  "documentation": "\n         <p>A collection of targets to crawl.</p>\n      ",
                  "shape_name": "CrawlerTargets"
                },
                "DatabaseName": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The database where metadata is written by this crawler.</simpara>\n      ",
                  "documentation": "\n         <p>The database where metadata is written by this crawler.</p>\n      ",
                  "shape_name": "DatabaseName"
                },
                "Description": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                  "zonbookDocumentation": "\n         <simpara>A description of the crawler.</simpara>\n      ",
                  "documentation": "\n         <p>A description of the crawler.</p>\n      ",
                  "shape_name": "DescriptionString",
                  "min_length": 0,
                  "max_length": 2048
                },
                "Classifiers": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>A list of custom classifiers associated with the crawler.</simpara>\n      ",
                  "documentation": "\n         <p>A list of custom classifiers associated with the crawler.</p>\n      ",
                  "shape_name": "ClassifierNameList",
                  "members": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "shape_name": "NameString",
                    "documentation": null,
                    "min_length": 1,
                    "max_length": 255
                  }
                },
                "SchemaChangePolicy": {
                  "type": "structure",
                  "members": {
                    "UpdateBehavior": {
                      "type": "string",
                      "enum": [
                        "LOG",
                        "UPDATE_IN_DATABASE"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The update behavior when the crawler finds a changed schema.</simpara>\n      ",
                      "documentation": "\n         <p>The update behavior when the crawler finds a changed schema.</p>\n      ",
                      "shape_name": "UpdateBehavior"
                    },
                    "DeleteBehavior": {
                      "type": "string",
                      "enum": [
                        "LOG",
                        "DELETE_FROM_DATABASE",
                        "DEPRECATE_IN_DATABASE"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The deletion behavior when the crawler finds a deleted object.</simpara>\n      ",
                      "documentation": "\n         <p>The deletion behavior when the crawler finds a deleted object.</p>\n      ",
                      "shape_name": "DeleteBehavior"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Sets the behavior when the crawler finds a changed or deleted object.</simpara>\n      ",
                  "documentation": "\n         <p>Sets the behavior when the crawler finds a changed or deleted object.</p>\n      ",
                  "shape_name": "SchemaChangePolicy"
                },
                "State": {
                  "type": "string",
                  "enum": [
                    "READY",
                    "RUNNING",
                    "STOPPING"
                  ],
                  "zonbookDocumentation": "\n         <simpara>Indicates whether the crawler is running, or whether a run is pending.</simpara>\n      ",
                  "documentation": "\n         <p>Indicates whether the crawler is running, or whether a run is pending.</p>\n      ",
                  "shape_name": "CrawlerState"
                },
                "TablePrefix": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The prefix added to the names of tables that are created.</simpara>\n      ",
                  "documentation": "\n         <p>The prefix added to the names of tables that are created.</p>\n      ",
                  "shape_name": "TablePrefix",
                  "min_length": 0,
                  "max_length": 128
                },
                "Schedule": {
                  "type": "structure",
                  "members": {
                    "ScheduleExpression": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>A <code>cron</code> expression used to specify the schedule (see <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</ulink>. For example, to run\n      something every day at 12:15 UTC, you would specify:\n      <code>cron(15 12 * * ? *)</code>.</simpara>\n      ",
                      "documentation": "\n         <p>A <code>cron</code> expression used to specify the schedule (see <a href=\"http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run\n      something every day at 12:15 UTC, you would specify:\n      <code>cron(15 12 * * ? *)</code>.</p>\n      ",
                      "shape_name": "CronExpression"
                    },
                    "State": {
                      "type": "string",
                      "enum": [
                        "SCHEDULED",
                        "NOT_SCHEDULED",
                        "TRANSITIONING"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The state of the schedule.</simpara>\n      ",
                      "documentation": "\n         <p>The state of the schedule.</p>\n      ",
                      "shape_name": "ScheduleState"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>For scheduled crawlers, the schedule when the crawler runs.</simpara>\n      ",
                  "documentation": "\n         <p>For scheduled crawlers, the schedule when the crawler runs.</p>\n      ",
                  "shape_name": "Schedule"
                },
                "CrawlElapsedTime": {
                  "type": "long",
                  "zonbookDocumentation": "\n         <simpara>If the crawler is running, contains the total time elapsed since the last crawl\n      began.</simpara>\n      ",
                  "documentation": "\n         <p>If the crawler is running, contains the total time elapsed since the last crawl\n      began.</p>\n      ",
                  "shape_name": "MillisecondsCount"
                },
                "CreationTime": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The time when the crawler was created.</simpara>\n      ",
                  "documentation": "\n         <p>The time when the crawler was created.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "LastUpdated": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The time the crawler was last updated.</simpara>\n      ",
                  "documentation": "\n         <p>The time the crawler was last updated.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "LastCrawl": {
                  "type": "structure",
                  "members": {
                    "Status": {
                      "type": "string",
                      "enum": [
                        "SUCCEEDED",
                        "CANCELLED",
                        "FAILED"
                      ],
                      "zonbookDocumentation": "\n         <simpara>Status of the last crawl.</simpara>\n      ",
                      "documentation": "\n         <p>Status of the last crawl.</p>\n      ",
                      "shape_name": "LastCrawlStatus"
                    },
                    "ErrorMessage": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                      "zonbookDocumentation": "\n         <simpara>If an error occurred, the error information about the last crawl.</simpara>\n      ",
                      "documentation": "\n         <p>If an error occurred, the error information about the last crawl.</p>\n      ",
                      "shape_name": "DescriptionString",
                      "min_length": 0,
                      "max_length": 2048
                    },
                    "LogGroup": {
                      "type": "string",
                      "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                      "zonbookDocumentation": "\n         <simpara>The log group for the last crawl.</simpara>\n      ",
                      "documentation": "\n         <p>The log group for the last crawl.</p>\n      ",
                      "shape_name": "LogGroup",
                      "min_length": 1,
                      "max_length": 512
                    },
                    "LogStream": {
                      "type": "string",
                      "pattern": "[^:*]*",
                      "zonbookDocumentation": "\n         <simpara>The log stream for the last crawl.</simpara>\n      ",
                      "documentation": "\n         <p>The log stream for the last crawl.</p>\n      ",
                      "shape_name": "LogStream",
                      "min_length": 1,
                      "max_length": 512
                    },
                    "MessagePrefix": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The prefix for a message about this crawl.</simpara>\n      ",
                      "documentation": "\n         <p>The prefix for a message about this crawl.</p>\n      ",
                      "shape_name": "MessagePrefix",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "StartTime": {
                      "type": "timestamp",
                      "zonbookDocumentation": "\n         <simpara>The time at which the crawl started.</simpara>\n      ",
                      "documentation": "\n         <p>The time at which the crawl started.</p>\n      ",
                      "shape_name": "Timestamp"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The status of the last crawl, and potentially error information if\n      an error occurred.</simpara>\n      ",
                  "documentation": "\n         <p>The status of the last crawl, and potentially error information if\n      an error occurred.</p>\n      ",
                  "shape_name": "LastCrawlInfo"
                },
                "Version": {
                  "type": "long",
                  "zonbookDocumentation": "\n         <simpara>The version of the crawler.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the crawler.</p>\n      ",
                  "shape_name": "VersionId"
                },
                "Configuration": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>Crawler configuration information. This versioned JSON string allows users\n        to specify aspects of a crawler's behavior.\n        For more information, see <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html\">Configuring a Crawler</ulink>.</simpara>\n      ",
                  "documentation": "\n         <p>Crawler configuration information. This versioned JSON string allows users\n        to specify aspects of a crawler's behavior.\n        For more information, see <a href=\"http://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html\">Configuring a Crawler</a>.</p>\n      ",
                  "shape_name": "CrawlerConfiguration"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Specifies a crawler program that examines a data source and uses classifiers to try to\n      determine its schema. If successful, the crawler records metadata concerning the data source\n      in the AWS Glue Data Catalog.</simpara>\n      ",
              "documentation": "\n         <p>Specifies a crawler program that examines a data source and uses classifiers to try to\n      determine its schema. If successful, the crawler records metadata concerning the data source\n      in the AWS Glue Data Catalog.</p>\n      ",
              "shape_name": "Crawler"
            }
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, if the returned list has not reached the end\n      of those defined in this customer account.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, if the returned list has not reached the end\n      of those defined in this customer account.</p>\n      ",
            "shape_name": "Token"
          }
        },
        "shape_name": "GetCrawlersResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Retrieves metadata for all crawlers defined in the customer\n      account.</p>\n      "
    },
    "UpdateCrawler": {
      "name": "UpdateCrawler",
      "input": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>Name of the new crawler.</simpara>\n      ",
            "documentation": "\n         <p>Name of the new crawler.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "Role": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The IAM role (or ARN of an IAM role) used by the new crawler\n      to access customer resources.</simpara>\n      ",
            "documentation": "\n         <p>The IAM role (or ARN of an IAM role) used by the new crawler\n      to access customer resources.</p>\n      ",
            "shape_name": "Role"
          },
          "DatabaseName": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The AWS Glue database where results are stored, such as:\n        <code>arn:aws:daylight:us-east-1::database/sometable/*</code>.</simpara>\n      ",
            "documentation": "\n         <p>The AWS Glue database where results are stored, such as:\n        <code>arn:aws:daylight:us-east-1::database/sometable/*</code>.</p>\n      ",
            "shape_name": "DatabaseName"
          },
          "Description": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
            "zonbookDocumentation": "\n         <simpara>A description of the new crawler.</simpara>\n      ",
            "documentation": "\n         <p>A description of the new crawler.</p>\n      ",
            "shape_name": "DescriptionStringRemovable",
            "min_length": 0,
            "max_length": 2048
          },
          "Targets": {
            "type": "structure",
            "members": {
              "S3Targets": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>Specifies Amazon S3 targets.</simpara>\n      ",
                "documentation": "\n         <p>Specifies Amazon S3 targets.</p>\n      ",
                "shape_name": "S3TargetList",
                "members": {
                  "type": "structure",
                  "members": {
                    "Path": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The path to the Amazon S3 target.</simpara>\n      ",
                      "documentation": "\n         <p>The path to the Amazon S3 target.</p>\n      ",
                      "shape_name": "Path"
                    },
                    "Exclusions": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>A list of glob patterns used to exclude from the crawl.\n      For more information, see <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</ulink>.</simpara>\n      ",
                      "documentation": "\n         <p>A list of glob patterns used to exclude from the crawl.\n      For more information, see <a href=\"http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</a>.</p>\n      ",
                      "shape_name": "PathList",
                      "members": {
                        "type": "string",
                        "shape_name": "Path",
                        "documentation": null
                      }
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Specifies a data store in Amazon S3.</simpara>\n      ",
                  "documentation": "\n         <p>Specifies a data store in Amazon S3.</p>\n      ",
                  "shape_name": "S3Target"
                }
              },
              "JdbcTargets": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>Specifies JDBC targets.</simpara>\n      ",
                "documentation": "\n         <p>Specifies JDBC targets.</p>\n      ",
                "shape_name": "JdbcTargetList",
                "members": {
                  "type": "structure",
                  "members": {
                    "ConnectionName": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The name of the connection to use to connect to the JDBC target.</simpara>\n      ",
                      "documentation": "\n         <p>The name of the connection to use to connect to the JDBC target.</p>\n      ",
                      "shape_name": "ConnectionName"
                    },
                    "Path": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The path of the JDBC target.</simpara>\n      ",
                      "documentation": "\n         <p>The path of the JDBC target.</p>\n      ",
                      "shape_name": "Path"
                    },
                    "Exclusions": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>A list of glob patterns used to exclude from the crawl.\n      For more information, see <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</ulink>.</simpara>\n      ",
                      "documentation": "\n         <p>A list of glob patterns used to exclude from the crawl.\n      For more information, see <a href=\"http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</a>.</p>\n      ",
                      "shape_name": "PathList",
                      "members": {
                        "type": "string",
                        "shape_name": "Path",
                        "documentation": null
                      }
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Specifies a JDBC data store to crawl.</simpara>\n      ",
                  "documentation": "\n         <p>Specifies a JDBC data store to crawl.</p>\n      ",
                  "shape_name": "JdbcTarget"
                }
              },
              "DynamoDBTargets": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>Specifies DynamoDB targets.</simpara>\n      ",
                "documentation": "\n         <p>Specifies DynamoDB targets.</p>\n      ",
                "shape_name": "DynamoDBTargetList",
                "members": {
                  "type": "structure",
                  "members": {
                    "Path": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The name of the DynamoDB table to crawl.</simpara>\n      ",
                      "documentation": "\n         <p>The name of the DynamoDB table to crawl.</p>\n      ",
                      "shape_name": "Path"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Specifies a DynamoDB table to crawl.</simpara>\n      ",
                  "documentation": "\n         <p>Specifies a DynamoDB table to crawl.</p>\n      ",
                  "shape_name": "DynamoDBTarget"
                }
              }
            },
            "zonbookDocumentation": "\n         <simpara>A list of targets to crawl.</simpara>\n      ",
            "documentation": "\n         <p>A list of targets to crawl.</p>\n      ",
            "shape_name": "CrawlerTargets"
          },
          "Schedule": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A <code>cron</code> expression used to specify the schedule (see <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</ulink>. For example, to run\n      something every day at 12:15 UTC, you would specify:\n      <code>cron(15 12 * * ? *)</code>.</simpara>\n      ",
            "documentation": "\n         <p>A <code>cron</code> expression used to specify the schedule (see <a href=\"http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run\n      something every day at 12:15 UTC, you would specify:\n      <code>cron(15 12 * * ? *)</code>.</p>\n      ",
            "shape_name": "CronExpression"
          },
          "Classifiers": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of custom classifiers that the user\n      has registered. By default, all built-in classifiers are included in a crawl,\n      but these custom classifiers always override the default classifiers\n      for a given classification.</simpara>\n      ",
            "documentation": "\n         <p>A list of custom classifiers that the user\n      has registered. By default, all built-in classifiers are included in a crawl,\n      but these custom classifiers always override the default classifiers\n      for a given classification.</p>\n      ",
            "shape_name": "ClassifierNameList",
            "members": {
              "type": "string",
              "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
              "shape_name": "NameString",
              "documentation": null,
              "min_length": 1,
              "max_length": 255
            }
          },
          "TablePrefix": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The table prefix used for catalog tables that are created.</simpara>\n      ",
            "documentation": "\n         <p>The table prefix used for catalog tables that are created.</p>\n      ",
            "shape_name": "TablePrefix",
            "min_length": 0,
            "max_length": 128
          },
          "SchemaChangePolicy": {
            "type": "structure",
            "members": {
              "UpdateBehavior": {
                "type": "string",
                "enum": [
                  "LOG",
                  "UPDATE_IN_DATABASE"
                ],
                "zonbookDocumentation": "\n         <simpara>The update behavior when the crawler finds a changed schema.</simpara>\n      ",
                "documentation": "\n         <p>The update behavior when the crawler finds a changed schema.</p>\n      ",
                "shape_name": "UpdateBehavior"
              },
              "DeleteBehavior": {
                "type": "string",
                "enum": [
                  "LOG",
                  "DELETE_FROM_DATABASE",
                  "DEPRECATE_IN_DATABASE"
                ],
                "zonbookDocumentation": "\n         <simpara>The deletion behavior when the crawler finds a deleted object.</simpara>\n      ",
                "documentation": "\n         <p>The deletion behavior when the crawler finds a deleted object.</p>\n      ",
                "shape_name": "DeleteBehavior"
              }
            },
            "zonbookDocumentation": "\n         <simpara>Policy for the crawler's update and deletion behavior.</simpara>\n      ",
            "documentation": "\n         <p>Policy for the crawler's update and deletion behavior.</p>\n      ",
            "shape_name": "SchemaChangePolicy"
          },
          "Configuration": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Crawler configuration information. This versioned JSON string allows users\n        to specify aspects of a crawler's behavior.\n        For more information, see <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html\">Configuring a Crawler</ulink>.</simpara>\n      ",
            "documentation": "\n         <p>Crawler configuration information. This versioned JSON string allows users\n        to specify aspects of a crawler's behavior.\n        For more information, see <a href=\"http://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html\">Configuring a Crawler</a>.</p>\n      ",
            "shape_name": "CrawlerConfiguration"
          }
        },
        "shape_name": "UpdateCrawlerRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "UpdateCrawlerResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>There was a version conflict.</simpara>\n      ",
          "documentation": "\n         <p>There was a version conflict.</p>\n      ",
          "shape_name": "VersionMismatchException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation cannot be performed because the crawler is already running.</simpara>\n      ",
          "documentation": "\n         <p>The operation cannot be performed because the crawler is already running.</p>\n      ",
          "shape_name": "CrawlerRunningException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Updates a crawler. If a crawler is\n      running, you must stop it using <code>StopCrawler</code> before updating\n      it.</p>\n      "
    },
    "StartCrawler": {
      "name": "StartCrawler",
      "input": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>Name of the crawler to start.</simpara>\n      ",
            "documentation": "\n         <p>Name of the crawler to start.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "StartCrawlerRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "StartCrawlerResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation cannot be performed because the crawler is already running.</simpara>\n      ",
          "documentation": "\n         <p>The operation cannot be performed because the crawler is already running.</p>\n      ",
          "shape_name": "CrawlerRunningException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Starts a crawl using the specified crawler, regardless\n      of what is scheduled. If the crawler is already running, returns a\n      <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-exceptions.html#aws-glue-api-exceptions-CrawlerRunningException\">CrawlerRunningException</a>.</p>\n      "
    },
    "StopCrawler": {
      "name": "StopCrawler",
      "input": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>Name of the crawler to stop.</simpara>\n      ",
            "documentation": "\n         <p>Name of the crawler to stop.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "StopCrawlerRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "StopCrawlerResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The specified crawler is not running.</simpara>\n      ",
          "documentation": "\n         <p>The specified crawler is not running.</p>\n      ",
          "shape_name": "CrawlerNotRunningException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The specified crawler is stopping.</simpara>\n      ",
          "documentation": "\n         <p>The specified crawler is stopping.</p>\n      ",
          "shape_name": "CrawlerStoppingException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>If the specified crawler is running, stops the\n      crawl.</p>\n      "
    },
    "UpdateCrawlerSchedule": {
      "name": "UpdateCrawlerSchedule",
      "input": {
        "type": "structure",
        "members": {
          "CrawlerName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>Name of the crawler whose schedule to update.</simpara>\n      ",
            "documentation": "\n         <p>Name of the crawler whose schedule to update.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "Schedule": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The updated <code>cron</code> expression used to specify the schedule (see <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</ulink>. For example, to run\n      something every day at 12:15 UTC, you would specify:\n      <code>cron(15 12 * * ? *)</code>.</simpara>\n      ",
            "documentation": "\n         <p>The updated <code>cron</code> expression used to specify the schedule (see <a href=\"http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run\n      something every day at 12:15 UTC, you would specify:\n      <code>cron(15 12 * * ? *)</code>.</p>\n      ",
            "shape_name": "CronExpression"
          }
        },
        "shape_name": "UpdateCrawlerScheduleRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "UpdateCrawlerScheduleResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>There was a version conflict.</simpara>\n      ",
          "documentation": "\n         <p>There was a version conflict.</p>\n      ",
          "shape_name": "VersionMismatchException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The specified scheduler is transitioning.</simpara>\n      ",
          "documentation": "\n         <p>The specified scheduler is transitioning.</p>\n      ",
          "shape_name": "SchedulerTransitioningException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Updates the schedule of a crawler using a <code>cron</code> expression. </p>\n      "
    },
    "StartCrawlerSchedule": {
      "name": "StartCrawlerSchedule",
      "input": {
        "type": "structure",
        "members": {
          "CrawlerName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>Name of the crawler to schedule.</simpara>\n      ",
            "documentation": "\n         <p>Name of the crawler to schedule.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "StartCrawlerScheduleRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "StartCrawlerScheduleResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The specified scheduler is already running.</simpara>\n      ",
          "documentation": "\n         <p>The specified scheduler is already running.</p>\n      ",
          "shape_name": "SchedulerRunningException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The specified scheduler is transitioning.</simpara>\n      ",
          "documentation": "\n         <p>The specified scheduler is transitioning.</p>\n      ",
          "shape_name": "SchedulerTransitioningException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>There is no applicable schedule.</simpara>\n      ",
          "documentation": "\n         <p>There is no applicable schedule.</p>\n      ",
          "shape_name": "NoScheduleException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Changes the schedule state of the specified crawler to\n      <code>SCHEDULED</code>, unless the crawler is already running or the\n      schedule state is already <code>SCHEDULED</code>.</p>\n      "
    },
    "StopCrawlerSchedule": {
      "name": "StopCrawlerSchedule",
      "input": {
        "type": "structure",
        "members": {
          "CrawlerName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>Name of the crawler whose schedule state to set.</simpara>\n      ",
            "documentation": "\n         <p>Name of the crawler whose schedule state to set.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "StopCrawlerScheduleRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "StopCrawlerScheduleResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The specified scheduler is not running.</simpara>\n      ",
          "documentation": "\n         <p>The specified scheduler is not running.</p>\n      ",
          "shape_name": "SchedulerNotRunningException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The specified scheduler is transitioning.</simpara>\n      ",
          "documentation": "\n         <p>The specified scheduler is transitioning.</p>\n      ",
          "shape_name": "SchedulerTransitioningException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Sets the schedule state of the specified crawler to\n      <code>NOT_SCHEDULED</code>, but does not stop the crawler if it is\n      already running.</p>\n      "
    },
    "GetCrawlerMetrics": {
      "name": "GetCrawlerMetrics",
      "input": {
        "type": "structure",
        "members": {
          "CrawlerNameList": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of the names of crawlers about which to retrieve metrics.</simpara>\n      ",
            "documentation": "\n         <p>A list of the names of crawlers about which to retrieve metrics.</p>\n      ",
            "shape_name": "CrawlerNameList",
            "min_length": 0,
            "max_length": 100,
            "members": {
              "type": "string",
              "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
              "shape_name": "NameString",
              "documentation": null,
              "min_length": 1,
              "max_length": 255
            }
          },
          "MaxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The maximum size of a list to return.</simpara>\n      ",
            "documentation": "\n         <p>The maximum size of a list to return.</p>\n      ",
            "shape_name": "PageSize",
            "min_length": 1,
            "max_length": 1000
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, if this is a continuation call.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, if this is a continuation call.</p>\n      ",
            "shape_name": "Token"
          }
        },
        "shape_name": "GetCrawlerMetricsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "CrawlerMetricsList": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of metrics for the specified crawler.</simpara>\n      ",
            "documentation": "\n         <p>A list of metrics for the specified crawler.</p>\n      ",
            "shape_name": "CrawlerMetricsList",
            "members": {
              "type": "structure",
              "members": {
                "CrawlerName": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The name of the crawler.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the crawler.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "TimeLeftSeconds": {
                  "type": "double",
                  "zonbookDocumentation": "\n         <simpara>The estimated time left to complete a running crawl.</simpara>\n      ",
                  "documentation": "\n         <p>The estimated time left to complete a running crawl.</p>\n      ",
                  "shape_name": "NonNegativeDouble",
                  "min_length": 0.0
                },
                "StillEstimating": {
                  "type": "boolean",
                  "zonbookDocumentation": "\n         <simpara>True if the crawler is still estimating how long it will take to complete this run.</simpara>\n      ",
                  "documentation": "\n         <p>True if the crawler is still estimating how long it will take to complete this run.</p>\n      ",
                  "shape_name": "Boolean"
                },
                "LastRuntimeSeconds": {
                  "type": "double",
                  "zonbookDocumentation": "\n         <simpara>The duration of the crawler's most recent run, in seconds.</simpara>\n      ",
                  "documentation": "\n         <p>The duration of the crawler's most recent run, in seconds.</p>\n      ",
                  "shape_name": "NonNegativeDouble",
                  "min_length": 0.0
                },
                "MedianRuntimeSeconds": {
                  "type": "double",
                  "zonbookDocumentation": "\n         <simpara>The median duration of this crawler's runs, in seconds.</simpara>\n      ",
                  "documentation": "\n         <p>The median duration of this crawler's runs, in seconds.</p>\n      ",
                  "shape_name": "NonNegativeDouble",
                  "min_length": 0.0
                },
                "TablesCreated": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The number of tables created by this crawler.</simpara>\n      ",
                  "documentation": "\n         <p>The number of tables created by this crawler.</p>\n      ",
                  "shape_name": "NonNegativeInteger",
                  "min_length": 0
                },
                "TablesUpdated": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The number of tables updated by this crawler.</simpara>\n      ",
                  "documentation": "\n         <p>The number of tables updated by this crawler.</p>\n      ",
                  "shape_name": "NonNegativeInteger",
                  "min_length": 0
                },
                "TablesDeleted": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The number of tables deleted by this crawler.</simpara>\n      ",
                  "documentation": "\n         <p>The number of tables deleted by this crawler.</p>\n      ",
                  "shape_name": "NonNegativeInteger",
                  "min_length": 0
                }
              },
              "zonbookDocumentation": "\n         <simpara>Metrics for a specified crawler.</simpara>\n      ",
              "documentation": "\n         <p>Metrics for a specified crawler.</p>\n      ",
              "shape_name": "CrawlerMetrics"
            }
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, if the returned list does not contain the\n      last metric available.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, if the returned list does not contain the\n      last metric available.</p>\n      ",
            "shape_name": "Token"
          }
        },
        "shape_name": "GetCrawlerMetricsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Retrieves metrics about specified crawlers.</p>\n      "
    },
    "GetClassifier": {
      "name": "GetClassifier",
      "input": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>Name of the classifier to retrieve.</simpara>\n      ",
            "documentation": "\n         <p>Name of the classifier to retrieve.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "GetClassifierRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Classifier": {
            "type": "structure",
            "members": {
              "GrokClassifier": {
                "type": "structure",
                "members": {
                  "Name": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The name of the classifier.</simpara>\n      ",
                    "documentation": "\n         <p>The name of the classifier.</p>\n      ",
                    "required": true,
                    "shape_name": "NameString",
                    "min_length": 1,
                    "max_length": 255
                  },
                  "Classification": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, and\n      so on.</simpara>\n      ",
                    "documentation": "\n         <p>An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, and\n      so on.</p>\n      ",
                    "required": true,
                    "shape_name": "Classification"
                  },
                  "CreationTime": {
                    "type": "timestamp",
                    "zonbookDocumentation": "\n         <simpara>The time this classifier was registered.</simpara>\n      ",
                    "documentation": "\n         <p>The time this classifier was registered.</p>\n      ",
                    "shape_name": "Timestamp"
                  },
                  "LastUpdated": {
                    "type": "timestamp",
                    "zonbookDocumentation": "\n         <simpara>The time this classifier was last updated.</simpara>\n      ",
                    "documentation": "\n         <p>The time this classifier was last updated.</p>\n      ",
                    "shape_name": "Timestamp"
                  },
                  "Version": {
                    "type": "long",
                    "zonbookDocumentation": "\n         <simpara>The version of this classifier.</simpara>\n      ",
                    "documentation": "\n         <p>The version of this classifier.</p>\n      ",
                    "shape_name": "VersionId"
                  },
                  "GrokPattern": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The grok pattern applied to a data store by this classifier.\n       For more information, see built-in patterns in <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html\">Writing Custom Classifers</ulink>.</simpara>\n      ",
                    "documentation": "\n         <p>The grok pattern applied to a data store by this classifier.\n       For more information, see built-in patterns in <a href=\"http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html\">Writing Custom Classifers</a>.</p>\n      ",
                    "required": true,
                    "shape_name": "GrokPattern",
                    "min_length": 1,
                    "max_length": 2048
                  },
                  "CustomPatterns": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                    "zonbookDocumentation": "\n         <simpara>Optional custom grok patterns defined by this classifier.\n      For more information, see custom patterns in <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html\">Writing Custom Classifers</ulink>.</simpara>\n      ",
                    "documentation": "\n         <p>Optional custom grok patterns defined by this classifier.\n      For more information, see custom patterns in <a href=\"http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html\">Writing Custom Classifers</a>.</p>\n      ",
                    "shape_name": "CustomPatterns",
                    "min_length": 0,
                    "max_length": 16000
                  }
                },
                "zonbookDocumentation": "\n         <simpara>A <code>GrokClassifier</code> object.</simpara>\n      ",
                "documentation": "\n         <p>A <code>GrokClassifier</code> object.</p>\n      ",
                "shape_name": "GrokClassifier"
              },
              "XMLClassifier": {
                "type": "structure",
                "members": {
                  "Name": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The name of the classifier.</simpara>\n      ",
                    "documentation": "\n         <p>The name of the classifier.</p>\n      ",
                    "required": true,
                    "shape_name": "NameString",
                    "min_length": 1,
                    "max_length": 255
                  },
                  "Classification": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>An identifier of the data format that the classifier matches.</simpara>\n      ",
                    "documentation": "\n         <p>An identifier of the data format that the classifier matches.</p>\n      ",
                    "required": true,
                    "shape_name": "Classification"
                  },
                  "CreationTime": {
                    "type": "timestamp",
                    "zonbookDocumentation": "\n         <simpara>The time this classifier was registered.</simpara>\n      ",
                    "documentation": "\n         <p>The time this classifier was registered.</p>\n      ",
                    "shape_name": "Timestamp"
                  },
                  "LastUpdated": {
                    "type": "timestamp",
                    "zonbookDocumentation": "\n         <simpara>The time this classifier was last updated.</simpara>\n      ",
                    "documentation": "\n         <p>The time this classifier was last updated.</p>\n      ",
                    "shape_name": "Timestamp"
                  },
                  "Version": {
                    "type": "long",
                    "zonbookDocumentation": "\n         <simpara>The version of this classifier.</simpara>\n      ",
                    "documentation": "\n         <p>The version of this classifier.</p>\n      ",
                    "shape_name": "VersionId"
                  },
                  "RowTag": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>The XML tag designating the element that contains each record\n      in an XML document being parsed. Note that this cannot identify a self-closing\n      element (closed by <code>/&gt;</code>).  An empty row element that contains only\n      attributes can be parsed as long as it ends with a closing tag (for example,\n      <code>&lt;row item_a=\"A\" item_b=\"B\"&gt;&lt;/row&gt;</code> is okay,\n      but <code>&lt;row item_a=\"A\" item_b=\"B\" /&gt;</code> is not).</simpara>\n      ",
                    "documentation": "\n         <p>The XML tag designating the element that contains each record\n      in an XML document being parsed. Note that this cannot identify a self-closing\n      element (closed by <code>/&gt;</code>).  An empty row element that contains only\n      attributes can be parsed as long as it ends with a closing tag (for example,\n      <code>&lt;row item_a=\"A\" item_b=\"B\"&gt;&lt;/row&gt;</code> is okay,\n      but <code>&lt;row item_a=\"A\" item_b=\"B\" /&gt;</code> is not).</p>\n      ",
                    "shape_name": "RowTag"
                  }
                },
                "zonbookDocumentation": "\n         <simpara>An <code>XMLClassifier</code> object.</simpara>\n      ",
                "documentation": "\n         <p>An <code>XMLClassifier</code> object.</p>\n      ",
                "shape_name": "XMLClassifier"
              },
              "JsonClassifier": {
                "type": "structure",
                "members": {
                  "Name": {
                    "type": "string",
                    "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                    "zonbookDocumentation": "\n         <simpara>The name of the classifier.</simpara>\n      ",
                    "documentation": "\n         <p>The name of the classifier.</p>\n      ",
                    "required": true,
                    "shape_name": "NameString",
                    "min_length": 1,
                    "max_length": 255
                  },
                  "CreationTime": {
                    "type": "timestamp",
                    "zonbookDocumentation": "\n         <simpara>The time this classifier was registered.</simpara>\n      ",
                    "documentation": "\n         <p>The time this classifier was registered.</p>\n      ",
                    "shape_name": "Timestamp"
                  },
                  "LastUpdated": {
                    "type": "timestamp",
                    "zonbookDocumentation": "\n         <simpara>The time this classifier was last updated.</simpara>\n      ",
                    "documentation": "\n         <p>The time this classifier was last updated.</p>\n      ",
                    "shape_name": "Timestamp"
                  },
                  "Version": {
                    "type": "long",
                    "zonbookDocumentation": "\n         <simpara>The version of this classifier.</simpara>\n      ",
                    "documentation": "\n         <p>The version of this classifier.</p>\n      ",
                    "shape_name": "VersionId"
                  },
                  "JsonPath": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>A <code>JsonPath</code> string defining the JSON data for the classifier to classify.\n      AWS Glue supports a subset of JsonPath, as described in <ulink url=\"https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json\">Writing JsonPath Custom Classifiers</ulink>.</simpara>\n      ",
                    "documentation": "\n         <p>A <code>JsonPath</code> string defining the JSON data for the classifier to classify.\n      AWS Glue supports a subset of JsonPath, as described in <a href=\"https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json\">Writing JsonPath Custom Classifiers</a>.</p>\n      ",
                    "required": true,
                    "shape_name": "JsonPath"
                  }
                },
                "zonbookDocumentation": "\n         <simpara>A <code>JsonClassifier</code> object.</simpara>\n      ",
                "documentation": "\n         <p>A <code>JsonClassifier</code> object.</p>\n      ",
                "shape_name": "JsonClassifier"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The requested classifier.</simpara>\n      ",
            "documentation": "\n         <p>The requested classifier.</p>\n      ",
            "shape_name": "Classifier"
          }
        },
        "shape_name": "GetClassifierResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Retrieve a classifier by name.</p>\n      "
    },
    "GetClassifiers": {
      "name": "GetClassifiers",
      "input": {
        "type": "structure",
        "members": {
          "MaxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>Size of the list to return (optional).</simpara>\n      ",
            "documentation": "\n         <p>Size of the list to return (optional).</p>\n      ",
            "shape_name": "PageSize",
            "min_length": 1,
            "max_length": 1000
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>An optional continuation token.</simpara>\n      ",
            "documentation": "\n         <p>An optional continuation token.</p>\n      ",
            "shape_name": "Token"
          }
        },
        "shape_name": "GetClassifiersRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Classifiers": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The requested list of classifier\n      objects.</simpara>\n      ",
            "documentation": "\n         <p>The requested list of classifier\n      objects.</p>\n      ",
            "shape_name": "ClassifierList",
            "members": {
              "type": "structure",
              "members": {
                "GrokClassifier": {
                  "type": "structure",
                  "members": {
                    "Name": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The name of the classifier.</simpara>\n      ",
                      "documentation": "\n         <p>The name of the classifier.</p>\n      ",
                      "required": true,
                      "shape_name": "NameString",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "Classification": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, and\n      so on.</simpara>\n      ",
                      "documentation": "\n         <p>An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, and\n      so on.</p>\n      ",
                      "required": true,
                      "shape_name": "Classification"
                    },
                    "CreationTime": {
                      "type": "timestamp",
                      "zonbookDocumentation": "\n         <simpara>The time this classifier was registered.</simpara>\n      ",
                      "documentation": "\n         <p>The time this classifier was registered.</p>\n      ",
                      "shape_name": "Timestamp"
                    },
                    "LastUpdated": {
                      "type": "timestamp",
                      "zonbookDocumentation": "\n         <simpara>The time this classifier was last updated.</simpara>\n      ",
                      "documentation": "\n         <p>The time this classifier was last updated.</p>\n      ",
                      "shape_name": "Timestamp"
                    },
                    "Version": {
                      "type": "long",
                      "zonbookDocumentation": "\n         <simpara>The version of this classifier.</simpara>\n      ",
                      "documentation": "\n         <p>The version of this classifier.</p>\n      ",
                      "shape_name": "VersionId"
                    },
                    "GrokPattern": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The grok pattern applied to a data store by this classifier.\n       For more information, see built-in patterns in <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html\">Writing Custom Classifers</ulink>.</simpara>\n      ",
                      "documentation": "\n         <p>The grok pattern applied to a data store by this classifier.\n       For more information, see built-in patterns in <a href=\"http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html\">Writing Custom Classifers</a>.</p>\n      ",
                      "required": true,
                      "shape_name": "GrokPattern",
                      "min_length": 1,
                      "max_length": 2048
                    },
                    "CustomPatterns": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                      "zonbookDocumentation": "\n         <simpara>Optional custom grok patterns defined by this classifier.\n      For more information, see custom patterns in <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html\">Writing Custom Classifers</ulink>.</simpara>\n      ",
                      "documentation": "\n         <p>Optional custom grok patterns defined by this classifier.\n      For more information, see custom patterns in <a href=\"http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html\">Writing Custom Classifers</a>.</p>\n      ",
                      "shape_name": "CustomPatterns",
                      "min_length": 0,
                      "max_length": 16000
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>A <code>GrokClassifier</code> object.</simpara>\n      ",
                  "documentation": "\n         <p>A <code>GrokClassifier</code> object.</p>\n      ",
                  "shape_name": "GrokClassifier"
                },
                "XMLClassifier": {
                  "type": "structure",
                  "members": {
                    "Name": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The name of the classifier.</simpara>\n      ",
                      "documentation": "\n         <p>The name of the classifier.</p>\n      ",
                      "required": true,
                      "shape_name": "NameString",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "Classification": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>An identifier of the data format that the classifier matches.</simpara>\n      ",
                      "documentation": "\n         <p>An identifier of the data format that the classifier matches.</p>\n      ",
                      "required": true,
                      "shape_name": "Classification"
                    },
                    "CreationTime": {
                      "type": "timestamp",
                      "zonbookDocumentation": "\n         <simpara>The time this classifier was registered.</simpara>\n      ",
                      "documentation": "\n         <p>The time this classifier was registered.</p>\n      ",
                      "shape_name": "Timestamp"
                    },
                    "LastUpdated": {
                      "type": "timestamp",
                      "zonbookDocumentation": "\n         <simpara>The time this classifier was last updated.</simpara>\n      ",
                      "documentation": "\n         <p>The time this classifier was last updated.</p>\n      ",
                      "shape_name": "Timestamp"
                    },
                    "Version": {
                      "type": "long",
                      "zonbookDocumentation": "\n         <simpara>The version of this classifier.</simpara>\n      ",
                      "documentation": "\n         <p>The version of this classifier.</p>\n      ",
                      "shape_name": "VersionId"
                    },
                    "RowTag": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The XML tag designating the element that contains each record\n      in an XML document being parsed. Note that this cannot identify a self-closing\n      element (closed by <code>/&gt;</code>).  An empty row element that contains only\n      attributes can be parsed as long as it ends with a closing tag (for example,\n      <code>&lt;row item_a=\"A\" item_b=\"B\"&gt;&lt;/row&gt;</code> is okay,\n      but <code>&lt;row item_a=\"A\" item_b=\"B\" /&gt;</code> is not).</simpara>\n      ",
                      "documentation": "\n         <p>The XML tag designating the element that contains each record\n      in an XML document being parsed. Note that this cannot identify a self-closing\n      element (closed by <code>/&gt;</code>).  An empty row element that contains only\n      attributes can be parsed as long as it ends with a closing tag (for example,\n      <code>&lt;row item_a=\"A\" item_b=\"B\"&gt;&lt;/row&gt;</code> is okay,\n      but <code>&lt;row item_a=\"A\" item_b=\"B\" /&gt;</code> is not).</p>\n      ",
                      "shape_name": "RowTag"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>An <code>XMLClassifier</code> object.</simpara>\n      ",
                  "documentation": "\n         <p>An <code>XMLClassifier</code> object.</p>\n      ",
                  "shape_name": "XMLClassifier"
                },
                "JsonClassifier": {
                  "type": "structure",
                  "members": {
                    "Name": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The name of the classifier.</simpara>\n      ",
                      "documentation": "\n         <p>The name of the classifier.</p>\n      ",
                      "required": true,
                      "shape_name": "NameString",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "CreationTime": {
                      "type": "timestamp",
                      "zonbookDocumentation": "\n         <simpara>The time this classifier was registered.</simpara>\n      ",
                      "documentation": "\n         <p>The time this classifier was registered.</p>\n      ",
                      "shape_name": "Timestamp"
                    },
                    "LastUpdated": {
                      "type": "timestamp",
                      "zonbookDocumentation": "\n         <simpara>The time this classifier was last updated.</simpara>\n      ",
                      "documentation": "\n         <p>The time this classifier was last updated.</p>\n      ",
                      "shape_name": "Timestamp"
                    },
                    "Version": {
                      "type": "long",
                      "zonbookDocumentation": "\n         <simpara>The version of this classifier.</simpara>\n      ",
                      "documentation": "\n         <p>The version of this classifier.</p>\n      ",
                      "shape_name": "VersionId"
                    },
                    "JsonPath": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>A <code>JsonPath</code> string defining the JSON data for the classifier to classify.\n      AWS Glue supports a subset of JsonPath, as described in <ulink url=\"https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json\">Writing JsonPath Custom Classifiers</ulink>.</simpara>\n      ",
                      "documentation": "\n         <p>A <code>JsonPath</code> string defining the JSON data for the classifier to classify.\n      AWS Glue supports a subset of JsonPath, as described in <a href=\"https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json\">Writing JsonPath Custom Classifiers</a>.</p>\n      ",
                      "required": true,
                      "shape_name": "JsonPath"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>A <code>JsonClassifier</code> object.</simpara>\n      ",
                  "documentation": "\n         <p>A <code>JsonClassifier</code> object.</p>\n      ",
                  "shape_name": "JsonClassifier"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Classifiers are triggered during a crawl task. A classifier checks\n      whether a given file is in a format it can handle, and if it is, the\n      classifier creates a schema in the form of a <code>StructType</code> object that\n      matches that data format.</simpara>\n         <simpara>You can use the standard classifiers that AWS Glue supplies, or you\n      can write your own classifiers to best categorize your data sources and\n      specify the appropriate schemas to use for them. A classifier can be a\n      <code>grok</code> classifier, an <code>XML</code> classifier, or a\n      <code>JSON</code> classifier, as specified in one of the fields in\n      the <code>Classifier</code> object.</simpara>\n      ",
              "documentation": "\n         <p>Classifiers are triggered during a crawl task. A classifier checks\n      whether a given file is in a format it can handle, and if it is, the\n      classifier creates a schema in the form of a <code>StructType</code> object that\n      matches that data format.</p>\n         <p>You can use the standard classifiers that AWS Glue supplies, or you\n      can write your own classifiers to best categorize your data sources and\n      specify the appropriate schemas to use for them. A classifier can be a\n      <code>grok</code> classifier, an <code>XML</code> classifier, or a\n      <code>JSON</code> classifier, as specified in one of the fields in\n      the <code>Classifier</code> object.</p>\n      ",
              "shape_name": "Classifier"
            }
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token.</p>\n      ",
            "shape_name": "Token"
          }
        },
        "shape_name": "GetClassifiersResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Lists all classifier objects in the Data Catalog.</p>\n      "
    },
    "UpdateClassifier": {
      "name": "UpdateClassifier",
      "input": {
        "type": "structure",
        "members": {
          "GrokClassifier": {
            "type": "structure",
            "members": {
              "Name": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The name of the <code>GrokClassifier</code>.</simpara>\n      ",
                "documentation": "\n         <p>The name of the <code>GrokClassifier</code>.</p>\n      ",
                "required": true,
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "Classification": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs,\n      Amazon CloudWatch Logs, and so on.</simpara>\n      ",
                "documentation": "\n         <p>An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs,\n      Amazon CloudWatch Logs, and so on.</p>\n      ",
                "shape_name": "Classification"
              },
              "GrokPattern": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\t]*",
                "zonbookDocumentation": "\n         <simpara>The grok pattern used by this classifier.</simpara>\n      ",
                "documentation": "\n         <p>The grok pattern used by this classifier.</p>\n      ",
                "shape_name": "GrokPattern",
                "min_length": 1,
                "max_length": 2048
              },
              "CustomPatterns": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                "zonbookDocumentation": "\n         <simpara>Optional custom grok patterns used by this classifier.</simpara>\n      ",
                "documentation": "\n         <p>Optional custom grok patterns used by this classifier.</p>\n      ",
                "shape_name": "CustomPatterns",
                "min_length": 0,
                "max_length": 16000
              }
            },
            "zonbookDocumentation": "\n         <simpara>A <code>GrokClassifier</code> object with updated fields.</simpara>\n      ",
            "documentation": "\n         <p>A <code>GrokClassifier</code> object with updated fields.</p>\n      ",
            "shape_name": "UpdateGrokClassifierRequest"
          },
          "XMLClassifier": {
            "type": "structure",
            "members": {
              "Name": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The name of the classifier.</simpara>\n      ",
                "documentation": "\n         <p>The name of the classifier.</p>\n      ",
                "required": true,
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "Classification": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>An identifier of the data format that the classifier matches.</simpara>\n      ",
                "documentation": "\n         <p>An identifier of the data format that the classifier matches.</p>\n      ",
                "shape_name": "Classification"
              },
              "RowTag": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The XML tag designating the element that contains each record\n      in an XML document being parsed. Note that this cannot identify a self-closing\n      element (closed by <code>/&gt;</code>).  An empty row element that contains only\n      attributes can be parsed as long as it ends with a closing tag (for example,\n      <code>&lt;row item_a=\"A\" item_b=\"B\"&gt;&lt;/row&gt;</code> is okay,\n      but <code>&lt;row item_a=\"A\" item_b=\"B\" /&gt;</code> is not).</simpara>\n      ",
                "documentation": "\n         <p>The XML tag designating the element that contains each record\n      in an XML document being parsed. Note that this cannot identify a self-closing\n      element (closed by <code>/&gt;</code>).  An empty row element that contains only\n      attributes can be parsed as long as it ends with a closing tag (for example,\n      <code>&lt;row item_a=\"A\" item_b=\"B\"&gt;&lt;/row&gt;</code> is okay,\n      but <code>&lt;row item_a=\"A\" item_b=\"B\" /&gt;</code> is not).</p>\n      ",
                "shape_name": "RowTag"
              }
            },
            "zonbookDocumentation": "\n         <simpara>An <code>XMLClassifier</code> object with updated fields.</simpara>\n      ",
            "documentation": "\n         <p>An <code>XMLClassifier</code> object with updated fields.</p>\n      ",
            "shape_name": "UpdateXMLClassifierRequest"
          },
          "JsonClassifier": {
            "type": "structure",
            "members": {
              "Name": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The name of the classifier.</simpara>\n      ",
                "documentation": "\n         <p>The name of the classifier.</p>\n      ",
                "required": true,
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "JsonPath": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>A <code>JsonPath</code> string defining the JSON data for the classifier to classify.\n      AWS Glue supports a subset of JsonPath, as described in <ulink url=\"https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json\">Writing JsonPath Custom Classifiers</ulink>.</simpara>\n      ",
                "documentation": "\n         <p>A <code>JsonPath</code> string defining the JSON data for the classifier to classify.\n      AWS Glue supports a subset of JsonPath, as described in <a href=\"https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json\">Writing JsonPath Custom Classifiers</a>.</p>\n      ",
                "shape_name": "JsonPath"
              }
            },
            "zonbookDocumentation": "\n         <simpara>A <code>JsonClassifier</code> object with updated fields.</simpara>\n      ",
            "documentation": "\n         <p>A <code>JsonClassifier</code> object with updated fields.</p>\n      ",
            "shape_name": "UpdateJsonClassifierRequest"
          }
        },
        "shape_name": "UpdateClassifierRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "UpdateClassifierResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>There was a version conflict.</simpara>\n      ",
          "documentation": "\n         <p>There was a version conflict.</p>\n      ",
          "shape_name": "VersionMismatchException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Modifies an existing classifier (a <code>GrokClassifier</code>,\n      <code>XMLClassifier</code>, or <code>JsonClassifier</code>, depending on\n      which field is present).</p>\n      "
    },
    "GetObjects": {
      "name": "GetObjects",
      "input": {
        "type": "structure",
        "members": {
          "CatalogId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the Data Catalog in which to look for matching objects.\n      If none is supplied, the AWS account ID is used by default.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the Data Catalog in which to look for matching objects.\n      If none is supplied, the AWS account ID is used by default.</p>\n      ",
            "shape_name": "CatalogIdString",
            "min_length": 1,
            "max_length": 255
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, if this is a continuation call.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, if this is a continuation call.</p>\n      ",
            "shape_name": "Token"
          },
          "Entity": {
            "type": "string",
            "enum": [
              "GLOBAL",
              "DATABASE",
              "TABLE",
              "PARTITION",
              "COLUMN"
            ],
            "zonbookDocumentation": "\n         <simpara>The type of object to search for.</simpara>\n      ",
            "documentation": "\n         <p>The type of object to search for.</p>\n      ",
            "shape_name": "EntityType"
          },
          "Filter": {
            "type": "structure",
            "members": {
              "PropertyPredicates": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>List of <code>PropertyPredicates</code> to filter the set of\n      documents matching the predicates specified in a search.</simpara>\n      ",
                "documentation": "\n         <p>List of <code>PropertyPredicates</code> to filter the set of\n      documents matching the predicates specified in a search.</p>\n      ",
                "shape_name": "PropertyPredicates",
                "min_length": 0,
                "max_length": 10,
                "members": {
                  "type": "structure",
                  "members": {
                    "Key": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The key of the property.</simpara>\n      ",
                      "documentation": "\n         <p>The key of the property.</p>\n      ",
                      "shape_name": "ValueString",
                      "max_length": 1024
                    },
                    "Value": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The value of the property.</simpara>\n      ",
                      "documentation": "\n         <p>The value of the property.</p>\n      ",
                      "shape_name": "ValueString",
                      "max_length": 1024
                    },
                    "Comparator": {
                      "type": "string",
                      "enum": [
                        "EQUALS",
                        "GREATER_THAN",
                        "LESS_THAN",
                        "GREATER_THAN_EQUALS",
                        "LESS_THAN_EQUALS"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The comparator used to compare this property to others.</simpara>\n      ",
                      "documentation": "\n         <p>The comparator used to compare this property to others.</p>\n      ",
                      "shape_name": "Comparator"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Defines a property predicate.</simpara>\n      ",
                  "documentation": "\n         <p>Defines a property predicate.</p>\n      ",
                  "shape_name": "PropertyPredicate"
                }
              },
              "SortCriteria": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>Specifies how the results should be sorted.</simpara>\n      ",
                "documentation": "\n         <p>Specifies how the results should be sorted.</p>\n      ",
                "shape_name": "SortCriteria",
                "min_length": 0,
                "max_length": 1,
                "members": {
                  "type": "structure",
                  "members": {
                    "FieldName": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The name of the field on which the list should be sorted.</simpara>\n      ",
                      "documentation": "\n         <p>The name of the field on which the list should be sorted.</p>\n      ",
                      "shape_name": "ValueString",
                      "max_length": 1024
                    },
                    "Sort": {
                      "type": "string",
                      "enum": [
                        "ASC",
                        "DESC"
                      ],
                      "zonbookDocumentation": "\n         <simpara>Specifies whether the sort order should be from lowest to highest\n      (ascending) or highest to lowest (descending).</simpara>\n      ",
                      "documentation": "\n         <p>Specifies whether the sort order should be from lowest to highest\n      (ascending) or highest to lowest (descending).</p>\n      ",
                      "shape_name": "Sort"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Specifies a field on which a list should be sorted, and a direction\n      (ascending or descending).</simpara>\n      ",
                  "documentation": "\n         <p>Specifies a field on which a list should be sorted, and a direction\n      (ascending or descending).</p>\n      ",
                  "shape_name": "SortCriterion"
                }
              },
              "SearchText": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>Free-form text to search for in all documents.</simpara>\n      ",
                "documentation": "\n         <p>Free-form text to search for in all documents.</p>\n      ",
                "shape_name": "ValueString",
                "max_length": 1024
              }
            },
            "zonbookDocumentation": "\n         <simpara>A filter to define which objects are being searched for.</simpara>\n      ",
            "documentation": "\n         <p>A filter to define which objects are being searched for.</p>\n      ",
            "shape_name": "SearchFilter"
          },
          "MaxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The maximum number of objects to return in a single response.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of objects to return in a single response.</p>\n      ",
            "shape_name": "PageSize",
            "min_length": 1,
            "max_length": 1000
          }
        },
        "shape_name": "GetObjectsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, if the returned list does not contain the\n      last matching object.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, if the returned list does not contain the\n      last matching object.</p>\n      ",
            "shape_name": "Token"
          },
          "DocList": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of objects of the specified type that match the\n      specified filter.</simpara>\n      ",
            "documentation": "\n         <p>A list of objects of the specified type that match the\n      specified filter.</p>\n      ",
            "shape_name": "DocumentList",
            "members": {
              "type": "map",
              "shape_name": "Document",
              "documentation": null,
              "keys": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "shape_name": "KeyString",
                "documentation": null,
                "min_length": 1,
                "max_length": 255
              },
              "members": {
                "type": "string",
                "shape_name": "ValueString",
                "documentation": null,
                "max_length": 1024
              }
            }
          }
        },
        "shape_name": "GetObjectsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>\n            <code>GetObjects</code> searches for documents matching a search\n      filter for a particular entity (<code>Database</code>, <code>Table</code>,\n      <code>Partition</code>, <code>Crawler</code>, and so forth).</p>\n      "
    },
    "CreateJobBookmark": {
      "name": "CreateJobBookmark",
      "input": {
        "type": "structure",
        "members": {
          "JobName": {
            "type": "string",
            "required": true,
            "shape_name": "JobName",
            "documentation": null
          },
          "JobBookmark": {
            "type": "string",
            "shape_name": "JsonValue",
            "documentation": null
          }
        },
        "shape_name": "CreateJobBookmarkRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobBookmarkEntry": {
            "type": "structure",
            "members": {
              "JobName": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>Name of the job in question.</simpara>\n      ",
                "documentation": "\n         <p>Name of the job in question.</p>\n      ",
                "shape_name": "JobName"
              },
              "Version": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>Version of the job.</simpara>\n      ",
                "documentation": "\n         <p>Version of the job.</p>\n      ",
                "shape_name": "IntegerValue"
              },
              "Run": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The run ID number.</simpara>\n      ",
                "documentation": "\n         <p>The run ID number.</p>\n      ",
                "shape_name": "IntegerValue"
              },
              "Attempt": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The attempt ID number.</simpara>\n      ",
                "documentation": "\n         <p>The attempt ID number.</p>\n      ",
                "shape_name": "IntegerValue"
              },
              "JobBookmark": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The bookmark itself.</simpara>\n      ",
                "documentation": "\n         <p>The bookmark itself.</p>\n      ",
                "shape_name": "JsonValue"
              }
            },
            "zonbookDocumentation": "\n         <simpara>Defines a point which a job can resume processing.</simpara>\n      ",
            "documentation": "\n         <p>Defines a point which a job can resume processing.</p>\n      ",
            "shape_name": "JobBookmarkEntry"
          }
        },
        "shape_name": "CreateJobBookmarkResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource to be created or added already exists.</simpara>\n      ",
          "documentation": "\n         <p>A resource to be created or added already exists.</p>\n      ",
          "shape_name": "AlreadyExistsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": null
    },
    "GetJobBookmark": {
      "name": "GetJobBookmark",
      "input": {
        "type": "structure",
        "members": {
          "JobName": {
            "type": "string",
            "required": true,
            "shape_name": "JobName",
            "documentation": null
          },
          "Version": {
            "type": "integer",
            "shape_name": "IntegerValue",
            "documentation": null
          }
        },
        "shape_name": "GetJobBookmarkRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobBookmarkEntry": {
            "type": "structure",
            "members": {
              "JobName": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>Name of the job in question.</simpara>\n      ",
                "documentation": "\n         <p>Name of the job in question.</p>\n      ",
                "shape_name": "JobName"
              },
              "Version": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>Version of the job.</simpara>\n      ",
                "documentation": "\n         <p>Version of the job.</p>\n      ",
                "shape_name": "IntegerValue"
              },
              "Run": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The run ID number.</simpara>\n      ",
                "documentation": "\n         <p>The run ID number.</p>\n      ",
                "shape_name": "IntegerValue"
              },
              "Attempt": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The attempt ID number.</simpara>\n      ",
                "documentation": "\n         <p>The attempt ID number.</p>\n      ",
                "shape_name": "IntegerValue"
              },
              "JobBookmark": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The bookmark itself.</simpara>\n      ",
                "documentation": "\n         <p>The bookmark itself.</p>\n      ",
                "shape_name": "JsonValue"
              }
            },
            "zonbookDocumentation": "\n         <simpara>Defines a point which a job can resume processing.</simpara>\n      ",
            "documentation": "\n         <p>Defines a point which a job can resume processing.</p>\n      ",
            "shape_name": "JobBookmarkEntry"
          }
        },
        "shape_name": "GetJobBookmarkResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A value could not be validated.</simpara>\n      ",
          "documentation": "\n         <p>A value could not be validated.</p>\n      ",
          "shape_name": "ValidationException"
        }
      ],
      "documentation": null
    },
    "UpdateJobBookmark": {
      "name": "UpdateJobBookmark",
      "input": {
        "type": "structure",
        "members": {
          "JobName": {
            "type": "string",
            "required": true,
            "shape_name": "JobName",
            "documentation": null
          },
          "JobBookmark": {
            "type": "string",
            "required": true,
            "shape_name": "JsonValue",
            "documentation": null
          },
          "CurrentVersion": {
            "type": "integer",
            "required": true,
            "shape_name": "IntegerValue",
            "documentation": null
          },
          "IncrementRun": {
            "type": "boolean",
            "shape_name": "BooleanValue",
            "documentation": null
          },
          "IncrementAttempt": {
            "type": "boolean",
            "shape_name": "BooleanValue",
            "documentation": null
          }
        },
        "shape_name": "UpdateJobBookmarkRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobBookmarkEntry": {
            "type": "structure",
            "members": {
              "JobName": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>Name of the job in question.</simpara>\n      ",
                "documentation": "\n         <p>Name of the job in question.</p>\n      ",
                "shape_name": "JobName"
              },
              "Version": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>Version of the job.</simpara>\n      ",
                "documentation": "\n         <p>Version of the job.</p>\n      ",
                "shape_name": "IntegerValue"
              },
              "Run": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The run ID number.</simpara>\n      ",
                "documentation": "\n         <p>The run ID number.</p>\n      ",
                "shape_name": "IntegerValue"
              },
              "Attempt": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The attempt ID number.</simpara>\n      ",
                "documentation": "\n         <p>The attempt ID number.</p>\n      ",
                "shape_name": "IntegerValue"
              },
              "JobBookmark": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The bookmark itself.</simpara>\n      ",
                "documentation": "\n         <p>The bookmark itself.</p>\n      ",
                "shape_name": "JsonValue"
              }
            },
            "zonbookDocumentation": "\n         <simpara>Defines a point which a job can resume processing.</simpara>\n      ",
            "documentation": "\n         <p>Defines a point which a job can resume processing.</p>\n      ",
            "shape_name": "JobBookmarkEntry"
          }
        },
        "shape_name": "UpdateJobBookmarkResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>There was a version conflict.</simpara>\n      ",
          "documentation": "\n         <p>There was a version conflict.</p>\n      ",
          "shape_name": "VersionMismatchException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": null
    },
    "ResetJobBookmark": {
      "name": "ResetJobBookmark",
      "input": {
        "type": "structure",
        "members": {
          "JobName": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The name of the job in question.</simpara>\n      ",
            "documentation": "\n         <p>The name of the job in question.</p>\n      ",
            "required": true,
            "shape_name": "JobName"
          }
        },
        "shape_name": "ResetJobBookmarkRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobBookmarkEntry": {
            "type": "structure",
            "members": {
              "JobName": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>Name of the job in question.</simpara>\n      ",
                "documentation": "\n         <p>Name of the job in question.</p>\n      ",
                "shape_name": "JobName"
              },
              "Version": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>Version of the job.</simpara>\n      ",
                "documentation": "\n         <p>Version of the job.</p>\n      ",
                "shape_name": "IntegerValue"
              },
              "Run": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The run ID number.</simpara>\n      ",
                "documentation": "\n         <p>The run ID number.</p>\n      ",
                "shape_name": "IntegerValue"
              },
              "Attempt": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The attempt ID number.</simpara>\n      ",
                "documentation": "\n         <p>The attempt ID number.</p>\n      ",
                "shape_name": "IntegerValue"
              },
              "JobBookmark": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The bookmark itself.</simpara>\n      ",
                "documentation": "\n         <p>The bookmark itself.</p>\n      ",
                "shape_name": "JsonValue"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The reset bookmark entry.</simpara>\n      ",
            "documentation": "\n         <p>The reset bookmark entry.</p>\n      ",
            "shape_name": "JobBookmarkEntry"
          }
        },
        "shape_name": "ResetJobBookmarkResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Resets a bookmark entry.</p>\n      "
    },
    "CreateScript": {
      "name": "CreateScript",
      "input": {
        "type": "structure",
        "members": {
          "DagNodes": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of the nodes in the DAG.</simpara>\n      ",
            "documentation": "\n         <p>A list of the nodes in the DAG.</p>\n      ",
            "shape_name": "DagNodes",
            "members": {
              "type": "structure",
              "members": {
                "Id": {
                  "type": "string",
                  "pattern": "[A-Za-z_][A-Za-z0-9_]*",
                  "zonbookDocumentation": "\n         <simpara>A node identifier that is unique within the node's graph.</simpara>\n      ",
                  "documentation": "\n         <p>A node identifier that is unique within the node's graph.</p>\n      ",
                  "required": true,
                  "shape_name": "CodeGenIdentifier",
                  "min_length": 1,
                  "max_length": 255
                },
                "NodeType": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The type of node this is.</simpara>\n      ",
                  "documentation": "\n         <p>The type of node this is.</p>\n      ",
                  "required": true,
                  "shape_name": "CodeGenNodeType"
                },
                "Args": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>Properties of the node, in the form of name-value pairs.</simpara>\n      ",
                  "documentation": "\n         <p>Properties of the node, in the form of name-value pairs.</p>\n      ",
                  "required": true,
                  "shape_name": "CodeGenNodeArgs",
                  "min_length": 0,
                  "max_length": 50,
                  "members": {
                    "type": "structure",
                    "members": {
                      "Name": {
                        "type": "string",
                        "zonbookDocumentation": "\n         <simpara>The name of the argument or property.</simpara>\n      ",
                        "documentation": "\n         <p>The name of the argument or property.</p>\n      ",
                        "required": true,
                        "shape_name": "CodeGenArgName"
                      },
                      "Value": {
                        "type": "string",
                        "zonbookDocumentation": "\n         <simpara>The value of the argument or property.</simpara>\n      ",
                        "documentation": "\n         <p>The value of the argument or property.</p>\n      ",
                        "required": true,
                        "shape_name": "CodeGenArgValue"
                      },
                      "Param": {
                        "type": "boolean",
                        "zonbookDocumentation": "\n         <simpara>True if the value is used as a parameter.</simpara>\n      ",
                        "documentation": "\n         <p>True if the value is used as a parameter.</p>\n      ",
                        "shape_name": "Boolean"
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>An argument or property of a node.</simpara>\n      ",
                    "documentation": "\n         <p>An argument or property of a node.</p>\n      ",
                    "shape_name": "CodeGenNodeArg"
                  }
                },
                "LineNumber": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The line number of the node.</simpara>\n      ",
                  "documentation": "\n         <p>The line number of the node.</p>\n      ",
                  "shape_name": "Integer"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Represents a node in a directed acyclic graph (DAG)</simpara>\n      ",
              "documentation": "\n         <p>Represents a node in a directed acyclic graph (DAG)</p>\n      ",
              "shape_name": "CodeGenNode"
            }
          },
          "DagEdges": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of the edges in the DAG.</simpara>\n      ",
            "documentation": "\n         <p>A list of the edges in the DAG.</p>\n      ",
            "shape_name": "DagEdges",
            "members": {
              "type": "structure",
              "members": {
                "Source": {
                  "type": "string",
                  "pattern": "[A-Za-z_][A-Za-z0-9_]*",
                  "zonbookDocumentation": "\n         <simpara>The ID of the node at which the edge starts.</simpara>\n      ",
                  "documentation": "\n         <p>The ID of the node at which the edge starts.</p>\n      ",
                  "required": true,
                  "shape_name": "CodeGenIdentifier",
                  "min_length": 1,
                  "max_length": 255
                },
                "Target": {
                  "type": "string",
                  "pattern": "[A-Za-z_][A-Za-z0-9_]*",
                  "zonbookDocumentation": "\n         <simpara>The ID of the node at which the edge ends.</simpara>\n      ",
                  "documentation": "\n         <p>The ID of the node at which the edge ends.</p>\n      ",
                  "required": true,
                  "shape_name": "CodeGenIdentifier",
                  "min_length": 1,
                  "max_length": 255
                },
                "TargetParameter": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The target of the edge.</simpara>\n      ",
                  "documentation": "\n         <p>The target of the edge.</p>\n      ",
                  "shape_name": "CodeGenArgName"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Represents a directional edge in a directed acyclic graph (DAG).</simpara>\n      ",
              "documentation": "\n         <p>Represents a directional edge in a directed acyclic graph (DAG).</p>\n      ",
              "shape_name": "CodeGenEdge"
            }
          },
          "Language": {
            "type": "string",
            "enum": [
              "PYTHON",
              "SCALA"
            ],
            "zonbookDocumentation": "\n         <simpara>The programming language of the resulting code from the DAG.</simpara>\n      ",
            "documentation": "\n         <p>The programming language of the resulting code from the DAG.</p>\n      ",
            "shape_name": "Language"
          }
        },
        "shape_name": "CreateScriptRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "PythonScript": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The Python script generated from the DAG.</simpara>\n      ",
            "documentation": "\n         <p>The Python script generated from the DAG.</p>\n      ",
            "shape_name": "PythonScript"
          },
          "ScalaCode": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The Scala code generated from the DAG.</simpara>\n      ",
            "documentation": "\n         <p>The Scala code generated from the DAG.</p>\n      ",
            "shape_name": "ScalaCode"
          }
        },
        "shape_name": "CreateScriptResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Transforms a directed acyclic graph (DAG) into code.</p>\n      "
    },
    "GetDataflowGraph": {
      "name": "GetDataflowGraph",
      "input": {
        "type": "structure",
        "members": {
          "PythonScript": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The Python script to transform.</simpara>\n      ",
            "documentation": "\n         <p>The Python script to transform.</p>\n      ",
            "shape_name": "PythonScript"
          }
        },
        "shape_name": "GetDataflowGraphRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "DagNodes": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of the nodes in the resulting DAG.</simpara>\n      ",
            "documentation": "\n         <p>A list of the nodes in the resulting DAG.</p>\n      ",
            "shape_name": "DagNodes",
            "members": {
              "type": "structure",
              "members": {
                "Id": {
                  "type": "string",
                  "pattern": "[A-Za-z_][A-Za-z0-9_]*",
                  "zonbookDocumentation": "\n         <simpara>A node identifier that is unique within the node's graph.</simpara>\n      ",
                  "documentation": "\n         <p>A node identifier that is unique within the node's graph.</p>\n      ",
                  "required": true,
                  "shape_name": "CodeGenIdentifier",
                  "min_length": 1,
                  "max_length": 255
                },
                "NodeType": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The type of node this is.</simpara>\n      ",
                  "documentation": "\n         <p>The type of node this is.</p>\n      ",
                  "required": true,
                  "shape_name": "CodeGenNodeType"
                },
                "Args": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>Properties of the node, in the form of name-value pairs.</simpara>\n      ",
                  "documentation": "\n         <p>Properties of the node, in the form of name-value pairs.</p>\n      ",
                  "required": true,
                  "shape_name": "CodeGenNodeArgs",
                  "min_length": 0,
                  "max_length": 50,
                  "members": {
                    "type": "structure",
                    "members": {
                      "Name": {
                        "type": "string",
                        "zonbookDocumentation": "\n         <simpara>The name of the argument or property.</simpara>\n      ",
                        "documentation": "\n         <p>The name of the argument or property.</p>\n      ",
                        "required": true,
                        "shape_name": "CodeGenArgName"
                      },
                      "Value": {
                        "type": "string",
                        "zonbookDocumentation": "\n         <simpara>The value of the argument or property.</simpara>\n      ",
                        "documentation": "\n         <p>The value of the argument or property.</p>\n      ",
                        "required": true,
                        "shape_name": "CodeGenArgValue"
                      },
                      "Param": {
                        "type": "boolean",
                        "zonbookDocumentation": "\n         <simpara>True if the value is used as a parameter.</simpara>\n      ",
                        "documentation": "\n         <p>True if the value is used as a parameter.</p>\n      ",
                        "shape_name": "Boolean"
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>An argument or property of a node.</simpara>\n      ",
                    "documentation": "\n         <p>An argument or property of a node.</p>\n      ",
                    "shape_name": "CodeGenNodeArg"
                  }
                },
                "LineNumber": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The line number of the node.</simpara>\n      ",
                  "documentation": "\n         <p>The line number of the node.</p>\n      ",
                  "shape_name": "Integer"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Represents a node in a directed acyclic graph (DAG)</simpara>\n      ",
              "documentation": "\n         <p>Represents a node in a directed acyclic graph (DAG)</p>\n      ",
              "shape_name": "CodeGenNode"
            }
          },
          "DagEdges": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of the edges in the resulting DAG.</simpara>\n      ",
            "documentation": "\n         <p>A list of the edges in the resulting DAG.</p>\n      ",
            "shape_name": "DagEdges",
            "members": {
              "type": "structure",
              "members": {
                "Source": {
                  "type": "string",
                  "pattern": "[A-Za-z_][A-Za-z0-9_]*",
                  "zonbookDocumentation": "\n         <simpara>The ID of the node at which the edge starts.</simpara>\n      ",
                  "documentation": "\n         <p>The ID of the node at which the edge starts.</p>\n      ",
                  "required": true,
                  "shape_name": "CodeGenIdentifier",
                  "min_length": 1,
                  "max_length": 255
                },
                "Target": {
                  "type": "string",
                  "pattern": "[A-Za-z_][A-Za-z0-9_]*",
                  "zonbookDocumentation": "\n         <simpara>The ID of the node at which the edge ends.</simpara>\n      ",
                  "documentation": "\n         <p>The ID of the node at which the edge ends.</p>\n      ",
                  "required": true,
                  "shape_name": "CodeGenIdentifier",
                  "min_length": 1,
                  "max_length": 255
                },
                "TargetParameter": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The target of the edge.</simpara>\n      ",
                  "documentation": "\n         <p>The target of the edge.</p>\n      ",
                  "shape_name": "CodeGenArgName"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Represents a directional edge in a directed acyclic graph (DAG).</simpara>\n      ",
              "documentation": "\n         <p>Represents a directional edge in a directed acyclic graph (DAG).</p>\n      ",
              "shape_name": "CodeGenEdge"
            }
          }
        },
        "shape_name": "GetDataflowGraphResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Transforms a Python script into a directed acyclic graph (DAG). </p>\n      "
    },
    "GetMapping": {
      "name": "GetMapping",
      "input": {
        "type": "structure",
        "members": {
          "Source": {
            "type": "structure",
            "members": {
              "DatabaseName": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The database in which the table metadata resides.</simpara>\n      ",
                "documentation": "\n         <p>The database in which the table metadata resides.</p>\n      ",
                "required": true,
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "TableName": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The name of the table in question.</simpara>\n      ",
                "documentation": "\n         <p>The name of the table in question.</p>\n      ",
                "required": true,
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              }
            },
            "zonbookDocumentation": "\n         <simpara>Specifies the source table.</simpara>\n      ",
            "documentation": "\n         <p>Specifies the source table.</p>\n      ",
            "required": true,
            "shape_name": "CatalogEntry"
          },
          "Sinks": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of target tables.</simpara>\n      ",
            "documentation": "\n         <p>A list of target tables.</p>\n      ",
            "shape_name": "CatalogEntries",
            "members": {
              "type": "structure",
              "members": {
                "DatabaseName": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The database in which the table metadata resides.</simpara>\n      ",
                  "documentation": "\n         <p>The database in which the table metadata resides.</p>\n      ",
                  "required": true,
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "TableName": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The name of the table in question.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the table in question.</p>\n      ",
                  "required": true,
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                }
              },
              "zonbookDocumentation": "\n         <simpara>Specifies a table definition in the Data Catalog.</simpara>\n      ",
              "documentation": "\n         <p>Specifies a table definition in the Data Catalog.</p>\n      ",
              "shape_name": "CatalogEntry"
            }
          },
          "Location": {
            "type": "structure",
            "members": {
              "Jdbc": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A JDBC location.</simpara>\n      ",
                "documentation": "\n         <p>A JDBC location.</p>\n      ",
                "shape_name": "CodeGenNodeArgs",
                "min_length": 0,
                "max_length": 50,
                "members": {
                  "type": "structure",
                  "members": {
                    "Name": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The name of the argument or property.</simpara>\n      ",
                      "documentation": "\n         <p>The name of the argument or property.</p>\n      ",
                      "required": true,
                      "shape_name": "CodeGenArgName"
                    },
                    "Value": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The value of the argument or property.</simpara>\n      ",
                      "documentation": "\n         <p>The value of the argument or property.</p>\n      ",
                      "required": true,
                      "shape_name": "CodeGenArgValue"
                    },
                    "Param": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n         <simpara>True if the value is used as a parameter.</simpara>\n      ",
                      "documentation": "\n         <p>True if the value is used as a parameter.</p>\n      ",
                      "shape_name": "Boolean"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>An argument or property of a node.</simpara>\n      ",
                  "documentation": "\n         <p>An argument or property of a node.</p>\n      ",
                  "shape_name": "CodeGenNodeArg"
                }
              },
              "S3": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>An Amazon S3 location.</simpara>\n      ",
                "documentation": "\n         <p>An Amazon S3 location.</p>\n      ",
                "shape_name": "CodeGenNodeArgs",
                "min_length": 0,
                "max_length": 50,
                "members": {
                  "type": "structure",
                  "members": {
                    "Name": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The name of the argument or property.</simpara>\n      ",
                      "documentation": "\n         <p>The name of the argument or property.</p>\n      ",
                      "required": true,
                      "shape_name": "CodeGenArgName"
                    },
                    "Value": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The value of the argument or property.</simpara>\n      ",
                      "documentation": "\n         <p>The value of the argument or property.</p>\n      ",
                      "required": true,
                      "shape_name": "CodeGenArgValue"
                    },
                    "Param": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n         <simpara>True if the value is used as a parameter.</simpara>\n      ",
                      "documentation": "\n         <p>True if the value is used as a parameter.</p>\n      ",
                      "shape_name": "Boolean"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>An argument or property of a node.</simpara>\n      ",
                  "documentation": "\n         <p>An argument or property of a node.</p>\n      ",
                  "shape_name": "CodeGenNodeArg"
                }
              },
              "DynamoDB": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A DynamoDB Table location.</simpara>\n      ",
                "documentation": "\n         <p>A DynamoDB Table location.</p>\n      ",
                "shape_name": "CodeGenNodeArgs",
                "min_length": 0,
                "max_length": 50,
                "members": {
                  "type": "structure",
                  "members": {
                    "Name": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The name of the argument or property.</simpara>\n      ",
                      "documentation": "\n         <p>The name of the argument or property.</p>\n      ",
                      "required": true,
                      "shape_name": "CodeGenArgName"
                    },
                    "Value": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The value of the argument or property.</simpara>\n      ",
                      "documentation": "\n         <p>The value of the argument or property.</p>\n      ",
                      "required": true,
                      "shape_name": "CodeGenArgValue"
                    },
                    "Param": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n         <simpara>True if the value is used as a parameter.</simpara>\n      ",
                      "documentation": "\n         <p>True if the value is used as a parameter.</p>\n      ",
                      "shape_name": "Boolean"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>An argument or property of a node.</simpara>\n      ",
                  "documentation": "\n         <p>An argument or property of a node.</p>\n      ",
                  "shape_name": "CodeGenNodeArg"
                }
              }
            },
            "zonbookDocumentation": "\n         <simpara>Parameters for the mapping.</simpara>\n      ",
            "documentation": "\n         <p>Parameters for the mapping.</p>\n      ",
            "shape_name": "Location"
          }
        },
        "shape_name": "GetMappingRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Mapping": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of mappings to the specified targets.</simpara>\n      ",
            "documentation": "\n         <p>A list of mappings to the specified targets.</p>\n      ",
            "required": true,
            "shape_name": "MappingList",
            "members": {
              "type": "structure",
              "members": {
                "SourceTable": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The name of the source table.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the source table.</p>\n      ",
                  "shape_name": "TableName"
                },
                "SourcePath": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The source path.</simpara>\n      ",
                  "documentation": "\n         <p>The source path.</p>\n      ",
                  "shape_name": "SchemaPathString"
                },
                "SourceType": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The source type.</simpara>\n      ",
                  "documentation": "\n         <p>The source type.</p>\n      ",
                  "shape_name": "FieldType"
                },
                "TargetTable": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The target table.</simpara>\n      ",
                  "documentation": "\n         <p>The target table.</p>\n      ",
                  "shape_name": "TableName"
                },
                "TargetPath": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The target path.</simpara>\n      ",
                  "documentation": "\n         <p>The target path.</p>\n      ",
                  "shape_name": "SchemaPathString"
                },
                "TargetType": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The target type.</simpara>\n      ",
                  "documentation": "\n         <p>The target type.</p>\n      ",
                  "shape_name": "FieldType"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Defines a mapping.</simpara>\n      ",
              "documentation": "\n         <p>Defines a mapping.</p>\n      ",
              "shape_name": "MappingEntry"
            }
          }
        },
        "shape_name": "GetMappingResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        }
      ],
      "documentation": "\n         <p>Creates mappings.</p>\n      "
    },
    "GetPlan": {
      "name": "GetPlan",
      "input": {
        "type": "structure",
        "members": {
          "Mapping": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The list of mappings from a source table to target tables.</simpara>\n      ",
            "documentation": "\n         <p>The list of mappings from a source table to target tables.</p>\n      ",
            "required": true,
            "shape_name": "MappingList",
            "members": {
              "type": "structure",
              "members": {
                "SourceTable": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The name of the source table.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the source table.</p>\n      ",
                  "shape_name": "TableName"
                },
                "SourcePath": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The source path.</simpara>\n      ",
                  "documentation": "\n         <p>The source path.</p>\n      ",
                  "shape_name": "SchemaPathString"
                },
                "SourceType": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The source type.</simpara>\n      ",
                  "documentation": "\n         <p>The source type.</p>\n      ",
                  "shape_name": "FieldType"
                },
                "TargetTable": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The target table.</simpara>\n      ",
                  "documentation": "\n         <p>The target table.</p>\n      ",
                  "shape_name": "TableName"
                },
                "TargetPath": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The target path.</simpara>\n      ",
                  "documentation": "\n         <p>The target path.</p>\n      ",
                  "shape_name": "SchemaPathString"
                },
                "TargetType": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The target type.</simpara>\n      ",
                  "documentation": "\n         <p>The target type.</p>\n      ",
                  "shape_name": "FieldType"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Defines a mapping.</simpara>\n      ",
              "documentation": "\n         <p>Defines a mapping.</p>\n      ",
              "shape_name": "MappingEntry"
            }
          },
          "Source": {
            "type": "structure",
            "members": {
              "DatabaseName": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The database in which the table metadata resides.</simpara>\n      ",
                "documentation": "\n         <p>The database in which the table metadata resides.</p>\n      ",
                "required": true,
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "TableName": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The name of the table in question.</simpara>\n      ",
                "documentation": "\n         <p>The name of the table in question.</p>\n      ",
                "required": true,
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              }
            },
            "zonbookDocumentation": "\n         <simpara>The source table.</simpara>\n      ",
            "documentation": "\n         <p>The source table.</p>\n      ",
            "required": true,
            "shape_name": "CatalogEntry"
          },
          "Sinks": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The target tables.</simpara>\n      ",
            "documentation": "\n         <p>The target tables.</p>\n      ",
            "shape_name": "CatalogEntries",
            "members": {
              "type": "structure",
              "members": {
                "DatabaseName": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The database in which the table metadata resides.</simpara>\n      ",
                  "documentation": "\n         <p>The database in which the table metadata resides.</p>\n      ",
                  "required": true,
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "TableName": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The name of the table in question.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the table in question.</p>\n      ",
                  "required": true,
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                }
              },
              "zonbookDocumentation": "\n         <simpara>Specifies a table definition in the Data Catalog.</simpara>\n      ",
              "documentation": "\n         <p>Specifies a table definition in the Data Catalog.</p>\n      ",
              "shape_name": "CatalogEntry"
            }
          },
          "Location": {
            "type": "structure",
            "members": {
              "Jdbc": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A JDBC location.</simpara>\n      ",
                "documentation": "\n         <p>A JDBC location.</p>\n      ",
                "shape_name": "CodeGenNodeArgs",
                "min_length": 0,
                "max_length": 50,
                "members": {
                  "type": "structure",
                  "members": {
                    "Name": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The name of the argument or property.</simpara>\n      ",
                      "documentation": "\n         <p>The name of the argument or property.</p>\n      ",
                      "required": true,
                      "shape_name": "CodeGenArgName"
                    },
                    "Value": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The value of the argument or property.</simpara>\n      ",
                      "documentation": "\n         <p>The value of the argument or property.</p>\n      ",
                      "required": true,
                      "shape_name": "CodeGenArgValue"
                    },
                    "Param": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n         <simpara>True if the value is used as a parameter.</simpara>\n      ",
                      "documentation": "\n         <p>True if the value is used as a parameter.</p>\n      ",
                      "shape_name": "Boolean"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>An argument or property of a node.</simpara>\n      ",
                  "documentation": "\n         <p>An argument or property of a node.</p>\n      ",
                  "shape_name": "CodeGenNodeArg"
                }
              },
              "S3": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>An Amazon S3 location.</simpara>\n      ",
                "documentation": "\n         <p>An Amazon S3 location.</p>\n      ",
                "shape_name": "CodeGenNodeArgs",
                "min_length": 0,
                "max_length": 50,
                "members": {
                  "type": "structure",
                  "members": {
                    "Name": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The name of the argument or property.</simpara>\n      ",
                      "documentation": "\n         <p>The name of the argument or property.</p>\n      ",
                      "required": true,
                      "shape_name": "CodeGenArgName"
                    },
                    "Value": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The value of the argument or property.</simpara>\n      ",
                      "documentation": "\n         <p>The value of the argument or property.</p>\n      ",
                      "required": true,
                      "shape_name": "CodeGenArgValue"
                    },
                    "Param": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n         <simpara>True if the value is used as a parameter.</simpara>\n      ",
                      "documentation": "\n         <p>True if the value is used as a parameter.</p>\n      ",
                      "shape_name": "Boolean"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>An argument or property of a node.</simpara>\n      ",
                  "documentation": "\n         <p>An argument or property of a node.</p>\n      ",
                  "shape_name": "CodeGenNodeArg"
                }
              },
              "DynamoDB": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A DynamoDB Table location.</simpara>\n      ",
                "documentation": "\n         <p>A DynamoDB Table location.</p>\n      ",
                "shape_name": "CodeGenNodeArgs",
                "min_length": 0,
                "max_length": 50,
                "members": {
                  "type": "structure",
                  "members": {
                    "Name": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The name of the argument or property.</simpara>\n      ",
                      "documentation": "\n         <p>The name of the argument or property.</p>\n      ",
                      "required": true,
                      "shape_name": "CodeGenArgName"
                    },
                    "Value": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The value of the argument or property.</simpara>\n      ",
                      "documentation": "\n         <p>The value of the argument or property.</p>\n      ",
                      "required": true,
                      "shape_name": "CodeGenArgValue"
                    },
                    "Param": {
                      "type": "boolean",
                      "zonbookDocumentation": "\n         <simpara>True if the value is used as a parameter.</simpara>\n      ",
                      "documentation": "\n         <p>True if the value is used as a parameter.</p>\n      ",
                      "shape_name": "Boolean"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>An argument or property of a node.</simpara>\n      ",
                  "documentation": "\n         <p>An argument or property of a node.</p>\n      ",
                  "shape_name": "CodeGenNodeArg"
                }
              }
            },
            "zonbookDocumentation": "\n         <simpara>Parameters for the mapping.</simpara>\n      ",
            "documentation": "\n         <p>Parameters for the mapping.</p>\n      ",
            "shape_name": "Location"
          },
          "Language": {
            "type": "string",
            "enum": [
              "PYTHON",
              "SCALA"
            ],
            "zonbookDocumentation": "\n         <simpara>The programming language of the code to perform the mapping.</simpara>\n      ",
            "documentation": "\n         <p>The programming language of the code to perform the mapping.</p>\n      ",
            "shape_name": "Language"
          }
        },
        "shape_name": "GetPlanRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "PythonScript": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A Python script to perform the mapping.</simpara>\n      ",
            "documentation": "\n         <p>A Python script to perform the mapping.</p>\n      ",
            "shape_name": "PythonScript"
          },
          "ScalaCode": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Scala code to perform the mapping.</simpara>\n      ",
            "documentation": "\n         <p>Scala code to perform the mapping.</p>\n      ",
            "shape_name": "ScalaCode"
          }
        },
        "shape_name": "GetPlanResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Gets code to perform a specified mapping.</p>\n      "
    },
    "CreateJob": {
      "name": "CreateJob",
      "input": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name you assign to this job definition. It must be unique in your account.</simpara>\n      ",
            "documentation": "\n         <p>The name you assign to this job definition. It must be unique in your account.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "Description": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
            "zonbookDocumentation": "\n         <simpara>Description of the job being defined.</simpara>\n      ",
            "documentation": "\n         <p>Description of the job being defined.</p>\n      ",
            "shape_name": "DescriptionString",
            "min_length": 0,
            "max_length": 2048
          },
          "LogUri": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>This field is reserved for future use.</simpara>\n      ",
            "documentation": "\n         <p>This field is reserved for future use.</p>\n      ",
            "shape_name": "UriString"
          },
          "Role": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The name or ARN of the IAM role associated with this job.</simpara>\n      ",
            "documentation": "\n         <p>The name or ARN of the IAM role associated with this job.</p>\n      ",
            "required": true,
            "shape_name": "RoleString"
          },
          "ExecutionProperty": {
            "type": "structure",
            "members": {
              "MaxConcurrentRuns": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The maximum number of concurrent runs allowed for the job.\n      The default is 1. An error is returned when this threshold is reached.\n      The maximum value you can specify is controlled by a service limit.</simpara>\n      ",
                "documentation": "\n         <p>The maximum number of concurrent runs allowed for the job.\n      The default is 1. An error is returned when this threshold is reached.\n      The maximum value you can specify is controlled by a service limit.</p>\n      ",
                "shape_name": "MaxConcurrentRuns"
              }
            },
            "zonbookDocumentation": "\n         <simpara>An ExecutionProperty specifying the maximum number of concurrent\n      runs allowed for this job.</simpara>\n      ",
            "documentation": "\n         <p>An ExecutionProperty specifying the maximum number of concurrent\n      runs allowed for this job.</p>\n      ",
            "shape_name": "ExecutionProperty"
          },
          "Command": {
            "type": "structure",
            "members": {
              "Name": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The name of the job command: this must be <code>glueetl</code>.</simpara>\n      ",
                "documentation": "\n         <p>The name of the job command: this must be <code>glueetl</code>.</p>\n      ",
                "shape_name": "GenericString"
              },
              "ScriptLocation": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>Specifies the S3 path to a script that executes a job (required).</simpara>\n      ",
                "documentation": "\n         <p>Specifies the S3 path to a script that executes a job (required).</p>\n      ",
                "shape_name": "ScriptLocationString"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The JobCommand that executes this job.</simpara>\n      ",
            "documentation": "\n         <p>The JobCommand that executes this job.</p>\n      ",
            "required": true,
            "shape_name": "JobCommand"
          },
          "DefaultArguments": {
            "type": "map",
            "zonbookDocumentation": "\n         <simpara>The default arguments for this job.</simpara>\n         <simpara>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</simpara>\n         <simpara>For information about how to specify and consume your own Job arguments, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</ulink> topic in the developer guide.</simpara>\n         <simpara>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</ulink> topic in the developer guide.</simpara>\n      ",
            "documentation": "\n         <p>The default arguments for this job.</p>\n         <p>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</p>\n         <p>For information about how to specify and consume your own Job arguments, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p>\n         <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>\n      ",
            "shape_name": "GenericMap",
            "keys": {
              "type": "string",
              "shape_name": "GenericString",
              "documentation": null
            },
            "members": {
              "type": "string",
              "shape_name": "GenericString",
              "documentation": null
            }
          },
          "Connections": {
            "type": "structure",
            "members": {
              "Connections": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A list of connections used by the job.</simpara>\n      ",
                "documentation": "\n         <p>A list of connections used by the job.</p>\n      ",
                "shape_name": "StringList",
                "members": {
                  "type": "string",
                  "shape_name": "GenericString",
                  "documentation": null
                }
              }
            },
            "zonbookDocumentation": "\n         <simpara>The connections used for this job.</simpara>\n      ",
            "documentation": "\n         <p>The connections used for this job.</p>\n      ",
            "shape_name": "ConnectionsList"
          },
          "MaxRetries": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>The maximum number of times to retry this job if it fails.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of times to retry this job if it fails.</p>\n      ",
            "shape_name": "MaxRetries"
          },
          "AllocatedCapacity": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>The number of AWS Glue data processing units (DPUs) to allocate to this Job.\n      From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure\n      of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.\n      For more information, see the <ulink url=\"https://aws.amazon.com/glue/pricing/\">AWS Glue\n      pricing page</ulink>.</simpara>\n      ",
            "documentation": "\n         <p>The number of AWS Glue data processing units (DPUs) to allocate to this Job.\n      From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure\n      of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.\n      For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">AWS Glue\n      pricing page</a>.</p>\n      ",
            "shape_name": "IntegerValue"
          },
          "Timeout": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The job timeout in minutes. The default is 2880 minutes (48 hours).</simpara>\n      ",
            "documentation": "\n         <p>The job timeout in minutes. The default is 2880 minutes (48 hours).</p>\n      ",
            "shape_name": "Timeout",
            "min_length": 1
          },
          "NotificationProperty": {
            "type": "structure",
            "members": {
              "NotifyDelayAfter": {
                "type": "integer",
                "box": true,
                "zonbookDocumentation": "\n         <simpara>After a job run starts, the number of minutes to wait before sending a job run delay notification.</simpara>\n      ",
                "documentation": "\n         <p>After a job run starts, the number of minutes to wait before sending a job run delay notification.</p>\n      ",
                "shape_name": "NotifyDelayAfter",
                "min_length": 1
              }
            },
            "zonbookDocumentation": "\n         <simpara>Specifies configuration properties of a job notification.</simpara>\n      ",
            "documentation": "\n         <p>Specifies configuration properties of a job notification.</p>\n      ",
            "shape_name": "NotificationProperty"
          }
        },
        "shape_name": "CreateJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The unique name that was provided for this job definition.</simpara>\n      ",
            "documentation": "\n         <p>The unique name that was provided for this job definition.</p>\n      ",
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "CreateJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The same unique identifier was associated with two different records.</simpara>\n      ",
          "documentation": "\n         <p>The same unique identifier was associated with two different records.</p>\n      ",
          "shape_name": "IdempotentParameterMismatchException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource to be created or added already exists.</simpara>\n      ",
          "documentation": "\n         <p>A resource to be created or added already exists.</p>\n      ",
          "shape_name": "AlreadyExistsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource numerical limit was exceeded.</simpara>\n      ",
          "documentation": "\n         <p>A resource numerical limit was exceeded.</p>\n      ",
          "shape_name": "ResourceNumberLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>Two processes are trying to modify a resource simultaneously.</simpara>\n      ",
          "documentation": "\n         <p>Two processes are trying to modify a resource simultaneously.</p>\n      ",
          "shape_name": "ConcurrentModificationException"
        }
      ],
      "documentation": "\n         <p>Creates a new job definition.</p>\n      "
    },
    "GetJob": {
      "name": "GetJob",
      "input": {
        "type": "structure",
        "members": {
          "JobName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the job definition to retrieve.</simpara>\n      ",
            "documentation": "\n         <p>The name of the job definition to retrieve.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "GetJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Job": {
            "type": "structure",
            "members": {
              "Name": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The name you assign to this job definition.</simpara>\n      ",
                "documentation": "\n         <p>The name you assign to this job definition.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "Description": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                "zonbookDocumentation": "\n         <simpara>Description of the job being defined.</simpara>\n      ",
                "documentation": "\n         <p>Description of the job being defined.</p>\n      ",
                "shape_name": "DescriptionString",
                "min_length": 0,
                "max_length": 2048
              },
              "LogUri": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>This field is reserved for future use.</simpara>\n      ",
                "documentation": "\n         <p>This field is reserved for future use.</p>\n      ",
                "shape_name": "UriString"
              },
              "Role": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The name or ARN of the IAM role associated with this job.</simpara>\n      ",
                "documentation": "\n         <p>The name or ARN of the IAM role associated with this job.</p>\n      ",
                "shape_name": "RoleString"
              },
              "CreatedOn": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>The time and date that this job definition was created.</simpara>\n      ",
                "documentation": "\n         <p>The time and date that this job definition was created.</p>\n      ",
                "shape_name": "TimestampValue"
              },
              "LastModifiedOn": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>The last point in time when this job definition was modified.</simpara>\n      ",
                "documentation": "\n         <p>The last point in time when this job definition was modified.</p>\n      ",
                "shape_name": "TimestampValue"
              },
              "ExecutionProperty": {
                "type": "structure",
                "members": {
                  "MaxConcurrentRuns": {
                    "type": "integer",
                    "zonbookDocumentation": "\n         <simpara>The maximum number of concurrent runs allowed for the job.\n      The default is 1. An error is returned when this threshold is reached.\n      The maximum value you can specify is controlled by a service limit.</simpara>\n      ",
                    "documentation": "\n         <p>The maximum number of concurrent runs allowed for the job.\n      The default is 1. An error is returned when this threshold is reached.\n      The maximum value you can specify is controlled by a service limit.</p>\n      ",
                    "shape_name": "MaxConcurrentRuns"
                  }
                },
                "zonbookDocumentation": "\n         <simpara>An ExecutionProperty specifying the maximum number of concurrent\n      runs allowed for this job.</simpara>\n      ",
                "documentation": "\n         <p>An ExecutionProperty specifying the maximum number of concurrent\n      runs allowed for this job.</p>\n      ",
                "shape_name": "ExecutionProperty"
              },
              "Command": {
                "type": "structure",
                "members": {
                  "Name": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>The name of the job command: this must be <code>glueetl</code>.</simpara>\n      ",
                    "documentation": "\n         <p>The name of the job command: this must be <code>glueetl</code>.</p>\n      ",
                    "shape_name": "GenericString"
                  },
                  "ScriptLocation": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>Specifies the S3 path to a script that executes a job (required).</simpara>\n      ",
                    "documentation": "\n         <p>Specifies the S3 path to a script that executes a job (required).</p>\n      ",
                    "shape_name": "ScriptLocationString"
                  }
                },
                "zonbookDocumentation": "\n         <simpara>The JobCommand that executes this job.</simpara>\n      ",
                "documentation": "\n         <p>The JobCommand that executes this job.</p>\n      ",
                "shape_name": "JobCommand"
              },
              "DefaultArguments": {
                "type": "map",
                "zonbookDocumentation": "\n         <simpara>The default arguments for this job, specified as name-value pairs.</simpara>\n         <simpara>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</simpara>\n         <simpara>For information about how to specify and consume your own Job arguments, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</ulink> topic in the developer guide.</simpara>\n         <simpara>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</ulink> topic in the developer guide.</simpara>\n      ",
                "documentation": "\n         <p>The default arguments for this job, specified as name-value pairs.</p>\n         <p>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</p>\n         <p>For information about how to specify and consume your own Job arguments, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p>\n         <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>\n      ",
                "shape_name": "GenericMap",
                "keys": {
                  "type": "string",
                  "shape_name": "GenericString",
                  "documentation": null
                },
                "members": {
                  "type": "string",
                  "shape_name": "GenericString",
                  "documentation": null
                }
              },
              "Connections": {
                "type": "structure",
                "members": {
                  "Connections": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list of connections used by the job.</simpara>\n      ",
                    "documentation": "\n         <p>A list of connections used by the job.</p>\n      ",
                    "shape_name": "StringList",
                    "members": {
                      "type": "string",
                      "shape_name": "GenericString",
                      "documentation": null
                    }
                  }
                },
                "zonbookDocumentation": "\n         <simpara>The connections used for this job.</simpara>\n      ",
                "documentation": "\n         <p>The connections used for this job.</p>\n      ",
                "shape_name": "ConnectionsList"
              },
              "MaxRetries": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The maximum number of times to retry this job after a JobRun fails.</simpara>\n      ",
                "documentation": "\n         <p>The maximum number of times to retry this job after a JobRun fails.</p>\n      ",
                "shape_name": "MaxRetries"
              },
              "AllocatedCapacity": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The number of AWS Glue data processing units (DPUs) allocated to runs of this job.\n      From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure\n      of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.\n      For more information, see the <ulink url=\"https://aws.amazon.com/glue/pricing/\">AWS Glue\n      pricing page</ulink>.</simpara>\n      ",
                "documentation": "\n         <p>The number of AWS Glue data processing units (DPUs) allocated to runs of this job.\n      From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure\n      of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.\n      For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">AWS Glue\n      pricing page</a>.</p>\n      ",
                "shape_name": "IntegerValue"
              },
              "Timeout": {
                "type": "integer",
                "box": true,
                "zonbookDocumentation": "\n         <simpara>The job timeout in minutes.</simpara>\n      ",
                "documentation": "\n         <p>The job timeout in minutes.</p>\n      ",
                "shape_name": "Timeout",
                "min_length": 1
              },
              "NotificationProperty": {
                "type": "structure",
                "members": {
                  "NotifyDelayAfter": {
                    "type": "integer",
                    "box": true,
                    "zonbookDocumentation": "\n         <simpara>After a job run starts, the number of minutes to wait before sending a job run delay notification.</simpara>\n      ",
                    "documentation": "\n         <p>After a job run starts, the number of minutes to wait before sending a job run delay notification.</p>\n      ",
                    "shape_name": "NotifyDelayAfter",
                    "min_length": 1
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Specifies configuration properties of a job notification.</simpara>\n      ",
                "documentation": "\n         <p>Specifies configuration properties of a job notification.</p>\n      ",
                "shape_name": "NotificationProperty"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The requested job definition.</simpara>\n      ",
            "documentation": "\n         <p>The requested job definition.</p>\n      ",
            "shape_name": "Job"
          }
        },
        "shape_name": "GetJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Retrieves an existing job definition.</p>\n      "
    },
    "GetJobs": {
      "name": "GetJobs",
      "input": {
        "type": "structure",
        "members": {
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, if this is a continuation call.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, if this is a continuation call.</p>\n      ",
            "shape_name": "GenericString"
          },
          "MaxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The maximum size of the response.</simpara>\n      ",
            "documentation": "\n         <p>The maximum size of the response.</p>\n      ",
            "shape_name": "PageSize",
            "min_length": 1,
            "max_length": 1000
          }
        },
        "shape_name": "GetJobsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Jobs": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of job definitions.</simpara>\n      ",
            "documentation": "\n         <p>A list of job definitions.</p>\n      ",
            "shape_name": "JobList",
            "members": {
              "type": "structure",
              "members": {
                "Name": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The name you assign to this job definition.</simpara>\n      ",
                  "documentation": "\n         <p>The name you assign to this job definition.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "Description": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                  "zonbookDocumentation": "\n         <simpara>Description of the job being defined.</simpara>\n      ",
                  "documentation": "\n         <p>Description of the job being defined.</p>\n      ",
                  "shape_name": "DescriptionString",
                  "min_length": 0,
                  "max_length": 2048
                },
                "LogUri": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>This field is reserved for future use.</simpara>\n      ",
                  "documentation": "\n         <p>This field is reserved for future use.</p>\n      ",
                  "shape_name": "UriString"
                },
                "Role": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The name or ARN of the IAM role associated with this job.</simpara>\n      ",
                  "documentation": "\n         <p>The name or ARN of the IAM role associated with this job.</p>\n      ",
                  "shape_name": "RoleString"
                },
                "CreatedOn": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The time and date that this job definition was created.</simpara>\n      ",
                  "documentation": "\n         <p>The time and date that this job definition was created.</p>\n      ",
                  "shape_name": "TimestampValue"
                },
                "LastModifiedOn": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The last point in time when this job definition was modified.</simpara>\n      ",
                  "documentation": "\n         <p>The last point in time when this job definition was modified.</p>\n      ",
                  "shape_name": "TimestampValue"
                },
                "ExecutionProperty": {
                  "type": "structure",
                  "members": {
                    "MaxConcurrentRuns": {
                      "type": "integer",
                      "zonbookDocumentation": "\n         <simpara>The maximum number of concurrent runs allowed for the job.\n      The default is 1. An error is returned when this threshold is reached.\n      The maximum value you can specify is controlled by a service limit.</simpara>\n      ",
                      "documentation": "\n         <p>The maximum number of concurrent runs allowed for the job.\n      The default is 1. An error is returned when this threshold is reached.\n      The maximum value you can specify is controlled by a service limit.</p>\n      ",
                      "shape_name": "MaxConcurrentRuns"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>An ExecutionProperty specifying the maximum number of concurrent\n      runs allowed for this job.</simpara>\n      ",
                  "documentation": "\n         <p>An ExecutionProperty specifying the maximum number of concurrent\n      runs allowed for this job.</p>\n      ",
                  "shape_name": "ExecutionProperty"
                },
                "Command": {
                  "type": "structure",
                  "members": {
                    "Name": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The name of the job command: this must be <code>glueetl</code>.</simpara>\n      ",
                      "documentation": "\n         <p>The name of the job command: this must be <code>glueetl</code>.</p>\n      ",
                      "shape_name": "GenericString"
                    },
                    "ScriptLocation": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>Specifies the S3 path to a script that executes a job (required).</simpara>\n      ",
                      "documentation": "\n         <p>Specifies the S3 path to a script that executes a job (required).</p>\n      ",
                      "shape_name": "ScriptLocationString"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The JobCommand that executes this job.</simpara>\n      ",
                  "documentation": "\n         <p>The JobCommand that executes this job.</p>\n      ",
                  "shape_name": "JobCommand"
                },
                "DefaultArguments": {
                  "type": "map",
                  "zonbookDocumentation": "\n         <simpara>The default arguments for this job, specified as name-value pairs.</simpara>\n         <simpara>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</simpara>\n         <simpara>For information about how to specify and consume your own Job arguments, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</ulink> topic in the developer guide.</simpara>\n         <simpara>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</ulink> topic in the developer guide.</simpara>\n      ",
                  "documentation": "\n         <p>The default arguments for this job, specified as name-value pairs.</p>\n         <p>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</p>\n         <p>For information about how to specify and consume your own Job arguments, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p>\n         <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>\n      ",
                  "shape_name": "GenericMap",
                  "keys": {
                    "type": "string",
                    "shape_name": "GenericString",
                    "documentation": null
                  },
                  "members": {
                    "type": "string",
                    "shape_name": "GenericString",
                    "documentation": null
                  }
                },
                "Connections": {
                  "type": "structure",
                  "members": {
                    "Connections": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>A list of connections used by the job.</simpara>\n      ",
                      "documentation": "\n         <p>A list of connections used by the job.</p>\n      ",
                      "shape_name": "StringList",
                      "members": {
                        "type": "string",
                        "shape_name": "GenericString",
                        "documentation": null
                      }
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The connections used for this job.</simpara>\n      ",
                  "documentation": "\n         <p>The connections used for this job.</p>\n      ",
                  "shape_name": "ConnectionsList"
                },
                "MaxRetries": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The maximum number of times to retry this job after a JobRun fails.</simpara>\n      ",
                  "documentation": "\n         <p>The maximum number of times to retry this job after a JobRun fails.</p>\n      ",
                  "shape_name": "MaxRetries"
                },
                "AllocatedCapacity": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The number of AWS Glue data processing units (DPUs) allocated to runs of this job.\n      From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure\n      of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.\n      For more information, see the <ulink url=\"https://aws.amazon.com/glue/pricing/\">AWS Glue\n      pricing page</ulink>.</simpara>\n      ",
                  "documentation": "\n         <p>The number of AWS Glue data processing units (DPUs) allocated to runs of this job.\n      From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure\n      of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.\n      For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">AWS Glue\n      pricing page</a>.</p>\n      ",
                  "shape_name": "IntegerValue"
                },
                "Timeout": {
                  "type": "integer",
                  "box": true,
                  "zonbookDocumentation": "\n         <simpara>The job timeout in minutes.</simpara>\n      ",
                  "documentation": "\n         <p>The job timeout in minutes.</p>\n      ",
                  "shape_name": "Timeout",
                  "min_length": 1
                },
                "NotificationProperty": {
                  "type": "structure",
                  "members": {
                    "NotifyDelayAfter": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <simpara>After a job run starts, the number of minutes to wait before sending a job run delay notification.</simpara>\n      ",
                      "documentation": "\n         <p>After a job run starts, the number of minutes to wait before sending a job run delay notification.</p>\n      ",
                      "shape_name": "NotifyDelayAfter",
                      "min_length": 1
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Specifies configuration properties of a job notification.</simpara>\n      ",
                  "documentation": "\n         <p>Specifies configuration properties of a job notification.</p>\n      ",
                  "shape_name": "NotificationProperty"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Specifies a job definition.</simpara>\n      ",
              "documentation": "\n         <p>Specifies a job definition.</p>\n      ",
              "shape_name": "Job"
            }
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, if not all job definitions have yet been returned.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, if not all job definitions have yet been returned.</p>\n      ",
            "shape_name": "GenericString"
          }
        },
        "shape_name": "GetJobsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Retrieves all current job definitions.</p>\n      "
    },
    "DeleteJob": {
      "name": "DeleteJob",
      "input": {
        "type": "structure",
        "members": {
          "JobName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the job definition to delete.</simpara>\n      ",
            "documentation": "\n         <p>The name of the job definition to delete.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "DeleteJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the job definition that was deleted.</simpara>\n      ",
            "documentation": "\n         <p>The name of the job definition that was deleted.</p>\n      ",
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "DeleteJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Deletes a specified job definition. If the job definition\n      is not found, no exception is thrown.</p>\n      "
    },
    "StartJobRun": {
      "name": "StartJobRun",
      "input": {
        "type": "structure",
        "members": {
          "JobName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the job definition to use.</simpara>\n      ",
            "documentation": "\n         <p>The name of the job definition to use.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "JobRunId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of a previous JobRun to retry.</simpara>\n      ",
            "documentation": "\n         <p>The ID of a previous JobRun to retry.</p>\n      ",
            "shape_name": "IdString",
            "min_length": 1,
            "max_length": 255
          },
          "Arguments": {
            "type": "map",
            "zonbookDocumentation": "\n         <simpara>The job arguments specifically for this run. They override the\n      equivalent default arguments set for in the job definition itself.</simpara>\n         <simpara>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</simpara>\n         <simpara>For information about how to specify and consume your own Job arguments, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</ulink> topic in the developer guide.</simpara>\n         <simpara>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</ulink> topic in the developer guide.</simpara>\n      ",
            "documentation": "\n         <p>The job arguments specifically for this run. They override the\n      equivalent default arguments set for in the job definition itself.</p>\n         <p>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</p>\n         <p>For information about how to specify and consume your own Job arguments, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p>\n         <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>\n      ",
            "shape_name": "GenericMap",
            "keys": {
              "type": "string",
              "shape_name": "GenericString",
              "documentation": null
            },
            "members": {
              "type": "string",
              "shape_name": "GenericString",
              "documentation": null
            }
          },
          "AllocatedCapacity": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>The number of AWS Glue data processing units (DPUs) to allocate to this JobRun.\n      From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure\n      of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.\n      For more information, see the <ulink url=\"https://aws.amazon.com/glue/pricing/\">AWS Glue\n      pricing page</ulink>.</simpara>\n      ",
            "documentation": "\n         <p>The number of AWS Glue data processing units (DPUs) to allocate to this JobRun.\n      From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure\n      of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.\n      For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">AWS Glue\n      pricing page</a>.</p>\n      ",
            "shape_name": "IntegerValue"
          },
          "Timeout": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The job run timeout in minutes. It overrides the timeout value of the job.</simpara>\n      ",
            "documentation": "\n         <p>The job run timeout in minutes. It overrides the timeout value of the job.</p>\n      ",
            "shape_name": "Timeout",
            "min_length": 1
          },
          "NotificationProperty": {
            "type": "structure",
            "members": {
              "NotifyDelayAfter": {
                "type": "integer",
                "box": true,
                "zonbookDocumentation": "\n         <simpara>After a job run starts, the number of minutes to wait before sending a job run delay notification.</simpara>\n      ",
                "documentation": "\n         <p>After a job run starts, the number of minutes to wait before sending a job run delay notification.</p>\n      ",
                "shape_name": "NotifyDelayAfter",
                "min_length": 1
              }
            },
            "zonbookDocumentation": "\n         <simpara>Specifies configuration properties of a job run notification.</simpara>\n      ",
            "documentation": "\n         <p>Specifies configuration properties of a job run notification.</p>\n      ",
            "shape_name": "NotificationProperty"
          }
        },
        "shape_name": "StartJobRunRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobRunId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID assigned to this job run.</simpara>\n      ",
            "documentation": "\n         <p>The ID assigned to this job run.</p>\n      ",
            "shape_name": "IdString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "StartJobRunResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource numerical limit was exceeded.</simpara>\n      ",
          "documentation": "\n         <p>A resource numerical limit was exceeded.</p>\n      ",
          "shape_name": "ResourceNumberLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>Too many jobs are being run concurrently.</simpara>\n      ",
          "documentation": "\n         <p>Too many jobs are being run concurrently.</p>\n      ",
          "shape_name": "ConcurrentRunsExceededException"
        }
      ],
      "documentation": "\n         <p>Starts a job run using a job definition.</p>\n      "
    },
    "BatchStopJobRun": {
      "name": "BatchStopJobRun",
      "input": {
        "type": "structure",
        "members": {
          "JobName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the job definition for which to stop job runs.</simpara>\n      ",
            "documentation": "\n         <p>The name of the job definition for which to stop job runs.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "JobRunIds": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of the JobRunIds that should be stopped for that job definition.</simpara>\n      ",
            "documentation": "\n         <p>A list of the JobRunIds that should be stopped for that job definition.</p>\n      ",
            "required": true,
            "shape_name": "BatchStopJobRunJobRunIdList",
            "min_length": 1,
            "max_length": 25,
            "members": {
              "type": "string",
              "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
              "shape_name": "IdString",
              "documentation": null,
              "min_length": 1,
              "max_length": 255
            }
          }
        },
        "shape_name": "BatchStopJobRunRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "SuccessfulSubmissions": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of the JobRuns that were successfully submitted for stopping.</simpara>\n      ",
            "documentation": "\n         <p>A list of the JobRuns that were successfully submitted for stopping.</p>\n      ",
            "shape_name": "BatchStopJobRunSuccessfulSubmissionList",
            "members": {
              "type": "structure",
              "members": {
                "JobName": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The name of the job definition used in the job run that was stopped.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the job definition used in the job run that was stopped.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "JobRunId": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The JobRunId of the job run that was stopped.</simpara>\n      ",
                  "documentation": "\n         <p>The JobRunId of the job run that was stopped.</p>\n      ",
                  "shape_name": "IdString",
                  "min_length": 1,
                  "max_length": 255
                }
              },
              "zonbookDocumentation": "\n         <simpara>Records a successful request to stop a specified JobRun.</simpara>\n      ",
              "documentation": "\n         <p>Records a successful request to stop a specified JobRun.</p>\n      ",
              "shape_name": "BatchStopJobRunSuccessfulSubmission"
            }
          },
          "Errors": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of the errors that were encountered in tryng to stop\n      JobRuns, including the JobRunId for which each error was encountered\n      and details about the error.</simpara>\n      ",
            "documentation": "\n         <p>A list of the errors that were encountered in tryng to stop\n      JobRuns, including the JobRunId for which each error was encountered\n      and details about the error.</p>\n      ",
            "shape_name": "BatchStopJobRunErrorList",
            "members": {
              "type": "structure",
              "members": {
                "JobName": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The name of the job definition used in the job run in question.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the job definition used in the job run in question.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "JobRunId": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The JobRunId of the job run in question.</simpara>\n      ",
                  "documentation": "\n         <p>The JobRunId of the job run in question.</p>\n      ",
                  "shape_name": "IdString",
                  "min_length": 1,
                  "max_length": 255
                },
                "ErrorDetail": {
                  "type": "structure",
                  "members": {
                    "ErrorCode": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The code associated with this error.</simpara>\n      ",
                      "documentation": "\n         <p>The code associated with this error.</p>\n      ",
                      "shape_name": "NameString",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "ErrorMessage": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                      "zonbookDocumentation": "\n         <simpara>A message describing the error.</simpara>\n      ",
                      "documentation": "\n         <p>A message describing the error.</p>\n      ",
                      "shape_name": "DescriptionString",
                      "min_length": 0,
                      "max_length": 2048
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Specifies details about the error that was encountered.</simpara>\n      ",
                  "documentation": "\n         <p>Specifies details about the error that was encountered.</p>\n      ",
                  "shape_name": "ErrorDetail"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Records an error that occurred when attempting to stop a\n      specified job run.</simpara>\n      ",
              "documentation": "\n         <p>Records an error that occurred when attempting to stop a\n      specified job run.</p>\n      ",
              "shape_name": "BatchStopJobRunError"
            }
          }
        },
        "shape_name": "BatchStopJobRunResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Stops one or more job runs for a specified job definition.</p>\n      "
    },
    "GetJobRun": {
      "name": "GetJobRun",
      "input": {
        "type": "structure",
        "members": {
          "JobName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>Name of the job definition being run.</simpara>\n      ",
            "documentation": "\n         <p>Name of the job definition being run.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "RunId": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The ID of the job run.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the job run.</p>\n      ",
            "required": true,
            "shape_name": "IdString",
            "min_length": 1,
            "max_length": 255
          },
          "PredecessorsIncluded": {
            "type": "boolean",
            "zonbookDocumentation": "\n         <simpara>True if a list of predecessor runs should be returned.</simpara>\n      ",
            "documentation": "\n         <p>True if a list of predecessor runs should be returned.</p>\n      ",
            "shape_name": "BooleanValue"
          }
        },
        "shape_name": "GetJobRunRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobRun": {
            "type": "structure",
            "members": {
              "Id": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The ID of this job run.</simpara>\n      ",
                "documentation": "\n         <p>The ID of this job run.</p>\n      ",
                "shape_name": "IdString",
                "min_length": 1,
                "max_length": 255
              },
              "Attempt": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The number of the attempt to run this job.</simpara>\n      ",
                "documentation": "\n         <p>The number of the attempt to run this job.</p>\n      ",
                "shape_name": "AttemptCount"
              },
              "PreviousRunId": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The ID of the previous run of this job. For example,\n      the JobRunId specified in the StartJobRun action.</simpara>\n      ",
                "documentation": "\n         <p>The ID of the previous run of this job. For example,\n      the JobRunId specified in the StartJobRun action.</p>\n      ",
                "shape_name": "IdString",
                "min_length": 1,
                "max_length": 255
              },
              "TriggerName": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The name of the trigger that started this job run.</simpara>\n      ",
                "documentation": "\n         <p>The name of the trigger that started this job run.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "JobName": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>The name of the job definition being used in this run.</simpara>\n      ",
                "documentation": "\n         <p>The name of the job definition being used in this run.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "StartedOn": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>The date and time at which this job run was started.</simpara>\n      ",
                "documentation": "\n         <p>The date and time at which this job run was started.</p>\n      ",
                "shape_name": "TimestampValue"
              },
              "LastModifiedOn": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>The last time this job run was modified.</simpara>\n      ",
                "documentation": "\n         <p>The last time this job run was modified.</p>\n      ",
                "shape_name": "TimestampValue"
              },
              "CompletedOn": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>The date and time this job run completed.</simpara>\n      ",
                "documentation": "\n         <p>The date and time this job run completed.</p>\n      ",
                "shape_name": "TimestampValue"
              },
              "JobRunState": {
                "type": "string",
                "enum": [
                  "STARTING",
                  "RUNNING",
                  "STOPPING",
                  "STOPPED",
                  "SUCCEEDED",
                  "FAILED",
                  "TIMEOUT"
                ],
                "zonbookDocumentation": "\n         <simpara>The current state of the job run.</simpara>\n      ",
                "documentation": "\n         <p>The current state of the job run.</p>\n      ",
                "shape_name": "JobRunState"
              },
              "Arguments": {
                "type": "map",
                "zonbookDocumentation": "\n         <simpara>The job arguments associated with this run. These override equivalent default\n      arguments set for the job.</simpara>\n         <simpara>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</simpara>\n         <simpara>For information about how to specify and consume your own job arguments, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</ulink> topic in the developer guide.</simpara>\n         <simpara>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</ulink> topic in the developer guide.</simpara>\n      ",
                "documentation": "\n         <p>The job arguments associated with this run. These override equivalent default\n      arguments set for the job.</p>\n         <p>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</p>\n         <p>For information about how to specify and consume your own job arguments, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p>\n         <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>\n      ",
                "shape_name": "GenericMap",
                "keys": {
                  "type": "string",
                  "shape_name": "GenericString",
                  "documentation": null
                },
                "members": {
                  "type": "string",
                  "shape_name": "GenericString",
                  "documentation": null
                }
              },
              "ErrorMessage": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>An error message associated with this job run.</simpara>\n      ",
                "documentation": "\n         <p>An error message associated with this job run.</p>\n      ",
                "shape_name": "ErrorString"
              },
              "PredecessorRuns": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A list of predecessors to this job run.</simpara>\n      ",
                "documentation": "\n         <p>A list of predecessors to this job run.</p>\n      ",
                "shape_name": "PredecessorList",
                "members": {
                  "type": "structure",
                  "members": {
                    "JobName": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The name of the job definition used by the predecessor job run.</simpara>\n      ",
                      "documentation": "\n         <p>The name of the job definition used by the predecessor job run.</p>\n      ",
                      "shape_name": "NameString",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "RunId": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The job-run ID of the predecessor job run.</simpara>\n      ",
                      "documentation": "\n         <p>The job-run ID of the predecessor job run.</p>\n      ",
                      "shape_name": "IdString",
                      "min_length": 1,
                      "max_length": 255
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>A job run that was used in the predicate of a conditional trigger\n      that triggered this job run.</simpara>\n      ",
                  "documentation": "\n         <p>A job run that was used in the predicate of a conditional trigger\n      that triggered this job run.</p>\n      ",
                  "shape_name": "Predecessor"
                }
              },
              "AllocatedCapacity": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The number of AWS Glue data processing units (DPUs) allocated to this JobRun.\n      From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure\n      of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.\n      For more information, see the <ulink url=\"https://aws.amazon.com/glue/pricing/\">AWS Glue\n      pricing page</ulink>.</simpara>\n      ",
                "documentation": "\n         <p>The number of AWS Glue data processing units (DPUs) allocated to this JobRun.\n      From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure\n      of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.\n      For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">AWS Glue\n      pricing page</a>.</p>\n      ",
                "shape_name": "IntegerValue"
              },
              "ExecutionTime": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The amount of time (in seconds) that the job run consumed resources.</simpara>\n      ",
                "documentation": "\n         <p>The amount of time (in seconds) that the job run consumed resources.</p>\n      ",
                "shape_name": "ExecutionTime"
              },
              "Timeout": {
                "type": "integer",
                "box": true,
                "zonbookDocumentation": "\n         <simpara>The job run timeout in minutes.</simpara>\n      ",
                "documentation": "\n         <p>The job run timeout in minutes.</p>\n      ",
                "shape_name": "Timeout",
                "min_length": 1
              },
              "NotificationProperty": {
                "type": "structure",
                "members": {
                  "NotifyDelayAfter": {
                    "type": "integer",
                    "box": true,
                    "zonbookDocumentation": "\n         <simpara>After a job run starts, the number of minutes to wait before sending a job run delay notification.</simpara>\n      ",
                    "documentation": "\n         <p>After a job run starts, the number of minutes to wait before sending a job run delay notification.</p>\n      ",
                    "shape_name": "NotifyDelayAfter",
                    "min_length": 1
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Specifies configuration properties of a job run notification.</simpara>\n      ",
                "documentation": "\n         <p>Specifies configuration properties of a job run notification.</p>\n      ",
                "shape_name": "NotificationProperty"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The requested job-run metadata.</simpara>\n      ",
            "documentation": "\n         <p>The requested job-run metadata.</p>\n      ",
            "shape_name": "JobRun"
          }
        },
        "shape_name": "GetJobRunResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Retrieves the metadata for a given job run.</p>\n      "
    },
    "GetJobRuns": {
      "name": "GetJobRuns",
      "input": {
        "type": "structure",
        "members": {
          "JobName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the job definition for which to retrieve all job runs.</simpara>\n      ",
            "documentation": "\n         <p>The name of the job definition for which to retrieve all job runs.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, if this is a continuation call.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, if this is a continuation call.</p>\n      ",
            "shape_name": "GenericString"
          },
          "MaxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The maximum size of the response.</simpara>\n      ",
            "documentation": "\n         <p>The maximum size of the response.</p>\n      ",
            "shape_name": "PageSize",
            "min_length": 1,
            "max_length": 1000
          }
        },
        "shape_name": "GetJobRunsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobRuns": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of job-run metatdata objects.</simpara>\n      ",
            "documentation": "\n         <p>A list of job-run metatdata objects.</p>\n      ",
            "shape_name": "JobRunList",
            "members": {
              "type": "structure",
              "members": {
                "Id": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The ID of this job run.</simpara>\n      ",
                  "documentation": "\n         <p>The ID of this job run.</p>\n      ",
                  "shape_name": "IdString",
                  "min_length": 1,
                  "max_length": 255
                },
                "Attempt": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The number of the attempt to run this job.</simpara>\n      ",
                  "documentation": "\n         <p>The number of the attempt to run this job.</p>\n      ",
                  "shape_name": "AttemptCount"
                },
                "PreviousRunId": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The ID of the previous run of this job. For example,\n      the JobRunId specified in the StartJobRun action.</simpara>\n      ",
                  "documentation": "\n         <p>The ID of the previous run of this job. For example,\n      the JobRunId specified in the StartJobRun action.</p>\n      ",
                  "shape_name": "IdString",
                  "min_length": 1,
                  "max_length": 255
                },
                "TriggerName": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The name of the trigger that started this job run.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the trigger that started this job run.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "JobName": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The name of the job definition being used in this run.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the job definition being used in this run.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "StartedOn": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The date and time at which this job run was started.</simpara>\n      ",
                  "documentation": "\n         <p>The date and time at which this job run was started.</p>\n      ",
                  "shape_name": "TimestampValue"
                },
                "LastModifiedOn": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The last time this job run was modified.</simpara>\n      ",
                  "documentation": "\n         <p>The last time this job run was modified.</p>\n      ",
                  "shape_name": "TimestampValue"
                },
                "CompletedOn": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The date and time this job run completed.</simpara>\n      ",
                  "documentation": "\n         <p>The date and time this job run completed.</p>\n      ",
                  "shape_name": "TimestampValue"
                },
                "JobRunState": {
                  "type": "string",
                  "enum": [
                    "STARTING",
                    "RUNNING",
                    "STOPPING",
                    "STOPPED",
                    "SUCCEEDED",
                    "FAILED",
                    "TIMEOUT"
                  ],
                  "zonbookDocumentation": "\n         <simpara>The current state of the job run.</simpara>\n      ",
                  "documentation": "\n         <p>The current state of the job run.</p>\n      ",
                  "shape_name": "JobRunState"
                },
                "Arguments": {
                  "type": "map",
                  "zonbookDocumentation": "\n         <simpara>The job arguments associated with this run. These override equivalent default\n      arguments set for the job.</simpara>\n         <simpara>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</simpara>\n         <simpara>For information about how to specify and consume your own job arguments, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</ulink> topic in the developer guide.</simpara>\n         <simpara>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</ulink> topic in the developer guide.</simpara>\n      ",
                  "documentation": "\n         <p>The job arguments associated with this run. These override equivalent default\n      arguments set for the job.</p>\n         <p>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</p>\n         <p>For information about how to specify and consume your own job arguments, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p>\n         <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>\n      ",
                  "shape_name": "GenericMap",
                  "keys": {
                    "type": "string",
                    "shape_name": "GenericString",
                    "documentation": null
                  },
                  "members": {
                    "type": "string",
                    "shape_name": "GenericString",
                    "documentation": null
                  }
                },
                "ErrorMessage": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>An error message associated with this job run.</simpara>\n      ",
                  "documentation": "\n         <p>An error message associated with this job run.</p>\n      ",
                  "shape_name": "ErrorString"
                },
                "PredecessorRuns": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>A list of predecessors to this job run.</simpara>\n      ",
                  "documentation": "\n         <p>A list of predecessors to this job run.</p>\n      ",
                  "shape_name": "PredecessorList",
                  "members": {
                    "type": "structure",
                    "members": {
                      "JobName": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "zonbookDocumentation": "\n         <simpara>The name of the job definition used by the predecessor job run.</simpara>\n      ",
                        "documentation": "\n         <p>The name of the job definition used by the predecessor job run.</p>\n      ",
                        "shape_name": "NameString",
                        "min_length": 1,
                        "max_length": 255
                      },
                      "RunId": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "zonbookDocumentation": "\n         <simpara>The job-run ID of the predecessor job run.</simpara>\n      ",
                        "documentation": "\n         <p>The job-run ID of the predecessor job run.</p>\n      ",
                        "shape_name": "IdString",
                        "min_length": 1,
                        "max_length": 255
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>A job run that was used in the predicate of a conditional trigger\n      that triggered this job run.</simpara>\n      ",
                    "documentation": "\n         <p>A job run that was used in the predicate of a conditional trigger\n      that triggered this job run.</p>\n      ",
                    "shape_name": "Predecessor"
                  }
                },
                "AllocatedCapacity": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The number of AWS Glue data processing units (DPUs) allocated to this JobRun.\n      From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure\n      of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.\n      For more information, see the <ulink url=\"https://aws.amazon.com/glue/pricing/\">AWS Glue\n      pricing page</ulink>.</simpara>\n      ",
                  "documentation": "\n         <p>The number of AWS Glue data processing units (DPUs) allocated to this JobRun.\n      From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure\n      of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.\n      For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">AWS Glue\n      pricing page</a>.</p>\n      ",
                  "shape_name": "IntegerValue"
                },
                "ExecutionTime": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The amount of time (in seconds) that the job run consumed resources.</simpara>\n      ",
                  "documentation": "\n         <p>The amount of time (in seconds) that the job run consumed resources.</p>\n      ",
                  "shape_name": "ExecutionTime"
                },
                "Timeout": {
                  "type": "integer",
                  "box": true,
                  "zonbookDocumentation": "\n         <simpara>The job run timeout in minutes.</simpara>\n      ",
                  "documentation": "\n         <p>The job run timeout in minutes.</p>\n      ",
                  "shape_name": "Timeout",
                  "min_length": 1
                },
                "NotificationProperty": {
                  "type": "structure",
                  "members": {
                    "NotifyDelayAfter": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <simpara>After a job run starts, the number of minutes to wait before sending a job run delay notification.</simpara>\n      ",
                      "documentation": "\n         <p>After a job run starts, the number of minutes to wait before sending a job run delay notification.</p>\n      ",
                      "shape_name": "NotifyDelayAfter",
                      "min_length": 1
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Specifies configuration properties of a job run notification.</simpara>\n      ",
                  "documentation": "\n         <p>Specifies configuration properties of a job run notification.</p>\n      ",
                  "shape_name": "NotificationProperty"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Contains information about a job run.</simpara>\n      ",
              "documentation": "\n         <p>Contains information about a job run.</p>\n      ",
              "shape_name": "JobRun"
            }
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, if not all reequested job runs have been returned.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, if not all reequested job runs have been returned.</p>\n      ",
            "shape_name": "GenericString"
          }
        },
        "shape_name": "GetJobRunsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Retrieves metadata for all runs of a given job definition.</p>\n      "
    },
    "CreateTrigger": {
      "name": "CreateTrigger",
      "input": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the trigger.</simpara>\n      ",
            "documentation": "\n         <p>The name of the trigger.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "Type": {
            "type": "string",
            "enum": [
              "SCHEDULED",
              "CONDITIONAL",
              "ON_DEMAND"
            ],
            "zonbookDocumentation": "\n         <simpara>The type of the new trigger.</simpara>\n      ",
            "documentation": "\n         <p>The type of the new trigger.</p>\n      ",
            "required": true,
            "shape_name": "TriggerType"
          },
          "Schedule": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A <code>cron</code> expression used to specify the schedule (see <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</ulink>. For example, to run\n      something every day at 12:15 UTC, you would specify:\n      <code>cron(15 12 * * ? *)</code>.</simpara>\n         <simpara>This field is required when the trigger type is SCHEDULED.</simpara>\n      ",
            "documentation": "\n         <p>A <code>cron</code> expression used to specify the schedule (see <a href=\"http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run\n      something every day at 12:15 UTC, you would specify:\n      <code>cron(15 12 * * ? *)</code>.</p>\n         <p>This field is required when the trigger type is SCHEDULED.</p>\n      ",
            "shape_name": "GenericString"
          },
          "Predicate": {
            "type": "structure",
            "members": {
              "Logical": {
                "type": "string",
                "enum": [
                  "AND",
                  "ANY"
                ],
                "zonbookDocumentation": "\n         <simpara>Optional field if only one condition is listed. If multiple conditions are listed, then this field is required.</simpara>\n      ",
                "documentation": "\n         <p>Optional field if only one condition is listed. If multiple conditions are listed, then this field is required.</p>\n      ",
                "shape_name": "Logical"
              },
              "Conditions": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A list of the conditions that determine when the trigger will fire.</simpara>\n      ",
                "documentation": "\n         <p>A list of the conditions that determine when the trigger will fire.</p>\n      ",
                "shape_name": "ConditionList",
                "members": {
                  "type": "structure",
                  "members": {
                    "LogicalOperator": {
                      "type": "string",
                      "enum": [
                        "EQUALS"
                      ],
                      "zonbookDocumentation": "\n         <simpara>A logical operator.</simpara>\n      ",
                      "documentation": "\n         <p>A logical operator.</p>\n      ",
                      "shape_name": "LogicalOperator"
                    },
                    "JobName": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The name of the Job to whose JobRuns this condition applies\n      and on which this trigger waits.</simpara>\n      ",
                      "documentation": "\n         <p>The name of the Job to whose JobRuns this condition applies\n      and on which this trigger waits.</p>\n      ",
                      "shape_name": "NameString",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "State": {
                      "type": "string",
                      "enum": [
                        "STARTING",
                        "RUNNING",
                        "STOPPING",
                        "STOPPED",
                        "SUCCEEDED",
                        "FAILED",
                        "TIMEOUT"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The condition state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT and FAILED.</simpara>\n      ",
                      "documentation": "\n         <p>The condition state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT and FAILED.</p>\n      ",
                      "shape_name": "JobRunState"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Defines a condition under which a trigger fires.</simpara>\n      ",
                  "documentation": "\n         <p>Defines a condition under which a trigger fires.</p>\n      ",
                  "shape_name": "Condition"
                }
              }
            },
            "zonbookDocumentation": "\n         <simpara>A predicate to specify when the new trigger should fire.</simpara>\n         <simpara>This field is required when the trigger type is CONDITIONAL.</simpara>\n      ",
            "documentation": "\n         <p>A predicate to specify when the new trigger should fire.</p>\n         <p>This field is required when the trigger type is CONDITIONAL.</p>\n      ",
            "shape_name": "Predicate"
          },
          "Actions": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The actions initiated by this trigger when it fires.</simpara>\n      ",
            "documentation": "\n         <p>The actions initiated by this trigger when it fires.</p>\n      ",
            "required": true,
            "shape_name": "ActionList",
            "members": {
              "type": "structure",
              "members": {
                "JobName": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>The name of a job to be executed.</simpara>\n      ",
                  "documentation": "\n         <p>The name of a job to be executed.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "Arguments": {
                  "type": "map",
                  "zonbookDocumentation": "\n         <simpara>Arguments to be passed to the job.</simpara>\n         <simpara>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</simpara>\n         <simpara>For information about how to specify and consume your own Job arguments, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</ulink> topic in the developer guide.</simpara>\n         <simpara>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</ulink> topic in the developer guide.</simpara>\n      ",
                  "documentation": "\n         <p>Arguments to be passed to the job.</p>\n         <p>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</p>\n         <p>For information about how to specify and consume your own Job arguments, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p>\n         <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>\n      ",
                  "shape_name": "GenericMap",
                  "keys": {
                    "type": "string",
                    "shape_name": "GenericString",
                    "documentation": null
                  },
                  "members": {
                    "type": "string",
                    "shape_name": "GenericString",
                    "documentation": null
                  }
                },
                "Timeout": {
                  "type": "integer",
                  "box": true,
                  "zonbookDocumentation": "\n         <simpara>The job run timeout in minutes. It overrides the timeout value of the job.</simpara>\n      ",
                  "documentation": "\n         <p>The job run timeout in minutes. It overrides the timeout value of the job.</p>\n      ",
                  "shape_name": "Timeout",
                  "min_length": 1
                },
                "NotificationProperty": {
                  "type": "structure",
                  "members": {
                    "NotifyDelayAfter": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <simpara>After a job run starts, the number of minutes to wait before sending a job run delay notification.</simpara>\n      ",
                      "documentation": "\n         <p>After a job run starts, the number of minutes to wait before sending a job run delay notification.</p>\n      ",
                      "shape_name": "NotifyDelayAfter",
                      "min_length": 1
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Specifies configuration properties of a job run notification.</simpara>\n      ",
                  "documentation": "\n         <p>Specifies configuration properties of a job run notification.</p>\n      ",
                  "shape_name": "NotificationProperty"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Defines an action to be initiated by a trigger.</simpara>\n      ",
              "documentation": "\n         <p>Defines an action to be initiated by a trigger.</p>\n      ",
              "shape_name": "Action"
            }
          },
          "Description": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
            "zonbookDocumentation": "\n         <simpara>A description of the new trigger.</simpara>\n      ",
            "documentation": "\n         <p>A description of the new trigger.</p>\n      ",
            "shape_name": "DescriptionString",
            "min_length": 0,
            "max_length": 2048
          },
          "StartOnCreation": {
            "type": "boolean",
            "zonbookDocumentation": "\n         <simpara>Set to true to start SCHEDULED and CONDITIONAL triggers when created. True not supported for ON_DEMAND\n      triggers.</simpara>\n      ",
            "documentation": "\n         <p>Set to true to start SCHEDULED and CONDITIONAL triggers when created. True not supported for ON_DEMAND\n      triggers.</p>\n      ",
            "shape_name": "BooleanValue"
          }
        },
        "shape_name": "CreateTriggerRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the trigger.</simpara>\n      ",
            "documentation": "\n         <p>The name of the trigger.</p>\n      ",
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "CreateTriggerResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource to be created or added already exists.</simpara>\n      ",
          "documentation": "\n         <p>A resource to be created or added already exists.</p>\n      ",
          "shape_name": "AlreadyExistsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The same unique identifier was associated with two different records.</simpara>\n      ",
          "documentation": "\n         <p>The same unique identifier was associated with two different records.</p>\n      ",
          "shape_name": "IdempotentParameterMismatchException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource numerical limit was exceeded.</simpara>\n      ",
          "documentation": "\n         <p>A resource numerical limit was exceeded.</p>\n      ",
          "shape_name": "ResourceNumberLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>Two processes are trying to modify a resource simultaneously.</simpara>\n      ",
          "documentation": "\n         <p>Two processes are trying to modify a resource simultaneously.</p>\n      ",
          "shape_name": "ConcurrentModificationException"
        }
      ],
      "documentation": "\n         <p>Creates a new trigger.</p>\n      "
    },
    "UpdateJob": {
      "name": "UpdateJob",
      "input": {
        "type": "structure",
        "members": {
          "JobName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>Name of the job definition to update.</simpara>\n      ",
            "documentation": "\n         <p>Name of the job definition to update.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "JobUpdate": {
            "type": "structure",
            "members": {
              "Description": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                "zonbookDocumentation": "\n         <simpara>Description of the job being defined.</simpara>\n      ",
                "documentation": "\n         <p>Description of the job being defined.</p>\n      ",
                "shape_name": "DescriptionString",
                "min_length": 0,
                "max_length": 2048
              },
              "LogUri": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>This field is reserved for future use.</simpara>\n      ",
                "documentation": "\n         <p>This field is reserved for future use.</p>\n      ",
                "shape_name": "UriString"
              },
              "Role": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The name or ARN of the IAM role associated with this job (required).</simpara>\n      ",
                "documentation": "\n         <p>The name or ARN of the IAM role associated with this job (required).</p>\n      ",
                "shape_name": "RoleString"
              },
              "ExecutionProperty": {
                "type": "structure",
                "members": {
                  "MaxConcurrentRuns": {
                    "type": "integer",
                    "zonbookDocumentation": "\n         <simpara>The maximum number of concurrent runs allowed for the job.\n      The default is 1. An error is returned when this threshold is reached.\n      The maximum value you can specify is controlled by a service limit.</simpara>\n      ",
                    "documentation": "\n         <p>The maximum number of concurrent runs allowed for the job.\n      The default is 1. An error is returned when this threshold is reached.\n      The maximum value you can specify is controlled by a service limit.</p>\n      ",
                    "shape_name": "MaxConcurrentRuns"
                  }
                },
                "zonbookDocumentation": "\n         <simpara>An ExecutionProperty specifying the maximum number of concurrent\n      runs allowed for this job.</simpara>\n      ",
                "documentation": "\n         <p>An ExecutionProperty specifying the maximum number of concurrent\n      runs allowed for this job.</p>\n      ",
                "shape_name": "ExecutionProperty"
              },
              "Command": {
                "type": "structure",
                "members": {
                  "Name": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>The name of the job command: this must be <code>glueetl</code>.</simpara>\n      ",
                    "documentation": "\n         <p>The name of the job command: this must be <code>glueetl</code>.</p>\n      ",
                    "shape_name": "GenericString"
                  },
                  "ScriptLocation": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>Specifies the S3 path to a script that executes a job (required).</simpara>\n      ",
                    "documentation": "\n         <p>Specifies the S3 path to a script that executes a job (required).</p>\n      ",
                    "shape_name": "ScriptLocationString"
                  }
                },
                "zonbookDocumentation": "\n         <simpara>The JobCommand that executes this job (required).</simpara>\n      ",
                "documentation": "\n         <p>The JobCommand that executes this job (required).</p>\n      ",
                "shape_name": "JobCommand"
              },
              "DefaultArguments": {
                "type": "map",
                "zonbookDocumentation": "\n         <simpara>The default arguments for this job.</simpara>\n         <simpara>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</simpara>\n         <simpara>For information about how to specify and consume your own Job arguments, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</ulink> topic in the developer guide.</simpara>\n         <simpara>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</ulink> topic in the developer guide.</simpara>\n      ",
                "documentation": "\n         <p>The default arguments for this job.</p>\n         <p>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</p>\n         <p>For information about how to specify and consume your own Job arguments, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p>\n         <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>\n      ",
                "shape_name": "GenericMap",
                "keys": {
                  "type": "string",
                  "shape_name": "GenericString",
                  "documentation": null
                },
                "members": {
                  "type": "string",
                  "shape_name": "GenericString",
                  "documentation": null
                }
              },
              "Connections": {
                "type": "structure",
                "members": {
                  "Connections": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list of connections used by the job.</simpara>\n      ",
                    "documentation": "\n         <p>A list of connections used by the job.</p>\n      ",
                    "shape_name": "StringList",
                    "members": {
                      "type": "string",
                      "shape_name": "GenericString",
                      "documentation": null
                    }
                  }
                },
                "zonbookDocumentation": "\n         <simpara>The connections used for this job.</simpara>\n      ",
                "documentation": "\n         <p>The connections used for this job.</p>\n      ",
                "shape_name": "ConnectionsList"
              },
              "MaxRetries": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The maximum number of times to retry this job if it fails.</simpara>\n      ",
                "documentation": "\n         <p>The maximum number of times to retry this job if it fails.</p>\n      ",
                "shape_name": "MaxRetries"
              },
              "AllocatedCapacity": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The number of AWS Glue data processing units (DPUs) to allocate to this Job.\n      From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure\n      of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.\n      For more information, see the <ulink url=\"https://aws.amazon.com/glue/pricing/\">AWS Glue\n      pricing page</ulink>.</simpara>\n      ",
                "documentation": "\n         <p>The number of AWS Glue data processing units (DPUs) to allocate to this Job.\n      From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure\n      of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.\n      For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">AWS Glue\n      pricing page</a>.</p>\n      ",
                "shape_name": "IntegerValue"
              },
              "Timeout": {
                "type": "integer",
                "box": true,
                "zonbookDocumentation": "\n         <simpara>The job timeout in minutes. The default is 2880 minutes (48 hours).</simpara>\n      ",
                "documentation": "\n         <p>The job timeout in minutes. The default is 2880 minutes (48 hours).</p>\n      ",
                "shape_name": "Timeout",
                "min_length": 1
              },
              "NotificationProperty": {
                "type": "structure",
                "members": {
                  "NotifyDelayAfter": {
                    "type": "integer",
                    "box": true,
                    "zonbookDocumentation": "\n         <simpara>After a job run starts, the number of minutes to wait before sending a job run delay notification.</simpara>\n      ",
                    "documentation": "\n         <p>After a job run starts, the number of minutes to wait before sending a job run delay notification.</p>\n      ",
                    "shape_name": "NotifyDelayAfter",
                    "min_length": 1
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Specifies configuration properties of a job notification.</simpara>\n      ",
                "documentation": "\n         <p>Specifies configuration properties of a job notification.</p>\n      ",
                "shape_name": "NotificationProperty"
              }
            },
            "zonbookDocumentation": "\n         <simpara>Specifies the values with which to update the job definition.</simpara>\n      ",
            "documentation": "\n         <p>Specifies the values with which to update the job definition.</p>\n      ",
            "required": true,
            "shape_name": "JobUpdate"
          }
        },
        "shape_name": "UpdateJobRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "JobName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>Returns the name of the updated job definition.</simpara>\n      ",
            "documentation": "\n         <p>Returns the name of the updated job definition.</p>\n      ",
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "UpdateJobResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>Two processes are trying to modify a resource simultaneously.</simpara>\n      ",
          "documentation": "\n         <p>Two processes are trying to modify a resource simultaneously.</p>\n      ",
          "shape_name": "ConcurrentModificationException"
        }
      ],
      "documentation": "\n         <p>Updates an existing job definition.</p>\n      "
    },
    "StartTrigger": {
      "name": "StartTrigger",
      "input": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the trigger to start.</simpara>\n      ",
            "documentation": "\n         <p>The name of the trigger to start.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "StartTriggerRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the trigger that was started.</simpara>\n      ",
            "documentation": "\n         <p>The name of the trigger that was started.</p>\n      ",
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "StartTriggerResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource numerical limit was exceeded.</simpara>\n      ",
          "documentation": "\n         <p>A resource numerical limit was exceeded.</p>\n      ",
          "shape_name": "ResourceNumberLimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>Too many jobs are being run concurrently.</simpara>\n      ",
          "documentation": "\n         <p>Too many jobs are being run concurrently.</p>\n      ",
          "shape_name": "ConcurrentRunsExceededException"
        }
      ],
      "documentation": "\n         <p>Starts an existing trigger. See <a href=\"http://docs.aws.amazon.com/glue/latest/dg/trigger-job.html\">Triggering\n      Jobs</a> for information about how different types of trigger are\n      started.</p>\n      "
    },
    "GetTrigger": {
      "name": "GetTrigger",
      "input": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the trigger to retrieve.</simpara>\n      ",
            "documentation": "\n         <p>The name of the trigger to retrieve.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "GetTriggerRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Trigger": {
            "type": "structure",
            "members": {
              "Name": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>Name of the trigger.</simpara>\n      ",
                "documentation": "\n         <p>Name of the trigger.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "Id": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>Reserved for future use.</simpara>\n      ",
                "documentation": "\n         <p>Reserved for future use.</p>\n      ",
                "shape_name": "IdString",
                "min_length": 1,
                "max_length": 255
              },
              "Type": {
                "type": "string",
                "enum": [
                  "SCHEDULED",
                  "CONDITIONAL",
                  "ON_DEMAND"
                ],
                "zonbookDocumentation": "\n         <simpara>The type of trigger that this is.</simpara>\n      ",
                "documentation": "\n         <p>The type of trigger that this is.</p>\n      ",
                "shape_name": "TriggerType"
              },
              "State": {
                "type": "string",
                "enum": [
                  "CREATING",
                  "CREATED",
                  "ACTIVATING",
                  "ACTIVATED",
                  "DEACTIVATING",
                  "DEACTIVATED",
                  "DELETING",
                  "UPDATING"
                ],
                "zonbookDocumentation": "\n         <simpara>The current state of the trigger.</simpara>\n      ",
                "documentation": "\n         <p>The current state of the trigger.</p>\n      ",
                "shape_name": "TriggerState"
              },
              "Description": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                "zonbookDocumentation": "\n         <simpara>A description of this trigger.</simpara>\n      ",
                "documentation": "\n         <p>A description of this trigger.</p>\n      ",
                "shape_name": "DescriptionString",
                "min_length": 0,
                "max_length": 2048
              },
              "Schedule": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>A <code>cron</code> expression used to specify the schedule (see <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based\n      Schedules for Jobs and Crawlers</ulink>. For example, to run\n      something every day at 12:15 UTC, you would specify:\n      <code>cron(15 12 * * ? *)</code>.</simpara>\n      ",
                "documentation": "\n         <p>A <code>cron</code> expression used to specify the schedule (see <a href=\"http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based\n      Schedules for Jobs and Crawlers</a>. For example, to run\n      something every day at 12:15 UTC, you would specify:\n      <code>cron(15 12 * * ? *)</code>.</p>\n      ",
                "shape_name": "GenericString"
              },
              "Actions": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>The actions initiated by this trigger.</simpara>\n      ",
                "documentation": "\n         <p>The actions initiated by this trigger.</p>\n      ",
                "shape_name": "ActionList",
                "members": {
                  "type": "structure",
                  "members": {
                    "JobName": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The name of a job to be executed.</simpara>\n      ",
                      "documentation": "\n         <p>The name of a job to be executed.</p>\n      ",
                      "shape_name": "NameString",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "Arguments": {
                      "type": "map",
                      "zonbookDocumentation": "\n         <simpara>Arguments to be passed to the job.</simpara>\n         <simpara>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</simpara>\n         <simpara>For information about how to specify and consume your own Job arguments, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</ulink> topic in the developer guide.</simpara>\n         <simpara>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</ulink> topic in the developer guide.</simpara>\n      ",
                      "documentation": "\n         <p>Arguments to be passed to the job.</p>\n         <p>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</p>\n         <p>For information about how to specify and consume your own Job arguments, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p>\n         <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>\n      ",
                      "shape_name": "GenericMap",
                      "keys": {
                        "type": "string",
                        "shape_name": "GenericString",
                        "documentation": null
                      },
                      "members": {
                        "type": "string",
                        "shape_name": "GenericString",
                        "documentation": null
                      }
                    },
                    "Timeout": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <simpara>The job run timeout in minutes. It overrides the timeout value of the job.</simpara>\n      ",
                      "documentation": "\n         <p>The job run timeout in minutes. It overrides the timeout value of the job.</p>\n      ",
                      "shape_name": "Timeout",
                      "min_length": 1
                    },
                    "NotificationProperty": {
                      "type": "structure",
                      "members": {
                        "NotifyDelayAfter": {
                          "type": "integer",
                          "box": true,
                          "zonbookDocumentation": "\n         <simpara>After a job run starts, the number of minutes to wait before sending a job run delay notification.</simpara>\n      ",
                          "documentation": "\n         <p>After a job run starts, the number of minutes to wait before sending a job run delay notification.</p>\n      ",
                          "shape_name": "NotifyDelayAfter",
                          "min_length": 1
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Specifies configuration properties of a job run notification.</simpara>\n      ",
                      "documentation": "\n         <p>Specifies configuration properties of a job run notification.</p>\n      ",
                      "shape_name": "NotificationProperty"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Defines an action to be initiated by a trigger.</simpara>\n      ",
                  "documentation": "\n         <p>Defines an action to be initiated by a trigger.</p>\n      ",
                  "shape_name": "Action"
                }
              },
              "Predicate": {
                "type": "structure",
                "members": {
                  "Logical": {
                    "type": "string",
                    "enum": [
                      "AND",
                      "ANY"
                    ],
                    "zonbookDocumentation": "\n         <simpara>Optional field if only one condition is listed. If multiple conditions are listed, then this field is required.</simpara>\n      ",
                    "documentation": "\n         <p>Optional field if only one condition is listed. If multiple conditions are listed, then this field is required.</p>\n      ",
                    "shape_name": "Logical"
                  },
                  "Conditions": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list of the conditions that determine when the trigger will fire.</simpara>\n      ",
                    "documentation": "\n         <p>A list of the conditions that determine when the trigger will fire.</p>\n      ",
                    "shape_name": "ConditionList",
                    "members": {
                      "type": "structure",
                      "members": {
                        "LogicalOperator": {
                          "type": "string",
                          "enum": [
                            "EQUALS"
                          ],
                          "zonbookDocumentation": "\n         <simpara>A logical operator.</simpara>\n      ",
                          "documentation": "\n         <p>A logical operator.</p>\n      ",
                          "shape_name": "LogicalOperator"
                        },
                        "JobName": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The name of the Job to whose JobRuns this condition applies\n      and on which this trigger waits.</simpara>\n      ",
                          "documentation": "\n         <p>The name of the Job to whose JobRuns this condition applies\n      and on which this trigger waits.</p>\n      ",
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "State": {
                          "type": "string",
                          "enum": [
                            "STARTING",
                            "RUNNING",
                            "STOPPING",
                            "STOPPED",
                            "SUCCEEDED",
                            "FAILED",
                            "TIMEOUT"
                          ],
                          "zonbookDocumentation": "\n         <simpara>The condition state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT and FAILED.</simpara>\n      ",
                          "documentation": "\n         <p>The condition state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT and FAILED.</p>\n      ",
                          "shape_name": "JobRunState"
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Defines a condition under which a trigger fires.</simpara>\n      ",
                      "documentation": "\n         <p>Defines a condition under which a trigger fires.</p>\n      ",
                      "shape_name": "Condition"
                    }
                  }
                },
                "zonbookDocumentation": "\n         <simpara>The predicate of this trigger, which defines when it will fire.</simpara>\n      ",
                "documentation": "\n         <p>The predicate of this trigger, which defines when it will fire.</p>\n      ",
                "shape_name": "Predicate"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The requested trigger definition.</simpara>\n      ",
            "documentation": "\n         <p>The requested trigger definition.</p>\n      ",
            "shape_name": "Trigger"
          }
        },
        "shape_name": "GetTriggerResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Retrieves the definition of a trigger.</p>\n      "
    },
    "StopTrigger": {
      "name": "StopTrigger",
      "input": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the trigger to stop.</simpara>\n      ",
            "documentation": "\n         <p>The name of the trigger to stop.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "StopTriggerRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the trigger that was stopped.</simpara>\n      ",
            "documentation": "\n         <p>The name of the trigger that was stopped.</p>\n      ",
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "StopTriggerResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>Two processes are trying to modify a resource simultaneously.</simpara>\n      ",
          "documentation": "\n         <p>Two processes are trying to modify a resource simultaneously.</p>\n      ",
          "shape_name": "ConcurrentModificationException"
        }
      ],
      "documentation": "\n         <p>Stops a specified trigger.</p>\n      "
    },
    "GetTriggers": {
      "name": "GetTriggers",
      "input": {
        "type": "structure",
        "members": {
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, if this is a continuation call.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, if this is a continuation call.</p>\n      ",
            "shape_name": "GenericString"
          },
          "DependentJobName": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the job for which to retrieve triggers.\n      The trigger that can start this job will be returned, and\n      if there is no such trigger, all triggers will be returned.</simpara>\n      ",
            "documentation": "\n         <p>The name of the job for which to retrieve triggers.\n      The trigger that can start this job will be returned, and\n      if there is no such trigger, all triggers will be returned.</p>\n      ",
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "MaxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The maximum size of the response.</simpara>\n      ",
            "documentation": "\n         <p>The maximum size of the response.</p>\n      ",
            "shape_name": "PageSize",
            "min_length": 1,
            "max_length": 1000
          }
        },
        "shape_name": "GetTriggersRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Triggers": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of triggers for the specified job.</simpara>\n      ",
            "documentation": "\n         <p>A list of triggers for the specified job.</p>\n      ",
            "shape_name": "TriggerList",
            "members": {
              "type": "structure",
              "members": {
                "Name": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>Name of the trigger.</simpara>\n      ",
                  "documentation": "\n         <p>Name of the trigger.</p>\n      ",
                  "shape_name": "NameString",
                  "min_length": 1,
                  "max_length": 255
                },
                "Id": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                  "zonbookDocumentation": "\n         <simpara>Reserved for future use.</simpara>\n      ",
                  "documentation": "\n         <p>Reserved for future use.</p>\n      ",
                  "shape_name": "IdString",
                  "min_length": 1,
                  "max_length": 255
                },
                "Type": {
                  "type": "string",
                  "enum": [
                    "SCHEDULED",
                    "CONDITIONAL",
                    "ON_DEMAND"
                  ],
                  "zonbookDocumentation": "\n         <simpara>The type of trigger that this is.</simpara>\n      ",
                  "documentation": "\n         <p>The type of trigger that this is.</p>\n      ",
                  "shape_name": "TriggerType"
                },
                "State": {
                  "type": "string",
                  "enum": [
                    "CREATING",
                    "CREATED",
                    "ACTIVATING",
                    "ACTIVATED",
                    "DEACTIVATING",
                    "DEACTIVATED",
                    "DELETING",
                    "UPDATING"
                  ],
                  "zonbookDocumentation": "\n         <simpara>The current state of the trigger.</simpara>\n      ",
                  "documentation": "\n         <p>The current state of the trigger.</p>\n      ",
                  "shape_name": "TriggerState"
                },
                "Description": {
                  "type": "string",
                  "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                  "zonbookDocumentation": "\n         <simpara>A description of this trigger.</simpara>\n      ",
                  "documentation": "\n         <p>A description of this trigger.</p>\n      ",
                  "shape_name": "DescriptionString",
                  "min_length": 0,
                  "max_length": 2048
                },
                "Schedule": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A <code>cron</code> expression used to specify the schedule (see <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based\n      Schedules for Jobs and Crawlers</ulink>. For example, to run\n      something every day at 12:15 UTC, you would specify:\n      <code>cron(15 12 * * ? *)</code>.</simpara>\n      ",
                  "documentation": "\n         <p>A <code>cron</code> expression used to specify the schedule (see <a href=\"http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based\n      Schedules for Jobs and Crawlers</a>. For example, to run\n      something every day at 12:15 UTC, you would specify:\n      <code>cron(15 12 * * ? *)</code>.</p>\n      ",
                  "shape_name": "GenericString"
                },
                "Actions": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>The actions initiated by this trigger.</simpara>\n      ",
                  "documentation": "\n         <p>The actions initiated by this trigger.</p>\n      ",
                  "shape_name": "ActionList",
                  "members": {
                    "type": "structure",
                    "members": {
                      "JobName": {
                        "type": "string",
                        "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                        "zonbookDocumentation": "\n         <simpara>The name of a job to be executed.</simpara>\n      ",
                        "documentation": "\n         <p>The name of a job to be executed.</p>\n      ",
                        "shape_name": "NameString",
                        "min_length": 1,
                        "max_length": 255
                      },
                      "Arguments": {
                        "type": "map",
                        "zonbookDocumentation": "\n         <simpara>Arguments to be passed to the job.</simpara>\n         <simpara>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</simpara>\n         <simpara>For information about how to specify and consume your own Job arguments, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</ulink> topic in the developer guide.</simpara>\n         <simpara>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</ulink> topic in the developer guide.</simpara>\n      ",
                        "documentation": "\n         <p>Arguments to be passed to the job.</p>\n         <p>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</p>\n         <p>For information about how to specify and consume your own Job arguments, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p>\n         <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>\n      ",
                        "shape_name": "GenericMap",
                        "keys": {
                          "type": "string",
                          "shape_name": "GenericString",
                          "documentation": null
                        },
                        "members": {
                          "type": "string",
                          "shape_name": "GenericString",
                          "documentation": null
                        }
                      },
                      "Timeout": {
                        "type": "integer",
                        "box": true,
                        "zonbookDocumentation": "\n         <simpara>The job run timeout in minutes. It overrides the timeout value of the job.</simpara>\n      ",
                        "documentation": "\n         <p>The job run timeout in minutes. It overrides the timeout value of the job.</p>\n      ",
                        "shape_name": "Timeout",
                        "min_length": 1
                      },
                      "NotificationProperty": {
                        "type": "structure",
                        "members": {
                          "NotifyDelayAfter": {
                            "type": "integer",
                            "box": true,
                            "zonbookDocumentation": "\n         <simpara>After a job run starts, the number of minutes to wait before sending a job run delay notification.</simpara>\n      ",
                            "documentation": "\n         <p>After a job run starts, the number of minutes to wait before sending a job run delay notification.</p>\n      ",
                            "shape_name": "NotifyDelayAfter",
                            "min_length": 1
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>Specifies configuration properties of a job run notification.</simpara>\n      ",
                        "documentation": "\n         <p>Specifies configuration properties of a job run notification.</p>\n      ",
                        "shape_name": "NotificationProperty"
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>Defines an action to be initiated by a trigger.</simpara>\n      ",
                    "documentation": "\n         <p>Defines an action to be initiated by a trigger.</p>\n      ",
                    "shape_name": "Action"
                  }
                },
                "Predicate": {
                  "type": "structure",
                  "members": {
                    "Logical": {
                      "type": "string",
                      "enum": [
                        "AND",
                        "ANY"
                      ],
                      "zonbookDocumentation": "\n         <simpara>Optional field if only one condition is listed. If multiple conditions are listed, then this field is required.</simpara>\n      ",
                      "documentation": "\n         <p>Optional field if only one condition is listed. If multiple conditions are listed, then this field is required.</p>\n      ",
                      "shape_name": "Logical"
                    },
                    "Conditions": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>A list of the conditions that determine when the trigger will fire.</simpara>\n      ",
                      "documentation": "\n         <p>A list of the conditions that determine when the trigger will fire.</p>\n      ",
                      "shape_name": "ConditionList",
                      "members": {
                        "type": "structure",
                        "members": {
                          "LogicalOperator": {
                            "type": "string",
                            "enum": [
                              "EQUALS"
                            ],
                            "zonbookDocumentation": "\n         <simpara>A logical operator.</simpara>\n      ",
                            "documentation": "\n         <p>A logical operator.</p>\n      ",
                            "shape_name": "LogicalOperator"
                          },
                          "JobName": {
                            "type": "string",
                            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                            "zonbookDocumentation": "\n         <simpara>The name of the Job to whose JobRuns this condition applies\n      and on which this trigger waits.</simpara>\n      ",
                            "documentation": "\n         <p>The name of the Job to whose JobRuns this condition applies\n      and on which this trigger waits.</p>\n      ",
                            "shape_name": "NameString",
                            "min_length": 1,
                            "max_length": 255
                          },
                          "State": {
                            "type": "string",
                            "enum": [
                              "STARTING",
                              "RUNNING",
                              "STOPPING",
                              "STOPPED",
                              "SUCCEEDED",
                              "FAILED",
                              "TIMEOUT"
                            ],
                            "zonbookDocumentation": "\n         <simpara>The condition state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT and FAILED.</simpara>\n      ",
                            "documentation": "\n         <p>The condition state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT and FAILED.</p>\n      ",
                            "shape_name": "JobRunState"
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>Defines a condition under which a trigger fires.</simpara>\n      ",
                        "documentation": "\n         <p>Defines a condition under which a trigger fires.</p>\n      ",
                        "shape_name": "Condition"
                      }
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The predicate of this trigger, which defines when it will fire.</simpara>\n      ",
                  "documentation": "\n         <p>The predicate of this trigger, which defines when it will fire.</p>\n      ",
                  "shape_name": "Predicate"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Information about a specific trigger.</simpara>\n      ",
              "documentation": "\n         <p>Information about a specific trigger.</p>\n      ",
              "shape_name": "Trigger"
            }
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, if not all the requested triggers\n      have yet been returned.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, if not all the requested triggers\n      have yet been returned.</p>\n      ",
            "shape_name": "GenericString"
          }
        },
        "shape_name": "GetTriggersResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        }
      ],
      "documentation": "\n         <p>Gets all the triggers associated with a job.</p>\n      "
    },
    "DeleteTrigger": {
      "name": "DeleteTrigger",
      "input": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the trigger to delete.</simpara>\n      ",
            "documentation": "\n         <p>The name of the trigger to delete.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "DeleteTriggerRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the trigger that was deleted.</simpara>\n      ",
            "documentation": "\n         <p>The name of the trigger that was deleted.</p>\n      ",
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          }
        },
        "shape_name": "DeleteTriggerResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>Two processes are trying to modify a resource simultaneously.</simpara>\n      ",
          "documentation": "\n         <p>Two processes are trying to modify a resource simultaneously.</p>\n      ",
          "shape_name": "ConcurrentModificationException"
        }
      ],
      "documentation": "\n         <p>Deletes a specified trigger. If the trigger is not found, no\n      exception is thrown.</p>\n      "
    },
    "UpdateTrigger": {
      "name": "UpdateTrigger",
      "input": {
        "type": "structure",
        "members": {
          "Name": {
            "type": "string",
            "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
            "zonbookDocumentation": "\n         <simpara>The name of the trigger to update.</simpara>\n      ",
            "documentation": "\n         <p>The name of the trigger to update.</p>\n      ",
            "required": true,
            "shape_name": "NameString",
            "min_length": 1,
            "max_length": 255
          },
          "TriggerUpdate": {
            "type": "structure",
            "members": {
              "Name": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>Reserved for future use.</simpara>\n      ",
                "documentation": "\n         <p>Reserved for future use.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "Description": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                "zonbookDocumentation": "\n         <simpara>A description of this trigger.</simpara>\n      ",
                "documentation": "\n         <p>A description of this trigger.</p>\n      ",
                "shape_name": "DescriptionString",
                "min_length": 0,
                "max_length": 2048
              },
              "Schedule": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>A <code>cron</code> expression used to specify the schedule (see <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based\n      Schedules for Jobs and Crawlers</ulink>. For example, to run\n      something every day at 12:15 UTC, you would specify:\n      <code>cron(15 12 * * ? *)</code>.</simpara>\n      ",
                "documentation": "\n         <p>A <code>cron</code> expression used to specify the schedule (see <a href=\"http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based\n      Schedules for Jobs and Crawlers</a>. For example, to run\n      something every day at 12:15 UTC, you would specify:\n      <code>cron(15 12 * * ? *)</code>.</p>\n      ",
                "shape_name": "GenericString"
              },
              "Actions": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>The actions initiated by this trigger.</simpara>\n      ",
                "documentation": "\n         <p>The actions initiated by this trigger.</p>\n      ",
                "shape_name": "ActionList",
                "members": {
                  "type": "structure",
                  "members": {
                    "JobName": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The name of a job to be executed.</simpara>\n      ",
                      "documentation": "\n         <p>The name of a job to be executed.</p>\n      ",
                      "shape_name": "NameString",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "Arguments": {
                      "type": "map",
                      "zonbookDocumentation": "\n         <simpara>Arguments to be passed to the job.</simpara>\n         <simpara>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</simpara>\n         <simpara>For information about how to specify and consume your own Job arguments, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</ulink> topic in the developer guide.</simpara>\n         <simpara>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</ulink> topic in the developer guide.</simpara>\n      ",
                      "documentation": "\n         <p>Arguments to be passed to the job.</p>\n         <p>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</p>\n         <p>For information about how to specify and consume your own Job arguments, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p>\n         <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>\n      ",
                      "shape_name": "GenericMap",
                      "keys": {
                        "type": "string",
                        "shape_name": "GenericString",
                        "documentation": null
                      },
                      "members": {
                        "type": "string",
                        "shape_name": "GenericString",
                        "documentation": null
                      }
                    },
                    "Timeout": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <simpara>The job run timeout in minutes. It overrides the timeout value of the job.</simpara>\n      ",
                      "documentation": "\n         <p>The job run timeout in minutes. It overrides the timeout value of the job.</p>\n      ",
                      "shape_name": "Timeout",
                      "min_length": 1
                    },
                    "NotificationProperty": {
                      "type": "structure",
                      "members": {
                        "NotifyDelayAfter": {
                          "type": "integer",
                          "box": true,
                          "zonbookDocumentation": "\n         <simpara>After a job run starts, the number of minutes to wait before sending a job run delay notification.</simpara>\n      ",
                          "documentation": "\n         <p>After a job run starts, the number of minutes to wait before sending a job run delay notification.</p>\n      ",
                          "shape_name": "NotifyDelayAfter",
                          "min_length": 1
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Specifies configuration properties of a job run notification.</simpara>\n      ",
                      "documentation": "\n         <p>Specifies configuration properties of a job run notification.</p>\n      ",
                      "shape_name": "NotificationProperty"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Defines an action to be initiated by a trigger.</simpara>\n      ",
                  "documentation": "\n         <p>Defines an action to be initiated by a trigger.</p>\n      ",
                  "shape_name": "Action"
                }
              },
              "Predicate": {
                "type": "structure",
                "members": {
                  "Logical": {
                    "type": "string",
                    "enum": [
                      "AND",
                      "ANY"
                    ],
                    "zonbookDocumentation": "\n         <simpara>Optional field if only one condition is listed. If multiple conditions are listed, then this field is required.</simpara>\n      ",
                    "documentation": "\n         <p>Optional field if only one condition is listed. If multiple conditions are listed, then this field is required.</p>\n      ",
                    "shape_name": "Logical"
                  },
                  "Conditions": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list of the conditions that determine when the trigger will fire.</simpara>\n      ",
                    "documentation": "\n         <p>A list of the conditions that determine when the trigger will fire.</p>\n      ",
                    "shape_name": "ConditionList",
                    "members": {
                      "type": "structure",
                      "members": {
                        "LogicalOperator": {
                          "type": "string",
                          "enum": [
                            "EQUALS"
                          ],
                          "zonbookDocumentation": "\n         <simpara>A logical operator.</simpara>\n      ",
                          "documentation": "\n         <p>A logical operator.</p>\n      ",
                          "shape_name": "LogicalOperator"
                        },
                        "JobName": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The name of the Job to whose JobRuns this condition applies\n      and on which this trigger waits.</simpara>\n      ",
                          "documentation": "\n         <p>The name of the Job to whose JobRuns this condition applies\n      and on which this trigger waits.</p>\n      ",
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "State": {
                          "type": "string",
                          "enum": [
                            "STARTING",
                            "RUNNING",
                            "STOPPING",
                            "STOPPED",
                            "SUCCEEDED",
                            "FAILED",
                            "TIMEOUT"
                          ],
                          "zonbookDocumentation": "\n         <simpara>The condition state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT and FAILED.</simpara>\n      ",
                          "documentation": "\n         <p>The condition state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT and FAILED.</p>\n      ",
                          "shape_name": "JobRunState"
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Defines a condition under which a trigger fires.</simpara>\n      ",
                      "documentation": "\n         <p>Defines a condition under which a trigger fires.</p>\n      ",
                      "shape_name": "Condition"
                    }
                  }
                },
                "zonbookDocumentation": "\n         <simpara>The predicate of this trigger, which defines when it will fire.</simpara>\n      ",
                "documentation": "\n         <p>The predicate of this trigger, which defines when it will fire.</p>\n      ",
                "shape_name": "Predicate"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The new values with which to update the trigger.</simpara>\n      ",
            "documentation": "\n         <p>The new values with which to update the trigger.</p>\n      ",
            "required": true,
            "shape_name": "TriggerUpdate"
          }
        },
        "shape_name": "UpdateTriggerRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "Trigger": {
            "type": "structure",
            "members": {
              "Name": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>Name of the trigger.</simpara>\n      ",
                "documentation": "\n         <p>Name of the trigger.</p>\n      ",
                "shape_name": "NameString",
                "min_length": 1,
                "max_length": 255
              },
              "Id": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                "zonbookDocumentation": "\n         <simpara>Reserved for future use.</simpara>\n      ",
                "documentation": "\n         <p>Reserved for future use.</p>\n      ",
                "shape_name": "IdString",
                "min_length": 1,
                "max_length": 255
              },
              "Type": {
                "type": "string",
                "enum": [
                  "SCHEDULED",
                  "CONDITIONAL",
                  "ON_DEMAND"
                ],
                "zonbookDocumentation": "\n         <simpara>The type of trigger that this is.</simpara>\n      ",
                "documentation": "\n         <p>The type of trigger that this is.</p>\n      ",
                "shape_name": "TriggerType"
              },
              "State": {
                "type": "string",
                "enum": [
                  "CREATING",
                  "CREATED",
                  "ACTIVATING",
                  "ACTIVATED",
                  "DEACTIVATING",
                  "DEACTIVATED",
                  "DELETING",
                  "UPDATING"
                ],
                "zonbookDocumentation": "\n         <simpara>The current state of the trigger.</simpara>\n      ",
                "documentation": "\n         <p>The current state of the trigger.</p>\n      ",
                "shape_name": "TriggerState"
              },
              "Description": {
                "type": "string",
                "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*",
                "zonbookDocumentation": "\n         <simpara>A description of this trigger.</simpara>\n      ",
                "documentation": "\n         <p>A description of this trigger.</p>\n      ",
                "shape_name": "DescriptionString",
                "min_length": 0,
                "max_length": 2048
              },
              "Schedule": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>A <code>cron</code> expression used to specify the schedule (see <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based\n      Schedules for Jobs and Crawlers</ulink>. For example, to run\n      something every day at 12:15 UTC, you would specify:\n      <code>cron(15 12 * * ? *)</code>.</simpara>\n      ",
                "documentation": "\n         <p>A <code>cron</code> expression used to specify the schedule (see <a href=\"http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based\n      Schedules for Jobs and Crawlers</a>. For example, to run\n      something every day at 12:15 UTC, you would specify:\n      <code>cron(15 12 * * ? *)</code>.</p>\n      ",
                "shape_name": "GenericString"
              },
              "Actions": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>The actions initiated by this trigger.</simpara>\n      ",
                "documentation": "\n         <p>The actions initiated by this trigger.</p>\n      ",
                "shape_name": "ActionList",
                "members": {
                  "type": "structure",
                  "members": {
                    "JobName": {
                      "type": "string",
                      "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                      "zonbookDocumentation": "\n         <simpara>The name of a job to be executed.</simpara>\n      ",
                      "documentation": "\n         <p>The name of a job to be executed.</p>\n      ",
                      "shape_name": "NameString",
                      "min_length": 1,
                      "max_length": 255
                    },
                    "Arguments": {
                      "type": "map",
                      "zonbookDocumentation": "\n         <simpara>Arguments to be passed to the job.</simpara>\n         <simpara>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</simpara>\n         <simpara>For information about how to specify and consume your own Job arguments, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</ulink> topic in the developer guide.</simpara>\n         <simpara>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <ulink url=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</ulink> topic in the developer guide.</simpara>\n      ",
                      "documentation": "\n         <p>Arguments to be passed to the job.</p>\n         <p>You can specify arguments here that your own job-execution script\n      consumes, as well as arguments that AWS Glue itself consumes.</p>\n         <p>For information about how to specify and consume your own Job arguments, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p>\n         <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href=\"http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>\n      ",
                      "shape_name": "GenericMap",
                      "keys": {
                        "type": "string",
                        "shape_name": "GenericString",
                        "documentation": null
                      },
                      "members": {
                        "type": "string",
                        "shape_name": "GenericString",
                        "documentation": null
                      }
                    },
                    "Timeout": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <simpara>The job run timeout in minutes. It overrides the timeout value of the job.</simpara>\n      ",
                      "documentation": "\n         <p>The job run timeout in minutes. It overrides the timeout value of the job.</p>\n      ",
                      "shape_name": "Timeout",
                      "min_length": 1
                    },
                    "NotificationProperty": {
                      "type": "structure",
                      "members": {
                        "NotifyDelayAfter": {
                          "type": "integer",
                          "box": true,
                          "zonbookDocumentation": "\n         <simpara>After a job run starts, the number of minutes to wait before sending a job run delay notification.</simpara>\n      ",
                          "documentation": "\n         <p>After a job run starts, the number of minutes to wait before sending a job run delay notification.</p>\n      ",
                          "shape_name": "NotifyDelayAfter",
                          "min_length": 1
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Specifies configuration properties of a job run notification.</simpara>\n      ",
                      "documentation": "\n         <p>Specifies configuration properties of a job run notification.</p>\n      ",
                      "shape_name": "NotificationProperty"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Defines an action to be initiated by a trigger.</simpara>\n      ",
                  "documentation": "\n         <p>Defines an action to be initiated by a trigger.</p>\n      ",
                  "shape_name": "Action"
                }
              },
              "Predicate": {
                "type": "structure",
                "members": {
                  "Logical": {
                    "type": "string",
                    "enum": [
                      "AND",
                      "ANY"
                    ],
                    "zonbookDocumentation": "\n         <simpara>Optional field if only one condition is listed. If multiple conditions are listed, then this field is required.</simpara>\n      ",
                    "documentation": "\n         <p>Optional field if only one condition is listed. If multiple conditions are listed, then this field is required.</p>\n      ",
                    "shape_name": "Logical"
                  },
                  "Conditions": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A list of the conditions that determine when the trigger will fire.</simpara>\n      ",
                    "documentation": "\n         <p>A list of the conditions that determine when the trigger will fire.</p>\n      ",
                    "shape_name": "ConditionList",
                    "members": {
                      "type": "structure",
                      "members": {
                        "LogicalOperator": {
                          "type": "string",
                          "enum": [
                            "EQUALS"
                          ],
                          "zonbookDocumentation": "\n         <simpara>A logical operator.</simpara>\n      ",
                          "documentation": "\n         <p>A logical operator.</p>\n      ",
                          "shape_name": "LogicalOperator"
                        },
                        "JobName": {
                          "type": "string",
                          "pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*",
                          "zonbookDocumentation": "\n         <simpara>The name of the Job to whose JobRuns this condition applies\n      and on which this trigger waits.</simpara>\n      ",
                          "documentation": "\n         <p>The name of the Job to whose JobRuns this condition applies\n      and on which this trigger waits.</p>\n      ",
                          "shape_name": "NameString",
                          "min_length": 1,
                          "max_length": 255
                        },
                        "State": {
                          "type": "string",
                          "enum": [
                            "STARTING",
                            "RUNNING",
                            "STOPPING",
                            "STOPPED",
                            "SUCCEEDED",
                            "FAILED",
                            "TIMEOUT"
                          ],
                          "zonbookDocumentation": "\n         <simpara>The condition state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT and FAILED.</simpara>\n      ",
                          "documentation": "\n         <p>The condition state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT and FAILED.</p>\n      ",
                          "shape_name": "JobRunState"
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>Defines a condition under which a trigger fires.</simpara>\n      ",
                      "documentation": "\n         <p>Defines a condition under which a trigger fires.</p>\n      ",
                      "shape_name": "Condition"
                    }
                  }
                },
                "zonbookDocumentation": "\n         <simpara>The predicate of this trigger, which defines when it will fire.</simpara>\n      ",
                "documentation": "\n         <p>The predicate of this trigger, which defines when it will fire.</p>\n      ",
                "shape_name": "Predicate"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The resulting trigger definition.</simpara>\n      ",
            "documentation": "\n         <p>The resulting trigger definition.</p>\n      ",
            "shape_name": "Trigger"
          }
        },
        "shape_name": "UpdateTriggerResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>Two processes are trying to modify a resource simultaneously.</simpara>\n      ",
          "documentation": "\n         <p>Two processes are trying to modify a resource simultaneously.</p>\n      ",
          "shape_name": "ConcurrentModificationException"
        }
      ],
      "documentation": "\n         <p>Updates a trigger definition.</p>\n      "
    },
    "CreateDevEndpoint": {
      "name": "CreateDevEndpoint",
      "input": {
        "type": "structure",
        "members": {
          "EndpointName": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The name to be assigned to the new DevEndpoint.</simpara>\n      ",
            "documentation": "\n         <p>The name to be assigned to the new DevEndpoint.</p>\n      ",
            "required": true,
            "shape_name": "GenericString"
          },
          "RoleArn": {
            "type": "string",
            "pattern": "arn:aws:iam::\\d{12}:role/.*",
            "zonbookDocumentation": "\n         <simpara>The IAM role for the DevEndpoint.</simpara>\n      ",
            "documentation": "\n         <p>The IAM role for the DevEndpoint.</p>\n      ",
            "required": true,
            "shape_name": "RoleArn"
          },
          "SecurityGroupIds": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>Security group IDs for the security groups to be used by the\n      new DevEndpoint.</simpara>\n      ",
            "documentation": "\n         <p>Security group IDs for the security groups to be used by the\n      new DevEndpoint.</p>\n      ",
            "shape_name": "StringList",
            "members": {
              "type": "string",
              "shape_name": "GenericString",
              "documentation": null
            }
          },
          "SubnetId": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The subnet ID for the new DevEndpoint to use.</simpara>\n      ",
            "documentation": "\n         <p>The subnet ID for the new DevEndpoint to use.</p>\n      ",
            "shape_name": "GenericString"
          },
          "PublicKey": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The public key to be used by this DevEndpoint for authentication. This attribute is\n      provided for backward compatibility, as the recommended attribute to use is public\n      keys.</simpara>\n      ",
            "documentation": "\n         <p>The public key to be used by this DevEndpoint for authentication. This attribute is\n      provided for backward compatibility, as the recommended attribute to use is public\n      keys.</p>\n      ",
            "shape_name": "GenericString"
          },
          "PublicKeys": {
            "type": "list",
            "zonbookDocumentation": "\n         <para>A list of public keys to be used by the DevEndpoints for authentication. The use of this\n      attribute is preferred over a single public key because the public keys allow you to have a\n      different private key per client.</para>\n\n         <note>\n            <para>If you previously created an endpoint with a public key, you must remove that key to be\n      able to set a list of public keys: call the <code>UpdateDevEndpoint</code> API with the public\n      key content in the <code>deletePublicKeys</code> attribute, and the list of new keys in the\n      <code>addPublicKeys</code> attribute.</para>\n         </note>\n      ",
            "documentation": "\n         <p>A list of public keys to be used by the DevEndpoints for authentication. The use of this\n      attribute is preferred over a single public key because the public keys allow you to have a\n      different private key per client.</p>\n\n         <note>\n            <p>If you previously created an endpoint with a public key, you must remove that key to be\n      able to set a list of public keys: call the <code>UpdateDevEndpoint</code> API with the public\n      key content in the <code>deletePublicKeys</code> attribute, and the list of new keys in the\n      <code>addPublicKeys</code> attribute.</p>\n         </note>\n      ",
            "shape_name": "PublicKeysList",
            "max_length": 5,
            "members": {
              "type": "string",
              "shape_name": "GenericString",
              "documentation": null
            }
          },
          "NumberOfNodes": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>The number of AWS Glue Data Processing Units (DPUs) to allocate to this DevEndpoint.</simpara>\n      ",
            "documentation": "\n         <p>The number of AWS Glue Data Processing Units (DPUs) to allocate to this DevEndpoint.</p>\n      ",
            "shape_name": "IntegerValue"
          },
          "ExtraPythonLibsS3Path": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Path(s) to one or more Python libraries in an S3 bucket that should\n      be loaded in your DevEndpoint. Multiple values must be complete paths separated by a comma.</simpara>\n         <simpara>Please note that only pure Python libraries can currently be used on a DevEndpoint.\n      Libraries that rely on C extensions, such as the <ulink url=\"http://pandas.pydata.org/\">pandas</ulink> Python data analysis library, are not yet supported.</simpara>\n      ",
            "documentation": "\n         <p>Path(s) to one or more Python libraries in an S3 bucket that should\n      be loaded in your DevEndpoint. Multiple values must be complete paths separated by a comma.</p>\n         <p>Please note that only pure Python libraries can currently be used on a DevEndpoint.\n      Libraries that rely on C extensions, such as the <a href=\"http://pandas.pydata.org/\">pandas</a> Python data analysis library, are not yet supported.</p>\n      ",
            "shape_name": "GenericString"
          },
          "ExtraJarsS3Path": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Path to one or more Java Jars in an S3 bucket that should\n      be loaded in your DevEndpoint.</simpara>\n      ",
            "documentation": "\n         <p>Path to one or more Java Jars in an S3 bucket that should\n      be loaded in your DevEndpoint.</p>\n      ",
            "shape_name": "GenericString"
          }
        },
        "shape_name": "CreateDevEndpointRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "EndpointName": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The name assigned to the new DevEndpoint.</simpara>\n      ",
            "documentation": "\n         <p>The name assigned to the new DevEndpoint.</p>\n      ",
            "shape_name": "GenericString"
          },
          "Status": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The current status of the new DevEndpoint.</simpara>\n      ",
            "documentation": "\n         <p>The current status of the new DevEndpoint.</p>\n      ",
            "shape_name": "GenericString"
          },
          "SecurityGroupIds": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The security groups assigned to the new DevEndpoint.</simpara>\n      ",
            "documentation": "\n         <p>The security groups assigned to the new DevEndpoint.</p>\n      ",
            "shape_name": "StringList",
            "members": {
              "type": "string",
              "shape_name": "GenericString",
              "documentation": null
            }
          },
          "SubnetId": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The subnet ID assigned to the new DevEndpoint.</simpara>\n      ",
            "documentation": "\n         <p>The subnet ID assigned to the new DevEndpoint.</p>\n      ",
            "shape_name": "GenericString"
          },
          "RoleArn": {
            "type": "string",
            "pattern": "arn:aws:iam::\\d{12}:role/.*",
            "zonbookDocumentation": "\n         <simpara>The AWS ARN of the role assigned to the new DevEndpoint.</simpara>\n      ",
            "documentation": "\n         <p>The AWS ARN of the role assigned to the new DevEndpoint.</p>\n      ",
            "shape_name": "RoleArn"
          },
          "YarnEndpointAddress": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The address of the YARN endpoint used by this DevEndpoint.</simpara>\n      ",
            "documentation": "\n         <p>The address of the YARN endpoint used by this DevEndpoint.</p>\n      ",
            "shape_name": "GenericString"
          },
          "ZeppelinRemoteSparkInterpreterPort": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>The Apache Zeppelin port for the remote Apache Spark interpreter.</simpara>\n      ",
            "documentation": "\n         <p>The Apache Zeppelin port for the remote Apache Spark interpreter.</p>\n      ",
            "shape_name": "IntegerValue"
          },
          "NumberOfNodes": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>The number of AWS Glue Data Processing Units (DPUs) allocated to this DevEndpoint.</simpara>\n      ",
            "documentation": "\n         <p>The number of AWS Glue Data Processing Units (DPUs) allocated to this DevEndpoint.</p>\n      ",
            "shape_name": "IntegerValue"
          },
          "AvailabilityZone": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The AWS availability zone where this DevEndpoint is located.</simpara>\n      ",
            "documentation": "\n         <p>The AWS availability zone where this DevEndpoint is located.</p>\n      ",
            "shape_name": "GenericString"
          },
          "VpcId": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The ID of the VPC used by this DevEndpoint.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the VPC used by this DevEndpoint.</p>\n      ",
            "shape_name": "GenericString"
          },
          "ExtraPythonLibsS3Path": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Path(s) to one or more Python libraries in an S3 bucket that will\n      be loaded in your DevEndpoint.</simpara>\n      ",
            "documentation": "\n         <p>Path(s) to one or more Python libraries in an S3 bucket that will\n      be loaded in your DevEndpoint.</p>\n      ",
            "shape_name": "GenericString"
          },
          "ExtraJarsS3Path": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Path to one or more Java Jars in an S3 bucket that will\n      be loaded in your DevEndpoint.</simpara>\n      ",
            "documentation": "\n         <p>Path to one or more Java Jars in an S3 bucket that will\n      be loaded in your DevEndpoint.</p>\n      ",
            "shape_name": "GenericString"
          },
          "FailureReason": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The reason for a current failure in this DevEndpoint.</simpara>\n      ",
            "documentation": "\n         <p>The reason for a current failure in this DevEndpoint.</p>\n      ",
            "shape_name": "GenericString"
          },
          "CreatedTimestamp": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The point in time at which this DevEndpoint was created.</simpara>\n      ",
            "documentation": "\n         <p>The point in time at which this DevEndpoint was created.</p>\n      ",
            "shape_name": "TimestampValue"
          }
        },
        "shape_name": "CreateDevEndpointResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>Access to a resource was denied.</simpara>\n      ",
          "documentation": "\n         <p>Access to a resource was denied.</p>\n      ",
          "shape_name": "AccessDeniedException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource to be created or added already exists.</simpara>\n      ",
          "documentation": "\n         <p>A resource to be created or added already exists.</p>\n      ",
          "shape_name": "AlreadyExistsException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The same unique identifier was associated with two different records.</simpara>\n      ",
          "documentation": "\n         <p>The same unique identifier was associated with two different records.</p>\n      ",
          "shape_name": "IdempotentParameterMismatchException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A value could not be validated.</simpara>\n      ",
          "documentation": "\n         <p>A value could not be validated.</p>\n      ",
          "shape_name": "ValidationException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A resource numerical limit was exceeded.</simpara>\n      ",
          "documentation": "\n         <p>A resource numerical limit was exceeded.</p>\n      ",
          "shape_name": "ResourceNumberLimitExceededException"
        }
      ],
      "documentation": "\n         <p>Creates a new DevEndpoint.</p>\n      "
    },
    "DeleteDevEndpoint": {
      "name": "DeleteDevEndpoint",
      "input": {
        "type": "structure",
        "members": {
          "EndpointName": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The name of the DevEndpoint.</simpara>\n      ",
            "documentation": "\n         <p>The name of the DevEndpoint.</p>\n      ",
            "required": true,
            "shape_name": "GenericString"
          }
        },
        "shape_name": "DeleteDevEndpointRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "DeleteDevEndpointResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        }
      ],
      "documentation": "\n         <p>Deletes a specified DevEndpoint.</p>\n      "
    },
    "UpdateDevEndpoint": {
      "name": "UpdateDevEndpoint",
      "input": {
        "type": "structure",
        "members": {
          "EndpointName": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The name of the DevEndpoint to be updated.</simpara>\n      ",
            "documentation": "\n         <p>The name of the DevEndpoint to be updated.</p>\n      ",
            "required": true,
            "shape_name": "GenericString"
          },
          "PublicKey": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The public key for the DevEndpoint to use.</simpara>\n      ",
            "documentation": "\n         <p>The public key for the DevEndpoint to use.</p>\n      ",
            "shape_name": "GenericString"
          },
          "AddPublicKeys": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The list of public keys for the DevEndpoint to use.</simpara>\n      ",
            "documentation": "\n         <p>The list of public keys for the DevEndpoint to use.</p>\n      ",
            "shape_name": "PublicKeysList",
            "max_length": 5,
            "members": {
              "type": "string",
              "shape_name": "GenericString",
              "documentation": null
            }
          },
          "DeletePublicKeys": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The list of public keys to be deleted from the DevEndpoint. </simpara>\n      ",
            "documentation": "\n         <p>The list of public keys to be deleted from the DevEndpoint. </p>\n      ",
            "shape_name": "PublicKeysList",
            "max_length": 5,
            "members": {
              "type": "string",
              "shape_name": "GenericString",
              "documentation": null
            }
          },
          "CustomLibraries": {
            "type": "structure",
            "members": {
              "ExtraPythonLibsS3Path": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>Path(s) to one or more Python libraries in an S3 bucket that should\n      be loaded in your DevEndpoint. Multiple values must be complete paths separated by a comma.</simpara>\n         <simpara>Please note that only pure Python libraries can currently be used on a DevEndpoint.\n      Libraries that rely on C extensions, such as the <ulink url=\"http://pandas.pydata.org/\">pandas</ulink> Python data analysis library, are not yet supported.</simpara>\n      ",
                "documentation": "\n         <p>Path(s) to one or more Python libraries in an S3 bucket that should\n      be loaded in your DevEndpoint. Multiple values must be complete paths separated by a comma.</p>\n         <p>Please note that only pure Python libraries can currently be used on a DevEndpoint.\n      Libraries that rely on C extensions, such as the <a href=\"http://pandas.pydata.org/\">pandas</a> Python data analysis library, are not yet supported.</p>\n      ",
                "shape_name": "GenericString"
              },
              "ExtraJarsS3Path": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>Path to one or more Java Jars in an S3 bucket that should\n      be loaded in your DevEndpoint.</simpara>\n         <simpara>Please note that only pure Java/Scala libraries can currently be used\n      on a DevEndpoint.</simpara>\n      ",
                "documentation": "\n         <p>Path to one or more Java Jars in an S3 bucket that should\n      be loaded in your DevEndpoint.</p>\n         <p>Please note that only pure Java/Scala libraries can currently be used\n      on a DevEndpoint.</p>\n      ",
                "shape_name": "GenericString"
              }
            },
            "zonbookDocumentation": "\n         <simpara>Custom Python or Java libraries to be loaded in the DevEndpoint.</simpara>\n      ",
            "documentation": "\n         <p>Custom Python or Java libraries to be loaded in the DevEndpoint.</p>\n      ",
            "shape_name": "DevEndpointCustomLibraries"
          },
          "UpdateEtlLibraries": {
            "type": "boolean",
            "zonbookDocumentation": "\n         <simpara>True if the list of custom libraries to be loaded in the development\n      endpoint needs to be updated, or False otherwise.</simpara>\n      ",
            "documentation": "\n         <p>True if the list of custom libraries to be loaded in the development\n      endpoint needs to be updated, or False otherwise.</p>\n      ",
            "shape_name": "BooleanValue"
          }
        },
        "shape_name": "UpdateDevEndpointRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "UpdateDevEndpointResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A value could not be validated.</simpara>\n      ",
          "documentation": "\n         <p>A value could not be validated.</p>\n      ",
          "shape_name": "ValidationException"
        }
      ],
      "documentation": "\n         <p>Updates a specified DevEndpoint.</p>\n      "
    },
    "GetDevEndpoint": {
      "name": "GetDevEndpoint",
      "input": {
        "type": "structure",
        "members": {
          "EndpointName": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Name of the DevEndpoint for which to retrieve information.</simpara>\n      ",
            "documentation": "\n         <p>Name of the DevEndpoint for which to retrieve information.</p>\n      ",
            "required": true,
            "shape_name": "GenericString"
          }
        },
        "shape_name": "GetDevEndpointRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "DevEndpoint": {
            "type": "structure",
            "members": {
              "EndpointName": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The name of the DevEndpoint.</simpara>\n      ",
                "documentation": "\n         <p>The name of the DevEndpoint.</p>\n      ",
                "shape_name": "GenericString"
              },
              "RoleArn": {
                "type": "string",
                "pattern": "arn:aws:iam::\\d{12}:role/.*",
                "zonbookDocumentation": "\n         <simpara>The AWS ARN of the IAM role used in this DevEndpoint.</simpara>\n      ",
                "documentation": "\n         <p>The AWS ARN of the IAM role used in this DevEndpoint.</p>\n      ",
                "shape_name": "RoleArn"
              },
              "SecurityGroupIds": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A list of security group identifiers used in this DevEndpoint.</simpara>\n      ",
                "documentation": "\n         <p>A list of security group identifiers used in this DevEndpoint.</p>\n      ",
                "shape_name": "StringList",
                "members": {
                  "type": "string",
                  "shape_name": "GenericString",
                  "documentation": null
                }
              },
              "SubnetId": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The subnet ID for this DevEndpoint.</simpara>\n      ",
                "documentation": "\n         <p>The subnet ID for this DevEndpoint.</p>\n      ",
                "shape_name": "GenericString"
              },
              "YarnEndpointAddress": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The YARN endpoint address used by this DevEndpoint.</simpara>\n      ",
                "documentation": "\n         <p>The YARN endpoint address used by this DevEndpoint.</p>\n      ",
                "shape_name": "GenericString"
              },
              "PrivateAddress": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>A private DNS to access the DevEndpoint within a VPC,\n      if the DevEndpoint is created within one.</simpara>\n      ",
                "documentation": "\n         <p>A private DNS to access the DevEndpoint within a VPC,\n      if the DevEndpoint is created within one.</p>\n      ",
                "shape_name": "GenericString"
              },
              "ZeppelinRemoteSparkInterpreterPort": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The Apache Zeppelin port for the remote Apache Spark interpreter.</simpara>\n      ",
                "documentation": "\n         <p>The Apache Zeppelin port for the remote Apache Spark interpreter.</p>\n      ",
                "shape_name": "IntegerValue"
              },
              "PublicAddress": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The public VPC address used by this DevEndpoint.</simpara>\n      ",
                "documentation": "\n         <p>The public VPC address used by this DevEndpoint.</p>\n      ",
                "shape_name": "GenericString"
              },
              "Status": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The current status of this DevEndpoint.</simpara>\n      ",
                "documentation": "\n         <p>The current status of this DevEndpoint.</p>\n      ",
                "shape_name": "GenericString"
              },
              "NumberOfNodes": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The number of AWS Glue Data Processing Units (DPUs) allocated to this DevEndpoint.</simpara>\n      ",
                "documentation": "\n         <p>The number of AWS Glue Data Processing Units (DPUs) allocated to this DevEndpoint.</p>\n      ",
                "shape_name": "IntegerValue"
              },
              "AvailabilityZone": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The AWS availability zone where this DevEndpoint is located.</simpara>\n      ",
                "documentation": "\n         <p>The AWS availability zone where this DevEndpoint is located.</p>\n      ",
                "shape_name": "GenericString"
              },
              "VpcId": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The ID of the virtual private cloud (VPC) used by this DevEndpoint.</simpara>\n      ",
                "documentation": "\n         <p>The ID of the virtual private cloud (VPC) used by this DevEndpoint.</p>\n      ",
                "shape_name": "GenericString"
              },
              "ExtraPythonLibsS3Path": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>Path(s) to one or more Python libraries in an S3 bucket that should\n      be loaded in your DevEndpoint. Multiple values must be complete paths separated by a comma.</simpara>\n         <simpara>Please note that only pure Python libraries can currently be used on a DevEndpoint.\n      Libraries that rely on C extensions, such as the <ulink url=\"http://pandas.pydata.org/\">pandas</ulink> Python data analysis library, are not yet supported.</simpara>\n      ",
                "documentation": "\n         <p>Path(s) to one or more Python libraries in an S3 bucket that should\n      be loaded in your DevEndpoint. Multiple values must be complete paths separated by a comma.</p>\n         <p>Please note that only pure Python libraries can currently be used on a DevEndpoint.\n      Libraries that rely on C extensions, such as the <a href=\"http://pandas.pydata.org/\">pandas</a> Python data analysis library, are not yet supported.</p>\n      ",
                "shape_name": "GenericString"
              },
              "ExtraJarsS3Path": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>Path to one or more Java Jars in an S3 bucket that should\n      be loaded in your DevEndpoint.</simpara>\n         <simpara>Please note that only pure Java/Scala libraries can currently be used\n      on a DevEndpoint.</simpara>\n      ",
                "documentation": "\n         <p>Path to one or more Java Jars in an S3 bucket that should\n      be loaded in your DevEndpoint.</p>\n         <p>Please note that only pure Java/Scala libraries can currently be used\n      on a DevEndpoint.</p>\n      ",
                "shape_name": "GenericString"
              },
              "FailureReason": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The reason for a current failure in this DevEndpoint.</simpara>\n      ",
                "documentation": "\n         <p>The reason for a current failure in this DevEndpoint.</p>\n      ",
                "shape_name": "GenericString"
              },
              "LastUpdateStatus": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The status of the last update.</simpara>\n      ",
                "documentation": "\n         <p>The status of the last update.</p>\n      ",
                "shape_name": "GenericString"
              },
              "CreatedTimestamp": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>The point in time at which this DevEndpoint was created.</simpara>\n      ",
                "documentation": "\n         <p>The point in time at which this DevEndpoint was created.</p>\n      ",
                "shape_name": "TimestampValue"
              },
              "LastModifiedTimestamp": {
                "type": "timestamp",
                "zonbookDocumentation": "\n         <simpara>The point in time at which this DevEndpoint was last modified.</simpara>\n      ",
                "documentation": "\n         <p>The point in time at which this DevEndpoint was last modified.</p>\n      ",
                "shape_name": "TimestampValue"
              },
              "PublicKey": {
                "type": "string",
                "zonbookDocumentation": "\n         <para>The public key to be used by this DevEndpoint for authentication. This attribute is\n      provided for backward compatibility, as the recommended attribute to use is public\n      keys.</para>\n      ",
                "documentation": "\n         <p>The public key to be used by this DevEndpoint for authentication. This attribute is\n      provided for backward compatibility, as the recommended attribute to use is public\n      keys.</p>\n      ",
                "shape_name": "GenericString"
              },
              "PublicKeys": {
                "type": "list",
                "zonbookDocumentation": "\n         <para>A list of public keys to be used by the DevEndpoints for authentication. The use of this\n      attribute is preferred over a single public key because the public keys allow you to have a\n      different private key per client.</para>\n         <note>\n            <para>If you previously created an endpoint with a public key, you must remove that key to be\n        able to set a list of public keys: call the <code>UpdateDevEndpoint</code> API with the\n        public key content in the <code>deletePublicKeys</code> attribute, and the list of new keys\n        in the <code>addPublicKeys</code> attribute.</para>\n         </note>\n      ",
                "documentation": "\n         <p>A list of public keys to be used by the DevEndpoints for authentication. The use of this\n      attribute is preferred over a single public key because the public keys allow you to have a\n      different private key per client.</p>\n         <note>\n            <p>If you previously created an endpoint with a public key, you must remove that key to be\n        able to set a list of public keys: call the <code>UpdateDevEndpoint</code> API with the\n        public key content in the <code>deletePublicKeys</code> attribute, and the list of new keys\n        in the <code>addPublicKeys</code> attribute.</p>\n         </note>\n      ",
                "shape_name": "PublicKeysList",
                "max_length": 5,
                "members": {
                  "type": "string",
                  "shape_name": "GenericString",
                  "documentation": null
                }
              }
            },
            "zonbookDocumentation": "\n         <simpara>A DevEndpoint definition.</simpara>\n      ",
            "documentation": "\n         <p>A DevEndpoint definition.</p>\n      ",
            "shape_name": "DevEndpoint"
          }
        },
        "shape_name": "GetDevEndpointResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        }
      ],
      "documentation": "\n         <p>Retrieves information about a specified DevEndpoint.</p>\n      "
    },
    "GetDevEndpoints": {
      "name": "GetDevEndpoints",
      "input": {
        "type": "structure",
        "members": {
          "MaxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The maximum size of information to return.</simpara>\n      ",
            "documentation": "\n         <p>The maximum size of information to return.</p>\n      ",
            "shape_name": "PageSize",
            "min_length": 1,
            "max_length": 1000
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, if this is a continuation call.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, if this is a continuation call.</p>\n      ",
            "shape_name": "GenericString"
          }
        },
        "shape_name": "GetDevEndpointsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "DevEndpoints": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of DevEndpoint definitions.</simpara>\n      ",
            "documentation": "\n         <p>A list of DevEndpoint definitions.</p>\n      ",
            "shape_name": "DevEndpointList",
            "members": {
              "type": "structure",
              "members": {
                "EndpointName": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The name of the DevEndpoint.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the DevEndpoint.</p>\n      ",
                  "shape_name": "GenericString"
                },
                "RoleArn": {
                  "type": "string",
                  "pattern": "arn:aws:iam::\\d{12}:role/.*",
                  "zonbookDocumentation": "\n         <simpara>The AWS ARN of the IAM role used in this DevEndpoint.</simpara>\n      ",
                  "documentation": "\n         <p>The AWS ARN of the IAM role used in this DevEndpoint.</p>\n      ",
                  "shape_name": "RoleArn"
                },
                "SecurityGroupIds": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>A list of security group identifiers used in this DevEndpoint.</simpara>\n      ",
                  "documentation": "\n         <p>A list of security group identifiers used in this DevEndpoint.</p>\n      ",
                  "shape_name": "StringList",
                  "members": {
                    "type": "string",
                    "shape_name": "GenericString",
                    "documentation": null
                  }
                },
                "SubnetId": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The subnet ID for this DevEndpoint.</simpara>\n      ",
                  "documentation": "\n         <p>The subnet ID for this DevEndpoint.</p>\n      ",
                  "shape_name": "GenericString"
                },
                "YarnEndpointAddress": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The YARN endpoint address used by this DevEndpoint.</simpara>\n      ",
                  "documentation": "\n         <p>The YARN endpoint address used by this DevEndpoint.</p>\n      ",
                  "shape_name": "GenericString"
                },
                "PrivateAddress": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A private DNS to access the DevEndpoint within a VPC,\n      if the DevEndpoint is created within one.</simpara>\n      ",
                  "documentation": "\n         <p>A private DNS to access the DevEndpoint within a VPC,\n      if the DevEndpoint is created within one.</p>\n      ",
                  "shape_name": "GenericString"
                },
                "ZeppelinRemoteSparkInterpreterPort": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The Apache Zeppelin port for the remote Apache Spark interpreter.</simpara>\n      ",
                  "documentation": "\n         <p>The Apache Zeppelin port for the remote Apache Spark interpreter.</p>\n      ",
                  "shape_name": "IntegerValue"
                },
                "PublicAddress": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The public VPC address used by this DevEndpoint.</simpara>\n      ",
                  "documentation": "\n         <p>The public VPC address used by this DevEndpoint.</p>\n      ",
                  "shape_name": "GenericString"
                },
                "Status": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The current status of this DevEndpoint.</simpara>\n      ",
                  "documentation": "\n         <p>The current status of this DevEndpoint.</p>\n      ",
                  "shape_name": "GenericString"
                },
                "NumberOfNodes": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The number of AWS Glue Data Processing Units (DPUs) allocated to this DevEndpoint.</simpara>\n      ",
                  "documentation": "\n         <p>The number of AWS Glue Data Processing Units (DPUs) allocated to this DevEndpoint.</p>\n      ",
                  "shape_name": "IntegerValue"
                },
                "AvailabilityZone": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The AWS availability zone where this DevEndpoint is located.</simpara>\n      ",
                  "documentation": "\n         <p>The AWS availability zone where this DevEndpoint is located.</p>\n      ",
                  "shape_name": "GenericString"
                },
                "VpcId": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The ID of the virtual private cloud (VPC) used by this DevEndpoint.</simpara>\n      ",
                  "documentation": "\n         <p>The ID of the virtual private cloud (VPC) used by this DevEndpoint.</p>\n      ",
                  "shape_name": "GenericString"
                },
                "ExtraPythonLibsS3Path": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>Path(s) to one or more Python libraries in an S3 bucket that should\n      be loaded in your DevEndpoint. Multiple values must be complete paths separated by a comma.</simpara>\n         <simpara>Please note that only pure Python libraries can currently be used on a DevEndpoint.\n      Libraries that rely on C extensions, such as the <ulink url=\"http://pandas.pydata.org/\">pandas</ulink> Python data analysis library, are not yet supported.</simpara>\n      ",
                  "documentation": "\n         <p>Path(s) to one or more Python libraries in an S3 bucket that should\n      be loaded in your DevEndpoint. Multiple values must be complete paths separated by a comma.</p>\n         <p>Please note that only pure Python libraries can currently be used on a DevEndpoint.\n      Libraries that rely on C extensions, such as the <a href=\"http://pandas.pydata.org/\">pandas</a> Python data analysis library, are not yet supported.</p>\n      ",
                  "shape_name": "GenericString"
                },
                "ExtraJarsS3Path": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>Path to one or more Java Jars in an S3 bucket that should\n      be loaded in your DevEndpoint.</simpara>\n         <simpara>Please note that only pure Java/Scala libraries can currently be used\n      on a DevEndpoint.</simpara>\n      ",
                  "documentation": "\n         <p>Path to one or more Java Jars in an S3 bucket that should\n      be loaded in your DevEndpoint.</p>\n         <p>Please note that only pure Java/Scala libraries can currently be used\n      on a DevEndpoint.</p>\n      ",
                  "shape_name": "GenericString"
                },
                "FailureReason": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The reason for a current failure in this DevEndpoint.</simpara>\n      ",
                  "documentation": "\n         <p>The reason for a current failure in this DevEndpoint.</p>\n      ",
                  "shape_name": "GenericString"
                },
                "LastUpdateStatus": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The status of the last update.</simpara>\n      ",
                  "documentation": "\n         <p>The status of the last update.</p>\n      ",
                  "shape_name": "GenericString"
                },
                "CreatedTimestamp": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The point in time at which this DevEndpoint was created.</simpara>\n      ",
                  "documentation": "\n         <p>The point in time at which this DevEndpoint was created.</p>\n      ",
                  "shape_name": "TimestampValue"
                },
                "LastModifiedTimestamp": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The point in time at which this DevEndpoint was last modified.</simpara>\n      ",
                  "documentation": "\n         <p>The point in time at which this DevEndpoint was last modified.</p>\n      ",
                  "shape_name": "TimestampValue"
                },
                "PublicKey": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <para>The public key to be used by this DevEndpoint for authentication. This attribute is\n      provided for backward compatibility, as the recommended attribute to use is public\n      keys.</para>\n      ",
                  "documentation": "\n         <p>The public key to be used by this DevEndpoint for authentication. This attribute is\n      provided for backward compatibility, as the recommended attribute to use is public\n      keys.</p>\n      ",
                  "shape_name": "GenericString"
                },
                "PublicKeys": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <para>A list of public keys to be used by the DevEndpoints for authentication. The use of this\n      attribute is preferred over a single public key because the public keys allow you to have a\n      different private key per client.</para>\n         <note>\n            <para>If you previously created an endpoint with a public key, you must remove that key to be\n        able to set a list of public keys: call the <code>UpdateDevEndpoint</code> API with the\n        public key content in the <code>deletePublicKeys</code> attribute, and the list of new keys\n        in the <code>addPublicKeys</code> attribute.</para>\n         </note>\n      ",
                  "documentation": "\n         <p>A list of public keys to be used by the DevEndpoints for authentication. The use of this\n      attribute is preferred over a single public key because the public keys allow you to have a\n      different private key per client.</p>\n         <note>\n            <p>If you previously created an endpoint with a public key, you must remove that key to be\n        able to set a list of public keys: call the <code>UpdateDevEndpoint</code> API with the\n        public key content in the <code>deletePublicKeys</code> attribute, and the list of new keys\n        in the <code>addPublicKeys</code> attribute.</p>\n         </note>\n      ",
                  "shape_name": "PublicKeysList",
                  "max_length": 5,
                  "members": {
                    "type": "string",
                    "shape_name": "GenericString",
                    "documentation": null
                  }
                }
              },
              "zonbookDocumentation": "\n         <simpara>A development endpoint where a developer can remotely debug ETL scripts.</simpara>\n      ",
              "documentation": "\n         <p>A development endpoint where a developer can remotely debug ETL scripts.</p>\n      ",
              "shape_name": "DevEndpoint"
            }
          },
          "NextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A continuation token, if not all DevEndpoint definitions have yet been returned.</simpara>\n      ",
            "documentation": "\n         <p>A continuation token, if not all DevEndpoint definitions have yet been returned.</p>\n      ",
            "shape_name": "GenericString"
          }
        },
        "shape_name": "GetDevEndpointsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>A specified entity does not exist</simpara>\n      ",
          "documentation": "\n         <p>A specified entity does not exist</p>\n      ",
          "shape_name": "EntityNotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal service error occurred.</simpara>\n      ",
          "documentation": "\n         <p>An internal service error occurred.</p>\n      ",
          "shape_name": "InternalServiceException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The operation timed out.</simpara>\n      ",
          "documentation": "\n         <p>The operation timed out.</p>\n      ",
          "shape_name": "OperationTimeoutException"
        },
        {
          "type": "structure",
          "members": {
            "Message": {
              "type": "string",
              "zonbookDocumentation": "\n         <simpara>A message describing the problem.</simpara>\n      ",
              "documentation": "\n         <p>A message describing the problem.</p>\n      ",
              "shape_name": "MessageString"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The input provided was not valid.</simpara>\n      ",
          "documentation": "\n         <p>The input provided was not valid.</p>\n      ",
          "shape_name": "InvalidInputException"
        }
      ],
      "documentation": "\n         <p>Retrieves all the DevEndpoints in this AWS account.</p>\n      "
    }
  }
}
