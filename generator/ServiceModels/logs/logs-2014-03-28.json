{
  "version": "1.0",
  "service_full_name": "Amazon CloudWatch Logs",
  "type": "json",
  "json_version": "1.1",
  "signature_version": "v4",
  "service_id": "CloudWatch Logs",
  "uid": "logs-2014-03-28",
  "endpoint_prefix": "logs",
  "api_version": "2014-03-28",
  "xmlnamespace": "http://monitoring.amazonaws.com/doc/2014-03-28/",
  "target_prefix": "Logs_20140328",
  "documentation": " \n         <p>You can use Amazon CloudWatch Logs to monitor, store, and access your log files from\n      Amazon EC2 instances, AWS CloudTrail, or other sources. You can then retrieve the associated\n      log data from CloudWatch Logs using the CloudWatch console, CloudWatch Logs commands in the\n      AWS CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p> \n         <p>You can use CloudWatch Logs to:</p>\n         <ul>\n            <li>\n               <p>\n                  <b>Monitor logs from EC2 instances in real-time</b>: You\n          can use CloudWatch Logs to monitor applications and systems using log data. For example,\n          CloudWatch Logs can track the number of errors that occur in your application logs and\n          send you a notification whenever the rate of errors exceeds a threshold that you specify.\n          CloudWatch Logs uses your log data for monitoring; so, no code changes are required. For\n          example, you can monitor application logs for specific literal terms (such as\n          \"NullReferenceException\") or count the number of occurrences of a literal term at a\n          particular position in log data (such as \"404\" status codes in an Apache access log). When\n          the term you are searching for is found, CloudWatch Logs reports the data to a CloudWatch\n          metric that you specify.</p>\n            </li>\n            <li>\n               <p>\n                  <b>Monitor AWS CloudTrail logged events</b>: You can\n          create alarms in CloudWatch and receive notifications of particular API activity as\n          captured by CloudTrail and use the notification to perform troubleshooting.</p>\n            </li>\n            <li>\n               <p>\n                  <b>Archive log data</b>: You can use CloudWatch Logs to\n          store your log data in highly durable storage. You can change the log retention setting so\n          that any log events older than this setting are automatically deleted. The CloudWatch Logs\n          agent makes it easy to quickly send both rotated and non-rotated log data off of a host\n          and into the log service. You can then access the raw log data when you need it.</p>\n            </li>\n         </ul>\n      ",
  "operations": {
    "CreateLogGroup": {
      "name": "CreateLogGroup",
      "input": {
        "type": "structure",
        "members": {
          "logGroupName": {
            "type": "string",
            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
            "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log group.</p>\n      ",
            "required": true,
            "shape_name": "LogGroupName",
            "min_length": 1,
            "max_length": 512
          },
          "kmsKeyId": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The Amazon Resource Name (ARN) of the CMK to use when encrypting log data. \n      For more information, see <ulink type=\"documentation\" url=\"general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms\">Amazon Resource Names - AWS Key Management Service (AWS KMS)</ulink>.</simpara>\n      ",
            "documentation": "\n         <p>The Amazon Resource Name (ARN) of the CMK to use when encrypting log data. \n      For more information, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms\">Amazon Resource Names - AWS Key Management Service (AWS KMS)</a>.</p>\n      ",
            "shape_name": "KmsKeyId",
            "max_length": 256
          },
          "tags": {
            "type": "map",
            "zonbookDocumentation": "\n         <simpara>The key-value pairs to use for the tags.</simpara>\n      ",
            "documentation": "\n         <p>The key-value pairs to use for the tags.</p>\n      ",
            "shape_name": "Tags",
            "min_length": 1,
            "max_length": 50,
            "keys": {
              "type": "string",
              "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]+)$",
              "shape_name": "TagKey",
              "documentation": null,
              "min_length": 1,
              "max_length": 128
            },
            "members": {
              "type": "string",
              "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
              "shape_name": "TagValue",
              "documentation": null,
              "max_length": 256
            }
          }
        },
        "shape_name": "CreateLogGroupRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource already exists.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource already exists.</p>\n      ",
          "shape_name": "ResourceAlreadyExistsException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You have reached the maximum number of resources that can be created.</simpara>\n      ",
          "documentation": "\n         <p>You have reached the maximum number of resources that can be created.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Multiple requests to update the same resource were in conflict.</simpara>\n      ",
          "documentation": "\n         <p>Multiple requests to update the same resource were in conflict.</p>\n      ",
          "shape_name": "OperationAbortedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Creates a log group with the specified name.</p>\n         <p>You can create up to 5000 log groups per account.</p>\n         <p>You must use the following guidelines when naming a log group:</p>\n         <ul>\n            <li>\n               <p>Log group names must be unique within a region for an AWS account.</p>\n            </li>\n            <li>\n               <p>Log group names can be between 1 and 512 characters long.</p>\n            </li>\n            <li>\n               <p>Log group names consist of the following characters: a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen), \n          '/' (forward slash), and '.' (period).</p>\n            </li>\n         </ul>\n         <p>If you associate a AWS Key Management Service (AWS KMS) customer master key (CMK) with the log group, ingested data is encrypted using the CMK. \n      This association is stored as long as the data encrypted with the CMK is still within Amazon CloudWatch Logs. \n      This enables Amazon CloudWatch Logs to decrypt this data whenever it is requested.</p>\n         <p>If you attempt to associate a CMK with the log group but the CMK does not exist or the CMK is disabled, you will \n      receive an <code>InvalidParameterException</code> error.\n    </p>\n    \n      "
    },
    "DeleteLogGroup": {
      "name": "DeleteLogGroup",
      "input": {
        "type": "structure",
        "members": {
          "logGroupName": {
            "type": "string",
            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
            "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log group.</p>\n      ",
            "required": true,
            "shape_name": "LogGroupName",
            "min_length": 1,
            "max_length": 512
          }
        },
        "shape_name": "DeleteLogGroupRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Multiple requests to update the same resource were in conflict.</simpara>\n      ",
          "documentation": "\n         <p>Multiple requests to update the same resource were in conflict.</p>\n      ",
          "shape_name": "OperationAbortedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Deletes the specified log group and permanently deletes all the archived\n      log events associated with the log group.</p>\n    \n      "
    },
    "DescribeLogGroups": {
      "name": "DescribeLogGroups",
      "input": {
        "type": "structure",
        "members": {
          "logGroupNamePrefix": {
            "type": "string",
            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
            "zonbookDocumentation": "\n         <simpara>The prefix to match.</simpara>\n      ",
            "documentation": "\n         <p>The prefix to match.</p>\n      ",
            "shape_name": "LogGroupName",
            "min_length": 1,
            "max_length": 512
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The token for the next set of items to return. (You received this token from a previous call.)</simpara>\n      ",
            "documentation": "\n         <p>The token for the next set of items to return. (You received this token from a previous call.)</p>\n      ",
            "shape_name": "NextToken",
            "min_length": 1
          },
          "limit": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>The maximum number of items returned. If you don't specify a value, the default is up to 50 items.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of items returned. If you don't specify a value, the default is up to 50 items.</p>\n      ",
            "shape_name": "DescribeLimit",
            "min_length": 1,
            "max_length": 50
          }
        },
        "shape_name": "DescribeLogGroupsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "logGroups": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The log groups.</simpara>\n      ",
            "documentation": "\n         <p>The log groups.</p>\n      ",
            "shape_name": "LogGroups",
            "members": {
              "type": "structure",
              "members": {
                "logGroupName": {
                  "type": "string",
                  "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the log group.</p>\n      ",
                  "shape_name": "LogGroupName",
                  "min_length": 1,
                  "max_length": 512
                },
                "creationTime": {
                  "type": "long",
                  "zonbookDocumentation": "\n         <simpara>The creation time of the log group, expressed as the number of milliseconds after Jan\n      1, 1970 00:00:00 UTC.</simpara>\n      ",
                  "documentation": "\n         <p>The creation time of the log group, expressed as the number of milliseconds after Jan\n      1, 1970 00:00:00 UTC.</p>\n      ",
                  "shape_name": "Timestamp",
                  "min_length": 0
                },
                "retentionInDays": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The number of days to retain the log events in the specified log group.\n      Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653.</simpara>\n      ",
                  "documentation": "\n         <p>The number of days to retain the log events in the specified log group.\n      Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653.</p>\n      ",
                  "shape_name": "Days"
                },
                "metricFilterCount": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara>The number of metric filters.</simpara>\n      ",
                  "documentation": "\n         <p>The number of metric filters.</p>\n      ",
                  "shape_name": "FilterCount"
                },
                "arn": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The Amazon Resource Name (ARN) of the log group.</simpara>\n      ",
                  "documentation": "\n         <p>The Amazon Resource Name (ARN) of the log group.</p>\n      ",
                  "shape_name": "Arn"
                },
                "storedBytes": {
                  "type": "long",
                  "zonbookDocumentation": "\n         <simpara>The number of bytes stored.</simpara>\n      ",
                  "documentation": "\n         <p>The number of bytes stored.</p>\n      ",
                  "shape_name": "StoredBytes",
                  "min_length": 0
                },
                "kmsKeyId": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The Amazon Resource Name (ARN) of the CMK to use when encrypting log data.</simpara>\n      ",
                  "documentation": "\n         <p>The Amazon Resource Name (ARN) of the CMK to use when encrypting log data.</p>\n      ",
                  "shape_name": "KmsKeyId",
                  "max_length": 256
                }
              },
              "zonbookDocumentation": "\n         <simpara>Represents a log group.</simpara>\n      ",
              "documentation": "\n         <p>Represents a log group.</p>\n      ",
              "shape_name": "LogGroup"
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The token for the next set of items to return. The token expires after 24 hours.</simpara>\n      ",
            "documentation": "\n         <p>The token for the next set of items to return. The token expires after 24 hours.</p>\n      ",
            "shape_name": "NextToken",
            "min_length": 1
          }
        },
        "shape_name": "DescribeLogGroupsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Lists the specified log groups. You can list all your log groups or filter the results by prefix.\n      The results are ASCII-sorted by log group name.</p>\n    \n      "
    },
    "TagLogGroup": {
      "name": "TagLogGroup",
      "input": {
        "type": "structure",
        "members": {
          "logGroupName": {
            "type": "string",
            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
            "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log group.</p>\n      ",
            "required": true,
            "shape_name": "LogGroupName",
            "min_length": 1,
            "max_length": 512
          },
          "tags": {
            "type": "map",
            "zonbookDocumentation": "\n         <simpara>The key-value pairs to use for the tags.</simpara>\n      ",
            "documentation": "\n         <p>The key-value pairs to use for the tags.</p>\n      ",
            "required": true,
            "shape_name": "Tags",
            "min_length": 1,
            "max_length": 50,
            "keys": {
              "type": "string",
              "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]+)$",
              "shape_name": "TagKey",
              "documentation": null,
              "min_length": 1,
              "max_length": 128
            },
            "members": {
              "type": "string",
              "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
              "shape_name": "TagValue",
              "documentation": null,
              "max_length": 256
            }
          }
        },
        "shape_name": "TagLogGroupRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        }
      ],
      "documentation": "\n         <p>Adds or updates the specified tags for the specified log group.</p>\n         <p>To list the tags for a log group, use <a>ListTagsLogGroup</a>.\n      To remove tags, use <a>UntagLogGroup</a>.</p>\n         <p>For more information about tags, see <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/log-group-tagging.html\">Tag Log Groups in Amazon CloudWatch Logs</a>\n      in the <i>Amazon CloudWatch Logs User Guide</i>.</p>\n    \n      "
    },
    "UntagLogGroup": {
      "name": "UntagLogGroup",
      "input": {
        "type": "structure",
        "members": {
          "logGroupName": {
            "type": "string",
            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
            "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log group.</p>\n      ",
            "required": true,
            "shape_name": "LogGroupName",
            "min_length": 1,
            "max_length": 512
          },
          "tags": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The tag keys. The corresponding tags are removed from the log group.</simpara>\n      ",
            "documentation": "\n         <p>The tag keys. The corresponding tags are removed from the log group.</p>\n      ",
            "required": true,
            "shape_name": "TagList",
            "min_length": 1,
            "members": {
              "type": "string",
              "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]+)$",
              "shape_name": "TagKey",
              "documentation": null,
              "min_length": 1,
              "max_length": 128
            }
          }
        },
        "shape_name": "UntagLogGroupRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        }
      ],
      "documentation": "\n         <p>Removes the specified tags from the specified log group.</p>\n         <p>To list the tags for a log group, use <a>ListTagsLogGroup</a>.\n      To add tags, use <a>UntagLogGroup</a>.</p>\n    \n      "
    },
    "ListTagsLogGroup": {
      "name": "ListTagsLogGroup",
      "input": {
        "type": "structure",
        "members": {
          "logGroupName": {
            "type": "string",
            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
            "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log group.</p>\n      ",
            "required": true,
            "shape_name": "LogGroupName",
            "min_length": 1,
            "max_length": 512
          }
        },
        "shape_name": "ListTagsLogGroupRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "tags": {
            "type": "map",
            "zonbookDocumentation": "\n         <simpara>The tags for the log group.</simpara>\n      ",
            "documentation": "\n         <p>The tags for the log group.</p>\n      ",
            "shape_name": "Tags",
            "min_length": 1,
            "max_length": 50,
            "keys": {
              "type": "string",
              "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]+)$",
              "shape_name": "TagKey",
              "documentation": null,
              "min_length": 1,
              "max_length": 128
            },
            "members": {
              "type": "string",
              "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
              "shape_name": "TagValue",
              "documentation": null,
              "max_length": 256
            }
          }
        },
        "shape_name": "ListTagsLogGroupResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Lists the tags for the specified log group.</p>\n      "
    },
    "CreateLogStream": {
      "name": "CreateLogStream",
      "input": {
        "type": "structure",
        "members": {
          "logGroupName": {
            "type": "string",
            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
            "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log group.</p>\n      ",
            "required": true,
            "shape_name": "LogGroupName",
            "min_length": 1,
            "max_length": 512
          },
          "logStreamName": {
            "type": "string",
            "pattern": "[^:*]*",
            "zonbookDocumentation": "\n         <simpara>The name of the log stream.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log stream.</p>\n      ",
            "required": true,
            "shape_name": "LogStreamName",
            "min_length": 1,
            "max_length": 512
          }
        },
        "shape_name": "CreateLogStreamRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource already exists.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource already exists.</p>\n      ",
          "shape_name": "ResourceAlreadyExistsException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Creates a log stream for the specified log group.</p> \n         <p>There is no limit on the number of log streams that you can create for a log group.</p>\n         <p>You must use the following guidelines when naming a log stream:</p>\n         <ul>\n            <li>\n               <p>Log stream names must be unique within the log group.</p>\n            </li>\n            <li>\n               <p>Log stream names can be between 1 and 512 characters long.</p>\n            </li>\n            <li>\n               <p>The ':' (colon) and '*' (asterisk) characters are not allowed.</p>\n            </li>\n         </ul> \n    \n      "
    },
    "DeleteLogStream": {
      "name": "DeleteLogStream",
      "input": {
        "type": "structure",
        "members": {
          "logGroupName": {
            "type": "string",
            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
            "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log group.</p>\n      ",
            "required": true,
            "shape_name": "LogGroupName",
            "min_length": 1,
            "max_length": 512
          },
          "logStreamName": {
            "type": "string",
            "pattern": "[^:*]*",
            "zonbookDocumentation": "\n         <simpara>The name of the log stream.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log stream.</p>\n      ",
            "required": true,
            "shape_name": "LogStreamName",
            "min_length": 1,
            "max_length": 512
          }
        },
        "shape_name": "DeleteLogStreamRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Multiple requests to update the same resource were in conflict.</simpara>\n      ",
          "documentation": "\n         <p>Multiple requests to update the same resource were in conflict.</p>\n      ",
          "shape_name": "OperationAbortedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Deletes the specified log stream and permanently deletes all the archived log events associated\n      with the log stream.</p>\n    \n      "
    },
    "DescribeLogStreams": {
      "name": "DescribeLogStreams",
      "input": {
        "type": "structure",
        "members": {
          "logGroupName": {
            "type": "string",
            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
            "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log group.</p>\n      ",
            "required": true,
            "shape_name": "LogGroupName",
            "min_length": 1,
            "max_length": 512
          },
          "logStreamNamePrefix": {
            "type": "string",
            "pattern": "[^:*]*",
            "zonbookDocumentation": "\n         <simpara>The prefix to match.</simpara> \n         <simpara>If <code>orderBy</code> is <code>LastEventTime</code>,you cannot specify this\n      parameter.</simpara>\n      ",
            "documentation": "\n         <p>The prefix to match.</p> \n         <p>If <code>orderBy</code> is <code>LastEventTime</code>,you cannot specify this\n      parameter.</p>\n      ",
            "shape_name": "LogStreamName",
            "min_length": 1,
            "max_length": 512
          },
          "orderBy": {
            "type": "string",
            "enum": [
              "LogStreamName",
              "LastEventTime"
            ],
            "zonbookDocumentation": "\n         <simpara>If the value is <code>LogStreamName</code>, the results are ordered by log stream name.\n      If the value is <code>LastEventTime</code>, the results are ordered by the event time. \n      The default value is <code>LogStreamName</code>.</simpara>\n         <simpara>If you order the results by event time, you cannot specify the <code>logStreamNamePrefix</code> parameter.</simpara>\n         <simpara>lastEventTimestamp represents the time of the most recent log event in the log stream\n      in CloudWatch Logs. This number is expressed as the number of milliseconds after Jan 1, 1970\n      00:00:00 UTC. lastEventTimeStamp updates on an eventual consistency basis. It typically\n      updates in less than an hour from ingestion, but may take longer in some rare\n      situations.</simpara>\n      ",
            "documentation": "\n         <p>If the value is <code>LogStreamName</code>, the results are ordered by log stream name.\n      If the value is <code>LastEventTime</code>, the results are ordered by the event time. \n      The default value is <code>LogStreamName</code>.</p>\n         <p>If you order the results by event time, you cannot specify the <code>logStreamNamePrefix</code> parameter.</p>\n         <p>lastEventTimestamp represents the time of the most recent log event in the log stream\n      in CloudWatch Logs. This number is expressed as the number of milliseconds after Jan 1, 1970\n      00:00:00 UTC. lastEventTimeStamp updates on an eventual consistency basis. It typically\n      updates in less than an hour from ingestion, but may take longer in some rare\n      situations.</p>\n      ",
            "shape_name": "OrderBy"
          },
          "descending": {
            "type": "boolean",
            "zonbookDocumentation": "\n         <simpara>If the value is true, results are returned in descending order. \n      If the value is to false, results are returned in ascending order.\n      The default value is false.</simpara>\n      ",
            "documentation": "\n         <p>If the value is true, results are returned in descending order. \n      If the value is to false, results are returned in ascending order.\n      The default value is false.</p>\n      ",
            "shape_name": "Descending"
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The token for the next set of items to return. (You received this token from a previous call.)</simpara>\n      ",
            "documentation": "\n         <p>The token for the next set of items to return. (You received this token from a previous call.)</p>\n      ",
            "shape_name": "NextToken",
            "min_length": 1
          },
          "limit": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>The maximum number of items returned. If you don't specify a value, the default is up to 50 items.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of items returned. If you don't specify a value, the default is up to 50 items.</p>\n      ",
            "shape_name": "DescribeLimit",
            "min_length": 1,
            "max_length": 50
          }
        },
        "shape_name": "DescribeLogStreamsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "logStreams": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The log streams.</simpara>\n      ",
            "documentation": "\n         <p>The log streams.</p>\n      ",
            "shape_name": "LogStreams",
            "members": {
              "type": "structure",
              "members": {
                "logStreamName": {
                  "type": "string",
                  "pattern": "[^:*]*",
                  "zonbookDocumentation": "\n         <simpara>The name of the log stream.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the log stream.</p>\n      ",
                  "shape_name": "LogStreamName",
                  "min_length": 1,
                  "max_length": 512
                },
                "creationTime": {
                  "type": "long",
                  "zonbookDocumentation": "\n         <simpara>The creation time of the stream, expressed as the number of milliseconds after Jan 1,\n      1970 00:00:00 UTC.</simpara>\n      ",
                  "documentation": "\n         <p>The creation time of the stream, expressed as the number of milliseconds after Jan 1,\n      1970 00:00:00 UTC.</p>\n      ",
                  "shape_name": "Timestamp",
                  "min_length": 0
                },
                "firstEventTimestamp": {
                  "type": "long",
                  "zonbookDocumentation": "\n         <simpara>The time of the first event, expressed as the number of milliseconds after Jan 1, 1970\n      00:00:00 UTC.</simpara>\n      ",
                  "documentation": "\n         <p>The time of the first event, expressed as the number of milliseconds after Jan 1, 1970\n      00:00:00 UTC.</p>\n      ",
                  "shape_name": "Timestamp",
                  "min_length": 0
                },
                "lastEventTimestamp": {
                  "type": "long",
                  "zonbookDocumentation": "\n         <simpara> the time of the most recent log event in the log stream in CloudWatch Logs. This\n      number is expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.\n      lastEventTime updates on an eventual consistency basis. It typically updates in less than an\n      hour from ingestion, but may take longer in some rare situations.</simpara>\n      ",
                  "documentation": "\n         <p> the time of the most recent log event in the log stream in CloudWatch Logs. This\n      number is expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.\n      lastEventTime updates on an eventual consistency basis. It typically updates in less than an\n      hour from ingestion, but may take longer in some rare situations.</p>\n      ",
                  "shape_name": "Timestamp",
                  "min_length": 0
                },
                "lastIngestionTime": {
                  "type": "long",
                  "zonbookDocumentation": "\n         <simpara>The ingestion time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00\n      UTC.</simpara>\n      ",
                  "documentation": "\n         <p>The ingestion time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00\n      UTC.</p>\n      ",
                  "shape_name": "Timestamp",
                  "min_length": 0
                },
                "uploadSequenceToken": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The sequence token.</simpara>\n      ",
                  "documentation": "\n         <p>The sequence token.</p>\n      ",
                  "shape_name": "SequenceToken",
                  "min_length": 1
                },
                "arn": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The Amazon Resource Name (ARN) of the log stream.</simpara>\n      ",
                  "documentation": "\n         <p>The Amazon Resource Name (ARN) of the log stream.</p>\n      ",
                  "shape_name": "Arn"
                },
                "storedBytes": {
                  "type": "long",
                  "zonbookDocumentation": "\n         <simpara>The number of bytes stored.</simpara>\n      ",
                  "documentation": "\n         <p>The number of bytes stored.</p>\n      ",
                  "shape_name": "StoredBytes",
                  "min_length": 0
                }
              },
              "zonbookDocumentation": "\n         <simpara>Represents a log stream, which is a sequence of log events from \n      a single emitter of logs.</simpara>\n      ",
              "documentation": "\n         <p>Represents a log stream, which is a sequence of log events from \n      a single emitter of logs.</p>\n      ",
              "shape_name": "LogStream"
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The token for the next set of items to return. The token expires after 24 hours.</simpara>\n      ",
            "documentation": "\n         <p>The token for the next set of items to return. The token expires after 24 hours.</p>\n      ",
            "shape_name": "NextToken",
            "min_length": 1
          }
        },
        "shape_name": "DescribeLogStreamsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Lists the log streams for the specified log group. \n      You can list all the log streams or filter the results by prefix.\n      You can also control how the results are ordered.</p>\n         <p>This operation has a limit of five transactions per second, after which transactions are throttled.</p>\n    \n      "
    },
    "PutLogEvents": {
      "name": "PutLogEvents",
      "input": {
        "type": "structure",
        "members": {
          "logGroupName": {
            "type": "string",
            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
            "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log group.</p>\n      ",
            "required": true,
            "shape_name": "LogGroupName",
            "min_length": 1,
            "max_length": 512
          },
          "logStreamName": {
            "type": "string",
            "pattern": "[^:*]*",
            "zonbookDocumentation": "\n         <simpara>The name of the log stream.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log stream.</p>\n      ",
            "required": true,
            "shape_name": "LogStreamName",
            "min_length": 1,
            "max_length": 512
          },
          "logEvents": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The log events.</simpara>\n      ",
            "documentation": "\n         <p>The log events.</p>\n      ",
            "required": true,
            "shape_name": "InputLogEvents",
            "min_length": 1,
            "max_length": 10000,
            "members": {
              "type": "structure",
              "members": {
                "timestamp": {
                  "type": "long",
                  "zonbookDocumentation": "\n         <simpara>The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970\n      00:00:00 UTC.</simpara>\n      ",
                  "documentation": "\n         <p>The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970\n      00:00:00 UTC.</p>\n      ",
                  "required": true,
                  "shape_name": "Timestamp",
                  "min_length": 0
                },
                "message": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The raw event message.</simpara>\n      ",
                  "documentation": "\n         <p>The raw event message.</p>\n      ",
                  "required": true,
                  "shape_name": "EventMessage",
                  "min_length": 1
                }
              },
              "zonbookDocumentation": "\n         <simpara>Represents a log event, which is a record of activity that was recorded \n      by the application or resource being monitored.</simpara>\n      ",
              "documentation": "\n         <p>Represents a log event, which is a record of activity that was recorded \n      by the application or resource being monitored.</p>\n      ",
              "shape_name": "InputLogEvent"
            }
          },
          "sequenceToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The sequence token obtained from the response of the previous <code>PutLogEvents</code>\n      call. An upload in a newly created log stream does not require a sequence token. You can also\n      get the sequence token using <xref linkend=\"DescribeLogStreams\"/>. If you call\n        <code>PutLogEvents</code> twice within a narrow time period using the same value for\n        <code>sequenceToken</code>, both calls may be successful, or one may be rejected.</simpara>\n      ",
            "documentation": "\n         <p>The sequence token obtained from the response of the previous <code>PutLogEvents</code>\n      call. An upload in a newly created log stream does not require a sequence token. You can also\n      get the sequence token using <a>DescribeLogStreams</a>. If you call\n        <code>PutLogEvents</code> twice within a narrow time period using the same value for\n        <code>sequenceToken</code>, both calls may be successful, or one may be rejected.</p>\n      ",
            "shape_name": "SequenceToken",
            "min_length": 1
          }
        },
        "shape_name": "PutLogEventsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "nextSequenceToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The next sequence token.</simpara>\n      ",
            "documentation": "\n         <p>The next sequence token.</p>\n      ",
            "shape_name": "SequenceToken",
            "min_length": 1
          },
          "rejectedLogEventsInfo": {
            "type": "structure",
            "members": {
              "tooNewLogEventStartIndex": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The log events that are too new.</simpara>\n      ",
                "documentation": "\n         <p>The log events that are too new.</p>\n      ",
                "shape_name": "LogEventIndex"
              },
              "tooOldLogEventEndIndex": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The log events that are too old.</simpara>\n      ",
                "documentation": "\n         <p>The log events that are too old.</p>\n      ",
                "shape_name": "LogEventIndex"
              },
              "expiredLogEventEndIndex": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The expired log events.</simpara>\n      ",
                "documentation": "\n         <p>The expired log events.</p>\n      ",
                "shape_name": "LogEventIndex"
              }
            },
            "zonbookDocumentation": "\n         <simpara>The rejected events.</simpara>\n      ",
            "documentation": "\n         <p>The rejected events.</p>\n      ",
            "shape_name": "RejectedLogEventsInfo"
          }
        },
        "shape_name": "PutLogEventsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
            "expectedSequenceToken": {
              "type": "string",
              "shape_name": "SequenceToken",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The sequence token is not valid.</simpara>\n      ",
          "documentation": "\n         <p>The sequence token is not valid.</p>\n      ",
          "shape_name": "InvalidSequenceTokenException"
        },
        {
          "type": "structure",
          "members": {
            "expectedSequenceToken": {
              "type": "string",
              "shape_name": "SequenceToken",
              "documentation": null,
              "min_length": 1
            }
          },
          "zonbookDocumentation": "\n         <simpara>The event was already logged.</simpara>\n      ",
          "documentation": "\n         <p>The event was already logged.</p>\n      ",
          "shape_name": "DataAlreadyAcceptedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The most likely cause is an invalid AWS access key ID or secret key.</simpara>\n      ",
          "documentation": "\n         <p>The most likely cause is an invalid AWS access key ID or secret key.</p>\n      ",
          "shape_name": "UnrecognizedClientException"
        }
      ],
      "documentation": "\n         <p>Uploads a batch of log events to the specified log stream.</p>\n         <p>You must include the sequence token obtained from the response of the previous call. An\n      upload in a newly created log stream does not require a sequence token. You can also get the\n      sequence token using <a>DescribeLogStreams</a>. If you call\n        <code>PutLogEvents</code> twice within a narrow time period using the same value for\n        <code>sequenceToken</code>, both calls may be successful, or one may be rejected.</p>\n         <p>The batch of events must satisfy the following constraints:</p>\n         <ul>\n            <li>\n               <p>The maximum batch size is 1,048,576 bytes, and this size is calculated as the sum\n          of all event messages in UTF-8, plus 26 bytes for each log event.</p>\n            </li>\n            <li>\n               <p>None of the log events in the batch can be more than 2 hours in the future.</p>\n            </li>\n            <li>\n               <p>None of the log events in the batch can be older than 14 days or the retention\n          period of the log group.</p>\n            </li>\n            <li>\n               <p>The log events in the batch must be in chronological ordered by their time stamp. The\n          time stamp is the time the event occurred, expressed as the number of milliseconds after Jan 1, 1970\n          00:00:00 UTC. (In AWS Tools for PowerShell and the AWS SDK for .NET, the timestamp is specified in .NET format: yyyy-mm-ddThh:mm:ss. \n          For example, 2017-09-15T13:45:30.) </p>\n            </li>\n            <li>\n               <p>The maximum number of log events in a batch is 10,000.</p>\n            </li>\n            <li>\n               <p>A batch of log events in a single request cannot span more than 24 hours. Otherwise, the operation fails.</p>\n            </li>\n         </ul> \n         <p>If a call to PutLogEvents returns \"UnrecognizedClientException\" the most likely cause is an invalid AWS access key ID or secret key. </p>\n    \n      "
    },
    "GetLogEvents": {
      "name": "GetLogEvents",
      "input": {
        "type": "structure",
        "members": {
          "logGroupName": {
            "type": "string",
            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
            "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log group.</p>\n      ",
            "required": true,
            "shape_name": "LogGroupName",
            "min_length": 1,
            "max_length": 512
          },
          "logStreamName": {
            "type": "string",
            "pattern": "[^:*]*",
            "zonbookDocumentation": "\n         <simpara>The name of the log stream.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log stream.</p>\n      ",
            "required": true,
            "shape_name": "LogStreamName",
            "min_length": 1,
            "max_length": 512
          },
          "startTime": {
            "type": "long",
            "zonbookDocumentation": "\n         <simpara>The start of the time range, expressed as the number of milliseconds after Jan 1, 1970\n      00:00:00 UTC. Events with a time stamp equal to this time or later than this time are included. \n      Events with a time stamp earlier than this time are not included.</simpara>\n      ",
            "documentation": "\n         <p>The start of the time range, expressed as the number of milliseconds after Jan 1, 1970\n      00:00:00 UTC. Events with a time stamp equal to this time or later than this time are included. \n      Events with a time stamp earlier than this time are not included.</p>\n      ",
            "shape_name": "Timestamp",
            "min_length": 0
          },
          "endTime": {
            "type": "long",
            "zonbookDocumentation": "\n         <simpara>The end of the time range, expressed as the number of milliseconds after Jan 1, 1970\n      00:00:00 UTC. Events with a time stamp equal to or later than this time are not included.</simpara>\n      ",
            "documentation": "\n         <p>The end of the time range, expressed as the number of milliseconds after Jan 1, 1970\n      00:00:00 UTC. Events with a time stamp equal to or later than this time are not included.</p>\n      ",
            "shape_name": "Timestamp",
            "min_length": 0
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The token for the next set of items to return. (You received this token from a previous call.)</simpara>\n      ",
            "documentation": "\n         <p>The token for the next set of items to return. (You received this token from a previous call.)</p>\n      ",
            "shape_name": "NextToken",
            "min_length": 1
          },
          "limit": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>The maximum number of log events returned. If you don't specify a value, the maximum is\n      as many log events as can fit in a response size of 1 MB, up to 10,000 log events.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of log events returned. If you don't specify a value, the maximum is\n      as many log events as can fit in a response size of 1 MB, up to 10,000 log events.</p>\n      ",
            "shape_name": "EventsLimit",
            "min_length": 1,
            "max_length": 10000
          },
          "startFromHead": {
            "type": "boolean",
            "zonbookDocumentation": "\n         <simpara>If the value is true, the earliest log events are returned first.\n      If the value is false, the latest log events are returned first.\n      The default value is false.</simpara>\n      ",
            "documentation": "\n         <p>If the value is true, the earliest log events are returned first.\n      If the value is false, the latest log events are returned first.\n      The default value is false.</p>\n      ",
            "shape_name": "StartFromHead"
          }
        },
        "shape_name": "GetLogEventsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "events": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The events.</simpara>\n      ",
            "documentation": "\n         <p>The events.</p>\n      ",
            "shape_name": "OutputLogEvents",
            "members": {
              "type": "structure",
              "members": {
                "timestamp": {
                  "type": "long",
                  "zonbookDocumentation": "\n         <simpara>The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970\n      00:00:00 UTC.</simpara>\n      ",
                  "documentation": "\n         <p>The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970\n      00:00:00 UTC.</p>\n      ",
                  "shape_name": "Timestamp",
                  "min_length": 0
                },
                "message": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The data contained in the log event.</simpara>\n      ",
                  "documentation": "\n         <p>The data contained in the log event.</p>\n      ",
                  "shape_name": "EventMessage",
                  "min_length": 1
                },
                "ingestionTime": {
                  "type": "long",
                  "zonbookDocumentation": "\n         <simpara>The time the event was ingested, expressed as the number of milliseconds after Jan 1,\n      1970 00:00:00 UTC.</simpara>\n      ",
                  "documentation": "\n         <p>The time the event was ingested, expressed as the number of milliseconds after Jan 1,\n      1970 00:00:00 UTC.</p>\n      ",
                  "shape_name": "Timestamp",
                  "min_length": 0
                }
              },
              "zonbookDocumentation": "\n         <simpara>Represents a log event.</simpara>\n      ",
              "documentation": "\n         <p>Represents a log event.</p>\n      ",
              "shape_name": "OutputLogEvent"
            }
          },
          "nextForwardToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The token for the next set of items in the forward direction. The token expires after 24 hours. If you \n      have reached the end of the stream, it will return the same token you passed in.</simpara>\n      ",
            "documentation": "\n         <p>The token for the next set of items in the forward direction. The token expires after 24 hours. If you \n      have reached the end of the stream, it will return the same token you passed in.</p>\n      ",
            "shape_name": "NextToken",
            "min_length": 1
          },
          "nextBackwardToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The token for the next set of items in the backward direction. The token expires after 24 hours. This token will never be null. If you \n    have reached the end of the stream, it will return the same token you passed in.</simpara>\n      ",
            "documentation": "\n         <p>The token for the next set of items in the backward direction. The token expires after 24 hours. This token will never be null. If you \n    have reached the end of the stream, it will return the same token you passed in.</p>\n      ",
            "shape_name": "NextToken",
            "min_length": 1
          }
        },
        "shape_name": "GetLogEventsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Lists log events from the specified log stream. You can list all the log events or \n      filter using a time range.</p>\n\n         <p>By default, this operation returns as many log events as can fit in a response size of 1MB (up to 10,000 log events). \n      You can get additional log events by specifying one of the tokens in a subsequent call.</p>\n\n    \n      "
    },
    "FilterLogEvents": {
      "name": "FilterLogEvents",
      "input": {
        "type": "structure",
        "members": {
          "logGroupName": {
            "type": "string",
            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
            "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log group.</p>\n      ",
            "required": true,
            "shape_name": "LogGroupName",
            "min_length": 1,
            "max_length": 512
          },
          "logStreamNames": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>Optional list of log stream names.</simpara>\n      ",
            "documentation": "\n         <p>Optional list of log stream names.</p>\n      ",
            "shape_name": "InputLogStreamNames",
            "min_length": 1,
            "max_length": 100,
            "members": {
              "type": "string",
              "pattern": "[^:*]*",
              "shape_name": "LogStreamName",
              "documentation": null,
              "min_length": 1,
              "max_length": 512
            }
          },
          "startTime": {
            "type": "long",
            "zonbookDocumentation": "\n         <simpara>The start of the time range, expressed as the number of milliseconds after Jan 1, 1970\n      00:00:00 UTC. Events with a time stamp before this time are not returned.</simpara>\n      ",
            "documentation": "\n         <p>The start of the time range, expressed as the number of milliseconds after Jan 1, 1970\n      00:00:00 UTC. Events with a time stamp before this time are not returned.</p>\n      ",
            "shape_name": "Timestamp",
            "min_length": 0
          },
          "endTime": {
            "type": "long",
            "zonbookDocumentation": "\n         <simpara>The end of the time range, expressed as the number of milliseconds after Jan 1, 1970\n      00:00:00 UTC. Events with a time stamp later than this time are not returned.</simpara>\n      ",
            "documentation": "\n         <p>The end of the time range, expressed as the number of milliseconds after Jan 1, 1970\n      00:00:00 UTC. Events with a time stamp later than this time are not returned.</p>\n      ",
            "shape_name": "Timestamp",
            "min_length": 0
          },
          "filterPattern": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The filter pattern to use. If not provided, all the events are matched.</simpara>\n      ",
            "documentation": "\n         <p>The filter pattern to use. If not provided, all the events are matched.</p>\n      ",
            "shape_name": "FilterPattern",
            "min_length": 0,
            "max_length": 1024
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The token for the next set of events to return. (You received this token from a previous call.)</simpara>\n      ",
            "documentation": "\n         <p>The token for the next set of events to return. (You received this token from a previous call.)</p>\n      ",
            "shape_name": "NextToken",
            "min_length": 1
          },
          "limit": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>The maximum number of events to return. The default is 10,000 events.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of events to return. The default is 10,000 events.</p>\n      ",
            "shape_name": "EventsLimit",
            "min_length": 1,
            "max_length": 10000
          },
          "interleaved": {
            "type": "boolean",
            "zonbookDocumentation": "\n         <simpara>If the value is true, the operation makes a best effort to provide responses that\n      contain events from multiple log streams within the log group, interleaved in a single\n      response. If the value is false, all the matched log events in the first log stream are\n      searched first, then those in the next log stream, and so on. The default is false.</simpara>\n      ",
            "documentation": "\n         <p>If the value is true, the operation makes a best effort to provide responses that\n      contain events from multiple log streams within the log group, interleaved in a single\n      response. If the value is false, all the matched log events in the first log stream are\n      searched first, then those in the next log stream, and so on. The default is false.</p>\n      ",
            "shape_name": "Interleaved"
          }
        },
        "shape_name": "FilterLogEventsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "events": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The matched events.</simpara>\n      ",
            "documentation": "\n         <p>The matched events.</p>\n      ",
            "shape_name": "FilteredLogEvents",
            "members": {
              "type": "structure",
              "members": {
                "logStreamName": {
                  "type": "string",
                  "pattern": "[^:*]*",
                  "zonbookDocumentation": "\n         <simpara>The name of the log stream this event belongs to.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the log stream this event belongs to.</p>\n      ",
                  "shape_name": "LogStreamName",
                  "min_length": 1,
                  "max_length": 512
                },
                "timestamp": {
                  "type": "long",
                  "zonbookDocumentation": "\n         <simpara>The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970\n      00:00:00 UTC.</simpara>\n      ",
                  "documentation": "\n         <p>The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970\n      00:00:00 UTC.</p>\n      ",
                  "shape_name": "Timestamp",
                  "min_length": 0
                },
                "message": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The data contained in the log event.</simpara>\n      ",
                  "documentation": "\n         <p>The data contained in the log event.</p>\n      ",
                  "shape_name": "EventMessage",
                  "min_length": 1
                },
                "ingestionTime": {
                  "type": "long",
                  "zonbookDocumentation": "\n         <simpara>The time the event was ingested, expressed as the number of milliseconds after Jan 1,\n      1970 00:00:00 UTC.</simpara>\n      ",
                  "documentation": "\n         <p>The time the event was ingested, expressed as the number of milliseconds after Jan 1,\n      1970 00:00:00 UTC.</p>\n      ",
                  "shape_name": "Timestamp",
                  "min_length": 0
                },
                "eventId": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The ID of the event.</simpara>\n      ",
                  "documentation": "\n         <p>The ID of the event.</p>\n      ",
                  "shape_name": "EventId"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Represents a matched event.</simpara>\n      ",
              "documentation": "\n         <p>Represents a matched event.</p>\n      ",
              "shape_name": "FilteredLogEvent"
            }
          },
          "searchedLogStreams": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>Indicates which log streams have been searched and whether each has been searched completely.</simpara>\n      ",
            "documentation": "\n         <p>Indicates which log streams have been searched and whether each has been searched completely.</p>\n      ",
            "shape_name": "SearchedLogStreams",
            "members": {
              "type": "structure",
              "members": {
                "logStreamName": {
                  "type": "string",
                  "pattern": "[^:*]*",
                  "zonbookDocumentation": "\n         <simpara>The name of the log stream.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the log stream.</p>\n      ",
                  "shape_name": "LogStreamName",
                  "min_length": 1,
                  "max_length": 512
                },
                "searchedCompletely": {
                  "type": "boolean",
                  "zonbookDocumentation": "\n         <simpara>Indicates whether all the events in this log stream were searched.</simpara>\n      ",
                  "documentation": "\n         <p>Indicates whether all the events in this log stream were searched.</p>\n      ",
                  "shape_name": "LogStreamSearchedCompletely"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Represents the search status of a log stream.</simpara>\n      ",
              "documentation": "\n         <p>Represents the search status of a log stream.</p>\n      ",
              "shape_name": "SearchedLogStream"
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The token to use when requesting the next set of items. The token expires after 24 hours.</simpara>\n      ",
            "documentation": "\n         <p>The token to use when requesting the next set of items. The token expires after 24 hours.</p>\n      ",
            "shape_name": "NextToken",
            "min_length": 1
          }
        },
        "shape_name": "FilterLogEventsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Lists log events from the specified log group. You can list all the log events or filter the results\n      using a filter pattern, a time range, and the name of the log stream.</p>\n         <p>By default, this operation returns as many log events as can fit in 1 MB (up to 10,000\n      log events), or all the events found within the time range that you specify. If the results\n      include a token, then there are more log events available, and you can get additional results\n      by specifying the token in a subsequent call.</p>\n    \n      "
    },
    "PutMetricFilter": {
      "name": "PutMetricFilter",
      "input": {
        "type": "structure",
        "members": {
          "logGroupName": {
            "type": "string",
            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
            "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log group.</p>\n      ",
            "required": true,
            "shape_name": "LogGroupName",
            "min_length": 1,
            "max_length": 512
          },
          "filterName": {
            "type": "string",
            "pattern": "[^:*]*",
            "zonbookDocumentation": "\n         <simpara>A name for the metric filter.</simpara>\n      ",
            "documentation": "\n         <p>A name for the metric filter.</p>\n      ",
            "required": true,
            "shape_name": "FilterName",
            "min_length": 1,
            "max_length": 512
          },
          "filterPattern": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A filter pattern for extracting metric data out of ingested log events.</simpara>\n      ",
            "documentation": "\n         <p>A filter pattern for extracting metric data out of ingested log events.</p>\n      ",
            "required": true,
            "shape_name": "FilterPattern",
            "min_length": 0,
            "max_length": 1024
          },
          "metricTransformations": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A collection of information that defines how metric data gets emitted.</simpara>\n      ",
            "documentation": "\n         <p>A collection of information that defines how metric data gets emitted.</p>\n      ",
            "required": true,
            "shape_name": "MetricTransformations",
            "min_length": 1,
            "max_length": 1,
            "members": {
              "type": "structure",
              "members": {
                "metricName": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The name of the CloudWatch metric.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the CloudWatch metric.</p>\n      ",
                  "pattern": "[^:*$]*",
                  "required": true,
                  "shape_name": "MetricName",
                  "max_length": 255
                },
                "metricNamespace": {
                  "type": "string",
                  "pattern": "[^:*$]*",
                  "zonbookDocumentation": "\n         <simpara>The namespace of the CloudWatch metric.</simpara>\n      ",
                  "documentation": "\n         <p>The namespace of the CloudWatch metric.</p>\n      ",
                  "required": true,
                  "shape_name": "MetricNamespace",
                  "max_length": 255
                },
                "metricValue": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The value to publish to the CloudWatch metric when a filter pattern matches a log event.</simpara>\n      ",
                  "documentation": "\n         <p>The value to publish to the CloudWatch metric when a filter pattern matches a log event.</p>\n      ",
                  "required": true,
                  "shape_name": "MetricValue",
                  "max_length": 100
                },
                "defaultValue": {
                  "type": "double",
                  "zonbookDocumentation": "\n         <simpara>(Optional) The value to emit when a filter pattern does not match a log event. \n      This value can be null.</simpara>\n      ",
                  "documentation": "\n         <p>(Optional) The value to emit when a filter pattern does not match a log event. \n      This value can be null.</p>\n      ",
                  "shape_name": "DefaultValue"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Indicates how to transform ingested log events in to metric data in a CloudWatch\n      metric.</simpara>\n      ",
              "documentation": "\n         <p>Indicates how to transform ingested log events in to metric data in a CloudWatch\n      metric.</p>\n      ",
              "shape_name": "MetricTransformation"
            }
          }
        },
        "shape_name": "PutMetricFilterRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Multiple requests to update the same resource were in conflict.</simpara>\n      ",
          "documentation": "\n         <p>Multiple requests to update the same resource were in conflict.</p>\n      ",
          "shape_name": "OperationAbortedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You have reached the maximum number of resources that can be created.</simpara>\n      ",
          "documentation": "\n         <p>You have reached the maximum number of resources that can be created.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Creates or updates a metric filter and associates it with the specified log group.\n      Metric filters allow you to configure rules to extract metric data from log events ingested\n      through <a>PutLogEvents</a>.</p>\n         <p>The maximum number of metric filters that can be associated with a log group is\n      100.</p>\n    \n      "
    },
    "DeleteMetricFilter": {
      "name": "DeleteMetricFilter",
      "input": {
        "type": "structure",
        "members": {
          "logGroupName": {
            "type": "string",
            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
            "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log group.</p>\n      ",
            "required": true,
            "shape_name": "LogGroupName",
            "min_length": 1,
            "max_length": 512
          },
          "filterName": {
            "type": "string",
            "pattern": "[^:*]*",
            "zonbookDocumentation": "\n         <simpara>The name of the metric filter.</simpara>\n      ",
            "documentation": "\n         <p>The name of the metric filter.</p>\n      ",
            "required": true,
            "shape_name": "FilterName",
            "min_length": 1,
            "max_length": 512
          }
        },
        "shape_name": "DeleteMetricFilterRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Multiple requests to update the same resource were in conflict.</simpara>\n      ",
          "documentation": "\n         <p>Multiple requests to update the same resource were in conflict.</p>\n      ",
          "shape_name": "OperationAbortedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Deletes the specified metric filter.</p>\n    \n      "
    },
    "DescribeMetricFilters": {
      "name": "DescribeMetricFilters",
      "input": {
        "type": "structure",
        "members": {
          "logGroupName": {
            "type": "string",
            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
            "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log group.</p>\n      ",
            "shape_name": "LogGroupName",
            "min_length": 1,
            "max_length": 512
          },
          "filterNamePrefix": {
            "type": "string",
            "pattern": "[^:*]*",
            "zonbookDocumentation": "\n         <simpara>The prefix to match.</simpara>\n      ",
            "documentation": "\n         <p>The prefix to match.</p>\n      ",
            "shape_name": "FilterName",
            "min_length": 1,
            "max_length": 512
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The token for the next set of items to return. (You received this token from a previous call.)</simpara>\n      ",
            "documentation": "\n         <p>The token for the next set of items to return. (You received this token from a previous call.)</p>\n      ",
            "shape_name": "NextToken",
            "min_length": 1
          },
          "limit": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>The maximum number of items returned. If you don't specify a value, the default is up to 50 items.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of items returned. If you don't specify a value, the default is up to 50 items.</p>\n      ",
            "shape_name": "DescribeLimit",
            "min_length": 1,
            "max_length": 50
          },
          "metricName": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Filters results to include only those with the specified metric name. If you include this parameter in your request, you \n    must also include the <code>metricNamespace</code> parameter.</simpara>\n      ",
            "documentation": "\n         <p>Filters results to include only those with the specified metric name. If you include this parameter in your request, you \n    must also include the <code>metricNamespace</code> parameter.</p>\n      ",
            "pattern": "[^:*$]*",
            "shape_name": "MetricName",
            "max_length": 255
          },
          "metricNamespace": {
            "type": "string",
            "pattern": "[^:*$]*",
            "zonbookDocumentation": "\n         <simpara>Filters results to include only those in the specified namespace. If you include this parameter in your request, you \n    must also include the <code>metricName</code> parameter.</simpara>\n      ",
            "documentation": "\n         <p>Filters results to include only those in the specified namespace. If you include this parameter in your request, you \n    must also include the <code>metricName</code> parameter.</p>\n      ",
            "shape_name": "MetricNamespace",
            "max_length": 255
          }
        },
        "shape_name": "DescribeMetricFiltersRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "metricFilters": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The metric filters.</simpara>\n      ",
            "documentation": "\n         <p>The metric filters.</p>\n      ",
            "shape_name": "MetricFilters",
            "members": {
              "type": "structure",
              "members": {
                "filterName": {
                  "type": "string",
                  "pattern": "[^:*]*",
                  "zonbookDocumentation": "\n         <simpara>The name of the metric filter.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the metric filter.</p>\n      ",
                  "shape_name": "FilterName",
                  "min_length": 1,
                  "max_length": 512
                },
                "filterPattern": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A symbolic description of how CloudWatch Logs should interpret the data in each log\n      event. For example, a log event may contain time stamps, IP addresses, strings, and so on. You\n      use the filter pattern to specify what to look for in the log event message.</simpara>\n      ",
                  "documentation": "\n         <p>A symbolic description of how CloudWatch Logs should interpret the data in each log\n      event. For example, a log event may contain time stamps, IP addresses, strings, and so on. You\n      use the filter pattern to specify what to look for in the log event message.</p>\n      ",
                  "shape_name": "FilterPattern",
                  "min_length": 0,
                  "max_length": 1024
                },
                "metricTransformations": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>The metric transformations.</simpara>\n      ",
                  "documentation": "\n         <p>The metric transformations.</p>\n      ",
                  "shape_name": "MetricTransformations",
                  "min_length": 1,
                  "max_length": 1,
                  "members": {
                    "type": "structure",
                    "members": {
                      "metricName": {
                        "type": "string",
                        "zonbookDocumentation": "\n         <simpara>The name of the CloudWatch metric.</simpara>\n      ",
                        "documentation": "\n         <p>The name of the CloudWatch metric.</p>\n      ",
                        "pattern": "[^:*$]*",
                        "required": true,
                        "shape_name": "MetricName",
                        "max_length": 255
                      },
                      "metricNamespace": {
                        "type": "string",
                        "pattern": "[^:*$]*",
                        "zonbookDocumentation": "\n         <simpara>The namespace of the CloudWatch metric.</simpara>\n      ",
                        "documentation": "\n         <p>The namespace of the CloudWatch metric.</p>\n      ",
                        "required": true,
                        "shape_name": "MetricNamespace",
                        "max_length": 255
                      },
                      "metricValue": {
                        "type": "string",
                        "zonbookDocumentation": "\n         <simpara>The value to publish to the CloudWatch metric when a filter pattern matches a log event.</simpara>\n      ",
                        "documentation": "\n         <p>The value to publish to the CloudWatch metric when a filter pattern matches a log event.</p>\n      ",
                        "required": true,
                        "shape_name": "MetricValue",
                        "max_length": 100
                      },
                      "defaultValue": {
                        "type": "double",
                        "zonbookDocumentation": "\n         <simpara>(Optional) The value to emit when a filter pattern does not match a log event. \n      This value can be null.</simpara>\n      ",
                        "documentation": "\n         <p>(Optional) The value to emit when a filter pattern does not match a log event. \n      This value can be null.</p>\n      ",
                        "shape_name": "DefaultValue"
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>Indicates how to transform ingested log events in to metric data in a CloudWatch\n      metric.</simpara>\n      ",
                    "documentation": "\n         <p>Indicates how to transform ingested log events in to metric data in a CloudWatch\n      metric.</p>\n      ",
                    "shape_name": "MetricTransformation"
                  }
                },
                "creationTime": {
                  "type": "long",
                  "zonbookDocumentation": "\n         <simpara>The creation time of the metric filter, expressed as the number of milliseconds after\n      Jan 1, 1970 00:00:00 UTC.</simpara>\n      ",
                  "documentation": "\n         <p>The creation time of the metric filter, expressed as the number of milliseconds after\n      Jan 1, 1970 00:00:00 UTC.</p>\n      ",
                  "shape_name": "Timestamp",
                  "min_length": 0
                },
                "logGroupName": {
                  "type": "string",
                  "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the log group.</p>\n      ",
                  "shape_name": "LogGroupName",
                  "min_length": 1,
                  "max_length": 512
                }
              },
              "zonbookDocumentation": "\n         <simpara>Metric filters express how CloudWatch Logs would extract metric observations \n      from ingested log events and transform them into metric data in a CloudWatch metric.</simpara>\n      ",
              "documentation": "\n         <p>Metric filters express how CloudWatch Logs would extract metric observations \n      from ingested log events and transform them into metric data in a CloudWatch metric.</p>\n      ",
              "shape_name": "MetricFilter"
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The token for the next set of items to return. The token expires after 24 hours.</simpara>\n      ",
            "documentation": "\n         <p>The token for the next set of items to return. The token expires after 24 hours.</p>\n      ",
            "shape_name": "NextToken",
            "min_length": 1
          }
        },
        "shape_name": "DescribeMetricFiltersResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n\n         <p>Lists the specified metric filters.\n      You can list all the metric filters or filter the results by log name, prefix, metric name, or metric namespace.\n\n      The results are ASCII-sorted by filter name.</p>\n    \n      "
    },
    "TestMetricFilter": {
      "name": "TestMetricFilter",
      "input": {
        "type": "structure",
        "members": {
          "filterPattern": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A symbolic description of how CloudWatch Logs should interpret the data in each log\n      event. For example, a log event may contain time stamps, IP addresses, strings, and so on. You\n      use the filter pattern to specify what to look for in the log event message.</simpara>\n      ",
            "documentation": "\n         <p>A symbolic description of how CloudWatch Logs should interpret the data in each log\n      event. For example, a log event may contain time stamps, IP addresses, strings, and so on. You\n      use the filter pattern to specify what to look for in the log event message.</p>\n      ",
            "required": true,
            "shape_name": "FilterPattern",
            "min_length": 0,
            "max_length": 1024
          },
          "logEventMessages": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The log event messages to test.</simpara>\n      ",
            "documentation": "\n         <p>The log event messages to test.</p>\n      ",
            "required": true,
            "shape_name": "TestEventMessages",
            "min_length": 1,
            "max_length": 50,
            "members": {
              "type": "string",
              "shape_name": "EventMessage",
              "documentation": null,
              "min_length": 1
            }
          }
        },
        "shape_name": "TestMetricFilterRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "matches": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The matched events.</simpara>\n      ",
            "documentation": "\n         <p>The matched events.</p>\n      ",
            "shape_name": "MetricFilterMatches",
            "members": {
              "type": "structure",
              "members": {
                "eventNumber": {
                  "type": "long",
                  "zonbookDocumentation": "\n         <simpara>The event number.</simpara>\n      ",
                  "documentation": "\n         <p>The event number.</p>\n      ",
                  "shape_name": "EventNumber"
                },
                "eventMessage": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The raw event data.</simpara>\n      ",
                  "documentation": "\n         <p>The raw event data.</p>\n      ",
                  "shape_name": "EventMessage",
                  "min_length": 1
                },
                "extractedValues": {
                  "type": "map",
                  "zonbookDocumentation": "\n         <simpara>The values extracted from the event data by the filter.</simpara>\n      ",
                  "documentation": "\n         <p>The values extracted from the event data by the filter.</p>\n      ",
                  "shape_name": "ExtractedValues",
                  "keys": {
                    "type": "string",
                    "shape_name": "Token",
                    "documentation": null
                  },
                  "members": {
                    "type": "string",
                    "shape_name": "Value",
                    "documentation": null
                  }
                }
              },
              "zonbookDocumentation": "\n         <simpara>Represents a matched event.</simpara>\n      ",
              "documentation": "\n         <p>Represents a matched event.</p>\n      ",
              "shape_name": "MetricFilterMatchRecord"
            }
          }
        },
        "shape_name": "TestMetricFilterResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Tests the filter pattern of a metric filter against a sample of log event messages. You\n      can use this operation to validate the correctness of a metric filter pattern.</p>\n    \n      "
    },
    "PutSubscriptionFilter": {
      "name": "PutSubscriptionFilter",
      "input": {
        "type": "structure",
        "members": {
          "logGroupName": {
            "type": "string",
            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
            "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log group.</p>\n      ",
            "required": true,
            "shape_name": "LogGroupName",
            "min_length": 1,
            "max_length": 512
          },
          "filterName": {
            "type": "string",
            "pattern": "[^:*]*",
            "zonbookDocumentation": "\n         <simpara>A name for the subscription filter. If you are updating an existing filter, you must\n      specify the correct name in <code>filterName</code>. Otherwise, the call fails because you\n      cannot associate a second filter with a log group. To find the name of the filter currently\n      associated with a log group, use <xref linkend=\"DescribeSubscriptionFilters\"/>.</simpara>\n      ",
            "documentation": "\n         <p>A name for the subscription filter. If you are updating an existing filter, you must\n      specify the correct name in <code>filterName</code>. Otherwise, the call fails because you\n      cannot associate a second filter with a log group. To find the name of the filter currently\n      associated with a log group, use <a>DescribeSubscriptionFilters</a>.</p>\n      ",
            "required": true,
            "shape_name": "FilterName",
            "min_length": 1,
            "max_length": 512
          },
          "filterPattern": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A filter pattern for subscribing to a filtered stream of log events.</simpara>\n      ",
            "documentation": "\n         <p>A filter pattern for subscribing to a filtered stream of log events.</p>\n      ",
            "required": true,
            "shape_name": "FilterPattern",
            "min_length": 0,
            "max_length": 1024
          },
          "destinationArn": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The ARN of the destination to deliver matching log events to. Currently, the supported\n      destinations are:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>An Amazon Kinesis stream belonging to the same account as the subscription filter,\n          for same-account delivery.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>A logical destination (specified using an ARN) belonging to a different account, \n          for cross-account delivery.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>An Amazon Kinesis Firehose delivery stream belonging to the same account as the\n          subscription filter, for same-account delivery.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>An AWS Lambda function belonging to the same account as the subscription filter,\n          for same-account delivery.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
            "documentation": "\n         <p>The ARN of the destination to deliver matching log events to. Currently, the supported\n      destinations are:</p>\n         <ul>\n            <li>\n               <p>An Amazon Kinesis stream belonging to the same account as the subscription filter,\n          for same-account delivery.</p>\n            </li>\n            <li>\n               <p>A logical destination (specified using an ARN) belonging to a different account, \n          for cross-account delivery.</p>\n            </li>\n            <li>\n               <p>An Amazon Kinesis Firehose delivery stream belonging to the same account as the\n          subscription filter, for same-account delivery.</p>\n            </li>\n            <li>\n               <p>An AWS Lambda function belonging to the same account as the subscription filter,\n          for same-account delivery.</p>\n            </li>\n         </ul>\n      ",
            "required": true,
            "shape_name": "DestinationArn",
            "min_length": 1
          },
          "roleArn": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log\n      events to the destination stream. You don't need to provide the ARN when you are working with\n      a logical destination for cross-account delivery.</simpara>\n      ",
            "documentation": "\n         <p>The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log\n      events to the destination stream. You don't need to provide the ARN when you are working with\n      a logical destination for cross-account delivery.</p>\n      ",
            "shape_name": "RoleArn",
            "min_length": 1
          },
          "distribution": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The method used to distribute log data to the destination. By default log data is\n      grouped by log stream, but the grouping can be set to random for a more even distribution.\n      This property is only applicable when the destination is an Amazon Kinesis stream.\n    </simpara>\n      ",
            "documentation": "\n         <p>The method used to distribute log data to the destination. By default log data is\n      grouped by log stream, but the grouping can be set to random for a more even distribution.\n      This property is only applicable when the destination is an Amazon Kinesis stream.\n    </p>\n      ",
            "enum": [
              "Random",
              "ByLogStream"
            ],
            "shape_name": "Distribution"
          }
        },
        "shape_name": "PutSubscriptionFilterRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Multiple requests to update the same resource were in conflict.</simpara>\n      ",
          "documentation": "\n         <p>Multiple requests to update the same resource were in conflict.</p>\n      ",
          "shape_name": "OperationAbortedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You have reached the maximum number of resources that can be created.</simpara>\n      ",
          "documentation": "\n         <p>You have reached the maximum number of resources that can be created.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Creates or updates a subscription filter and associates it with the specified log\n      group. Subscription filters allow you to subscribe to a real-time stream of log events\n      ingested through <a>PutLogEvents</a> and have them delivered to a specific\n      destination. Currently, the supported destinations are:</p>\n         <ul>\n            <li>\n               <p>An Amazon Kinesis stream belonging to the same account as the subscription filter,\n          for same-account delivery.</p>\n            </li>\n            <li>\n               <p>A logical destination that belongs to a different account, for cross-account delivery.</p>\n            </li>\n            <li>\n               <p>An Amazon Kinesis Firehose delivery stream that belongs to the same account as the\n          subscription filter, for same-account delivery.</p>\n            </li>\n            <li>\n               <p>An AWS Lambda function that belongs to the same account as the subscription filter,\n          for same-account delivery.</p>\n            </li>\n         </ul> \n         <p>There can only be one subscription filter associated with a log group. If you are\n      updating an existing filter, you must specify the correct name in <code>filterName</code>.\n      Otherwise, the call fails because you cannot associate a second filter with a log\n      group.</p>\n    \n      "
    },
    "DeleteSubscriptionFilter": {
      "name": "DeleteSubscriptionFilter",
      "input": {
        "type": "structure",
        "members": {
          "logGroupName": {
            "type": "string",
            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
            "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log group.</p>\n      ",
            "required": true,
            "shape_name": "LogGroupName",
            "min_length": 1,
            "max_length": 512
          },
          "filterName": {
            "type": "string",
            "pattern": "[^:*]*",
            "zonbookDocumentation": "\n         <simpara>The name of the subscription filter.</simpara>\n      ",
            "documentation": "\n         <p>The name of the subscription filter.</p>\n      ",
            "required": true,
            "shape_name": "FilterName",
            "min_length": 1,
            "max_length": 512
          }
        },
        "shape_name": "DeleteSubscriptionFilterRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Multiple requests to update the same resource were in conflict.</simpara>\n      ",
          "documentation": "\n         <p>Multiple requests to update the same resource were in conflict.</p>\n      ",
          "shape_name": "OperationAbortedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Deletes the specified subscription filter.</p>\n    \n      "
    },
    "DescribeSubscriptionFilters": {
      "name": "DescribeSubscriptionFilters",
      "input": {
        "type": "structure",
        "members": {
          "logGroupName": {
            "type": "string",
            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
            "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log group.</p>\n      ",
            "required": true,
            "shape_name": "LogGroupName",
            "min_length": 1,
            "max_length": 512
          },
          "filterNamePrefix": {
            "type": "string",
            "pattern": "[^:*]*",
            "zonbookDocumentation": "\n         <simpara>The prefix to match. If you don't specify a value, no prefix filter is applied.</simpara>\n      ",
            "documentation": "\n         <p>The prefix to match. If you don't specify a value, no prefix filter is applied.</p>\n      ",
            "shape_name": "FilterName",
            "min_length": 1,
            "max_length": 512
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The token for the next set of items to return. (You received this token from a previous call.)</simpara>\n      ",
            "documentation": "\n         <p>The token for the next set of items to return. (You received this token from a previous call.)</p>\n      ",
            "shape_name": "NextToken",
            "min_length": 1
          },
          "limit": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>The maximum number of items returned. If you don't specify a value, the default is up to 50 items.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of items returned. If you don't specify a value, the default is up to 50 items.</p>\n      ",
            "shape_name": "DescribeLimit",
            "min_length": 1,
            "max_length": 50
          }
        },
        "shape_name": "DescribeSubscriptionFiltersRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "subscriptionFilters": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The subscription filters.</simpara>\n      ",
            "documentation": "\n         <p>The subscription filters.</p>\n      ",
            "shape_name": "SubscriptionFilters",
            "members": {
              "type": "structure",
              "members": {
                "filterName": {
                  "type": "string",
                  "pattern": "[^:*]*",
                  "zonbookDocumentation": "\n         <simpara>The name of the subscription filter.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the subscription filter.</p>\n      ",
                  "shape_name": "FilterName",
                  "min_length": 1,
                  "max_length": 512
                },
                "logGroupName": {
                  "type": "string",
                  "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the log group.</p>\n      ",
                  "shape_name": "LogGroupName",
                  "min_length": 1,
                  "max_length": 512
                },
                "filterPattern": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A symbolic description of how CloudWatch Logs should interpret the data in each log\n      event. For example, a log event may contain time stamps, IP addresses, strings, and so on. You\n      use the filter pattern to specify what to look for in the log event message.</simpara>\n      ",
                  "documentation": "\n         <p>A symbolic description of how CloudWatch Logs should interpret the data in each log\n      event. For example, a log event may contain time stamps, IP addresses, strings, and so on. You\n      use the filter pattern to specify what to look for in the log event message.</p>\n      ",
                  "shape_name": "FilterPattern",
                  "min_length": 0,
                  "max_length": 1024
                },
                "destinationArn": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The Amazon Resource Name (ARN) of the destination.</simpara>\n      ",
                  "documentation": "\n         <p>The Amazon Resource Name (ARN) of the destination.</p>\n      ",
                  "shape_name": "DestinationArn",
                  "min_length": 1
                },
                "roleArn": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara/>\n      ",
                  "documentation": "\n         <p/>\n      ",
                  "shape_name": "RoleArn",
                  "min_length": 1
                },
                "distribution": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The method used to distribute log data to the destination, which can be either\n      random or grouped by log stream.</simpara>\n      ",
                  "documentation": "\n         <p>The method used to distribute log data to the destination, which can be either\n      random or grouped by log stream.</p>\n      ",
                  "enum": [
                    "Random",
                    "ByLogStream"
                  ],
                  "shape_name": "Distribution"
                },
                "creationTime": {
                  "type": "long",
                  "zonbookDocumentation": "\n         <simpara>The creation time of the subscription filter, expressed as the number of milliseconds\n      after Jan 1, 1970 00:00:00 UTC.</simpara>\n      ",
                  "documentation": "\n         <p>The creation time of the subscription filter, expressed as the number of milliseconds\n      after Jan 1, 1970 00:00:00 UTC.</p>\n      ",
                  "shape_name": "Timestamp",
                  "min_length": 0
                }
              },
              "zonbookDocumentation": "\n         <simpara>Represents a subscription filter.</simpara>\n      ",
              "documentation": "\n         <p>Represents a subscription filter.</p>\n      ",
              "shape_name": "SubscriptionFilter"
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The token for the next set of items to return. The token expires after 24 hours.</simpara>\n      ",
            "documentation": "\n         <p>The token for the next set of items to return. The token expires after 24 hours.</p>\n      ",
            "shape_name": "NextToken",
            "min_length": 1
          }
        },
        "shape_name": "DescribeSubscriptionFiltersResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Lists the subscription filters for the specified log group. You can list all the subscription filters or filter the results by prefix.\n      The results are ASCII-sorted by filter name.</p>\n    \n      "
    },
    "PutDestination": {
      "name": "PutDestination",
      "input": {
        "type": "structure",
        "members": {
          "destinationName": {
            "type": "string",
            "pattern": "[^:*]*",
            "zonbookDocumentation": "\n         <simpara>A name for the destination.</simpara>\n      ",
            "documentation": "\n         <p>A name for the destination.</p>\n      ",
            "required": true,
            "shape_name": "DestinationName",
            "min_length": 1,
            "max_length": 512
          },
          "targetArn": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The ARN of an Amazon Kinesis stream to which to deliver matching log events.</simpara>\n      ",
            "documentation": "\n         <p>The ARN of an Amazon Kinesis stream to which to deliver matching log events.</p>\n      ",
            "required": true,
            "shape_name": "TargetArn",
            "min_length": 1
          },
          "roleArn": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The ARN of an IAM role that grants CloudWatch Logs permissions to call the Amazon\n      Kinesis PutRecord operation on the destination stream.</simpara>\n      ",
            "documentation": "\n         <p>The ARN of an IAM role that grants CloudWatch Logs permissions to call the Amazon\n      Kinesis PutRecord operation on the destination stream.</p>\n      ",
            "required": true,
            "shape_name": "RoleArn",
            "min_length": 1
          }
        },
        "shape_name": "PutDestinationRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "destination": {
            "type": "structure",
            "members": {
              "destinationName": {
                "type": "string",
                "pattern": "[^:*]*",
                "zonbookDocumentation": "\n         <simpara>The name of the destination.</simpara>\n      ",
                "documentation": "\n         <p>The name of the destination.</p>\n      ",
                "shape_name": "DestinationName",
                "min_length": 1,
                "max_length": 512
              },
              "targetArn": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The Amazon Resource Name (ARN) of the physical target to where the log events are\n      delivered (for example, a Kinesis stream).</simpara>\n      ",
                "documentation": "\n         <p>The Amazon Resource Name (ARN) of the physical target to where the log events are\n      delivered (for example, a Kinesis stream).</p>\n      ",
                "shape_name": "TargetArn",
                "min_length": 1
              },
              "roleArn": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>A role for impersonation, used when delivering log events to the target.</simpara>\n      ",
                "documentation": "\n         <p>A role for impersonation, used when delivering log events to the target.</p>\n      ",
                "shape_name": "RoleArn",
                "min_length": 1
              },
              "accessPolicy": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>An IAM policy document that governs which AWS accounts can create subscription filters\n      against this destination.</simpara>\n      ",
                "documentation": "\n         <p>An IAM policy document that governs which AWS accounts can create subscription filters\n      against this destination.</p>\n      ",
                "shape_name": "AccessPolicy",
                "min_length": 1
              },
              "arn": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The ARN of this destination.</simpara>\n      ",
                "documentation": "\n         <p>The ARN of this destination.</p>\n      ",
                "shape_name": "Arn"
              },
              "creationTime": {
                "type": "long",
                "zonbookDocumentation": "\n         <simpara>The creation time of the destination, expressed as the number of milliseconds after Jan\n      1, 1970 00:00:00 UTC.</simpara>\n      ",
                "documentation": "\n         <p>The creation time of the destination, expressed as the number of milliseconds after Jan\n      1, 1970 00:00:00 UTC.</p>\n      ",
                "shape_name": "Timestamp",
                "min_length": 0
              }
            },
            "zonbookDocumentation": "\n         <simpara>The destination.</simpara>\n      ",
            "documentation": "\n         <p>The destination.</p>\n      ",
            "shape_name": "Destination"
          }
        },
        "shape_name": "PutDestinationResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Multiple requests to update the same resource were in conflict.</simpara>\n      ",
          "documentation": "\n         <p>Multiple requests to update the same resource were in conflict.</p>\n      ",
          "shape_name": "OperationAbortedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Creates or updates a destination. A destination encapsulates a physical resource (such\n      as an Amazon Kinesis stream) and enables you to subscribe to a real-time stream of log events\n      for a different account, ingested using <a>PutLogEvents</a>. Currently, the only\n      supported physical resource is a Kinesis stream belonging to the same account as the\n      destination.</p>\n         <p>Through an access policy, a destination controls what is written to its Kinesis stream.\n      By default, <code>PutDestination</code> does not set any access policy with the destination,\n      which means a cross-account user cannot call <a>PutSubscriptionFilter</a> against\n      this destination. To enable this, the destination owner must call <a>PutDestinationPolicy</a> after <code>PutDestination</code>.</p>\n    \n      "
    },
    "DeleteDestination": {
      "name": "DeleteDestination",
      "input": {
        "type": "structure",
        "members": {
          "destinationName": {
            "type": "string",
            "pattern": "[^:*]*",
            "zonbookDocumentation": "\n         <simpara>The name of the destination.</simpara>\n      ",
            "documentation": "\n         <p>The name of the destination.</p>\n      ",
            "required": true,
            "shape_name": "DestinationName",
            "min_length": 1,
            "max_length": 512
          }
        },
        "shape_name": "DeleteDestinationRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Multiple requests to update the same resource were in conflict.</simpara>\n      ",
          "documentation": "\n         <p>Multiple requests to update the same resource were in conflict.</p>\n      ",
          "shape_name": "OperationAbortedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Deletes the specified destination, and eventually disables all the\n      subscription filters that publish to it. This operation does not delete the \n      physical resource encapsulated by the destination.</p>\n    \n      "
    },
    "DescribeDestinations": {
      "name": "DescribeDestinations",
      "input": {
        "type": "structure",
        "members": {
          "DestinationNamePrefix": {
            "type": "string",
            "pattern": "[^:*]*",
            "zonbookDocumentation": "\n         <simpara>The prefix to match. If you don't specify a value, no prefix filter is applied.</simpara>\n      ",
            "documentation": "\n         <p>The prefix to match. If you don't specify a value, no prefix filter is applied.</p>\n      ",
            "shape_name": "DestinationName",
            "min_length": 1,
            "max_length": 512
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The token for the next set of items to return. (You received this token from a previous call.)</simpara>\n      ",
            "documentation": "\n         <p>The token for the next set of items to return. (You received this token from a previous call.)</p>\n      ",
            "shape_name": "NextToken",
            "min_length": 1
          },
          "limit": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>The maximum number of items returned. If you don't specify a value, the default is up to 50 items.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of items returned. If you don't specify a value, the default is up to 50 items.</p>\n      ",
            "shape_name": "DescribeLimit",
            "min_length": 1,
            "max_length": 50
          }
        },
        "shape_name": "DescribeDestinationsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "destinations": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The destinations.</simpara>\n      ",
            "documentation": "\n         <p>The destinations.</p>\n      ",
            "shape_name": "Destinations",
            "members": {
              "type": "structure",
              "members": {
                "destinationName": {
                  "type": "string",
                  "pattern": "[^:*]*",
                  "zonbookDocumentation": "\n         <simpara>The name of the destination.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the destination.</p>\n      ",
                  "shape_name": "DestinationName",
                  "min_length": 1,
                  "max_length": 512
                },
                "targetArn": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The Amazon Resource Name (ARN) of the physical target to where the log events are\n      delivered (for example, a Kinesis stream).</simpara>\n      ",
                  "documentation": "\n         <p>The Amazon Resource Name (ARN) of the physical target to where the log events are\n      delivered (for example, a Kinesis stream).</p>\n      ",
                  "shape_name": "TargetArn",
                  "min_length": 1
                },
                "roleArn": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A role for impersonation, used when delivering log events to the target.</simpara>\n      ",
                  "documentation": "\n         <p>A role for impersonation, used when delivering log events to the target.</p>\n      ",
                  "shape_name": "RoleArn",
                  "min_length": 1
                },
                "accessPolicy": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>An IAM policy document that governs which AWS accounts can create subscription filters\n      against this destination.</simpara>\n      ",
                  "documentation": "\n         <p>An IAM policy document that governs which AWS accounts can create subscription filters\n      against this destination.</p>\n      ",
                  "shape_name": "AccessPolicy",
                  "min_length": 1
                },
                "arn": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The ARN of this destination.</simpara>\n      ",
                  "documentation": "\n         <p>The ARN of this destination.</p>\n      ",
                  "shape_name": "Arn"
                },
                "creationTime": {
                  "type": "long",
                  "zonbookDocumentation": "\n         <simpara>The creation time of the destination, expressed as the number of milliseconds after Jan\n      1, 1970 00:00:00 UTC.</simpara>\n      ",
                  "documentation": "\n         <p>The creation time of the destination, expressed as the number of milliseconds after Jan\n      1, 1970 00:00:00 UTC.</p>\n      ",
                  "shape_name": "Timestamp",
                  "min_length": 0
                }
              },
              "zonbookDocumentation": "\n         <simpara>Represents a cross-account destination that receives subscription log events.</simpara>\n      ",
              "documentation": "\n         <p>Represents a cross-account destination that receives subscription log events.</p>\n      ",
              "shape_name": "Destination"
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The token for the next set of items to return. The token expires after 24 hours.</simpara>\n      ",
            "documentation": "\n         <p>The token for the next set of items to return. The token expires after 24 hours.</p>\n      ",
            "shape_name": "NextToken",
            "min_length": 1
          }
        },
        "shape_name": "DescribeDestinationsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Lists all your destinations. The results are ASCII-sorted by destination name.</p>\n    \n      "
    },
    "PutDestinationPolicy": {
      "name": "PutDestinationPolicy",
      "input": {
        "type": "structure",
        "members": {
          "destinationName": {
            "type": "string",
            "pattern": "[^:*]*",
            "zonbookDocumentation": "\n         <simpara>A name for an existing destination.</simpara>\n      ",
            "documentation": "\n         <p>A name for an existing destination.</p>\n      ",
            "required": true,
            "shape_name": "DestinationName",
            "min_length": 1,
            "max_length": 512
          },
          "accessPolicy": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>An IAM policy document that authorizes cross-account users to deliver their log events\n      to the associated destination.</simpara>\n      ",
            "documentation": "\n         <p>An IAM policy document that authorizes cross-account users to deliver their log events\n      to the associated destination.</p>\n      ",
            "required": true,
            "shape_name": "AccessPolicy",
            "min_length": 1
          }
        },
        "shape_name": "PutDestinationPolicyRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Multiple requests to update the same resource were in conflict.</simpara>\n      ",
          "documentation": "\n         <p>Multiple requests to update the same resource were in conflict.</p>\n      ",
          "shape_name": "OperationAbortedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Creates or updates an access policy associated with an existing\n      destination. An access policy is an <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies_overview.html\">IAM policy document</a> that is used\n      to authorize claims to register a subscription filter against a given destination.</p>\n    \n      "
    },
    "PutRetentionPolicy": {
      "name": "PutRetentionPolicy",
      "input": {
        "type": "structure",
        "members": {
          "logGroupName": {
            "type": "string",
            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
            "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log group.</p>\n      ",
            "required": true,
            "shape_name": "LogGroupName",
            "min_length": 1,
            "max_length": 512
          },
          "retentionInDays": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>The number of days to retain the log events in the specified log group.\n      Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653.</simpara>\n      ",
            "documentation": "\n         <p>The number of days to retain the log events in the specified log group.\n      Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653.</p>\n      ",
            "required": true,
            "shape_name": "Days"
          }
        },
        "shape_name": "PutRetentionPolicyRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Multiple requests to update the same resource were in conflict.</simpara>\n      ",
          "documentation": "\n         <p>Multiple requests to update the same resource were in conflict.</p>\n      ",
          "shape_name": "OperationAbortedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Sets the retention of the specified log group. A retention policy allows you to\n      configure the number of days for which to retain log events in the specified log\n      group.</p>\n    \n      "
    },
    "DeleteRetentionPolicy": {
      "name": "DeleteRetentionPolicy",
      "input": {
        "type": "structure",
        "members": {
          "logGroupName": {
            "type": "string",
            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
            "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log group.</p>\n      ",
            "required": true,
            "shape_name": "LogGroupName",
            "min_length": 1,
            "max_length": 512
          }
        },
        "shape_name": "DeleteRetentionPolicyRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Multiple requests to update the same resource were in conflict.</simpara>\n      ",
          "documentation": "\n         <p>Multiple requests to update the same resource were in conflict.</p>\n      ",
          "shape_name": "OperationAbortedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Deletes the specified retention policy.</p> \n         <p>Log events do not expire if they belong to log groups without a retention policy.</p>\n    \n      "
    },
    "CreateExportTask": {
      "name": "CreateExportTask",
      "input": {
        "type": "structure",
        "members": {
          "taskName": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The name of the export task.</simpara>\n      ",
            "documentation": "\n         <p>The name of the export task.</p>\n      ",
            "shape_name": "ExportTaskName",
            "min_length": 1,
            "max_length": 512
          },
          "logGroupName": {
            "type": "string",
            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
            "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log group.</p>\n      ",
            "required": true,
            "shape_name": "LogGroupName",
            "min_length": 1,
            "max_length": 512
          },
          "logStreamNamePrefix": {
            "type": "string",
            "pattern": "[^:*]*",
            "zonbookDocumentation": "\n         <simpara>Export only log streams that match the provided prefix. If you don't\n      specify a value, no prefix filter is applied.</simpara>\n      ",
            "documentation": "\n         <p>Export only log streams that match the provided prefix. If you don't\n      specify a value, no prefix filter is applied.</p>\n      ",
            "shape_name": "LogStreamName",
            "min_length": 1,
            "max_length": 512
          },
          "from": {
            "type": "long",
            "zonbookDocumentation": "\n         <simpara>The start time of the range for the request, expressed as the number of milliseconds\n      after Jan 1, 1970 00:00:00 UTC. Events with a time stamp earlier than this time are not\n      exported.</simpara>\n      ",
            "documentation": "\n         <p>The start time of the range for the request, expressed as the number of milliseconds\n      after Jan 1, 1970 00:00:00 UTC. Events with a time stamp earlier than this time are not\n      exported.</p>\n      ",
            "required": true,
            "shape_name": "Timestamp",
            "min_length": 0
          },
          "to": {
            "type": "long",
            "zonbookDocumentation": "\n         <simpara>The end time of the range for the request, expressed as the number of milliseconds\n      after Jan 1, 1970 00:00:00 UTC. Events with a time stamp later than this time are not\n      exported.</simpara>\n      ",
            "documentation": "\n         <p>The end time of the range for the request, expressed as the number of milliseconds\n      after Jan 1, 1970 00:00:00 UTC. Events with a time stamp later than this time are not\n      exported.</p>\n      ",
            "required": true,
            "shape_name": "Timestamp",
            "min_length": 0
          },
          "destination": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The name of S3 bucket for the exported log data. The bucket must be in the same AWS region.</simpara>\n      ",
            "documentation": "\n         <p>The name of S3 bucket for the exported log data. The bucket must be in the same AWS region.</p>\n      ",
            "required": true,
            "shape_name": "ExportDestinationBucket",
            "min_length": 1,
            "max_length": 512
          },
          "destinationPrefix": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The prefix used as the start of the key for every object exported. If you don't\n      specify a value, the default is <code>exportedlogs</code>.</simpara>\n      ",
            "documentation": "\n         <p>The prefix used as the start of the key for every object exported. If you don't\n      specify a value, the default is <code>exportedlogs</code>.</p>\n      ",
            "shape_name": "ExportDestinationPrefix"
          }
        },
        "shape_name": "CreateExportTaskRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "taskId": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The ID of the export task.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the export task.</p>\n      ",
            "shape_name": "ExportTaskId",
            "min_length": 1,
            "max_length": 512
          }
        },
        "shape_name": "CreateExportTaskResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You have reached the maximum number of resources that can be created.</simpara>\n      ",
          "documentation": "\n         <p>You have reached the maximum number of resources that can be created.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Multiple requests to update the same resource were in conflict.</simpara>\n      ",
          "documentation": "\n         <p>Multiple requests to update the same resource were in conflict.</p>\n      ",
          "shape_name": "OperationAbortedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource already exists.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource already exists.</p>\n      ",
          "shape_name": "ResourceAlreadyExistsException"
        }
      ],
      "documentation": "\n         <p>Creates an export task, which allows you to efficiently export data from a\n      log group to an Amazon S3 bucket.</p>\n         <p>This is an asynchronous call. If all the required information is provided, this \n      operation initiates an export task and responds with the ID of the task. After the task has started,\n      you can use <a>DescribeExportTasks</a> to get the status of the export task. Each account can\n      only have one active (<code>RUNNING</code> or <code>PENDING</code>) export task at a time.\n      To cancel an export task, use <a>CancelExportTask</a>.</p>\n         <p>You can export logs from multiple log groups or multiple time ranges to the same S3\n      bucket. To separate out log data for each export task, you can specify a prefix to be used as\n      the Amazon S3 key prefix for all exported objects.</p>\n    \n      "
    },
    "DescribeExportTasks": {
      "name": "DescribeExportTasks",
      "input": {
        "type": "structure",
        "members": {
          "taskId": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The ID of the export task. Specifying a task ID filters the results to zero or one export tasks.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the export task. Specifying a task ID filters the results to zero or one export tasks.</p>\n      ",
            "shape_name": "ExportTaskId",
            "min_length": 1,
            "max_length": 512
          },
          "statusCode": {
            "type": "string",
            "enum": [
              "CANCELLED",
              "COMPLETED",
              "FAILED",
              "PENDING",
              "PENDING_CANCEL",
              "RUNNING"
            ],
            "zonbookDocumentation": "\n         <simpara>The status code of the export task. Specifying a status code filters the results to zero or more export tasks.</simpara>\n      ",
            "documentation": "\n         <p>The status code of the export task. Specifying a status code filters the results to zero or more export tasks.</p>\n      ",
            "shape_name": "ExportTaskStatusCode"
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The token for the next set of items to return. (You received this token from a previous call.)</simpara>\n      ",
            "documentation": "\n         <p>The token for the next set of items to return. (You received this token from a previous call.)</p>\n      ",
            "shape_name": "NextToken",
            "min_length": 1
          },
          "limit": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>The maximum number of items returned. If you don't specify a value, the default is up to 50 items.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of items returned. If you don't specify a value, the default is up to 50 items.</p>\n      ",
            "shape_name": "DescribeLimit",
            "min_length": 1,
            "max_length": 50
          }
        },
        "shape_name": "DescribeExportTasksRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "exportTasks": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The export tasks.</simpara>\n      ",
            "documentation": "\n         <p>The export tasks.</p>\n      ",
            "shape_name": "ExportTasks",
            "members": {
              "type": "structure",
              "members": {
                "taskId": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The ID of the export task.</simpara>\n      ",
                  "documentation": "\n         <p>The ID of the export task.</p>\n      ",
                  "shape_name": "ExportTaskId",
                  "min_length": 1,
                  "max_length": 512
                },
                "taskName": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The name of the export task.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the export task.</p>\n      ",
                  "shape_name": "ExportTaskName",
                  "min_length": 1,
                  "max_length": 512
                },
                "logGroupName": {
                  "type": "string",
                  "pattern": "[\\.\\-_/#A-Za-z0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The name of the log group from which logs data was exported.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the log group from which logs data was exported.</p>\n      ",
                  "shape_name": "LogGroupName",
                  "min_length": 1,
                  "max_length": 512
                },
                "from": {
                  "type": "long",
                  "zonbookDocumentation": "\n         <simpara>The start time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.\n      Events with a time stamp before this time are not exported.</simpara>\n      ",
                  "documentation": "\n         <p>The start time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.\n      Events with a time stamp before this time are not exported.</p>\n      ",
                  "shape_name": "Timestamp",
                  "min_length": 0
                },
                "to": {
                  "type": "long",
                  "zonbookDocumentation": "\n         <simpara>The end time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.\n      Events with a time stamp later than this time are not exported.</simpara>\n      ",
                  "documentation": "\n         <p>The end time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.\n      Events with a time stamp later than this time are not exported.</p>\n      ",
                  "shape_name": "Timestamp",
                  "min_length": 0
                },
                "destination": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The name of Amazon S3 bucket to which the log data was exported.</simpara>\n      ",
                  "documentation": "\n         <p>The name of Amazon S3 bucket to which the log data was exported.</p>\n      ",
                  "shape_name": "ExportDestinationBucket",
                  "min_length": 1,
                  "max_length": 512
                },
                "destinationPrefix": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The prefix that was used as the start of Amazon S3 key for every object exported.</simpara>\n      ",
                  "documentation": "\n         <p>The prefix that was used as the start of Amazon S3 key for every object exported.</p>\n      ",
                  "shape_name": "ExportDestinationPrefix"
                },
                "status": {
                  "type": "structure",
                  "members": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CANCELLED",
                        "COMPLETED",
                        "FAILED",
                        "PENDING",
                        "PENDING_CANCEL",
                        "RUNNING"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The status code of the export task.</simpara>\n      ",
                      "documentation": "\n         <p>The status code of the export task.</p>\n      ",
                      "shape_name": "ExportTaskStatusCode"
                    },
                    "message": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The status message related to the status code.</simpara>\n      ",
                      "documentation": "\n         <p>The status message related to the status code.</p>\n      ",
                      "shape_name": "ExportTaskStatusMessage"
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The status of the export task.</simpara>\n      ",
                  "documentation": "\n         <p>The status of the export task.</p>\n      ",
                  "shape_name": "ExportTaskStatus"
                },
                "executionInfo": {
                  "type": "structure",
                  "members": {
                    "creationTime": {
                      "type": "long",
                      "zonbookDocumentation": "\n         <simpara>The creation time of the export task, expressed as the number of milliseconds after Jan\n      1, 1970 00:00:00 UTC.</simpara>\n      ",
                      "documentation": "\n         <p>The creation time of the export task, expressed as the number of milliseconds after Jan\n      1, 1970 00:00:00 UTC.</p>\n      ",
                      "shape_name": "Timestamp",
                      "min_length": 0
                    },
                    "completionTime": {
                      "type": "long",
                      "zonbookDocumentation": "\n         <simpara>The completion time of the export task, expressed as the number of milliseconds after\n      Jan 1, 1970 00:00:00 UTC.</simpara>\n      ",
                      "documentation": "\n         <p>The completion time of the export task, expressed as the number of milliseconds after\n      Jan 1, 1970 00:00:00 UTC.</p>\n      ",
                      "shape_name": "Timestamp",
                      "min_length": 0
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>Execution info about the export task.</simpara>\n      ",
                  "documentation": "\n         <p>Execution info about the export task.</p>\n      ",
                  "shape_name": "ExportTaskExecutionInfo"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Represents an export task.</simpara>\n      ",
              "documentation": "\n         <p>Represents an export task.</p>\n      ",
              "shape_name": "ExportTask"
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The token for the next set of items to return. The token expires after 24 hours.</simpara>\n      ",
            "documentation": "\n         <p>The token for the next set of items to return. The token expires after 24 hours.</p>\n      ",
            "shape_name": "NextToken",
            "min_length": 1
          }
        },
        "shape_name": "DescribeExportTasksResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Lists the specified export tasks. You can list all your export tasks or filter \n      the results based on task ID or task status.</p>\n    \n      "
    },
    "CancelExportTask": {
      "name": "CancelExportTask",
      "input": {
        "type": "structure",
        "members": {
          "taskId": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The ID of the export task.</simpara>\n      ",
            "documentation": "\n         <p>The ID of the export task.</p>\n      ",
            "required": true,
            "shape_name": "ExportTaskId",
            "min_length": 1,
            "max_length": 512
          }
        },
        "shape_name": "CancelExportTaskRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The operation is not valid on the specified resource.</simpara>\n      ",
          "documentation": "\n         <p>The operation is not valid on the specified resource.</p>\n      ",
          "shape_name": "InvalidOperationException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Cancels the specified export task.</p> \n         <p>The task must be in the <code>PENDING</code> or <code>RUNNING</code> state.</p>\n    \n      "
    },
    "PutResourcePolicy": {
      "name": "PutResourcePolicy",
      "input": {
        "type": "structure",
        "members": {
          "policyName": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Name of the new policy. This parameter is required.</simpara>\n      ",
            "documentation": "\n         <p>Name of the new policy. This parameter is required.</p>\n      ",
            "shape_name": "PolicyName"
          },
          "policyDocument": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Details of the new policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string.</simpara>\n         <simpara>The following example creates a resource policy enabling the Route 53 service to put\n      DNS query logs in to the specified log group. Replace \"logArn\" with the ARN of your CloudWatch Logs resource, such as a log group or log stream.</simpara>\n         <simpara>\n            <code>{ \n   \"Version\": \"2012-10-17\",\n   \"Statement\": [\n     {\n       \"Sid\": \"Route53LogsToCloudWatchLogs\", \n       \"Effect\": \"Allow\", \n       \"Principal\": {\n        \"Service\": [\n                \"route53.amazonaws.com\"\n               ]\n            }, \n         \"Action\":\"logs:PutLogEvents\", \n         \"Resource\": \"logArn\"\n      }\n    ]\n} </code>\n \n         </simpara>\n\n\n\n \n    \n      ",
            "documentation": "\n         <p>Details of the new policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string.</p>\n         <p>The following example creates a resource policy enabling the Route 53 service to put\n      DNS query logs in to the specified log group. Replace \"logArn\" with the ARN of your CloudWatch Logs resource, such as a log group or log stream.</p>\n         <p>\n            <code>{ \n   \"Version\": \"2012-10-17\",\n   \"Statement\": [\n     {\n       \"Sid\": \"Route53LogsToCloudWatchLogs\", \n       \"Effect\": \"Allow\", \n       \"Principal\": {\n        \"Service\": [\n                \"route53.amazonaws.com\"\n               ]\n            }, \n         \"Action\":\"logs:PutLogEvents\", \n         \"Resource\": \"logArn\"\n      }\n    ]\n} </code>\n \n         </p>\n\n\n\n \n    \n      ",
            "shape_name": "PolicyDocument",
            "min_length": 1,
            "max_length": 5120
          }
        },
        "shape_name": "PutResourcePolicyRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "resourcePolicy": {
            "type": "structure",
            "members": {
              "policyName": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The name of the resource policy.</simpara>\n      ",
                "documentation": "\n         <p>The name of the resource policy.</p>\n      ",
                "shape_name": "PolicyName"
              },
              "policyDocument": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The details of the policy.</simpara>\n      ",
                "documentation": "\n         <p>The details of the policy.</p>\n      ",
                "shape_name": "PolicyDocument",
                "min_length": 1,
                "max_length": 5120
              },
              "lastUpdatedTime": {
                "type": "long",
                "zonbookDocumentation": "\n         <simpara>Time stamp showing when this policy was last updated, expressed as the number of\n      milliseconds after Jan 1, 1970 00:00:00 UTC.</simpara>\n      ",
                "documentation": "\n         <p>Time stamp showing when this policy was last updated, expressed as the number of\n      milliseconds after Jan 1, 1970 00:00:00 UTC.</p>\n      ",
                "shape_name": "Timestamp",
                "min_length": 0
              }
            },
            "zonbookDocumentation": "\n         <simpara>The new policy.</simpara>\n      ",
            "documentation": "\n         <p>The new policy.</p>\n      ",
            "shape_name": "ResourcePolicy"
          }
        },
        "shape_name": "PutResourcePolicyResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>You have reached the maximum number of resources that can be created.</simpara>\n      ",
          "documentation": "\n         <p>You have reached the maximum number of resources that can be created.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Creates or updates a resource policy allowing other AWS services to put log events to this\n      account, such as Amazon Route 53. An account can have up to 10 resource policies per region.</p>\n      "
    },
    "DeleteResourcePolicy": {
      "name": "DeleteResourcePolicy",
      "input": {
        "type": "structure",
        "members": {
          "policyName": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The name of the policy to be revoked. This parameter is required.</simpara>\n      ",
            "documentation": "\n         <p>The name of the policy to be revoked. This parameter is required.</p>\n      ",
            "shape_name": "PolicyName"
          }
        },
        "shape_name": "DeleteResourcePolicyRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Deletes a resource policy from this account. This revokes \n    the access of the identities in that policy to put log events to this account.</p>\n      "
    },
    "DescribeResourcePolicies": {
      "name": "DescribeResourcePolicies",
      "input": {
        "type": "structure",
        "members": {
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The token for the next set of items to return. The token expires after 24 hours.</simpara>\n      ",
            "documentation": "\n         <p>The token for the next set of items to return. The token expires after 24 hours.</p>\n      ",
            "shape_name": "NextToken",
            "min_length": 1
          },
          "limit": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>The maximum number of resource policies to be displayed with one call of this API.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of resource policies to be displayed with one call of this API.</p>\n      ",
            "shape_name": "DescribeLimit",
            "min_length": 1,
            "max_length": 50
          }
        },
        "shape_name": "DescribeResourcePoliciesRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "resourcePolicies": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>The resource policies that exist in this account.</simpara>\n      ",
            "documentation": "\n         <p>The resource policies that exist in this account.</p>\n      ",
            "shape_name": "ResourcePolicies",
            "members": {
              "type": "structure",
              "members": {
                "policyName": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The name of the resource policy.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the resource policy.</p>\n      ",
                  "shape_name": "PolicyName"
                },
                "policyDocument": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The details of the policy.</simpara>\n      ",
                  "documentation": "\n         <p>The details of the policy.</p>\n      ",
                  "shape_name": "PolicyDocument",
                  "min_length": 1,
                  "max_length": 5120
                },
                "lastUpdatedTime": {
                  "type": "long",
                  "zonbookDocumentation": "\n         <simpara>Time stamp showing when this policy was last updated, expressed as the number of\n      milliseconds after Jan 1, 1970 00:00:00 UTC.</simpara>\n      ",
                  "documentation": "\n         <p>Time stamp showing when this policy was last updated, expressed as the number of\n      milliseconds after Jan 1, 1970 00:00:00 UTC.</p>\n      ",
                  "shape_name": "Timestamp",
                  "min_length": 0
                }
              },
              "zonbookDocumentation": "\n         <simpara>A policy enabling one or more entities to put logs to a log group in this account.</simpara>\n      ",
              "documentation": "\n         <p>A policy enabling one or more entities to put logs to a log group in this account.</p>\n      ",
              "shape_name": "ResourcePolicy"
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The token for the next set of items to return. The token expires after 24 hours.</simpara>\n      ",
            "documentation": "\n         <p>The token for the next set of items to return. The token expires after 24 hours.</p>\n      ",
            "shape_name": "NextToken",
            "min_length": 1
          }
        },
        "shape_name": "DescribeResourcePoliciesResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Lists the resource policies in this account.</p>\n      "
    },
    "AssociateKmsKey": {
      "name": "AssociateKmsKey",
      "input": {
        "type": "structure",
        "members": {
          "logGroupName": {
            "type": "string",
            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
            "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log group.</p>\n      ",
            "required": true,
            "shape_name": "LogGroupName",
            "min_length": 1,
            "max_length": 512
          },
          "kmsKeyId": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The Amazon Resource Name (ARN) of the CMK to use when encrypting log data. \n      For more information, see <ulink type=\"documentation\" url=\"general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms\">Amazon Resource Names - AWS Key Management Service (AWS KMS)</ulink>.</simpara>\n      ",
            "documentation": "\n         <p>The Amazon Resource Name (ARN) of the CMK to use when encrypting log data. \n      For more information, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms\">Amazon Resource Names - AWS Key Management Service (AWS KMS)</a>.</p>\n      ",
            "required": true,
            "shape_name": "KmsKeyId",
            "max_length": 256
          }
        },
        "shape_name": "AssociateKmsKeyRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Multiple requests to update the same resource were in conflict.</simpara>\n      ",
          "documentation": "\n         <p>Multiple requests to update the same resource were in conflict.</p>\n      ",
          "shape_name": "OperationAbortedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Associates the specified AWS Key Management Service (AWS KMS) customer master key (CMK) with the specified log group.</p> \n         <p>Associating an AWS KMS CMK with a log group overrides any existing associations between the log group and a CMK. \n      After a CMK is associated with a log group, all newly ingested data for the log group is encrypted using the CMK. \n      This association is stored as long as the data encrypted with the CMK is still within Amazon CloudWatch Logs. \n      This enables Amazon CloudWatch Logs to decrypt this data whenever it is requested.</p>\n         <p>Note that it can take up to 5 minutes for this operation to take effect.</p>\n         <p>If you attempt to associate a CMK with a log group but the CMK does not exist or the CMK is disabled, you will receive an \n      <code>InvalidParameterException</code> error.\n    </p>\n    \n      "
    },
    "DisassociateKmsKey": {
      "name": "DisassociateKmsKey",
      "input": {
        "type": "structure",
        "members": {
          "logGroupName": {
            "type": "string",
            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
            "zonbookDocumentation": "\n         <simpara>The name of the log group.</simpara>\n      ",
            "documentation": "\n         <p>The name of the log group.</p>\n      ",
            "required": true,
            "shape_name": "LogGroupName",
            "min_length": 1,
            "max_length": 512
          }
        },
        "shape_name": "DisassociateKmsKeyRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>A parameter is specified incorrectly.</simpara>\n      ",
          "documentation": "\n         <p>A parameter is specified incorrectly.</p>\n      ",
          "shape_name": "InvalidParameterException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The specified resource does not exist.</simpara>\n      ",
          "documentation": "\n         <p>The specified resource does not exist.</p>\n      ",
          "shape_name": "ResourceNotFoundException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>Multiple requests to update the same resource were in conflict.</simpara>\n      ",
          "documentation": "\n         <p>Multiple requests to update the same resource were in conflict.</p>\n      ",
          "shape_name": "OperationAbortedException"
        },
        {
          "type": "structure",
          "members": {
          },
          "zonbookDocumentation": "\n         <simpara>The service cannot complete the request.</simpara>\n      ",
          "documentation": "\n         <p>The service cannot complete the request.</p>\n      ",
          "shape_name": "ServiceUnavailableException"
        }
      ],
      "documentation": "\n         <p>Disassociates the associated AWS Key Management Service (AWS KMS) customer master key (CMK) from the specified log group.</p> \n         <p>After the AWS KMS CMK is disassociated from the log group, AWS CloudWatch Logs stops encrypting newly ingested data for the log group. \n      All previously ingested data remains encrypted, and AWS CloudWatch Logs requires permissions for the CMK whenever the encrypted data is requested.</p>\n         <p>Note that it can take up to 5 minutes for this operation to take effect.</p> \n    \n      "
    }
  }
}
