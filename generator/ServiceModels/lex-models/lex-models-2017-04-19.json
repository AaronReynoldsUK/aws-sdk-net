{
  "version": "1.0",
  "signing_name": "lex",
  "endpoint_prefix": "models.lex",
  "type": "rest-json",
  "json_version": "1.1",
  "signature_version": "v4",
  "service_full_name": "Amazon Lex Model Building Service",
  "service_id": "Lex Model Building Service",
  "uid": "lex-models-2017-04-19",
  "api_version": "2017-04-19",
  "documentation": "\n         <fullname>Amazon Lex Build-Time Actions</fullname>\n         <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use\n      these actions to create, update, and delete conversational bots for new and existing client\n      applications. </p>\n      ",
  "operations": {
    "PutIntent": {
      "name": "PutIntent",
      "http": {
        "method": "PUT",
        "uri": "/intents/{name}/versions/$LATEST",
        "response_code": 200
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the intent. The name is <emphasis>not</emphasis> case sensitive. </simpara>\n         <simpara>The name can't match a built-in intent name, or a built-in intent name with \"AMAZON.\"\n      removed. For example, because there is a built-in intent called\n      <code>AMAZON.HelpIntent</code>, you can't create a custom intent called\n        <code>HelpIntent</code>.</simpara>\n         <simpara>For a list of built-in intents, see <ulink url=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents\">Standard Built-in Intents</ulink> in the <emphasis>Alexa Skills Kit</emphasis>.</simpara>\n      ",
            "documentation": "\n         <p>The name of the intent. The name is <i>not</i> case sensitive. </p>\n         <p>The name can't match a built-in intent name, or a built-in intent name with \"AMAZON.\"\n      removed. For example, because there is a built-in intent called\n      <code>AMAZON.HelpIntent</code>, you can't create a custom intent called\n        <code>HelpIntent</code>.</p>\n         <p>For a list of built-in intents, see <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents\">Standard Built-in Intents</a> in the <i>Alexa Skills Kit</i>.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "IntentName",
            "min_length": 1,
            "max_length": 100
          },
          "description": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A description of the intent.</simpara>\n      ",
            "documentation": "\n         <p>A description of the intent.</p>\n      ",
            "shape_name": "Description",
            "min_length": 0,
            "max_length": 200
          },
          "slots": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of intent slots. At runtime, Amazon Lex elicits required slot values from the user\n      using prompts defined in the slots. For more information, see <xref linkend=\"how-it-works\"/>.\n    </simpara>\n      ",
            "documentation": "\n         <p>An array of intent slots. At runtime, Amazon Lex elicits required slot values from the user\n      using prompts defined in the slots. For more information, see <a>how-it-works</a>.\n    </p>\n      ",
            "shape_name": "SlotList",
            "min_length": 0,
            "max_length": 100,
            "members": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "pattern": "^([A-Za-z](-|_|.)?)+$",
                  "zonbookDocumentation": "\n         <simpara>The name of the slot.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the slot.</p>\n      ",
                  "required": true,
                  "shape_name": "SlotName",
                  "min_length": 1,
                  "max_length": 100
                },
                "description": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A description of the slot.</simpara>\n      ",
                  "documentation": "\n         <p>A description of the slot.</p>\n      ",
                  "shape_name": "Description",
                  "min_length": 0,
                  "max_length": 200
                },
                "slotConstraint": {
                  "type": "string",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "zonbookDocumentation": "\n         <simpara>Specifies whether the slot is required or optional. </simpara>\n      ",
                  "documentation": "\n         <p>Specifies whether the slot is required or optional. </p>\n      ",
                  "required": true,
                  "shape_name": "SlotConstraint"
                },
                "slotType": {
                  "type": "string",
                  "pattern": "^((AMAZON\\.)_?|[A-Za-z]_?)+",
                  "zonbookDocumentation": "\n         <simpara>The type of the slot, either a custom slot type that you defined or one of the built-in\n      slot types.</simpara>\n      ",
                  "documentation": "\n         <p>The type of the slot, either a custom slot type that you defined or one of the built-in\n      slot types.</p>\n      ",
                  "shape_name": "CustomOrBuiltinSlotTypeName",
                  "min_length": 1,
                  "max_length": 100
                },
                "slotTypeVersion": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the slot type.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the slot type.</p>\n      ",
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                },
                "valueElicitationPrompt": {
                  "type": "structure",
                  "members": {
                    "messages": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</simpara>\n      ",
                      "documentation": "\n         <p>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</p>\n      ",
                      "required": true,
                      "shape_name": "MessageList",
                      "min_length": 1,
                      "max_length": 15,
                      "members": {
                        "type": "structure",
                        "members": {
                          "contentType": {
                            "type": "string",
                            "enum": [
                              "PlainText",
                              "SSML",
                              "CustomPayload"
                            ],
                            "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                            "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                            "required": true,
                            "shape_name": "ContentType"
                          },
                          "content": {
                            "type": "string",
                            "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                            "documentation": "\n         <p>The text of the message.</p>\n      ",
                            "required": true,
                            "shape_name": "ContentString",
                            "min_length": 1,
                            "max_length": 1000
                          },
                          "groupNumber": {
                            "type": "integer",
                            "box": true,
                            "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                            "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                            "shape_name": "GroupNumber",
                            "min_length": 1,
                            "max_length": 5
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                        "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                        "shape_name": "Message"
                      }
                    },
                    "maxAttempts": {
                      "type": "integer",
                      "zonbookDocumentation": "\n         <simpara>The number of times to prompt the user for information.</simpara>\n      ",
                      "documentation": "\n         <p>The number of times to prompt the user for information.</p>\n      ",
                      "required": true,
                      "shape_name": "PromptMaxAttempts",
                      "min_length": 1,
                      "max_length": 5
                    },
                    "responseCard": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <xref linkend=\"ex-resp-card\"/>. </simpara>\n      ",
                      "documentation": "\n         <p>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <a>ex-resp-card</a>. </p>\n      ",
                      "shape_name": "ResponseCard",
                      "min_length": 1,
                      "max_length": 50000
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The prompt that Amazon Lex uses to elicit the slot value from the user.</simpara>\n      ",
                  "documentation": "\n         <p>The prompt that Amazon Lex uses to elicit the slot value from the user.</p>\n      ",
                  "shape_name": "Prompt"
                },
                "priority": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara> Directs Lex the order in which to elicit this slot value from the user. For example,\n      if the intent has two slots with priorities 1 and 2, AWS Lex first elicits a value for the\n      slot with priority 1.</simpara>\n         <simpara>If multiple slots share the same priority, the order in which Lex elicits values is\n      arbitrary.</simpara>\n      ",
                  "documentation": "\n         <p> Directs Lex the order in which to elicit this slot value from the user. For example,\n      if the intent has two slots with priorities 1 and 2, AWS Lex first elicits a value for the\n      slot with priority 1.</p>\n         <p>If multiple slots share the same priority, the order in which Lex elicits values is\n      arbitrary.</p>\n      ",
                  "shape_name": "Priority",
                  "min_length": 0,
                  "max_length": 100
                },
                "sampleUtterances": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara> If you know a specific pattern with which users might respond to an Amazon Lex request for\n      a slot value, you can provide those utterances to improve accuracy. This is optional. In most\n      cases, Amazon Lex is capable of understanding user utterances. </simpara>\n      ",
                  "documentation": "\n         <p> If you know a specific pattern with which users might respond to an Amazon Lex request for\n      a slot value, you can provide those utterances to improve accuracy. This is optional. In most\n      cases, Amazon Lex is capable of understanding user utterances. </p>\n      ",
                  "shape_name": "SlotUtteranceList",
                  "min_length": 0,
                  "max_length": 10,
                  "members": {
                    "type": "string",
                    "shape_name": "Utterance",
                    "documentation": null,
                    "min_length": 1,
                    "max_length": 200
                  }
                },
                "responseCard": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara> A set of possible responses for the slot type used by text-based clients. A user\n      chooses an option from the response card, instead of using text to reply. </simpara>\n      ",
                  "documentation": "\n         <p> A set of possible responses for the slot type used by text-based clients. A user\n      chooses an option from the response card, instead of using text to reply. </p>\n      ",
                  "shape_name": "ResponseCard",
                  "min_length": 1,
                  "max_length": 50000
                }
              },
              "zonbookDocumentation": "\n         <simpara>Identifies the version of a specific slot.</simpara>\n      ",
              "documentation": "\n         <p>Identifies the version of a specific slot.</p>\n      ",
              "shape_name": "Slot"
            }
          },
          "sampleUtterances": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of utterances (strings) that a user might say to signal the intent. For\n      example, \"I want {PizzaSize} pizza\", \"Order {Quantity} {PizzaSize} pizzas\". </simpara>\n\n         <simpara>In each utterance, a slot name is enclosed in curly braces. </simpara>\n      ",
            "documentation": "\n         <p>An array of utterances (strings) that a user might say to signal the intent. For\n      example, \"I want {PizzaSize} pizza\", \"Order {Quantity} {PizzaSize} pizzas\". </p>\n\n         <p>In each utterance, a slot name is enclosed in curly braces. </p>\n      ",
            "shape_name": "IntentUtteranceList",
            "min_length": 0,
            "max_length": 1500,
            "members": {
              "type": "string",
              "shape_name": "Utterance",
              "documentation": null,
              "min_length": 1,
              "max_length": 200
            }
          },
          "confirmationPrompt": {
            "type": "structure",
            "members": {
              "messages": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</simpara>\n      ",
                "documentation": "\n         <p>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</p>\n      ",
                "required": true,
                "shape_name": "MessageList",
                "min_length": 1,
                "max_length": 15,
                "members": {
                  "type": "structure",
                  "members": {
                    "contentType": {
                      "type": "string",
                      "enum": [
                        "PlainText",
                        "SSML",
                        "CustomPayload"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                      "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentType"
                    },
                    "content": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                      "documentation": "\n         <p>The text of the message.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentString",
                      "min_length": 1,
                      "max_length": 1000
                    },
                    "groupNumber": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                      "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                      "shape_name": "GroupNumber",
                      "min_length": 1,
                      "max_length": 5
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                  "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                  "shape_name": "Message"
                }
              },
              "maxAttempts": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The number of times to prompt the user for information.</simpara>\n      ",
                "documentation": "\n         <p>The number of times to prompt the user for information.</p>\n      ",
                "required": true,
                "shape_name": "PromptMaxAttempts",
                "min_length": 1,
                "max_length": 5
              },
              "responseCard": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <xref linkend=\"ex-resp-card\"/>. </simpara>\n      ",
                "documentation": "\n         <p>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <a>ex-resp-card</a>. </p>\n      ",
                "shape_name": "ResponseCard",
                "min_length": 1,
                "max_length": 50000
              }
            },
            "zonbookDocumentation": "\n         <simpara>Prompts the user to confirm the intent. This question should have a yes or no\n      answer.</simpara>\n         <simpara>Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready\n      for fulfillment. For example, with the <code>OrderPizza</code> intent, you might want to\n      confirm that the order is correct before placing it. For other intents, such as intents that\n      simply respond to user questions, you might not need to ask the user for confirmation before\n      providing the information. </simpara>\n         <note>\n            <simpara>You you must provide both the <code>rejectionStatement</code> and the\n          <code>confirmationPrompt</code>, or neither.</simpara>\n         </note>\n      ",
            "documentation": "\n         <p>Prompts the user to confirm the intent. This question should have a yes or no\n      answer.</p>\n         <p>Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready\n      for fulfillment. For example, with the <code>OrderPizza</code> intent, you might want to\n      confirm that the order is correct before placing it. For other intents, such as intents that\n      simply respond to user questions, you might not need to ask the user for confirmation before\n      providing the information. </p>\n         <note>\n            <p>You you must provide both the <code>rejectionStatement</code> and the\n          <code>confirmationPrompt</code>, or neither.</p>\n         </note>\n      ",
            "shape_name": "Prompt"
          },
          "rejectionStatement": {
            "type": "structure",
            "members": {
              "messages": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A collection of message objects.</simpara>\n      ",
                "documentation": "\n         <p>A collection of message objects.</p>\n      ",
                "required": true,
                "shape_name": "MessageList",
                "min_length": 1,
                "max_length": 15,
                "members": {
                  "type": "structure",
                  "members": {
                    "contentType": {
                      "type": "string",
                      "enum": [
                        "PlainText",
                        "SSML",
                        "CustomPayload"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                      "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentType"
                    },
                    "content": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                      "documentation": "\n         <p>The text of the message.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentString",
                      "min_length": 1,
                      "max_length": 1000
                    },
                    "groupNumber": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                      "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                      "shape_name": "GroupNumber",
                      "min_length": 1,
                      "max_length": 5
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                  "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                  "shape_name": "Message"
                }
              },
              "responseCard": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara> At runtime, if the client is using the <ulink url=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</ulink>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </simpara>\n\n      ",
                "documentation": "\n         <p> At runtime, if the client is using the <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </p>\n\n      ",
                "shape_name": "ResponseCard",
                "min_length": 1,
                "max_length": 50000
              }
            },
            "zonbookDocumentation": "\n         <simpara>When the user answers \"no\" to the question defined in <code>confirmationPrompt</code>,\n      Amazon Lex responds with this statement to acknowledge that the intent was canceled. </simpara>\n         <note>\n            <simpara>You must provide both the <code>rejectionStatement</code> and the\n          <code>confirmationPrompt</code>, or neither.</simpara>\n         </note>\n      ",
            "documentation": "\n         <p>When the user answers \"no\" to the question defined in <code>confirmationPrompt</code>,\n      Amazon Lex responds with this statement to acknowledge that the intent was canceled. </p>\n         <note>\n            <p>You must provide both the <code>rejectionStatement</code> and the\n          <code>confirmationPrompt</code>, or neither.</p>\n         </note>\n      ",
            "shape_name": "Statement"
          },
          "followUpPrompt": {
            "type": "structure",
            "members": {
              "prompt": {
                "type": "structure",
                "members": {
                  "messages": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</simpara>\n      ",
                    "documentation": "\n         <p>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</p>\n      ",
                    "required": true,
                    "shape_name": "MessageList",
                    "min_length": 1,
                    "max_length": 15,
                    "members": {
                      "type": "structure",
                      "members": {
                        "contentType": {
                          "type": "string",
                          "enum": [
                            "PlainText",
                            "SSML",
                            "CustomPayload"
                          ],
                          "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                          "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                          "required": true,
                          "shape_name": "ContentType"
                        },
                        "content": {
                          "type": "string",
                          "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                          "documentation": "\n         <p>The text of the message.</p>\n      ",
                          "required": true,
                          "shape_name": "ContentString",
                          "min_length": 1,
                          "max_length": 1000
                        },
                        "groupNumber": {
                          "type": "integer",
                          "box": true,
                          "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                          "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                          "shape_name": "GroupNumber",
                          "min_length": 1,
                          "max_length": 5
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                      "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                      "shape_name": "Message"
                    }
                  },
                  "maxAttempts": {
                    "type": "integer",
                    "zonbookDocumentation": "\n         <simpara>The number of times to prompt the user for information.</simpara>\n      ",
                    "documentation": "\n         <p>The number of times to prompt the user for information.</p>\n      ",
                    "required": true,
                    "shape_name": "PromptMaxAttempts",
                    "min_length": 1,
                    "max_length": 5
                  },
                  "responseCard": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <xref linkend=\"ex-resp-card\"/>. </simpara>\n      ",
                    "documentation": "\n         <p>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <a>ex-resp-card</a>. </p>\n      ",
                    "shape_name": "ResponseCard",
                    "min_length": 1,
                    "max_length": 50000
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Prompts for information from the user. </simpara>\n      ",
                "documentation": "\n         <p>Prompts for information from the user. </p>\n      ",
                "required": true,
                "shape_name": "Prompt"
              },
              "rejectionStatement": {
                "type": "structure",
                "members": {
                  "messages": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A collection of message objects.</simpara>\n      ",
                    "documentation": "\n         <p>A collection of message objects.</p>\n      ",
                    "required": true,
                    "shape_name": "MessageList",
                    "min_length": 1,
                    "max_length": 15,
                    "members": {
                      "type": "structure",
                      "members": {
                        "contentType": {
                          "type": "string",
                          "enum": [
                            "PlainText",
                            "SSML",
                            "CustomPayload"
                          ],
                          "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                          "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                          "required": true,
                          "shape_name": "ContentType"
                        },
                        "content": {
                          "type": "string",
                          "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                          "documentation": "\n         <p>The text of the message.</p>\n      ",
                          "required": true,
                          "shape_name": "ContentString",
                          "min_length": 1,
                          "max_length": 1000
                        },
                        "groupNumber": {
                          "type": "integer",
                          "box": true,
                          "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                          "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                          "shape_name": "GroupNumber",
                          "min_length": 1,
                          "max_length": 5
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                      "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                      "shape_name": "Message"
                    }
                  },
                  "responseCard": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara> At runtime, if the client is using the <ulink url=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</ulink>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </simpara>\n\n      ",
                    "documentation": "\n         <p> At runtime, if the client is using the <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </p>\n\n      ",
                    "shape_name": "ResponseCard",
                    "min_length": 1,
                    "max_length": 50000
                  }
                },
                "zonbookDocumentation": "\n         <simpara>If the user answers \"no\" to the question defined in the <code>prompt</code> field,\n      Amazon Lex responds with this statement to acknowledge that the intent was canceled. </simpara>\n      ",
                "documentation": "\n         <p>If the user answers \"no\" to the question defined in the <code>prompt</code> field,\n      Amazon Lex responds with this statement to acknowledge that the intent was canceled. </p>\n      ",
                "required": true,
                "shape_name": "Statement"
              }
            },
            "zonbookDocumentation": "\n         <simpara>Amazon Lex uses this prompt to solicit additional activity after fulfilling an intent. For\n      example, after the <code>OrderPizza</code> intent is fulfilled, you might prompt the user to\n      order a drink.</simpara>\n         <simpara>The action that Amazon Lex takes depends on the user's response, as follows:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>If the user says \"Yes\" it responds with the clarification prompt that is configured\n          for the bot.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>if the user says \"Yes\" and continues with an utterance that triggers an intent it\n          starts a conversation for the intent.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>If the user says \"No\" it responds with the rejection statement configured for the\n          the follow-up prompt.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>If it doesn't recognize the utterance it repeats the follow-up prompt\n          again.</simpara>\n            </listitem>\n         </itemizedlist>\n\n         <simpara>The <code>followUpPrompt</code> field and the <code>conclusionStatement</code> field\n      are mutually exclusive. You can specify only one. </simpara>\n      ",
            "documentation": "\n         <p>Amazon Lex uses this prompt to solicit additional activity after fulfilling an intent. For\n      example, after the <code>OrderPizza</code> intent is fulfilled, you might prompt the user to\n      order a drink.</p>\n         <p>The action that Amazon Lex takes depends on the user's response, as follows:</p>\n         <ul>\n            <li>\n               <p>If the user says \"Yes\" it responds with the clarification prompt that is configured\n          for the bot.</p>\n            </li>\n            <li>\n               <p>if the user says \"Yes\" and continues with an utterance that triggers an intent it\n          starts a conversation for the intent.</p>\n            </li>\n            <li>\n               <p>If the user says \"No\" it responds with the rejection statement configured for the\n          the follow-up prompt.</p>\n            </li>\n            <li>\n               <p>If it doesn't recognize the utterance it repeats the follow-up prompt\n          again.</p>\n            </li>\n         </ul>\n\n         <p>The <code>followUpPrompt</code> field and the <code>conclusionStatement</code> field\n      are mutually exclusive. You can specify only one. </p>\n      ",
            "shape_name": "FollowUpPrompt"
          },
          "conclusionStatement": {
            "type": "structure",
            "members": {
              "messages": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A collection of message objects.</simpara>\n      ",
                "documentation": "\n         <p>A collection of message objects.</p>\n      ",
                "required": true,
                "shape_name": "MessageList",
                "min_length": 1,
                "max_length": 15,
                "members": {
                  "type": "structure",
                  "members": {
                    "contentType": {
                      "type": "string",
                      "enum": [
                        "PlainText",
                        "SSML",
                        "CustomPayload"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                      "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentType"
                    },
                    "content": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                      "documentation": "\n         <p>The text of the message.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentString",
                      "min_length": 1,
                      "max_length": 1000
                    },
                    "groupNumber": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                      "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                      "shape_name": "GroupNumber",
                      "min_length": 1,
                      "max_length": 5
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                  "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                  "shape_name": "Message"
                }
              },
              "responseCard": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara> At runtime, if the client is using the <ulink url=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</ulink>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </simpara>\n\n      ",
                "documentation": "\n         <p> At runtime, if the client is using the <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </p>\n\n      ",
                "shape_name": "ResponseCard",
                "min_length": 1,
                "max_length": 50000
              }
            },
            "zonbookDocumentation": "\n         <simpara> The statement that you want Amazon Lex to convey to the user after the intent is\n      successfully fulfilled by the Lambda function. </simpara>\n         <simpara>This element is relevant only if you provide a Lambda function in the\n        <code>fulfillmentActivity</code>. If you return the intent to the client application, you\n      can't specify this element.</simpara>\n         <note>\n            <simpara>The <code>followUpPrompt</code> and <code>conclusionStatement</code> are mutually\n        exclusive. You can specify only one.</simpara>\n         </note>\n      ",
            "documentation": "\n         <p> The statement that you want Amazon Lex to convey to the user after the intent is\n      successfully fulfilled by the Lambda function. </p>\n         <p>This element is relevant only if you provide a Lambda function in the\n        <code>fulfillmentActivity</code>. If you return the intent to the client application, you\n      can't specify this element.</p>\n         <note>\n            <p>The <code>followUpPrompt</code> and <code>conclusionStatement</code> are mutually\n        exclusive. You can specify only one.</p>\n         </note>\n      ",
            "shape_name": "Statement"
          },
          "dialogCodeHook": {
            "type": "structure",
            "members": {
              "uri": {
                "type": "string",
                "pattern": "arn:aws:lambda:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:function:[a-zA-Z0-9-_]+(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?(:[a-zA-Z0-9-_]+)?",
                "zonbookDocumentation": "\n         <simpara>The Amazon Resource Name (ARN) of the Lambda function.</simpara>\n      ",
                "documentation": "\n         <p>The Amazon Resource Name (ARN) of the Lambda function.</p>\n      ",
                "required": true,
                "shape_name": "LambdaARN",
                "min_length": 20,
                "max_length": 2048
              },
              "messageVersion": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The version of the request-response that you want Amazon Lex to use to invoke your Lambda\n      function. For more information, see <xref linkend=\"using-lambda\"/>.</simpara>\n      ",
                "documentation": "\n         <p>The version of the request-response that you want Amazon Lex to use to invoke your Lambda\n      function. For more information, see <a>using-lambda</a>.</p>\n      ",
                "required": true,
                "shape_name": "MessageVersion",
                "min_length": 1,
                "max_length": 5
              }
            },
            "zonbookDocumentation": "\n         <simpara> Specifies a Lambda function to invoke for each user input. You can invoke this Lambda\n      function to personalize user interaction. </simpara>\n         <simpara>For example, suppose your bot determines that the user is John. Your Lambda function\n      might retrieve John's information from a backend database and prepopulate some of the values.\n      For example, if you find that John is gluten intolerant, you might set the corresponding\n      intent slot, <code>GlutenIntolerant</code>, to true. You might find John's phone number and\n      set the corresponding session attribute. </simpara>\n      ",
            "documentation": "\n         <p> Specifies a Lambda function to invoke for each user input. You can invoke this Lambda\n      function to personalize user interaction. </p>\n         <p>For example, suppose your bot determines that the user is John. Your Lambda function\n      might retrieve John's information from a backend database and prepopulate some of the values.\n      For example, if you find that John is gluten intolerant, you might set the corresponding\n      intent slot, <code>GlutenIntolerant</code>, to true. You might find John's phone number and\n      set the corresponding session attribute. </p>\n      ",
            "shape_name": "CodeHook"
          },
          "fulfillmentActivity": {
            "type": "structure",
            "members": {
              "type": {
                "type": "string",
                "enum": [
                  "ReturnIntent",
                  "CodeHook"
                ],
                "zonbookDocumentation": "\n         <simpara> How the intent should be fulfilled, either by running a Lambda function or by\n      returning the slot data to the client application. </simpara>\n      ",
                "documentation": "\n         <p> How the intent should be fulfilled, either by running a Lambda function or by\n      returning the slot data to the client application. </p>\n      ",
                "required": true,
                "shape_name": "FulfillmentActivityType"
              },
              "codeHook": {
                "type": "structure",
                "members": {
                  "uri": {
                    "type": "string",
                    "pattern": "arn:aws:lambda:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:function:[a-zA-Z0-9-_]+(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?(:[a-zA-Z0-9-_]+)?",
                    "zonbookDocumentation": "\n         <simpara>The Amazon Resource Name (ARN) of the Lambda function.</simpara>\n      ",
                    "documentation": "\n         <p>The Amazon Resource Name (ARN) of the Lambda function.</p>\n      ",
                    "required": true,
                    "shape_name": "LambdaARN",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "messageVersion": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>The version of the request-response that you want Amazon Lex to use to invoke your Lambda\n      function. For more information, see <xref linkend=\"using-lambda\"/>.</simpara>\n      ",
                    "documentation": "\n         <p>The version of the request-response that you want Amazon Lex to use to invoke your Lambda\n      function. For more information, see <a>using-lambda</a>.</p>\n      ",
                    "required": true,
                    "shape_name": "MessageVersion",
                    "min_length": 1,
                    "max_length": 5
                  }
                },
                "zonbookDocumentation": "\n         <simpara> A description of the Lambda function that is run to fulfill the intent. </simpara>\n      ",
                "documentation": "\n         <p> A description of the Lambda function that is run to fulfill the intent. </p>\n      ",
                "shape_name": "CodeHook"
              }
            },
            "zonbookDocumentation": "\n         <simpara>Required. Describes how the intent is fulfilled. For example, after a user provides all\n      of the information for a pizza order, <code>fulfillmentActivity</code> defines how the bot\n      places an order with a local pizza store. </simpara>\n         <simpara> You might configure Amazon Lex to return all of the intent information to the client\n      application, or direct it to invoke a Lambda function that can process the intent (for\n      example, place an order with a pizzeria). </simpara>\n      ",
            "documentation": "\n         <p>Required. Describes how the intent is fulfilled. For example, after a user provides all\n      of the information for a pizza order, <code>fulfillmentActivity</code> defines how the bot\n      places an order with a local pizza store. </p>\n         <p> You might configure Amazon Lex to return all of the intent information to the client\n      application, or direct it to invoke a Lambda function that can process the intent (for\n      example, place an order with a pizzeria). </p>\n      ",
            "shape_name": "FulfillmentActivity"
          },
          "parentIntentSignature": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A unique identifier for the built-in intent to base this intent on. To find the\n      signature for an intent, see <ulink url=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents\">Standard Built-in Intents</ulink> in the <emphasis>Alexa Skills Kit</emphasis>.</simpara>\n      ",
            "documentation": "\n         <p>A unique identifier for the built-in intent to base this intent on. To find the\n      signature for an intent, see <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents\">Standard Built-in Intents</a> in the <i>Alexa Skills Kit</i>.</p>\n      ",
            "shape_name": "BuiltinIntentSignature"
          },
          "intentToOverrideId": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara> Specifies the built-in intent that this intent overrides. For more information, see\n        <xref linkend=\"howitworks-builtins\"/>.</simpara>\n      ",
            "documentation": "\n         <p> Specifies the built-in intent that this intent overrides. For more information, see\n        <a>howitworks-builtins</a>.</p>\n      ",
            "internalonly": true,
            "shape_name": "String"
          },
          "checksum": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Identifies a specific revision of the <code>$LATEST</code> version.</simpara>\n         <simpara>When you create a new intent, leave the <code>checksum</code> field blank. If you\n      specify a checksum you get a <code>BadRequestException</code> exception.</simpara>\n         <simpara>When you want to update a intent, set the <code>checksum</code> field to the checksum\n      of the most recent revision of the <code>$LATEST</code> version. If you don't specify the\n        <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code>\n      version, you get a <code>PreconditionFailedException</code> exception.</simpara>\n      ",
            "documentation": "\n         <p>Identifies a specific revision of the <code>$LATEST</code> version.</p>\n         <p>When you create a new intent, leave the <code>checksum</code> field blank. If you\n      specify a checksum you get a <code>BadRequestException</code> exception.</p>\n         <p>When you want to update a intent, set the <code>checksum</code> field to the checksum\n      of the most recent revision of the <code>$LATEST</code> version. If you don't specify the\n        <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code>\n      version, you get a <code>PreconditionFailedException</code> exception.</p>\n      ",
            "shape_name": "String"
          },
          "createVersion": {
            "type": "boolean",
            "shape_name": "Boolean",
            "documentation": null
          }
        },
        "shape_name": "PutIntentRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the intent.</simpara>\n      ",
            "documentation": "\n         <p>The name of the intent.</p>\n      ",
            "shape_name": "IntentName",
            "min_length": 1,
            "max_length": 100
          },
          "description": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A description of the intent.</simpara>\n      ",
            "documentation": "\n         <p>A description of the intent.</p>\n      ",
            "shape_name": "Description",
            "min_length": 0,
            "max_length": 200
          },
          "slots": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of intent slots that are configured for the intent.</simpara>\n      ",
            "documentation": "\n         <p>An array of intent slots that are configured for the intent.</p>\n      ",
            "shape_name": "SlotList",
            "min_length": 0,
            "max_length": 100,
            "members": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "pattern": "^([A-Za-z](-|_|.)?)+$",
                  "zonbookDocumentation": "\n         <simpara>The name of the slot.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the slot.</p>\n      ",
                  "required": true,
                  "shape_name": "SlotName",
                  "min_length": 1,
                  "max_length": 100
                },
                "description": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A description of the slot.</simpara>\n      ",
                  "documentation": "\n         <p>A description of the slot.</p>\n      ",
                  "shape_name": "Description",
                  "min_length": 0,
                  "max_length": 200
                },
                "slotConstraint": {
                  "type": "string",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "zonbookDocumentation": "\n         <simpara>Specifies whether the slot is required or optional. </simpara>\n      ",
                  "documentation": "\n         <p>Specifies whether the slot is required or optional. </p>\n      ",
                  "required": true,
                  "shape_name": "SlotConstraint"
                },
                "slotType": {
                  "type": "string",
                  "pattern": "^((AMAZON\\.)_?|[A-Za-z]_?)+",
                  "zonbookDocumentation": "\n         <simpara>The type of the slot, either a custom slot type that you defined or one of the built-in\n      slot types.</simpara>\n      ",
                  "documentation": "\n         <p>The type of the slot, either a custom slot type that you defined or one of the built-in\n      slot types.</p>\n      ",
                  "shape_name": "CustomOrBuiltinSlotTypeName",
                  "min_length": 1,
                  "max_length": 100
                },
                "slotTypeVersion": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the slot type.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the slot type.</p>\n      ",
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                },
                "valueElicitationPrompt": {
                  "type": "structure",
                  "members": {
                    "messages": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</simpara>\n      ",
                      "documentation": "\n         <p>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</p>\n      ",
                      "required": true,
                      "shape_name": "MessageList",
                      "min_length": 1,
                      "max_length": 15,
                      "members": {
                        "type": "structure",
                        "members": {
                          "contentType": {
                            "type": "string",
                            "enum": [
                              "PlainText",
                              "SSML",
                              "CustomPayload"
                            ],
                            "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                            "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                            "required": true,
                            "shape_name": "ContentType"
                          },
                          "content": {
                            "type": "string",
                            "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                            "documentation": "\n         <p>The text of the message.</p>\n      ",
                            "required": true,
                            "shape_name": "ContentString",
                            "min_length": 1,
                            "max_length": 1000
                          },
                          "groupNumber": {
                            "type": "integer",
                            "box": true,
                            "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                            "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                            "shape_name": "GroupNumber",
                            "min_length": 1,
                            "max_length": 5
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                        "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                        "shape_name": "Message"
                      }
                    },
                    "maxAttempts": {
                      "type": "integer",
                      "zonbookDocumentation": "\n         <simpara>The number of times to prompt the user for information.</simpara>\n      ",
                      "documentation": "\n         <p>The number of times to prompt the user for information.</p>\n      ",
                      "required": true,
                      "shape_name": "PromptMaxAttempts",
                      "min_length": 1,
                      "max_length": 5
                    },
                    "responseCard": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <xref linkend=\"ex-resp-card\"/>. </simpara>\n      ",
                      "documentation": "\n         <p>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <a>ex-resp-card</a>. </p>\n      ",
                      "shape_name": "ResponseCard",
                      "min_length": 1,
                      "max_length": 50000
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The prompt that Amazon Lex uses to elicit the slot value from the user.</simpara>\n      ",
                  "documentation": "\n         <p>The prompt that Amazon Lex uses to elicit the slot value from the user.</p>\n      ",
                  "shape_name": "Prompt"
                },
                "priority": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara> Directs Lex the order in which to elicit this slot value from the user. For example,\n      if the intent has two slots with priorities 1 and 2, AWS Lex first elicits a value for the\n      slot with priority 1.</simpara>\n         <simpara>If multiple slots share the same priority, the order in which Lex elicits values is\n      arbitrary.</simpara>\n      ",
                  "documentation": "\n         <p> Directs Lex the order in which to elicit this slot value from the user. For example,\n      if the intent has two slots with priorities 1 and 2, AWS Lex first elicits a value for the\n      slot with priority 1.</p>\n         <p>If multiple slots share the same priority, the order in which Lex elicits values is\n      arbitrary.</p>\n      ",
                  "shape_name": "Priority",
                  "min_length": 0,
                  "max_length": 100
                },
                "sampleUtterances": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara> If you know a specific pattern with which users might respond to an Amazon Lex request for\n      a slot value, you can provide those utterances to improve accuracy. This is optional. In most\n      cases, Amazon Lex is capable of understanding user utterances. </simpara>\n      ",
                  "documentation": "\n         <p> If you know a specific pattern with which users might respond to an Amazon Lex request for\n      a slot value, you can provide those utterances to improve accuracy. This is optional. In most\n      cases, Amazon Lex is capable of understanding user utterances. </p>\n      ",
                  "shape_name": "SlotUtteranceList",
                  "min_length": 0,
                  "max_length": 10,
                  "members": {
                    "type": "string",
                    "shape_name": "Utterance",
                    "documentation": null,
                    "min_length": 1,
                    "max_length": 200
                  }
                },
                "responseCard": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara> A set of possible responses for the slot type used by text-based clients. A user\n      chooses an option from the response card, instead of using text to reply. </simpara>\n      ",
                  "documentation": "\n         <p> A set of possible responses for the slot type used by text-based clients. A user\n      chooses an option from the response card, instead of using text to reply. </p>\n      ",
                  "shape_name": "ResponseCard",
                  "min_length": 1,
                  "max_length": 50000
                }
              },
              "zonbookDocumentation": "\n         <simpara>Identifies the version of a specific slot.</simpara>\n      ",
              "documentation": "\n         <p>Identifies the version of a specific slot.</p>\n      ",
              "shape_name": "Slot"
            }
          },
          "sampleUtterances": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara> An array of sample utterances that are configured for the intent. </simpara>\n      ",
            "documentation": "\n         <p> An array of sample utterances that are configured for the intent. </p>\n      ",
            "shape_name": "IntentUtteranceList",
            "min_length": 0,
            "max_length": 1500,
            "members": {
              "type": "string",
              "shape_name": "Utterance",
              "documentation": null,
              "min_length": 1,
              "max_length": 200
            }
          },
          "confirmationPrompt": {
            "type": "structure",
            "members": {
              "messages": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</simpara>\n      ",
                "documentation": "\n         <p>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</p>\n      ",
                "required": true,
                "shape_name": "MessageList",
                "min_length": 1,
                "max_length": 15,
                "members": {
                  "type": "structure",
                  "members": {
                    "contentType": {
                      "type": "string",
                      "enum": [
                        "PlainText",
                        "SSML",
                        "CustomPayload"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                      "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentType"
                    },
                    "content": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                      "documentation": "\n         <p>The text of the message.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentString",
                      "min_length": 1,
                      "max_length": 1000
                    },
                    "groupNumber": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                      "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                      "shape_name": "GroupNumber",
                      "min_length": 1,
                      "max_length": 5
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                  "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                  "shape_name": "Message"
                }
              },
              "maxAttempts": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The number of times to prompt the user for information.</simpara>\n      ",
                "documentation": "\n         <p>The number of times to prompt the user for information.</p>\n      ",
                "required": true,
                "shape_name": "PromptMaxAttempts",
                "min_length": 1,
                "max_length": 5
              },
              "responseCard": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <xref linkend=\"ex-resp-card\"/>. </simpara>\n      ",
                "documentation": "\n         <p>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <a>ex-resp-card</a>. </p>\n      ",
                "shape_name": "ResponseCard",
                "min_length": 1,
                "max_length": 50000
              }
            },
            "zonbookDocumentation": "\n         <simpara>If defined in the intent, Amazon Lex prompts the user to confirm the intent before\n      fulfilling it.</simpara>\n      ",
            "documentation": "\n         <p>If defined in the intent, Amazon Lex prompts the user to confirm the intent before\n      fulfilling it.</p>\n      ",
            "shape_name": "Prompt"
          },
          "rejectionStatement": {
            "type": "structure",
            "members": {
              "messages": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A collection of message objects.</simpara>\n      ",
                "documentation": "\n         <p>A collection of message objects.</p>\n      ",
                "required": true,
                "shape_name": "MessageList",
                "min_length": 1,
                "max_length": 15,
                "members": {
                  "type": "structure",
                  "members": {
                    "contentType": {
                      "type": "string",
                      "enum": [
                        "PlainText",
                        "SSML",
                        "CustomPayload"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                      "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentType"
                    },
                    "content": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                      "documentation": "\n         <p>The text of the message.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentString",
                      "min_length": 1,
                      "max_length": 1000
                    },
                    "groupNumber": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                      "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                      "shape_name": "GroupNumber",
                      "min_length": 1,
                      "max_length": 5
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                  "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                  "shape_name": "Message"
                }
              },
              "responseCard": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara> At runtime, if the client is using the <ulink url=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</ulink>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </simpara>\n\n      ",
                "documentation": "\n         <p> At runtime, if the client is using the <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </p>\n\n      ",
                "shape_name": "ResponseCard",
                "min_length": 1,
                "max_length": 50000
              }
            },
            "zonbookDocumentation": "\n         <simpara>If the user answers \"no\" to the question defined in <code>confirmationPrompt</code>\n      Amazon Lex responds with this statement to acknowledge that the intent was canceled. </simpara>\n      ",
            "documentation": "\n         <p>If the user answers \"no\" to the question defined in <code>confirmationPrompt</code>\n      Amazon Lex responds with this statement to acknowledge that the intent was canceled. </p>\n      ",
            "shape_name": "Statement"
          },
          "followUpPrompt": {
            "type": "structure",
            "members": {
              "prompt": {
                "type": "structure",
                "members": {
                  "messages": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</simpara>\n      ",
                    "documentation": "\n         <p>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</p>\n      ",
                    "required": true,
                    "shape_name": "MessageList",
                    "min_length": 1,
                    "max_length": 15,
                    "members": {
                      "type": "structure",
                      "members": {
                        "contentType": {
                          "type": "string",
                          "enum": [
                            "PlainText",
                            "SSML",
                            "CustomPayload"
                          ],
                          "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                          "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                          "required": true,
                          "shape_name": "ContentType"
                        },
                        "content": {
                          "type": "string",
                          "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                          "documentation": "\n         <p>The text of the message.</p>\n      ",
                          "required": true,
                          "shape_name": "ContentString",
                          "min_length": 1,
                          "max_length": 1000
                        },
                        "groupNumber": {
                          "type": "integer",
                          "box": true,
                          "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                          "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                          "shape_name": "GroupNumber",
                          "min_length": 1,
                          "max_length": 5
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                      "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                      "shape_name": "Message"
                    }
                  },
                  "maxAttempts": {
                    "type": "integer",
                    "zonbookDocumentation": "\n         <simpara>The number of times to prompt the user for information.</simpara>\n      ",
                    "documentation": "\n         <p>The number of times to prompt the user for information.</p>\n      ",
                    "required": true,
                    "shape_name": "PromptMaxAttempts",
                    "min_length": 1,
                    "max_length": 5
                  },
                  "responseCard": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <xref linkend=\"ex-resp-card\"/>. </simpara>\n      ",
                    "documentation": "\n         <p>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <a>ex-resp-card</a>. </p>\n      ",
                    "shape_name": "ResponseCard",
                    "min_length": 1,
                    "max_length": 50000
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Prompts for information from the user. </simpara>\n      ",
                "documentation": "\n         <p>Prompts for information from the user. </p>\n      ",
                "required": true,
                "shape_name": "Prompt"
              },
              "rejectionStatement": {
                "type": "structure",
                "members": {
                  "messages": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A collection of message objects.</simpara>\n      ",
                    "documentation": "\n         <p>A collection of message objects.</p>\n      ",
                    "required": true,
                    "shape_name": "MessageList",
                    "min_length": 1,
                    "max_length": 15,
                    "members": {
                      "type": "structure",
                      "members": {
                        "contentType": {
                          "type": "string",
                          "enum": [
                            "PlainText",
                            "SSML",
                            "CustomPayload"
                          ],
                          "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                          "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                          "required": true,
                          "shape_name": "ContentType"
                        },
                        "content": {
                          "type": "string",
                          "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                          "documentation": "\n         <p>The text of the message.</p>\n      ",
                          "required": true,
                          "shape_name": "ContentString",
                          "min_length": 1,
                          "max_length": 1000
                        },
                        "groupNumber": {
                          "type": "integer",
                          "box": true,
                          "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                          "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                          "shape_name": "GroupNumber",
                          "min_length": 1,
                          "max_length": 5
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                      "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                      "shape_name": "Message"
                    }
                  },
                  "responseCard": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara> At runtime, if the client is using the <ulink url=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</ulink>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </simpara>\n\n      ",
                    "documentation": "\n         <p> At runtime, if the client is using the <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </p>\n\n      ",
                    "shape_name": "ResponseCard",
                    "min_length": 1,
                    "max_length": 50000
                  }
                },
                "zonbookDocumentation": "\n         <simpara>If the user answers \"no\" to the question defined in the <code>prompt</code> field,\n      Amazon Lex responds with this statement to acknowledge that the intent was canceled. </simpara>\n      ",
                "documentation": "\n         <p>If the user answers \"no\" to the question defined in the <code>prompt</code> field,\n      Amazon Lex responds with this statement to acknowledge that the intent was canceled. </p>\n      ",
                "required": true,
                "shape_name": "Statement"
              }
            },
            "zonbookDocumentation": "\n         <simpara>If defined in the intent, Amazon Lex uses this prompt to solicit additional user activity\n      after the intent is fulfilled.</simpara>\n      ",
            "documentation": "\n         <p>If defined in the intent, Amazon Lex uses this prompt to solicit additional user activity\n      after the intent is fulfilled.</p>\n      ",
            "shape_name": "FollowUpPrompt"
          },
          "conclusionStatement": {
            "type": "structure",
            "members": {
              "messages": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A collection of message objects.</simpara>\n      ",
                "documentation": "\n         <p>A collection of message objects.</p>\n      ",
                "required": true,
                "shape_name": "MessageList",
                "min_length": 1,
                "max_length": 15,
                "members": {
                  "type": "structure",
                  "members": {
                    "contentType": {
                      "type": "string",
                      "enum": [
                        "PlainText",
                        "SSML",
                        "CustomPayload"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                      "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentType"
                    },
                    "content": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                      "documentation": "\n         <p>The text of the message.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentString",
                      "min_length": 1,
                      "max_length": 1000
                    },
                    "groupNumber": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                      "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                      "shape_name": "GroupNumber",
                      "min_length": 1,
                      "max_length": 5
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                  "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                  "shape_name": "Message"
                }
              },
              "responseCard": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara> At runtime, if the client is using the <ulink url=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</ulink>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </simpara>\n\n      ",
                "documentation": "\n         <p> At runtime, if the client is using the <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </p>\n\n      ",
                "shape_name": "ResponseCard",
                "min_length": 1,
                "max_length": 50000
              }
            },
            "zonbookDocumentation": "\n         <simpara>After the Lambda function specified in the<code>fulfillmentActivity</code>intent\n      fulfills the intent, Amazon Lex conveys this statement to the user.</simpara>\n      ",
            "documentation": "\n         <p>After the Lambda function specified in the<code>fulfillmentActivity</code>intent\n      fulfills the intent, Amazon Lex conveys this statement to the user.</p>\n      ",
            "shape_name": "Statement"
          },
          "dialogCodeHook": {
            "type": "structure",
            "members": {
              "uri": {
                "type": "string",
                "pattern": "arn:aws:lambda:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:function:[a-zA-Z0-9-_]+(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?(:[a-zA-Z0-9-_]+)?",
                "zonbookDocumentation": "\n         <simpara>The Amazon Resource Name (ARN) of the Lambda function.</simpara>\n      ",
                "documentation": "\n         <p>The Amazon Resource Name (ARN) of the Lambda function.</p>\n      ",
                "required": true,
                "shape_name": "LambdaARN",
                "min_length": 20,
                "max_length": 2048
              },
              "messageVersion": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The version of the request-response that you want Amazon Lex to use to invoke your Lambda\n      function. For more information, see <xref linkend=\"using-lambda\"/>.</simpara>\n      ",
                "documentation": "\n         <p>The version of the request-response that you want Amazon Lex to use to invoke your Lambda\n      function. For more information, see <a>using-lambda</a>.</p>\n      ",
                "required": true,
                "shape_name": "MessageVersion",
                "min_length": 1,
                "max_length": 5
              }
            },
            "zonbookDocumentation": "\n         <simpara>If defined in the intent, Amazon Lex invokes this Lambda function for each user\n      input.</simpara>\n      ",
            "documentation": "\n         <p>If defined in the intent, Amazon Lex invokes this Lambda function for each user\n      input.</p>\n      ",
            "shape_name": "CodeHook"
          },
          "fulfillmentActivity": {
            "type": "structure",
            "members": {
              "type": {
                "type": "string",
                "enum": [
                  "ReturnIntent",
                  "CodeHook"
                ],
                "zonbookDocumentation": "\n         <simpara> How the intent should be fulfilled, either by running a Lambda function or by\n      returning the slot data to the client application. </simpara>\n      ",
                "documentation": "\n         <p> How the intent should be fulfilled, either by running a Lambda function or by\n      returning the slot data to the client application. </p>\n      ",
                "required": true,
                "shape_name": "FulfillmentActivityType"
              },
              "codeHook": {
                "type": "structure",
                "members": {
                  "uri": {
                    "type": "string",
                    "pattern": "arn:aws:lambda:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:function:[a-zA-Z0-9-_]+(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?(:[a-zA-Z0-9-_]+)?",
                    "zonbookDocumentation": "\n         <simpara>The Amazon Resource Name (ARN) of the Lambda function.</simpara>\n      ",
                    "documentation": "\n         <p>The Amazon Resource Name (ARN) of the Lambda function.</p>\n      ",
                    "required": true,
                    "shape_name": "LambdaARN",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "messageVersion": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>The version of the request-response that you want Amazon Lex to use to invoke your Lambda\n      function. For more information, see <xref linkend=\"using-lambda\"/>.</simpara>\n      ",
                    "documentation": "\n         <p>The version of the request-response that you want Amazon Lex to use to invoke your Lambda\n      function. For more information, see <a>using-lambda</a>.</p>\n      ",
                    "required": true,
                    "shape_name": "MessageVersion",
                    "min_length": 1,
                    "max_length": 5
                  }
                },
                "zonbookDocumentation": "\n         <simpara> A description of the Lambda function that is run to fulfill the intent. </simpara>\n      ",
                "documentation": "\n         <p> A description of the Lambda function that is run to fulfill the intent. </p>\n      ",
                "shape_name": "CodeHook"
              }
            },
            "zonbookDocumentation": "\n         <simpara>If defined in the intent, Amazon Lex invokes this Lambda function to fulfill the intent\n      after the user provides all of the information required by the intent.</simpara>\n      ",
            "documentation": "\n         <p>If defined in the intent, Amazon Lex invokes this Lambda function to fulfill the intent\n      after the user provides all of the information required by the intent.</p>\n      ",
            "shape_name": "FulfillmentActivity"
          },
          "parentIntentSignature": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A unique identifier for the built-in intent that this intent is based on.</simpara>\n      ",
            "documentation": "\n         <p>A unique identifier for the built-in intent that this intent is based on.</p>\n      ",
            "shape_name": "BuiltinIntentSignature"
          },
          "intentToOverrideId": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara> Specifies the built-in intent that this intent overrides. For more information, see\n        <xref linkend=\"howitworks-builtins\"/>. </simpara>\n      ",
            "documentation": "\n         <p> Specifies the built-in intent that this intent overrides. For more information, see\n        <a>howitworks-builtins</a>. </p>\n      ",
            "internalonly": true,
            "shape_name": "BuiltinIntentSignature"
          },
          "lastUpdatedDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The date that the intent was updated. When you create a resource, the creation date and\n      last update dates are the same.</simpara>\n      ",
            "documentation": "\n         <p>The date that the intent was updated. When you create a resource, the creation date and\n      last update dates are the same.</p>\n      ",
            "shape_name": "Timestamp"
          },
          "createdDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The date that the intent was created.</simpara>\n      ",
            "documentation": "\n         <p>The date that the intent was created.</p>\n      ",
            "shape_name": "Timestamp"
          },
          "version": {
            "type": "string",
            "pattern": "\\$LATEST|[0-9]+",
            "zonbookDocumentation": "\n         <simpara>The version of the intent. For a new intent, the version is always\n      <code>$LATEST</code>.</simpara>\n      ",
            "documentation": "\n         <p>The version of the intent. For a new intent, the version is always\n      <code>$LATEST</code>.</p>\n      ",
            "shape_name": "Version",
            "min_length": 1,
            "max_length": 64
          },
          "checksum": {
            "type": "string",
            "zonbookDocumentation": "\n\n         <simpara>Checksum of the <code>$LATEST</code>version of the intent created or updated.</simpara>\n\n      ",
            "documentation": "\n\n         <p>Checksum of the <code>$LATEST</code>version of the intent created or updated.</p>\n\n      ",
            "shape_name": "String"
          },
          "createVersion": {
            "type": "boolean",
            "shape_name": "Boolean",
            "documentation": null
          }
        },
        "shape_name": "PutIntentResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> There was a conflict processing the request. Try your request again. </simpara>\n      ",
          "documentation": "\n         <p> There was a conflict processing the request. Try your request again. </p>\n      ",
          "shape_name": "ConflictException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> The checksum of the resource that you are trying to change does not match the checksum\n      in the request. Check the resource's checksum and try again.</simpara>\n      ",
          "documentation": "\n         <p> The checksum of the resource that you are trying to change does not match the checksum\n      in the request. Check the resource's checksum and try again.</p>\n      ",
          "shape_name": "PreconditionFailedException"
        }
      ],
      "documentation": "\n         <p>Creates an intent or replaces an existing intent.</p>\n         <p>To define the interaction between the user and your bot, you use one or more intents.\n      For a pizza ordering bot, for example, you would create an <code>OrderPizza</code> intent. </p>\n         <p>To create an intent or replace an existing intent, you must provide the\n      following:</p>\n         <ul>\n            <li>\n               <p>Intent name. For example, <code>OrderPizza</code>.</p>\n            </li>\n            <li>\n               <p>Sample utterances. For example, \"Can I order a pizza, please.\" and \"I want to order\n          a pizza.\"</p>\n            </li>\n            <li>\n               <p>Information to be gathered. You specify slot types for the information that your\n          bot will request from the user. You can specify standard slot types, such as a date or a\n          time, or custom slot types such as the size and crust of a pizza.</p>\n            </li>\n            <li>\n               <p>How the intent will be fulfilled. You can provide a Lambda function or configure\n          the intent to return the intent information to the client application. If you use a Lambda\n          function, when all of the intent information is available, Amazon Lex invokes your Lambda\n          function. If you configure your intent to return the intent information to the client\n          application. </p>\n            </li>\n         </ul>\n         <p>You can specify other optional information in the request, such as:</p>\n\n         <ul>\n            <li>\n               <p>A confirmation prompt to ask the user to confirm an intent. For example, \"Shall I\n          order your pizza?\"</p>\n            </li>\n            <li>\n               <p>A conclusion statement to send to the user after the intent has been fulfilled. For\n          example, \"I placed your pizza order.\"</p>\n            </li>\n            <li>\n               <p>A follow-up prompt that asks the user for additional activity. For example, asking\n          \"Do you want to order a drink with your pizza?\"</p>\n            </li>\n         </ul>\n         <p>If you specify an existing intent name to update the intent, Amazon Lex replaces the values\n      in the <code>$LATEST</code> version of the intent with the values in the request. Amazon Lex\n      removes fields that you don't provide in the request. If you don't specify the required\n      fields, Amazon Lex throws an exception. When you update the <code>$LATEST</code> version of an\n      intent, the <code>status</code> field of any bot that uses the <code>$LATEST</code> version of\n      the intent is set to <code>NOT_BUILT</code>.</p>\n         <p>For more information, see <a>how-it-works</a>.</p>\n         <p>This operation requires permissions for the <code>lex:PutIntent</code>\n      action.</p>\n      "
    },
    "GetIntent": {
      "name": "GetIntent",
      "http": {
        "method": "GET",
        "uri": "/intents/{name}/versions/{version}",
        "response_code": 200
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the intent. The name is case sensitive. </simpara>\n      ",
            "documentation": "\n         <p>The name of the intent. The name is case sensitive. </p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "IntentName",
            "min_length": 1,
            "max_length": 100
          },
          "version": {
            "type": "string",
            "pattern": "\\$LATEST|[0-9]+",
            "zonbookDocumentation": "\n         <simpara>The version of the intent.</simpara>\n      ",
            "documentation": "\n         <p>The version of the intent.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "Version",
            "min_length": 1,
            "max_length": 64
          }
        },
        "shape_name": "GetIntentRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the intent.</simpara>\n      ",
            "documentation": "\n         <p>The name of the intent.</p>\n      ",
            "shape_name": "IntentName",
            "min_length": 1,
            "max_length": 100
          },
          "description": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A description of the intent.</simpara>\n      ",
            "documentation": "\n         <p>A description of the intent.</p>\n      ",
            "shape_name": "Description",
            "min_length": 0,
            "max_length": 200
          },
          "slots": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of intent slots configured for the intent.</simpara>\n      ",
            "documentation": "\n         <p>An array of intent slots configured for the intent.</p>\n      ",
            "shape_name": "SlotList",
            "min_length": 0,
            "max_length": 100,
            "members": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "pattern": "^([A-Za-z](-|_|.)?)+$",
                  "zonbookDocumentation": "\n         <simpara>The name of the slot.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the slot.</p>\n      ",
                  "required": true,
                  "shape_name": "SlotName",
                  "min_length": 1,
                  "max_length": 100
                },
                "description": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A description of the slot.</simpara>\n      ",
                  "documentation": "\n         <p>A description of the slot.</p>\n      ",
                  "shape_name": "Description",
                  "min_length": 0,
                  "max_length": 200
                },
                "slotConstraint": {
                  "type": "string",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "zonbookDocumentation": "\n         <simpara>Specifies whether the slot is required or optional. </simpara>\n      ",
                  "documentation": "\n         <p>Specifies whether the slot is required or optional. </p>\n      ",
                  "required": true,
                  "shape_name": "SlotConstraint"
                },
                "slotType": {
                  "type": "string",
                  "pattern": "^((AMAZON\\.)_?|[A-Za-z]_?)+",
                  "zonbookDocumentation": "\n         <simpara>The type of the slot, either a custom slot type that you defined or one of the built-in\n      slot types.</simpara>\n      ",
                  "documentation": "\n         <p>The type of the slot, either a custom slot type that you defined or one of the built-in\n      slot types.</p>\n      ",
                  "shape_name": "CustomOrBuiltinSlotTypeName",
                  "min_length": 1,
                  "max_length": 100
                },
                "slotTypeVersion": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the slot type.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the slot type.</p>\n      ",
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                },
                "valueElicitationPrompt": {
                  "type": "structure",
                  "members": {
                    "messages": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</simpara>\n      ",
                      "documentation": "\n         <p>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</p>\n      ",
                      "required": true,
                      "shape_name": "MessageList",
                      "min_length": 1,
                      "max_length": 15,
                      "members": {
                        "type": "structure",
                        "members": {
                          "contentType": {
                            "type": "string",
                            "enum": [
                              "PlainText",
                              "SSML",
                              "CustomPayload"
                            ],
                            "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                            "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                            "required": true,
                            "shape_name": "ContentType"
                          },
                          "content": {
                            "type": "string",
                            "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                            "documentation": "\n         <p>The text of the message.</p>\n      ",
                            "required": true,
                            "shape_name": "ContentString",
                            "min_length": 1,
                            "max_length": 1000
                          },
                          "groupNumber": {
                            "type": "integer",
                            "box": true,
                            "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                            "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                            "shape_name": "GroupNumber",
                            "min_length": 1,
                            "max_length": 5
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                        "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                        "shape_name": "Message"
                      }
                    },
                    "maxAttempts": {
                      "type": "integer",
                      "zonbookDocumentation": "\n         <simpara>The number of times to prompt the user for information.</simpara>\n      ",
                      "documentation": "\n         <p>The number of times to prompt the user for information.</p>\n      ",
                      "required": true,
                      "shape_name": "PromptMaxAttempts",
                      "min_length": 1,
                      "max_length": 5
                    },
                    "responseCard": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <xref linkend=\"ex-resp-card\"/>. </simpara>\n      ",
                      "documentation": "\n         <p>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <a>ex-resp-card</a>. </p>\n      ",
                      "shape_name": "ResponseCard",
                      "min_length": 1,
                      "max_length": 50000
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The prompt that Amazon Lex uses to elicit the slot value from the user.</simpara>\n      ",
                  "documentation": "\n         <p>The prompt that Amazon Lex uses to elicit the slot value from the user.</p>\n      ",
                  "shape_name": "Prompt"
                },
                "priority": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara> Directs Lex the order in which to elicit this slot value from the user. For example,\n      if the intent has two slots with priorities 1 and 2, AWS Lex first elicits a value for the\n      slot with priority 1.</simpara>\n         <simpara>If multiple slots share the same priority, the order in which Lex elicits values is\n      arbitrary.</simpara>\n      ",
                  "documentation": "\n         <p> Directs Lex the order in which to elicit this slot value from the user. For example,\n      if the intent has two slots with priorities 1 and 2, AWS Lex first elicits a value for the\n      slot with priority 1.</p>\n         <p>If multiple slots share the same priority, the order in which Lex elicits values is\n      arbitrary.</p>\n      ",
                  "shape_name": "Priority",
                  "min_length": 0,
                  "max_length": 100
                },
                "sampleUtterances": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara> If you know a specific pattern with which users might respond to an Amazon Lex request for\n      a slot value, you can provide those utterances to improve accuracy. This is optional. In most\n      cases, Amazon Lex is capable of understanding user utterances. </simpara>\n      ",
                  "documentation": "\n         <p> If you know a specific pattern with which users might respond to an Amazon Lex request for\n      a slot value, you can provide those utterances to improve accuracy. This is optional. In most\n      cases, Amazon Lex is capable of understanding user utterances. </p>\n      ",
                  "shape_name": "SlotUtteranceList",
                  "min_length": 0,
                  "max_length": 10,
                  "members": {
                    "type": "string",
                    "shape_name": "Utterance",
                    "documentation": null,
                    "min_length": 1,
                    "max_length": 200
                  }
                },
                "responseCard": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara> A set of possible responses for the slot type used by text-based clients. A user\n      chooses an option from the response card, instead of using text to reply. </simpara>\n      ",
                  "documentation": "\n         <p> A set of possible responses for the slot type used by text-based clients. A user\n      chooses an option from the response card, instead of using text to reply. </p>\n      ",
                  "shape_name": "ResponseCard",
                  "min_length": 1,
                  "max_length": 50000
                }
              },
              "zonbookDocumentation": "\n         <simpara>Identifies the version of a specific slot.</simpara>\n      ",
              "documentation": "\n         <p>Identifies the version of a specific slot.</p>\n      ",
              "shape_name": "Slot"
            }
          },
          "sampleUtterances": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of sample utterances configured for the intent.</simpara>\n      ",
            "documentation": "\n         <p>An array of sample utterances configured for the intent.</p>\n      ",
            "shape_name": "IntentUtteranceList",
            "min_length": 0,
            "max_length": 1500,
            "members": {
              "type": "string",
              "shape_name": "Utterance",
              "documentation": null,
              "min_length": 1,
              "max_length": 200
            }
          },
          "confirmationPrompt": {
            "type": "structure",
            "members": {
              "messages": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</simpara>\n      ",
                "documentation": "\n         <p>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</p>\n      ",
                "required": true,
                "shape_name": "MessageList",
                "min_length": 1,
                "max_length": 15,
                "members": {
                  "type": "structure",
                  "members": {
                    "contentType": {
                      "type": "string",
                      "enum": [
                        "PlainText",
                        "SSML",
                        "CustomPayload"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                      "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentType"
                    },
                    "content": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                      "documentation": "\n         <p>The text of the message.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentString",
                      "min_length": 1,
                      "max_length": 1000
                    },
                    "groupNumber": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                      "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                      "shape_name": "GroupNumber",
                      "min_length": 1,
                      "max_length": 5
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                  "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                  "shape_name": "Message"
                }
              },
              "maxAttempts": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The number of times to prompt the user for information.</simpara>\n      ",
                "documentation": "\n         <p>The number of times to prompt the user for information.</p>\n      ",
                "required": true,
                "shape_name": "PromptMaxAttempts",
                "min_length": 1,
                "max_length": 5
              },
              "responseCard": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <xref linkend=\"ex-resp-card\"/>. </simpara>\n      ",
                "documentation": "\n         <p>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <a>ex-resp-card</a>. </p>\n      ",
                "shape_name": "ResponseCard",
                "min_length": 1,
                "max_length": 50000
              }
            },
            "zonbookDocumentation": "\n         <simpara>If defined in the bot, Amazon Lex uses prompt to confirm the intent before fulfilling the\n      user's request. For more information, see <xref linkend=\"PutIntent\"/>. </simpara>\n      ",
            "documentation": "\n         <p>If defined in the bot, Amazon Lex uses prompt to confirm the intent before fulfilling the\n      user's request. For more information, see <a>PutIntent</a>. </p>\n      ",
            "shape_name": "Prompt"
          },
          "rejectionStatement": {
            "type": "structure",
            "members": {
              "messages": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A collection of message objects.</simpara>\n      ",
                "documentation": "\n         <p>A collection of message objects.</p>\n      ",
                "required": true,
                "shape_name": "MessageList",
                "min_length": 1,
                "max_length": 15,
                "members": {
                  "type": "structure",
                  "members": {
                    "contentType": {
                      "type": "string",
                      "enum": [
                        "PlainText",
                        "SSML",
                        "CustomPayload"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                      "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentType"
                    },
                    "content": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                      "documentation": "\n         <p>The text of the message.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentString",
                      "min_length": 1,
                      "max_length": 1000
                    },
                    "groupNumber": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                      "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                      "shape_name": "GroupNumber",
                      "min_length": 1,
                      "max_length": 5
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                  "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                  "shape_name": "Message"
                }
              },
              "responseCard": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara> At runtime, if the client is using the <ulink url=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</ulink>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </simpara>\n\n      ",
                "documentation": "\n         <p> At runtime, if the client is using the <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </p>\n\n      ",
                "shape_name": "ResponseCard",
                "min_length": 1,
                "max_length": 50000
              }
            },
            "zonbookDocumentation": "\n         <simpara>If the user answers \"no\" to the question defined in <code>confirmationPrompt</code>,\n      Amazon Lex responds with this statement to acknowledge that the intent was canceled. </simpara>\n      ",
            "documentation": "\n         <p>If the user answers \"no\" to the question defined in <code>confirmationPrompt</code>,\n      Amazon Lex responds with this statement to acknowledge that the intent was canceled. </p>\n      ",
            "shape_name": "Statement"
          },
          "followUpPrompt": {
            "type": "structure",
            "members": {
              "prompt": {
                "type": "structure",
                "members": {
                  "messages": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</simpara>\n      ",
                    "documentation": "\n         <p>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</p>\n      ",
                    "required": true,
                    "shape_name": "MessageList",
                    "min_length": 1,
                    "max_length": 15,
                    "members": {
                      "type": "structure",
                      "members": {
                        "contentType": {
                          "type": "string",
                          "enum": [
                            "PlainText",
                            "SSML",
                            "CustomPayload"
                          ],
                          "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                          "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                          "required": true,
                          "shape_name": "ContentType"
                        },
                        "content": {
                          "type": "string",
                          "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                          "documentation": "\n         <p>The text of the message.</p>\n      ",
                          "required": true,
                          "shape_name": "ContentString",
                          "min_length": 1,
                          "max_length": 1000
                        },
                        "groupNumber": {
                          "type": "integer",
                          "box": true,
                          "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                          "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                          "shape_name": "GroupNumber",
                          "min_length": 1,
                          "max_length": 5
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                      "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                      "shape_name": "Message"
                    }
                  },
                  "maxAttempts": {
                    "type": "integer",
                    "zonbookDocumentation": "\n         <simpara>The number of times to prompt the user for information.</simpara>\n      ",
                    "documentation": "\n         <p>The number of times to prompt the user for information.</p>\n      ",
                    "required": true,
                    "shape_name": "PromptMaxAttempts",
                    "min_length": 1,
                    "max_length": 5
                  },
                  "responseCard": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <xref linkend=\"ex-resp-card\"/>. </simpara>\n      ",
                    "documentation": "\n         <p>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <a>ex-resp-card</a>. </p>\n      ",
                    "shape_name": "ResponseCard",
                    "min_length": 1,
                    "max_length": 50000
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Prompts for information from the user. </simpara>\n      ",
                "documentation": "\n         <p>Prompts for information from the user. </p>\n      ",
                "required": true,
                "shape_name": "Prompt"
              },
              "rejectionStatement": {
                "type": "structure",
                "members": {
                  "messages": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A collection of message objects.</simpara>\n      ",
                    "documentation": "\n         <p>A collection of message objects.</p>\n      ",
                    "required": true,
                    "shape_name": "MessageList",
                    "min_length": 1,
                    "max_length": 15,
                    "members": {
                      "type": "structure",
                      "members": {
                        "contentType": {
                          "type": "string",
                          "enum": [
                            "PlainText",
                            "SSML",
                            "CustomPayload"
                          ],
                          "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                          "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                          "required": true,
                          "shape_name": "ContentType"
                        },
                        "content": {
                          "type": "string",
                          "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                          "documentation": "\n         <p>The text of the message.</p>\n      ",
                          "required": true,
                          "shape_name": "ContentString",
                          "min_length": 1,
                          "max_length": 1000
                        },
                        "groupNumber": {
                          "type": "integer",
                          "box": true,
                          "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                          "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                          "shape_name": "GroupNumber",
                          "min_length": 1,
                          "max_length": 5
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                      "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                      "shape_name": "Message"
                    }
                  },
                  "responseCard": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara> At runtime, if the client is using the <ulink url=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</ulink>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </simpara>\n\n      ",
                    "documentation": "\n         <p> At runtime, if the client is using the <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </p>\n\n      ",
                    "shape_name": "ResponseCard",
                    "min_length": 1,
                    "max_length": 50000
                  }
                },
                "zonbookDocumentation": "\n         <simpara>If the user answers \"no\" to the question defined in the <code>prompt</code> field,\n      Amazon Lex responds with this statement to acknowledge that the intent was canceled. </simpara>\n      ",
                "documentation": "\n         <p>If the user answers \"no\" to the question defined in the <code>prompt</code> field,\n      Amazon Lex responds with this statement to acknowledge that the intent was canceled. </p>\n      ",
                "required": true,
                "shape_name": "Statement"
              }
            },
            "zonbookDocumentation": "\n         <simpara>If defined in the bot, Amazon Lex uses this prompt to solicit additional user activity after\n      the intent is fulfilled. For more information, see <xref linkend=\"PutIntent\"/>.</simpara>\n      ",
            "documentation": "\n         <p>If defined in the bot, Amazon Lex uses this prompt to solicit additional user activity after\n      the intent is fulfilled. For more information, see <a>PutIntent</a>.</p>\n      ",
            "shape_name": "FollowUpPrompt"
          },
          "conclusionStatement": {
            "type": "structure",
            "members": {
              "messages": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A collection of message objects.</simpara>\n      ",
                "documentation": "\n         <p>A collection of message objects.</p>\n      ",
                "required": true,
                "shape_name": "MessageList",
                "min_length": 1,
                "max_length": 15,
                "members": {
                  "type": "structure",
                  "members": {
                    "contentType": {
                      "type": "string",
                      "enum": [
                        "PlainText",
                        "SSML",
                        "CustomPayload"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                      "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentType"
                    },
                    "content": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                      "documentation": "\n         <p>The text of the message.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentString",
                      "min_length": 1,
                      "max_length": 1000
                    },
                    "groupNumber": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                      "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                      "shape_name": "GroupNumber",
                      "min_length": 1,
                      "max_length": 5
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                  "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                  "shape_name": "Message"
                }
              },
              "responseCard": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara> At runtime, if the client is using the <ulink url=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</ulink>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </simpara>\n\n      ",
                "documentation": "\n         <p> At runtime, if the client is using the <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </p>\n\n      ",
                "shape_name": "ResponseCard",
                "min_length": 1,
                "max_length": 50000
              }
            },
            "zonbookDocumentation": "\n         <simpara>After the Lambda function specified in the <code>fulfillmentActivity</code> element\n      fulfills the intent, Amazon Lex conveys this statement to the user.</simpara>\n      ",
            "documentation": "\n         <p>After the Lambda function specified in the <code>fulfillmentActivity</code> element\n      fulfills the intent, Amazon Lex conveys this statement to the user.</p>\n      ",
            "shape_name": "Statement"
          },
          "dialogCodeHook": {
            "type": "structure",
            "members": {
              "uri": {
                "type": "string",
                "pattern": "arn:aws:lambda:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:function:[a-zA-Z0-9-_]+(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?(:[a-zA-Z0-9-_]+)?",
                "zonbookDocumentation": "\n         <simpara>The Amazon Resource Name (ARN) of the Lambda function.</simpara>\n      ",
                "documentation": "\n         <p>The Amazon Resource Name (ARN) of the Lambda function.</p>\n      ",
                "required": true,
                "shape_name": "LambdaARN",
                "min_length": 20,
                "max_length": 2048
              },
              "messageVersion": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The version of the request-response that you want Amazon Lex to use to invoke your Lambda\n      function. For more information, see <xref linkend=\"using-lambda\"/>.</simpara>\n      ",
                "documentation": "\n         <p>The version of the request-response that you want Amazon Lex to use to invoke your Lambda\n      function. For more information, see <a>using-lambda</a>.</p>\n      ",
                "required": true,
                "shape_name": "MessageVersion",
                "min_length": 1,
                "max_length": 5
              }
            },
            "zonbookDocumentation": "\n         <simpara>If defined in the bot, Amazon Amazon Lex invokes this Lambda function for each user input.\n      For more information, see <xref linkend=\"PutIntent\"/>. </simpara>\n      ",
            "documentation": "\n         <p>If defined in the bot, Amazon Amazon Lex invokes this Lambda function for each user input.\n      For more information, see <a>PutIntent</a>. </p>\n      ",
            "shape_name": "CodeHook"
          },
          "fulfillmentActivity": {
            "type": "structure",
            "members": {
              "type": {
                "type": "string",
                "enum": [
                  "ReturnIntent",
                  "CodeHook"
                ],
                "zonbookDocumentation": "\n         <simpara> How the intent should be fulfilled, either by running a Lambda function or by\n      returning the slot data to the client application. </simpara>\n      ",
                "documentation": "\n         <p> How the intent should be fulfilled, either by running a Lambda function or by\n      returning the slot data to the client application. </p>\n      ",
                "required": true,
                "shape_name": "FulfillmentActivityType"
              },
              "codeHook": {
                "type": "structure",
                "members": {
                  "uri": {
                    "type": "string",
                    "pattern": "arn:aws:lambda:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:function:[a-zA-Z0-9-_]+(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?(:[a-zA-Z0-9-_]+)?",
                    "zonbookDocumentation": "\n         <simpara>The Amazon Resource Name (ARN) of the Lambda function.</simpara>\n      ",
                    "documentation": "\n         <p>The Amazon Resource Name (ARN) of the Lambda function.</p>\n      ",
                    "required": true,
                    "shape_name": "LambdaARN",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "messageVersion": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>The version of the request-response that you want Amazon Lex to use to invoke your Lambda\n      function. For more information, see <xref linkend=\"using-lambda\"/>.</simpara>\n      ",
                    "documentation": "\n         <p>The version of the request-response that you want Amazon Lex to use to invoke your Lambda\n      function. For more information, see <a>using-lambda</a>.</p>\n      ",
                    "required": true,
                    "shape_name": "MessageVersion",
                    "min_length": 1,
                    "max_length": 5
                  }
                },
                "zonbookDocumentation": "\n         <simpara> A description of the Lambda function that is run to fulfill the intent. </simpara>\n      ",
                "documentation": "\n         <p> A description of the Lambda function that is run to fulfill the intent. </p>\n      ",
                "shape_name": "CodeHook"
              }
            },
            "zonbookDocumentation": "\n         <simpara>Describes how the intent is fulfilled. For more information, see <xref linkend=\"PutIntent\"/>. </simpara>\n      ",
            "documentation": "\n         <p>Describes how the intent is fulfilled. For more information, see <a>PutIntent</a>. </p>\n      ",
            "shape_name": "FulfillmentActivity"
          },
          "parentIntentSignature": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A unique identifier for a built-in intent.</simpara>\n      ",
            "documentation": "\n         <p>A unique identifier for a built-in intent.</p>\n      ",
            "shape_name": "BuiltinIntentSignature"
          },
          "intentToOverrideId": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara> Specifies the built-in intent that this intent overrides. For more information, see\n        <xref linkend=\"howitworks-builtins\"/>. </simpara>\n      ",
            "documentation": "\n         <p> Specifies the built-in intent that this intent overrides. For more information, see\n        <a>howitworks-builtins</a>. </p>\n      ",
            "internalonly": true,
            "shape_name": "BuiltinIntentSignature"
          },
          "lastUpdatedDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The date that the intent was updated. When you create a resource, the creation date and\n      the last updated date are the same. </simpara>\n      ",
            "documentation": "\n         <p>The date that the intent was updated. When you create a resource, the creation date and\n      the last updated date are the same. </p>\n      ",
            "shape_name": "Timestamp"
          },
          "createdDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The date that the intent was created.</simpara>\n      ",
            "documentation": "\n         <p>The date that the intent was created.</p>\n      ",
            "shape_name": "Timestamp"
          },
          "version": {
            "type": "string",
            "pattern": "\\$LATEST|[0-9]+",
            "zonbookDocumentation": "\n         <simpara>The version of the intent.</simpara>\n      ",
            "documentation": "\n         <p>The version of the intent.</p>\n      ",
            "shape_name": "Version",
            "min_length": 1,
            "max_length": 64
          },
          "checksum": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Checksum of the intent.</simpara>\n      ",
            "documentation": "\n         <p>Checksum of the intent.</p>\n      ",
            "shape_name": "String"
          }
        },
        "shape_name": "GetIntentResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n         <p> Returns information about an intent. In addition to the intent name, you must specify\n      the intent version. </p>\n         <p> This operation requires permissions to perform the <code>lex:GetIntent</code> action.\n    </p>\n      "
    },
    "DeleteIntent": {
      "name": "DeleteIntent",
      "http": {
        "method": "DELETE",
        "uri": "/intents/{name}",
        "response_code": 204
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the intent. The name is case sensitive. </simpara>\n      ",
            "documentation": "\n         <p>The name of the intent. The name is case sensitive. </p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "IntentName",
            "min_length": 1,
            "max_length": 100
          }
        },
        "shape_name": "DeleteIntentRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> There was a conflict processing the request. Try your request again. </simpara>\n      ",
          "documentation": "\n         <p> There was a conflict processing the request. Try your request again. </p>\n      ",
          "shape_name": "ConflictException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        },
        {
          "type": "structure",
          "members": {
            "referenceType": {
              "type": "string",
              "enum": [
                "Intent",
                "Bot",
                "BotAlias",
                "BotChannel"
              ],
              "shape_name": "ReferenceType",
              "documentation": null
            },
            "exampleReference": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "pattern": "[a-zA-Z_]+",
                  "zonbookDocumentation": "\n         <simpara>The name of the resource that is using the resource that you are trying to\n      delete.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the resource that is using the resource that you are trying to\n      delete.</p>\n      ",
                  "shape_name": "Name",
                  "min_length": 1,
                  "max_length": 100
                },
                "version": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the resource that is using the resource that you are trying to\n      delete.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the resource that is using the resource that you are trying to\n      delete.</p>\n      ",
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                }
              },
              "zonbookDocumentation": "\n         <simpara>Describes the resource that refers to the resource that you are attempting to delete.\n      This object is returned as part of the <code>ResourceInUseException</code> exception.\n    </simpara>\n      ",
              "documentation": "\n         <p>Describes the resource that refers to the resource that you are attempting to delete.\n      This object is returned as part of the <code>ResourceInUseException</code> exception.\n    </p>\n      ",
              "shape_name": "ResourceReference"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource that you are attempting to delete is referred to by another resource. Use\n      this information to remove references to the resource that you are trying to delete.</simpara>\n         <simpara>The body of the exception contains a JSON object that describes the resource.</simpara>\n         <simpara>\n            <code>{ \"resourceType\": BOT | BOTALIAS | BOTCHANNEL | INTENT,</code>\n         </simpara>\n         <simpara>\n            <code>\"resourceReference\": {</code>\n         </simpara>\n         <simpara>\n            <code>\"name\": <emphasis>string</emphasis>, \"version\": <emphasis>string</emphasis> }\n        }</code>\n         </simpara>\n      ",
          "documentation": "\n         <p>The resource that you are attempting to delete is referred to by another resource. Use\n      this information to remove references to the resource that you are trying to delete.</p>\n         <p>The body of the exception contains a JSON object that describes the resource.</p>\n         <p>\n            <code>{ \"resourceType\": BOT | BOTALIAS | BOTCHANNEL | INTENT,</code>\n         </p>\n         <p>\n            <code>\"resourceReference\": {</code>\n         </p>\n         <p>\n            <code>\"name\": <i>string</i>, \"version\": <i>string</i> }\n        }</code>\n         </p>\n      ",
          "shape_name": "ResourceInUseException"
        }
      ],
      "documentation": "\n         <p>Deletes all versions of the intent, including the <code>$LATEST</code> version. To\n      delete a specific version of the intent, use the <a>DeleteIntentVersion</a>\n      operation.</p>\n         <p> You can delete a version of an intent only if it is not referenced. To delete an\n      intent that is referred to in one or more bots (see <a>how-it-works</a>), you must\n      remove those references first. </p>\n         <note>\n            <p> If you get the <code>ResourceInUseException</code> exception, it provides an example\n        reference that shows where the intent is referenced. To remove the reference to the intent,\n        either update the bot or delete it. If you get the same exception when you attempt to delete\n        the intent again, repeat until the intent has no references and the call to\n          <code>DeleteIntent</code> is successful. </p>\n         </note>\n\n         <p> This operation requires permission for the <code>lex:DeleteIntent</code> action.\n    </p>\n      "
    },
    "GetIntents": {
      "name": "GetIntents",
      "http": {
        "method": "GET",
        "uri": "/intents/?nameContains={nameContains}&nextToken={nextToken}&maxResults={maxResults}",
        "response_code": 200
      },
      "input": {
        "type": "structure",
        "members": {
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A pagination token that fetches the next page of intents. If the response to this API\n      call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of\n      intents, specify the pagination token in the next request. </simpara>\n      ",
            "documentation": "\n         <p>A pagination token that fetches the next page of intents. If the response to this API\n      call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of\n      intents, specify the pagination token in the next request. </p>\n      ",
            "paginationToken": true,
            "location": "uri",
            "shape_name": "NextToken"
          },
          "maxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The maximum number of intents to return in the response. The default is 10.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of intents to return in the response. The default is 10.</p>\n      ",
            "pageSize": true,
            "location": "uri",
            "shape_name": "MaxResults",
            "min_length": 1,
            "max_length": 50
          },
          "nameContains": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>Substring to match in intent names. An intent will be returned if any part of its name\n      matches the substring. For example, \"xyz\" matches both \"xyzabc\" and \"abcxyz.\"</simpara>\n      ",
            "documentation": "\n         <p>Substring to match in intent names. An intent will be returned if any part of its name\n      matches the substring. For example, \"xyz\" matches both \"xyzabc\" and \"abcxyz.\"</p>\n      ",
            "location": "uri",
            "shape_name": "IntentName",
            "min_length": 1,
            "max_length": 100
          }
        },
        "shape_name": "GetIntentsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "intents": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of <code>Intent</code> objects. For more information, see <xref linkend=\"PutBot\"/>.</simpara>\n      ",
            "documentation": "\n         <p>An array of <code>Intent</code> objects. For more information, see <a>PutBot</a>.</p>\n      ",
            "shape_name": "IntentMetadataList",
            "members": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "pattern": "^([A-Za-z]_?)+$",
                  "zonbookDocumentation": "\n         <simpara>The name of the intent.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the intent.</p>\n      ",
                  "shape_name": "IntentName",
                  "min_length": 1,
                  "max_length": 100
                },
                "description": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A description of the intent.</simpara>\n      ",
                  "documentation": "\n         <p>A description of the intent.</p>\n      ",
                  "shape_name": "Description",
                  "min_length": 0,
                  "max_length": 200
                },
                "lastUpdatedDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The date that the intent was updated. When you create an intent, the creation date and\n      last updated date are the same.</simpara>\n      ",
                  "documentation": "\n         <p>The date that the intent was updated. When you create an intent, the creation date and\n      last updated date are the same.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "createdDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The date that the intent was created.</simpara>\n      ",
                  "documentation": "\n         <p>The date that the intent was created.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "version": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the intent.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the intent.</p>\n      ",
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                }
              },
              "zonbookDocumentation": "\n         <simpara>Provides information about an intent.</simpara>\n      ",
              "documentation": "\n         <p>Provides information about an intent.</p>\n      ",
              "shape_name": "IntentMetadata"
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the response is truncated, the response includes a pagination token that you can\n      specify in your next request to fetch the next page of intents. </simpara>\n      ",
            "documentation": "\n         <p>If the response is truncated, the response includes a pagination token that you can\n      specify in your next request to fetch the next page of intents. </p>\n      ",
            "paginationToken": true,
            "shape_name": "NextToken"
          }
        },
        "shape_name": "GetIntentsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n         <p>Returns intent information as follows: </p>\n         <ul>\n            <li>\n               <p>If you specify the <code>nameContains</code> field, returns the\n            <code>$LATEST</code> version of all intents that contain the specified string.</p>\n            </li>\n            <li>\n               <p> If you don't specify the <code>nameContains</code> field, returns information\n          about the <code>$LATEST</code> version of all intents. </p>\n            </li>\n         </ul>\n         <p> The operation requires permission for the <code>lex:GetIntents</code> action.\n    </p>\n      "
    },
    "GetIntentVersions": {
      "name": "GetIntentVersions",
      "http": {
        "method": "GET",
        "uri": "/intents/{name}/versions/?nextToken={nextToken}&maxResults={maxResults}",
        "response_code": 200
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the intent for which versions should be returned.</simpara>\n      ",
            "documentation": "\n         <p>The name of the intent for which versions should be returned.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "IntentName",
            "min_length": 1,
            "max_length": 100
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A pagination token for fetching the next page of intent versions. If the response to\n      this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next\n      page of versions, specify the pagination token in the next request. </simpara>\n      ",
            "documentation": "\n         <p>A pagination token for fetching the next page of intent versions. If the response to\n      this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next\n      page of versions, specify the pagination token in the next request. </p>\n      ",
            "paginationToken": true,
            "location": "uri",
            "shape_name": "NextToken"
          },
          "maxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The maximum number of intent versions to return in the response. The default is\n      10.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of intent versions to return in the response. The default is\n      10.</p>\n      ",
            "pageSize": true,
            "location": "uri",
            "shape_name": "MaxResults",
            "min_length": 1,
            "max_length": 50
          }
        },
        "shape_name": "GetIntentVersionsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "intents": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of <code>IntentMetadata</code> objects, one for each numbered version of the\n      intent plus one for the <code>$LATEST</code> version.</simpara>\n      ",
            "documentation": "\n         <p>An array of <code>IntentMetadata</code> objects, one for each numbered version of the\n      intent plus one for the <code>$LATEST</code> version.</p>\n      ",
            "shape_name": "IntentMetadataList",
            "members": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "pattern": "^([A-Za-z]_?)+$",
                  "zonbookDocumentation": "\n         <simpara>The name of the intent.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the intent.</p>\n      ",
                  "shape_name": "IntentName",
                  "min_length": 1,
                  "max_length": 100
                },
                "description": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A description of the intent.</simpara>\n      ",
                  "documentation": "\n         <p>A description of the intent.</p>\n      ",
                  "shape_name": "Description",
                  "min_length": 0,
                  "max_length": 200
                },
                "lastUpdatedDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The date that the intent was updated. When you create an intent, the creation date and\n      last updated date are the same.</simpara>\n      ",
                  "documentation": "\n         <p>The date that the intent was updated. When you create an intent, the creation date and\n      last updated date are the same.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "createdDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The date that the intent was created.</simpara>\n      ",
                  "documentation": "\n         <p>The date that the intent was created.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "version": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the intent.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the intent.</p>\n      ",
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                }
              },
              "zonbookDocumentation": "\n         <simpara>Provides information about an intent.</simpara>\n      ",
              "documentation": "\n         <p>Provides information about an intent.</p>\n      ",
              "shape_name": "IntentMetadata"
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A pagination token for fetching the next page of intent versions. If the response to\n      this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next\n      page of versions, specify the pagination token in the next request. </simpara>\n      ",
            "documentation": "\n         <p>A pagination token for fetching the next page of intent versions. If the response to\n      this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next\n      page of versions, specify the pagination token in the next request. </p>\n      ",
            "paginationToken": true,
            "shape_name": "NextToken"
          }
        },
        "shape_name": "GetIntentVersionsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n         <p>Gets information about all of the versions of an intent.</p>\n         <p>The <code>GetIntentVersions</code> operation returns an <code>IntentMetadata</code>\n      object for each version of an intent. For example, if an intent has three numbered versions,\n      the <code>GetIntentVersions</code> operation returns four <code>IntentMetadata</code> objects\n      in the response, one for each numbered version and one for the <code>$LATEST</code> version. </p>\n         <p>The <code>GetIntentVersions</code> operation always returns at least one version, the\n        <code>$LATEST</code> version.</p>\n         <p>This operation requires permissions for the <code>lex:GetIntentVersions</code>\n      action.</p>\n      "
    },
    "CreateIntentVersion": {
      "name": "CreateIntentVersion",
      "http": {
        "method": "POST",
        "uri": "/intents/{name}/versions",
        "response_code": 201
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the intent that you want to create a new version of. The name is case\n      sensitive. </simpara>\n      ",
            "documentation": "\n         <p>The name of the intent that you want to create a new version of. The name is case\n      sensitive. </p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "IntentName",
            "min_length": 1,
            "max_length": 100
          },
          "checksum": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Checksum of the <code>$LATEST</code> version of the intent that should be used to\n      create the new version. If you specify a checksum and the <code>$LATEST</code> version of the\n      intent has a different checksum, Amazon Lex returns a <code>PreconditionFailedException</code>\n      exception and doesn't publish a new version. If you don't specify a checksum, Amazon Lex publishes\n      the <code>$LATEST</code> version.</simpara>\n      ",
            "documentation": "\n         <p>Checksum of the <code>$LATEST</code> version of the intent that should be used to\n      create the new version. If you specify a checksum and the <code>$LATEST</code> version of the\n      intent has a different checksum, Amazon Lex returns a <code>PreconditionFailedException</code>\n      exception and doesn't publish a new version. If you don't specify a checksum, Amazon Lex publishes\n      the <code>$LATEST</code> version.</p>\n      ",
            "shape_name": "String"
          }
        },
        "shape_name": "CreateIntentVersionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the intent.</simpara>\n      ",
            "documentation": "\n         <p>The name of the intent.</p>\n      ",
            "shape_name": "IntentName",
            "min_length": 1,
            "max_length": 100
          },
          "description": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A description of the intent.</simpara>\n      ",
            "documentation": "\n         <p>A description of the intent.</p>\n      ",
            "shape_name": "Description",
            "min_length": 0,
            "max_length": 200
          },
          "slots": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of slot types that defines the information required to fulfill the\n      intent.</simpara>\n      ",
            "documentation": "\n         <p>An array of slot types that defines the information required to fulfill the\n      intent.</p>\n      ",
            "shape_name": "SlotList",
            "min_length": 0,
            "max_length": 100,
            "members": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "pattern": "^([A-Za-z](-|_|.)?)+$",
                  "zonbookDocumentation": "\n         <simpara>The name of the slot.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the slot.</p>\n      ",
                  "required": true,
                  "shape_name": "SlotName",
                  "min_length": 1,
                  "max_length": 100
                },
                "description": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A description of the slot.</simpara>\n      ",
                  "documentation": "\n         <p>A description of the slot.</p>\n      ",
                  "shape_name": "Description",
                  "min_length": 0,
                  "max_length": 200
                },
                "slotConstraint": {
                  "type": "string",
                  "enum": [
                    "Required",
                    "Optional"
                  ],
                  "zonbookDocumentation": "\n         <simpara>Specifies whether the slot is required or optional. </simpara>\n      ",
                  "documentation": "\n         <p>Specifies whether the slot is required or optional. </p>\n      ",
                  "required": true,
                  "shape_name": "SlotConstraint"
                },
                "slotType": {
                  "type": "string",
                  "pattern": "^((AMAZON\\.)_?|[A-Za-z]_?)+",
                  "zonbookDocumentation": "\n         <simpara>The type of the slot, either a custom slot type that you defined or one of the built-in\n      slot types.</simpara>\n      ",
                  "documentation": "\n         <p>The type of the slot, either a custom slot type that you defined or one of the built-in\n      slot types.</p>\n      ",
                  "shape_name": "CustomOrBuiltinSlotTypeName",
                  "min_length": 1,
                  "max_length": 100
                },
                "slotTypeVersion": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the slot type.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the slot type.</p>\n      ",
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                },
                "valueElicitationPrompt": {
                  "type": "structure",
                  "members": {
                    "messages": {
                      "type": "list",
                      "zonbookDocumentation": "\n         <simpara>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</simpara>\n      ",
                      "documentation": "\n         <p>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</p>\n      ",
                      "required": true,
                      "shape_name": "MessageList",
                      "min_length": 1,
                      "max_length": 15,
                      "members": {
                        "type": "structure",
                        "members": {
                          "contentType": {
                            "type": "string",
                            "enum": [
                              "PlainText",
                              "SSML",
                              "CustomPayload"
                            ],
                            "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                            "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                            "required": true,
                            "shape_name": "ContentType"
                          },
                          "content": {
                            "type": "string",
                            "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                            "documentation": "\n         <p>The text of the message.</p>\n      ",
                            "required": true,
                            "shape_name": "ContentString",
                            "min_length": 1,
                            "max_length": 1000
                          },
                          "groupNumber": {
                            "type": "integer",
                            "box": true,
                            "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                            "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                            "shape_name": "GroupNumber",
                            "min_length": 1,
                            "max_length": 5
                          }
                        },
                        "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                        "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                        "shape_name": "Message"
                      }
                    },
                    "maxAttempts": {
                      "type": "integer",
                      "zonbookDocumentation": "\n         <simpara>The number of times to prompt the user for information.</simpara>\n      ",
                      "documentation": "\n         <p>The number of times to prompt the user for information.</p>\n      ",
                      "required": true,
                      "shape_name": "PromptMaxAttempts",
                      "min_length": 1,
                      "max_length": 5
                    },
                    "responseCard": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <xref linkend=\"ex-resp-card\"/>. </simpara>\n      ",
                      "documentation": "\n         <p>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <a>ex-resp-card</a>. </p>\n      ",
                      "shape_name": "ResponseCard",
                      "min_length": 1,
                      "max_length": 50000
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The prompt that Amazon Lex uses to elicit the slot value from the user.</simpara>\n      ",
                  "documentation": "\n         <p>The prompt that Amazon Lex uses to elicit the slot value from the user.</p>\n      ",
                  "shape_name": "Prompt"
                },
                "priority": {
                  "type": "integer",
                  "zonbookDocumentation": "\n         <simpara> Directs Lex the order in which to elicit this slot value from the user. For example,\n      if the intent has two slots with priorities 1 and 2, AWS Lex first elicits a value for the\n      slot with priority 1.</simpara>\n         <simpara>If multiple slots share the same priority, the order in which Lex elicits values is\n      arbitrary.</simpara>\n      ",
                  "documentation": "\n         <p> Directs Lex the order in which to elicit this slot value from the user. For example,\n      if the intent has two slots with priorities 1 and 2, AWS Lex first elicits a value for the\n      slot with priority 1.</p>\n         <p>If multiple slots share the same priority, the order in which Lex elicits values is\n      arbitrary.</p>\n      ",
                  "shape_name": "Priority",
                  "min_length": 0,
                  "max_length": 100
                },
                "sampleUtterances": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara> If you know a specific pattern with which users might respond to an Amazon Lex request for\n      a slot value, you can provide those utterances to improve accuracy. This is optional. In most\n      cases, Amazon Lex is capable of understanding user utterances. </simpara>\n      ",
                  "documentation": "\n         <p> If you know a specific pattern with which users might respond to an Amazon Lex request for\n      a slot value, you can provide those utterances to improve accuracy. This is optional. In most\n      cases, Amazon Lex is capable of understanding user utterances. </p>\n      ",
                  "shape_name": "SlotUtteranceList",
                  "min_length": 0,
                  "max_length": 10,
                  "members": {
                    "type": "string",
                    "shape_name": "Utterance",
                    "documentation": null,
                    "min_length": 1,
                    "max_length": 200
                  }
                },
                "responseCard": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara> A set of possible responses for the slot type used by text-based clients. A user\n      chooses an option from the response card, instead of using text to reply. </simpara>\n      ",
                  "documentation": "\n         <p> A set of possible responses for the slot type used by text-based clients. A user\n      chooses an option from the response card, instead of using text to reply. </p>\n      ",
                  "shape_name": "ResponseCard",
                  "min_length": 1,
                  "max_length": 50000
                }
              },
              "zonbookDocumentation": "\n         <simpara>Identifies the version of a specific slot.</simpara>\n      ",
              "documentation": "\n         <p>Identifies the version of a specific slot.</p>\n      ",
              "shape_name": "Slot"
            }
          },
          "sampleUtterances": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of sample utterances configured for the intent. </simpara>\n      ",
            "documentation": "\n         <p>An array of sample utterances configured for the intent. </p>\n      ",
            "shape_name": "IntentUtteranceList",
            "min_length": 0,
            "max_length": 1500,
            "members": {
              "type": "string",
              "shape_name": "Utterance",
              "documentation": null,
              "min_length": 1,
              "max_length": 200
            }
          },
          "confirmationPrompt": {
            "type": "structure",
            "members": {
              "messages": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</simpara>\n      ",
                "documentation": "\n         <p>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</p>\n      ",
                "required": true,
                "shape_name": "MessageList",
                "min_length": 1,
                "max_length": 15,
                "members": {
                  "type": "structure",
                  "members": {
                    "contentType": {
                      "type": "string",
                      "enum": [
                        "PlainText",
                        "SSML",
                        "CustomPayload"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                      "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentType"
                    },
                    "content": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                      "documentation": "\n         <p>The text of the message.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentString",
                      "min_length": 1,
                      "max_length": 1000
                    },
                    "groupNumber": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                      "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                      "shape_name": "GroupNumber",
                      "min_length": 1,
                      "max_length": 5
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                  "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                  "shape_name": "Message"
                }
              },
              "maxAttempts": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The number of times to prompt the user for information.</simpara>\n      ",
                "documentation": "\n         <p>The number of times to prompt the user for information.</p>\n      ",
                "required": true,
                "shape_name": "PromptMaxAttempts",
                "min_length": 1,
                "max_length": 5
              },
              "responseCard": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <xref linkend=\"ex-resp-card\"/>. </simpara>\n      ",
                "documentation": "\n         <p>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <a>ex-resp-card</a>. </p>\n      ",
                "shape_name": "ResponseCard",
                "min_length": 1,
                "max_length": 50000
              }
            },
            "zonbookDocumentation": "\n         <simpara>If defined, the prompt that Amazon Lex uses to confirm the user's intent before\n      fulfilling it. </simpara>\n      ",
            "documentation": "\n         <p>If defined, the prompt that Amazon Lex uses to confirm the user's intent before\n      fulfilling it. </p>\n      ",
            "shape_name": "Prompt"
          },
          "rejectionStatement": {
            "type": "structure",
            "members": {
              "messages": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A collection of message objects.</simpara>\n      ",
                "documentation": "\n         <p>A collection of message objects.</p>\n      ",
                "required": true,
                "shape_name": "MessageList",
                "min_length": 1,
                "max_length": 15,
                "members": {
                  "type": "structure",
                  "members": {
                    "contentType": {
                      "type": "string",
                      "enum": [
                        "PlainText",
                        "SSML",
                        "CustomPayload"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                      "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentType"
                    },
                    "content": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                      "documentation": "\n         <p>The text of the message.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentString",
                      "min_length": 1,
                      "max_length": 1000
                    },
                    "groupNumber": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                      "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                      "shape_name": "GroupNumber",
                      "min_length": 1,
                      "max_length": 5
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                  "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                  "shape_name": "Message"
                }
              },
              "responseCard": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara> At runtime, if the client is using the <ulink url=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</ulink>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </simpara>\n\n      ",
                "documentation": "\n         <p> At runtime, if the client is using the <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </p>\n\n      ",
                "shape_name": "ResponseCard",
                "min_length": 1,
                "max_length": 50000
              }
            },
            "zonbookDocumentation": "\n         <simpara>If the user answers \"no\" to the question defined in <code>confirmationPrompt</code>,\n      Amazon Lex responds with this statement to acknowledge that the intent was canceled. </simpara>\n      ",
            "documentation": "\n         <p>If the user answers \"no\" to the question defined in <code>confirmationPrompt</code>,\n      Amazon Lex responds with this statement to acknowledge that the intent was canceled. </p>\n      ",
            "shape_name": "Statement"
          },
          "followUpPrompt": {
            "type": "structure",
            "members": {
              "prompt": {
                "type": "structure",
                "members": {
                  "messages": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</simpara>\n      ",
                    "documentation": "\n         <p>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</p>\n      ",
                    "required": true,
                    "shape_name": "MessageList",
                    "min_length": 1,
                    "max_length": 15,
                    "members": {
                      "type": "structure",
                      "members": {
                        "contentType": {
                          "type": "string",
                          "enum": [
                            "PlainText",
                            "SSML",
                            "CustomPayload"
                          ],
                          "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                          "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                          "required": true,
                          "shape_name": "ContentType"
                        },
                        "content": {
                          "type": "string",
                          "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                          "documentation": "\n         <p>The text of the message.</p>\n      ",
                          "required": true,
                          "shape_name": "ContentString",
                          "min_length": 1,
                          "max_length": 1000
                        },
                        "groupNumber": {
                          "type": "integer",
                          "box": true,
                          "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                          "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                          "shape_name": "GroupNumber",
                          "min_length": 1,
                          "max_length": 5
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                      "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                      "shape_name": "Message"
                    }
                  },
                  "maxAttempts": {
                    "type": "integer",
                    "zonbookDocumentation": "\n         <simpara>The number of times to prompt the user for information.</simpara>\n      ",
                    "documentation": "\n         <p>The number of times to prompt the user for information.</p>\n      ",
                    "required": true,
                    "shape_name": "PromptMaxAttempts",
                    "min_length": 1,
                    "max_length": 5
                  },
                  "responseCard": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <xref linkend=\"ex-resp-card\"/>. </simpara>\n      ",
                    "documentation": "\n         <p>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <a>ex-resp-card</a>. </p>\n      ",
                    "shape_name": "ResponseCard",
                    "min_length": 1,
                    "max_length": 50000
                  }
                },
                "zonbookDocumentation": "\n         <simpara>Prompts for information from the user. </simpara>\n      ",
                "documentation": "\n         <p>Prompts for information from the user. </p>\n      ",
                "required": true,
                "shape_name": "Prompt"
              },
              "rejectionStatement": {
                "type": "structure",
                "members": {
                  "messages": {
                    "type": "list",
                    "zonbookDocumentation": "\n         <simpara>A collection of message objects.</simpara>\n      ",
                    "documentation": "\n         <p>A collection of message objects.</p>\n      ",
                    "required": true,
                    "shape_name": "MessageList",
                    "min_length": 1,
                    "max_length": 15,
                    "members": {
                      "type": "structure",
                      "members": {
                        "contentType": {
                          "type": "string",
                          "enum": [
                            "PlainText",
                            "SSML",
                            "CustomPayload"
                          ],
                          "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                          "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                          "required": true,
                          "shape_name": "ContentType"
                        },
                        "content": {
                          "type": "string",
                          "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                          "documentation": "\n         <p>The text of the message.</p>\n      ",
                          "required": true,
                          "shape_name": "ContentString",
                          "min_length": 1,
                          "max_length": 1000
                        },
                        "groupNumber": {
                          "type": "integer",
                          "box": true,
                          "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                          "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                          "shape_name": "GroupNumber",
                          "min_length": 1,
                          "max_length": 5
                        }
                      },
                      "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                      "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                      "shape_name": "Message"
                    }
                  },
                  "responseCard": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara> At runtime, if the client is using the <ulink url=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</ulink>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </simpara>\n\n      ",
                    "documentation": "\n         <p> At runtime, if the client is using the <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </p>\n\n      ",
                    "shape_name": "ResponseCard",
                    "min_length": 1,
                    "max_length": 50000
                  }
                },
                "zonbookDocumentation": "\n         <simpara>If the user answers \"no\" to the question defined in the <code>prompt</code> field,\n      Amazon Lex responds with this statement to acknowledge that the intent was canceled. </simpara>\n      ",
                "documentation": "\n         <p>If the user answers \"no\" to the question defined in the <code>prompt</code> field,\n      Amazon Lex responds with this statement to acknowledge that the intent was canceled. </p>\n      ",
                "required": true,
                "shape_name": "Statement"
              }
            },
            "zonbookDocumentation": "\n         <simpara>If defined, Amazon Lex uses this prompt to solicit additional user activity after the\n      intent is fulfilled. </simpara>\n      ",
            "documentation": "\n         <p>If defined, Amazon Lex uses this prompt to solicit additional user activity after the\n      intent is fulfilled. </p>\n      ",
            "shape_name": "FollowUpPrompt"
          },
          "conclusionStatement": {
            "type": "structure",
            "members": {
              "messages": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A collection of message objects.</simpara>\n      ",
                "documentation": "\n         <p>A collection of message objects.</p>\n      ",
                "required": true,
                "shape_name": "MessageList",
                "min_length": 1,
                "max_length": 15,
                "members": {
                  "type": "structure",
                  "members": {
                    "contentType": {
                      "type": "string",
                      "enum": [
                        "PlainText",
                        "SSML",
                        "CustomPayload"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                      "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentType"
                    },
                    "content": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                      "documentation": "\n         <p>The text of the message.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentString",
                      "min_length": 1,
                      "max_length": 1000
                    },
                    "groupNumber": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                      "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                      "shape_name": "GroupNumber",
                      "min_length": 1,
                      "max_length": 5
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                  "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                  "shape_name": "Message"
                }
              },
              "responseCard": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara> At runtime, if the client is using the <ulink url=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</ulink>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </simpara>\n\n      ",
                "documentation": "\n         <p> At runtime, if the client is using the <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </p>\n\n      ",
                "shape_name": "ResponseCard",
                "min_length": 1,
                "max_length": 50000
              }
            },
            "zonbookDocumentation": "\n         <simpara>After the Lambda function specified in the <code>fulfillmentActivity</code> field\n      fulfills the intent, Amazon Lex conveys this statement to the user. </simpara>\n      ",
            "documentation": "\n         <p>After the Lambda function specified in the <code>fulfillmentActivity</code> field\n      fulfills the intent, Amazon Lex conveys this statement to the user. </p>\n      ",
            "shape_name": "Statement"
          },
          "dialogCodeHook": {
            "type": "structure",
            "members": {
              "uri": {
                "type": "string",
                "pattern": "arn:aws:lambda:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:function:[a-zA-Z0-9-_]+(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?(:[a-zA-Z0-9-_]+)?",
                "zonbookDocumentation": "\n         <simpara>The Amazon Resource Name (ARN) of the Lambda function.</simpara>\n      ",
                "documentation": "\n         <p>The Amazon Resource Name (ARN) of the Lambda function.</p>\n      ",
                "required": true,
                "shape_name": "LambdaARN",
                "min_length": 20,
                "max_length": 2048
              },
              "messageVersion": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>The version of the request-response that you want Amazon Lex to use to invoke your Lambda\n      function. For more information, see <xref linkend=\"using-lambda\"/>.</simpara>\n      ",
                "documentation": "\n         <p>The version of the request-response that you want Amazon Lex to use to invoke your Lambda\n      function. For more information, see <a>using-lambda</a>.</p>\n      ",
                "required": true,
                "shape_name": "MessageVersion",
                "min_length": 1,
                "max_length": 5
              }
            },
            "zonbookDocumentation": "\n         <simpara>If defined, Amazon Lex invokes this Lambda function for each user input.</simpara>\n      ",
            "documentation": "\n         <p>If defined, Amazon Lex invokes this Lambda function for each user input.</p>\n      ",
            "shape_name": "CodeHook"
          },
          "fulfillmentActivity": {
            "type": "structure",
            "members": {
              "type": {
                "type": "string",
                "enum": [
                  "ReturnIntent",
                  "CodeHook"
                ],
                "zonbookDocumentation": "\n         <simpara> How the intent should be fulfilled, either by running a Lambda function or by\n      returning the slot data to the client application. </simpara>\n      ",
                "documentation": "\n         <p> How the intent should be fulfilled, either by running a Lambda function or by\n      returning the slot data to the client application. </p>\n      ",
                "required": true,
                "shape_name": "FulfillmentActivityType"
              },
              "codeHook": {
                "type": "structure",
                "members": {
                  "uri": {
                    "type": "string",
                    "pattern": "arn:aws:lambda:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:function:[a-zA-Z0-9-_]+(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?(:[a-zA-Z0-9-_]+)?",
                    "zonbookDocumentation": "\n         <simpara>The Amazon Resource Name (ARN) of the Lambda function.</simpara>\n      ",
                    "documentation": "\n         <p>The Amazon Resource Name (ARN) of the Lambda function.</p>\n      ",
                    "required": true,
                    "shape_name": "LambdaARN",
                    "min_length": 20,
                    "max_length": 2048
                  },
                  "messageVersion": {
                    "type": "string",
                    "zonbookDocumentation": "\n         <simpara>The version of the request-response that you want Amazon Lex to use to invoke your Lambda\n      function. For more information, see <xref linkend=\"using-lambda\"/>.</simpara>\n      ",
                    "documentation": "\n         <p>The version of the request-response that you want Amazon Lex to use to invoke your Lambda\n      function. For more information, see <a>using-lambda</a>.</p>\n      ",
                    "required": true,
                    "shape_name": "MessageVersion",
                    "min_length": 1,
                    "max_length": 5
                  }
                },
                "zonbookDocumentation": "\n         <simpara> A description of the Lambda function that is run to fulfill the intent. </simpara>\n      ",
                "documentation": "\n         <p> A description of the Lambda function that is run to fulfill the intent. </p>\n      ",
                "shape_name": "CodeHook"
              }
            },
            "zonbookDocumentation": "\n         <simpara> Describes how the intent is fulfilled. </simpara>\n      ",
            "documentation": "\n         <p> Describes how the intent is fulfilled. </p>\n      ",
            "shape_name": "FulfillmentActivity"
          },
          "parentIntentSignature": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A unique identifier for a built-in intent.</simpara>\n      ",
            "documentation": "\n         <p>A unique identifier for a built-in intent.</p>\n      ",
            "shape_name": "BuiltinIntentSignature"
          },
          "intentToOverrideId": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara> The built-in intent that this intent overrides. For more information, see <xref linkend=\"howitworks-builtins\"/>. </simpara>\n      ",
            "documentation": "\n         <p> The built-in intent that this intent overrides. For more information, see <a>howitworks-builtins</a>. </p>\n      ",
            "internalonly": true,
            "shape_name": "String"
          },
          "lastUpdatedDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The date that the intent was updated. </simpara>\n      ",
            "documentation": "\n         <p>The date that the intent was updated. </p>\n      ",
            "shape_name": "Timestamp"
          },
          "createdDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The date that the intent was created.</simpara>\n      ",
            "documentation": "\n         <p>The date that the intent was created.</p>\n      ",
            "shape_name": "Timestamp"
          },
          "version": {
            "type": "string",
            "pattern": "\\$LATEST|[0-9]+",
            "zonbookDocumentation": "\n         <simpara>The version number assigned to the new version of the intent.</simpara>\n      ",
            "documentation": "\n         <p>The version number assigned to the new version of the intent.</p>\n      ",
            "shape_name": "Version",
            "min_length": 1,
            "max_length": 64
          },
          "checksum": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Checksum of the intent version created.</simpara>\n      ",
            "documentation": "\n         <p>Checksum of the intent version created.</p>\n      ",
            "shape_name": "String"
          }
        },
        "shape_name": "CreateIntentVersionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> There was a conflict processing the request. Try your request again. </simpara>\n      ",
          "documentation": "\n         <p> There was a conflict processing the request. Try your request again. </p>\n      ",
          "shape_name": "ConflictException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> The checksum of the resource that you are trying to change does not match the checksum\n      in the request. Check the resource's checksum and try again.</simpara>\n      ",
          "documentation": "\n         <p> The checksum of the resource that you are trying to change does not match the checksum\n      in the request. Check the resource's checksum and try again.</p>\n      ",
          "shape_name": "PreconditionFailedException"
        }
      ],
      "documentation": "\n         <p>Creates a new version of an intent based on the <code>$LATEST</code> version of the\n      intent. If the <code>$LATEST</code> version of this intent hasn't changed since you last\n      updated it, Amazon Lex doesn't create a new version. It returns the last version you\n      created.</p>\n         <note>\n            <p>You can update only the <code>$LATEST</code> version of the intent. You can't update\n        the numbered versions that you create with the <code>CreateIntentVersion</code>\n        operation.</p>\n         </note>\n         <p> When you create a version of an intent, Amazon Lex sets the version to 1. Subsequent\n      versions increment by 1. For more information, see <a>versioning-intro</a>. </p>\n         <p>This operation requires permissions to perform the <code>lex:CreateIntentVersion</code>\n      action. </p>\n      "
    },
    "DeleteIntentVersion": {
      "name": "DeleteIntentVersion",
      "http": {
        "method": "DELETE",
        "uri": "/intents/{name}/versions/{version}",
        "response_code": 204
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the intent.</simpara>\n      ",
            "documentation": "\n         <p>The name of the intent.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "IntentName",
            "min_length": 1,
            "max_length": 100
          },
          "version": {
            "type": "string",
            "pattern": "[0-9]+",
            "zonbookDocumentation": "\n         <simpara>The version of the intent to delete. You cannot delete the <code>$LATEST</code> version\n      of the intent. To delete the <code>$LATEST</code> version, use the <xref linkend=\"DeleteIntent\"/> operation.</simpara>\n      ",
            "documentation": "\n         <p>The version of the intent to delete. You cannot delete the <code>$LATEST</code> version\n      of the intent. To delete the <code>$LATEST</code> version, use the <a>DeleteIntent</a> operation.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "NumericalVersion",
            "min_length": 1,
            "max_length": 64
          }
        },
        "shape_name": "DeleteIntentVersionRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> There was a conflict processing the request. Try your request again. </simpara>\n      ",
          "documentation": "\n         <p> There was a conflict processing the request. Try your request again. </p>\n      ",
          "shape_name": "ConflictException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        },
        {
          "type": "structure",
          "members": {
            "referenceType": {
              "type": "string",
              "enum": [
                "Intent",
                "Bot",
                "BotAlias",
                "BotChannel"
              ],
              "shape_name": "ReferenceType",
              "documentation": null
            },
            "exampleReference": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "pattern": "[a-zA-Z_]+",
                  "zonbookDocumentation": "\n         <simpara>The name of the resource that is using the resource that you are trying to\n      delete.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the resource that is using the resource that you are trying to\n      delete.</p>\n      ",
                  "shape_name": "Name",
                  "min_length": 1,
                  "max_length": 100
                },
                "version": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the resource that is using the resource that you are trying to\n      delete.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the resource that is using the resource that you are trying to\n      delete.</p>\n      ",
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                }
              },
              "zonbookDocumentation": "\n         <simpara>Describes the resource that refers to the resource that you are attempting to delete.\n      This object is returned as part of the <code>ResourceInUseException</code> exception.\n    </simpara>\n      ",
              "documentation": "\n         <p>Describes the resource that refers to the resource that you are attempting to delete.\n      This object is returned as part of the <code>ResourceInUseException</code> exception.\n    </p>\n      ",
              "shape_name": "ResourceReference"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource that you are attempting to delete is referred to by another resource. Use\n      this information to remove references to the resource that you are trying to delete.</simpara>\n         <simpara>The body of the exception contains a JSON object that describes the resource.</simpara>\n         <simpara>\n            <code>{ \"resourceType\": BOT | BOTALIAS | BOTCHANNEL | INTENT,</code>\n         </simpara>\n         <simpara>\n            <code>\"resourceReference\": {</code>\n         </simpara>\n         <simpara>\n            <code>\"name\": <emphasis>string</emphasis>, \"version\": <emphasis>string</emphasis> }\n        }</code>\n         </simpara>\n      ",
          "documentation": "\n         <p>The resource that you are attempting to delete is referred to by another resource. Use\n      this information to remove references to the resource that you are trying to delete.</p>\n         <p>The body of the exception contains a JSON object that describes the resource.</p>\n         <p>\n            <code>{ \"resourceType\": BOT | BOTALIAS | BOTCHANNEL | INTENT,</code>\n         </p>\n         <p>\n            <code>\"resourceReference\": {</code>\n         </p>\n         <p>\n            <code>\"name\": <i>string</i>, \"version\": <i>string</i> }\n        }</code>\n         </p>\n      ",
          "shape_name": "ResourceInUseException"
        }
      ],
      "documentation": "\n         <p>Deletes a specific version of an intent. To delete all versions of a intent, use the\n        <a>DeleteIntent</a> operation. </p>\n         <p>This operation requires permissions for the <code>lex:DeleteIntentVersion</code>\n      action.</p>\n      "
    },
    "PutSlotType": {
      "name": "PutSlotType",
      "http": {
        "method": "PUT",
        "uri": "/slottypes/{name}/versions/$LATEST",
        "response_code": 200
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the slot type. The name is <emphasis>not</emphasis> case sensitive. </simpara>\n         <simpara>The name can't match a built-in slot type name, or a built-in slot type name with\n      \"AMAZON.\" removed. For example, because there is a built-in slot type called\n        <code>AMAZON.DATE</code>, you can't create a custom slot type called\n      <code>DATE</code>.</simpara>\n         <simpara>For a list of built-in slot types, see <ulink url=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference\">Slot Type Reference</ulink> in the <emphasis>Alexa Skills Kit</emphasis>.</simpara>\n      ",
            "documentation": "\n         <p>The name of the slot type. The name is <i>not</i> case sensitive. </p>\n         <p>The name can't match a built-in slot type name, or a built-in slot type name with\n      \"AMAZON.\" removed. For example, because there is a built-in slot type called\n        <code>AMAZON.DATE</code>, you can't create a custom slot type called\n      <code>DATE</code>.</p>\n         <p>For a list of built-in slot types, see <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference\">Slot Type Reference</a> in the <i>Alexa Skills Kit</i>.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "SlotTypeName",
            "min_length": 1,
            "max_length": 100
          },
          "description": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A description of the slot type.</simpara>\n      ",
            "documentation": "\n         <p>A description of the slot type.</p>\n      ",
            "shape_name": "Description",
            "min_length": 0,
            "max_length": 200
          },
          "enumerationValues": {
            "type": "list",
            "zonbookDocumentation": "\n\n         <simpara>A list of <code>EnumerationValue</code> objects that defines the values that the slot\n      type can take. Each value can have a list of <code>synonyms</code>, which are additional\n      values that help train the machine learning model about the values that it resolves for a\n      slot. </simpara>\n         <simpara>When Amazon Lex resolves a slot value, it generates a resolution list that contains up to\n      five possible values for the slot. If you are using a Lambda function, this resolution list is\n      passed to the function. If you are not using a Lambda function you can choose to return the\n      value that the user entered or the first value in the resolution list as the slot value. The\n        <code>valueSelectionStrategy</code> field indicates the option to use. </simpara>\n      ",
            "documentation": "\n\n         <p>A list of <code>EnumerationValue</code> objects that defines the values that the slot\n      type can take. Each value can have a list of <code>synonyms</code>, which are additional\n      values that help train the machine learning model about the values that it resolves for a\n      slot. </p>\n         <p>When Amazon Lex resolves a slot value, it generates a resolution list that contains up to\n      five possible values for the slot. If you are using a Lambda function, this resolution list is\n      passed to the function. If you are not using a Lambda function you can choose to return the\n      value that the user entered or the first value in the resolution list as the slot value. The\n        <code>valueSelectionStrategy</code> field indicates the option to use. </p>\n      ",
            "shape_name": "EnumerationValues",
            "min_length": 1,
            "max_length": 10000,
            "members": {
              "type": "structure",
              "members": {
                "value": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The value of the slot type.</simpara>\n      ",
                  "documentation": "\n         <p>The value of the slot type.</p>\n      ",
                  "required": true,
                  "shape_name": "Value",
                  "min_length": 1,
                  "max_length": 140
                },
                "synonyms": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>Additional values related to the slot type value.</simpara>\n      ",
                  "documentation": "\n         <p>Additional values related to the slot type value.</p>\n      ",
                  "shape_name": "SynonymList",
                  "members": {
                    "type": "string",
                    "shape_name": "Value",
                    "documentation": null,
                    "min_length": 1,
                    "max_length": 140
                  }
                }
              },
              "zonbookDocumentation": "\n         <simpara>Each slot type can have a set of values. Each enumeration value represents a value the\n      slot type can take. </simpara>\n         <simpara>For example, a pizza ordering bot could have a slot type that specifies the type of\n      crust that the pizza should have. The slot type could include the values </simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>thick</simpara>\n            </listitem>\n            <listitem>\n               <simpara>thin</simpara>\n            </listitem>\n            <listitem>\n               <simpara>stuffed</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
              "documentation": "\n         <p>Each slot type can have a set of values. Each enumeration value represents a value the\n      slot type can take. </p>\n         <p>For example, a pizza ordering bot could have a slot type that specifies the type of\n      crust that the pizza should have. The slot type could include the values </p>\n         <ul>\n            <li>\n               <p>thick</p>\n            </li>\n            <li>\n               <p>thin</p>\n            </li>\n            <li>\n               <p>stuffed</p>\n            </li>\n         </ul>\n      ",
              "shape_name": "EnumerationValue"
            }
          },
          "checksum": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Identifies a specific revision of the <code>$LATEST</code> version.</simpara>\n         <simpara>When you create a new slot type, leave the <code>checksum</code> field blank. If you\n      specify a checksum you get a <code>BadRequestException</code> exception.</simpara>\n         <simpara>When you want to update a slot type, set the <code>checksum</code> field to the\n      checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify\n      the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code>\n      version, you get a <code>PreconditionFailedException</code> exception.</simpara>\n      ",
            "documentation": "\n         <p>Identifies a specific revision of the <code>$LATEST</code> version.</p>\n         <p>When you create a new slot type, leave the <code>checksum</code> field blank. If you\n      specify a checksum you get a <code>BadRequestException</code> exception.</p>\n         <p>When you want to update a slot type, set the <code>checksum</code> field to the\n      checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify\n      the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code>\n      version, you get a <code>PreconditionFailedException</code> exception.</p>\n      ",
            "shape_name": "String"
          },
          "valueSelectionStrategy": {
            "type": "string",
            "enum": [
              "ORIGINAL_VALUE",
              "TOP_RESOLUTION"
            ],
            "zonbookDocumentation": "\n         <simpara>Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The\n      field can be set to one of the following values:</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>ORIGINAL_VALUE</code> - Returns the value entered by the user, if the user\n          value is similar to the slot value.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>TOP_RESOLUTION</code> - If there is a resolution list for the slot, return\n          the first value in the resolution list as the slot type value. If there is no resolution\n          list, null is returned.</simpara>\n            </listitem>\n         </itemizedlist>\n         <simpara>If you don't specify the <code>valueSelectionStrategy</code>, the default is\n        <code>ORIGINAL_VALUE</code>.</simpara>\n      ",
            "documentation": "\n         <p>Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The\n      field can be set to one of the following values:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ORIGINAL_VALUE</code> - Returns the value entered by the user, if the user\n          value is similar to the slot value.</p>\n            </li>\n            <li>\n               <p>\n                  <code>TOP_RESOLUTION</code> - If there is a resolution list for the slot, return\n          the first value in the resolution list as the slot type value. If there is no resolution\n          list, null is returned.</p>\n            </li>\n         </ul>\n         <p>If you don't specify the <code>valueSelectionStrategy</code>, the default is\n        <code>ORIGINAL_VALUE</code>.</p>\n      ",
            "shape_name": "SlotValueSelectionStrategy"
          },
          "createVersion": {
            "type": "boolean",
            "shape_name": "Boolean",
            "documentation": null
          }
        },
        "shape_name": "PutSlotTypeRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n\n         <simpara>The name of the slot type.</simpara>\n\n      ",
            "documentation": "\n\n         <p>The name of the slot type.</p>\n\n      ",
            "shape_name": "SlotTypeName",
            "min_length": 1,
            "max_length": 100
          },
          "description": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A description of the slot type.</simpara>\n      ",
            "documentation": "\n         <p>A description of the slot type.</p>\n      ",
            "shape_name": "Description",
            "min_length": 0,
            "max_length": 200
          },
          "enumerationValues": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of <code>EnumerationValue</code> objects that defines the values that the slot\n      type can take.</simpara>\n\n      ",
            "documentation": "\n         <p>A list of <code>EnumerationValue</code> objects that defines the values that the slot\n      type can take.</p>\n\n      ",
            "shape_name": "EnumerationValues",
            "min_length": 1,
            "max_length": 10000,
            "members": {
              "type": "structure",
              "members": {
                "value": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The value of the slot type.</simpara>\n      ",
                  "documentation": "\n         <p>The value of the slot type.</p>\n      ",
                  "required": true,
                  "shape_name": "Value",
                  "min_length": 1,
                  "max_length": 140
                },
                "synonyms": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>Additional values related to the slot type value.</simpara>\n      ",
                  "documentation": "\n         <p>Additional values related to the slot type value.</p>\n      ",
                  "shape_name": "SynonymList",
                  "members": {
                    "type": "string",
                    "shape_name": "Value",
                    "documentation": null,
                    "min_length": 1,
                    "max_length": 140
                  }
                }
              },
              "zonbookDocumentation": "\n         <simpara>Each slot type can have a set of values. Each enumeration value represents a value the\n      slot type can take. </simpara>\n         <simpara>For example, a pizza ordering bot could have a slot type that specifies the type of\n      crust that the pizza should have. The slot type could include the values </simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>thick</simpara>\n            </listitem>\n            <listitem>\n               <simpara>thin</simpara>\n            </listitem>\n            <listitem>\n               <simpara>stuffed</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
              "documentation": "\n         <p>Each slot type can have a set of values. Each enumeration value represents a value the\n      slot type can take. </p>\n         <p>For example, a pizza ordering bot could have a slot type that specifies the type of\n      crust that the pizza should have. The slot type could include the values </p>\n         <ul>\n            <li>\n               <p>thick</p>\n            </li>\n            <li>\n               <p>thin</p>\n            </li>\n            <li>\n               <p>stuffed</p>\n            </li>\n         </ul>\n      ",
              "shape_name": "EnumerationValue"
            }
          },
          "lastUpdatedDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The date that the slot type was updated. When you create a slot type, the creation date\n      and last update date are the same.</simpara>\n      ",
            "documentation": "\n         <p>The date that the slot type was updated. When you create a slot type, the creation date\n      and last update date are the same.</p>\n      ",
            "shape_name": "Timestamp"
          },
          "createdDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The date that the slot type was created.</simpara>\n      ",
            "documentation": "\n         <p>The date that the slot type was created.</p>\n      ",
            "shape_name": "Timestamp"
          },
          "version": {
            "type": "string",
            "pattern": "\\$LATEST|[0-9]+",
            "zonbookDocumentation": "\n         <simpara>The version of the slot type. For a new slot type, the version is always\n        <code>$LATEST</code>. </simpara>\n      ",
            "documentation": "\n         <p>The version of the slot type. For a new slot type, the version is always\n        <code>$LATEST</code>. </p>\n      ",
            "shape_name": "Version",
            "min_length": 1,
            "max_length": 64
          },
          "checksum": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Checksum of the <code>$LATEST</code> version of the slot type.</simpara>\n      ",
            "documentation": "\n         <p>Checksum of the <code>$LATEST</code> version of the slot type.</p>\n      ",
            "shape_name": "String"
          },
          "valueSelectionStrategy": {
            "type": "string",
            "enum": [
              "ORIGINAL_VALUE",
              "TOP_RESOLUTION"
            ],
            "zonbookDocumentation": "\n         <simpara>The slot resolution strategy that Amazon Lex uses to determine the value of the slot. For\n      more information, see <xref linkend=\"PutSlotType\"/>.</simpara>\n      ",
            "documentation": "\n         <p>The slot resolution strategy that Amazon Lex uses to determine the value of the slot. For\n      more information, see <a>PutSlotType</a>.</p>\n      ",
            "shape_name": "SlotValueSelectionStrategy"
          },
          "createVersion": {
            "type": "boolean",
            "shape_name": "Boolean",
            "documentation": null
          }
        },
        "shape_name": "PutSlotTypeResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> There was a conflict processing the request. Try your request again. </simpara>\n      ",
          "documentation": "\n         <p> There was a conflict processing the request. Try your request again. </p>\n      ",
          "shape_name": "ConflictException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> The checksum of the resource that you are trying to change does not match the checksum\n      in the request. Check the resource's checksum and try again.</simpara>\n      ",
          "documentation": "\n         <p> The checksum of the resource that you are trying to change does not match the checksum\n      in the request. Check the resource's checksum and try again.</p>\n      ",
          "shape_name": "PreconditionFailedException"
        }
      ],
      "documentation": "\n         <p>Creates a custom slot type or replaces an existing custom slot type.</p>\n         <p>To create a custom slot type, specify a name for the slot type and a set of enumeration\n      values, which are the values that a slot of this type can assume. For more information, see\n        <a>how-it-works</a>.</p>\n         <p>If you specify the name of an existing slot type, the fields in the request replace the\n      existing values in the <code>$LATEST</code> version of the slot type. Amazon Lex removes the fields\n      that you don't provide in the request. If you don't specify required fields, Amazon Lex throws an\n      exception. When you update the <code>$LATEST</code> version of a slot type, if a bot uses the\n        <code>$LATEST</code> version of an intent that contains the slot type, the bot's\n        <code>status</code> field is set to <code>NOT_BUILT</code>.</p>\n\n         <p>This operation requires permissions for the <code>lex:PutSlotType</code>\n      action.</p>\n      "
    },
    "GetSlotType": {
      "name": "GetSlotType",
      "http": {
        "method": "GET",
        "uri": "/slottypes/{name}/versions/{version}",
        "response_code": 200
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the slot type. The name is case sensitive. </simpara>\n      ",
            "documentation": "\n         <p>The name of the slot type. The name is case sensitive. </p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "SlotTypeName",
            "min_length": 1,
            "max_length": 100
          },
          "version": {
            "type": "string",
            "pattern": "\\$LATEST|[0-9]+",
            "zonbookDocumentation": "\n         <simpara>The version of the slot type. </simpara>\n      ",
            "documentation": "\n         <p>The version of the slot type. </p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "Version",
            "min_length": 1,
            "max_length": 64
          }
        },
        "shape_name": "GetSlotTypeRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n\n         <simpara>The name of the slot type.</simpara>\n\n      ",
            "documentation": "\n\n         <p>The name of the slot type.</p>\n\n      ",
            "shape_name": "SlotTypeName",
            "min_length": 1,
            "max_length": 100
          },
          "description": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A description of the slot type.</simpara>\n      ",
            "documentation": "\n         <p>A description of the slot type.</p>\n      ",
            "shape_name": "Description",
            "min_length": 0,
            "max_length": 200
          },
          "enumerationValues": {
            "type": "list",
            "zonbookDocumentation": "\n\n         <simpara>A list of <code>EnumerationValue</code> objects that defines the values that the slot\n      type can take.</simpara>\n\n      ",
            "documentation": "\n\n         <p>A list of <code>EnumerationValue</code> objects that defines the values that the slot\n      type can take.</p>\n\n      ",
            "shape_name": "EnumerationValues",
            "min_length": 1,
            "max_length": 10000,
            "members": {
              "type": "structure",
              "members": {
                "value": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The value of the slot type.</simpara>\n      ",
                  "documentation": "\n         <p>The value of the slot type.</p>\n      ",
                  "required": true,
                  "shape_name": "Value",
                  "min_length": 1,
                  "max_length": 140
                },
                "synonyms": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>Additional values related to the slot type value.</simpara>\n      ",
                  "documentation": "\n         <p>Additional values related to the slot type value.</p>\n      ",
                  "shape_name": "SynonymList",
                  "members": {
                    "type": "string",
                    "shape_name": "Value",
                    "documentation": null,
                    "min_length": 1,
                    "max_length": 140
                  }
                }
              },
              "zonbookDocumentation": "\n         <simpara>Each slot type can have a set of values. Each enumeration value represents a value the\n      slot type can take. </simpara>\n         <simpara>For example, a pizza ordering bot could have a slot type that specifies the type of\n      crust that the pizza should have. The slot type could include the values </simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>thick</simpara>\n            </listitem>\n            <listitem>\n               <simpara>thin</simpara>\n            </listitem>\n            <listitem>\n               <simpara>stuffed</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
              "documentation": "\n         <p>Each slot type can have a set of values. Each enumeration value represents a value the\n      slot type can take. </p>\n         <p>For example, a pizza ordering bot could have a slot type that specifies the type of\n      crust that the pizza should have. The slot type could include the values </p>\n         <ul>\n            <li>\n               <p>thick</p>\n            </li>\n            <li>\n               <p>thin</p>\n            </li>\n            <li>\n               <p>stuffed</p>\n            </li>\n         </ul>\n      ",
              "shape_name": "EnumerationValue"
            }
          },
          "lastUpdatedDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The date that the slot type was updated. When you create a resource, the creation date\n      and last update date are the same.</simpara>\n      ",
            "documentation": "\n         <p>The date that the slot type was updated. When you create a resource, the creation date\n      and last update date are the same.</p>\n      ",
            "shape_name": "Timestamp"
          },
          "createdDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The date that the slot type was created.</simpara>\n      ",
            "documentation": "\n         <p>The date that the slot type was created.</p>\n      ",
            "shape_name": "Timestamp"
          },
          "version": {
            "type": "string",
            "pattern": "\\$LATEST|[0-9]+",
            "zonbookDocumentation": "\n         <simpara>The version of the slot type.</simpara>\n      ",
            "documentation": "\n         <p>The version of the slot type.</p>\n      ",
            "shape_name": "Version",
            "min_length": 1,
            "max_length": 64
          },
          "checksum": {
            "type": "string",
            "zonbookDocumentation": "\n\n         <simpara>Checksum of the <code>$LATEST</code> version of the slot type.</simpara>\n\n      ",
            "documentation": "\n\n         <p>Checksum of the <code>$LATEST</code> version of the slot type.</p>\n\n      ",
            "shape_name": "String"
          },
          "valueSelectionStrategy": {
            "type": "string",
            "enum": [
              "ORIGINAL_VALUE",
              "TOP_RESOLUTION"
            ],
            "zonbookDocumentation": "\n         <simpara>The strategy that Amazon Lex uses to determine the value of the slot. For more information,\n      see <xref linkend=\"PutSlotType\"/>.</simpara>\n      ",
            "documentation": "\n         <p>The strategy that Amazon Lex uses to determine the value of the slot. For more information,\n      see <a>PutSlotType</a>.</p>\n      ",
            "shape_name": "SlotValueSelectionStrategy"
          }
        },
        "shape_name": "GetSlotTypeResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n         <p>Returns information about a specific version of a slot type. In addition to specifying\n      the slot type name, you must specify the slot type version.</p>\n         <p>This operation requires permissions for the <code>lex:GetSlotType</code>\n      action.</p>\n      "
    },
    "DeleteSlotType": {
      "name": "DeleteSlotType",
      "http": {
        "method": "DELETE",
        "uri": "/slottypes/{name}",
        "response_code": 204
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the slot type. The name is case sensitive. </simpara>\n      ",
            "documentation": "\n         <p>The name of the slot type. The name is case sensitive. </p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "SlotTypeName",
            "min_length": 1,
            "max_length": 100
          }
        },
        "shape_name": "DeleteSlotTypeRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> There was a conflict processing the request. Try your request again. </simpara>\n      ",
          "documentation": "\n         <p> There was a conflict processing the request. Try your request again. </p>\n      ",
          "shape_name": "ConflictException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        },
        {
          "type": "structure",
          "members": {
            "referenceType": {
              "type": "string",
              "enum": [
                "Intent",
                "Bot",
                "BotAlias",
                "BotChannel"
              ],
              "shape_name": "ReferenceType",
              "documentation": null
            },
            "exampleReference": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "pattern": "[a-zA-Z_]+",
                  "zonbookDocumentation": "\n         <simpara>The name of the resource that is using the resource that you are trying to\n      delete.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the resource that is using the resource that you are trying to\n      delete.</p>\n      ",
                  "shape_name": "Name",
                  "min_length": 1,
                  "max_length": 100
                },
                "version": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the resource that is using the resource that you are trying to\n      delete.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the resource that is using the resource that you are trying to\n      delete.</p>\n      ",
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                }
              },
              "zonbookDocumentation": "\n         <simpara>Describes the resource that refers to the resource that you are attempting to delete.\n      This object is returned as part of the <code>ResourceInUseException</code> exception.\n    </simpara>\n      ",
              "documentation": "\n         <p>Describes the resource that refers to the resource that you are attempting to delete.\n      This object is returned as part of the <code>ResourceInUseException</code> exception.\n    </p>\n      ",
              "shape_name": "ResourceReference"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource that you are attempting to delete is referred to by another resource. Use\n      this information to remove references to the resource that you are trying to delete.</simpara>\n         <simpara>The body of the exception contains a JSON object that describes the resource.</simpara>\n         <simpara>\n            <code>{ \"resourceType\": BOT | BOTALIAS | BOTCHANNEL | INTENT,</code>\n         </simpara>\n         <simpara>\n            <code>\"resourceReference\": {</code>\n         </simpara>\n         <simpara>\n            <code>\"name\": <emphasis>string</emphasis>, \"version\": <emphasis>string</emphasis> }\n        }</code>\n         </simpara>\n      ",
          "documentation": "\n         <p>The resource that you are attempting to delete is referred to by another resource. Use\n      this information to remove references to the resource that you are trying to delete.</p>\n         <p>The body of the exception contains a JSON object that describes the resource.</p>\n         <p>\n            <code>{ \"resourceType\": BOT | BOTALIAS | BOTCHANNEL | INTENT,</code>\n         </p>\n         <p>\n            <code>\"resourceReference\": {</code>\n         </p>\n         <p>\n            <code>\"name\": <i>string</i>, \"version\": <i>string</i> }\n        }</code>\n         </p>\n      ",
          "shape_name": "ResourceInUseException"
        }
      ],
      "documentation": "\n         <p>Deletes all versions of the slot type, including the <code>$LATEST</code> version. To\n      delete a specific version of the slot type, use the <a>DeleteSlotTypeVersion</a>\n      operation.</p>\n         <p> You can delete a version of a slot type only if it is not referenced. To delete a slot\n      type that is referred to in one or more intents, you must remove those references first. </p>\n         <note>\n            <p> If you get the <code>ResourceInUseException</code> exception, the exception provides\n        an example reference that shows the intent where the slot type is referenced. To remove the\n        reference to the slot type, either update the intent or delete it. If you get the same\n        exception when you attempt to delete the slot type again, repeat until the slot type has no\n        references and the <code>DeleteSlotType</code> call is successful. </p>\n         </note>\n         <p>This operation requires permission for the <code>lex:DeleteSlotType</code>\n      action.</p>\n      "
    },
    "GetSlotTypes": {
      "name": "GetSlotTypes",
      "http": {
        "method": "GET",
        "uri": "/slottypes/?nameContains={nameContains}&nextToken={nextToken}&maxResults={maxResults}",
        "response_code": 200
      },
      "input": {
        "type": "structure",
        "members": {
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A pagination token that fetches the next page of slot types. If the response to this\n      API call is truncated, Amazon Lex returns a pagination token in the response. To fetch next page of\n      slot types, specify the pagination token in the next request.</simpara>\n      ",
            "documentation": "\n         <p>A pagination token that fetches the next page of slot types. If the response to this\n      API call is truncated, Amazon Lex returns a pagination token in the response. To fetch next page of\n      slot types, specify the pagination token in the next request.</p>\n      ",
            "paginationToken": true,
            "location": "uri",
            "shape_name": "NextToken"
          },
          "maxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The maximum number of slot types to return in the response. The default is\n      10.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of slot types to return in the response. The default is\n      10.</p>\n      ",
            "pageSize": true,
            "location": "uri",
            "shape_name": "MaxResults",
            "min_length": 1,
            "max_length": 50
          },
          "nameContains": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>Substring to match in slot type names. A slot type will be returned if any part of its\n      name matches the substring. For example, \"xyz\" matches both \"xyzabc\" and \"abcxyz.\"</simpara>\n      ",
            "documentation": "\n         <p>Substring to match in slot type names. A slot type will be returned if any part of its\n      name matches the substring. For example, \"xyz\" matches both \"xyzabc\" and \"abcxyz.\"</p>\n      ",
            "location": "uri",
            "shape_name": "SlotTypeName",
            "min_length": 1,
            "max_length": 100
          }
        },
        "shape_name": "GetSlotTypesRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "slotTypes": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of objects, one for each slot type, that provides information such as the name\n      of the slot type, the version, and a description.</simpara>\n      ",
            "documentation": "\n         <p>An array of objects, one for each slot type, that provides information such as the name\n      of the slot type, the version, and a description.</p>\n      ",
            "shape_name": "SlotTypeMetadataList",
            "members": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "pattern": "^([A-Za-z]_?)+$",
                  "zonbookDocumentation": "\n         <simpara>The name of the slot type.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the slot type.</p>\n      ",
                  "shape_name": "SlotTypeName",
                  "min_length": 1,
                  "max_length": 100
                },
                "description": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A description of the slot type.</simpara>\n      ",
                  "documentation": "\n         <p>A description of the slot type.</p>\n      ",
                  "shape_name": "Description",
                  "min_length": 0,
                  "max_length": 200
                },
                "lastUpdatedDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The date that the slot type was updated. When you create a resource, the creation date\n      and last updated date are the same. </simpara>\n      ",
                  "documentation": "\n         <p>The date that the slot type was updated. When you create a resource, the creation date\n      and last updated date are the same. </p>\n      ",
                  "shape_name": "Timestamp"
                },
                "createdDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The date that the slot type was created.</simpara>\n      ",
                  "documentation": "\n         <p>The date that the slot type was created.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "version": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the slot type.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the slot type.</p>\n      ",
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                }
              },
              "zonbookDocumentation": "\n         <simpara>Provides information about a slot type..</simpara>\n      ",
              "documentation": "\n         <p>Provides information about a slot type..</p>\n      ",
              "shape_name": "SlotTypeMetadata"
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the response is truncated, it includes a pagination token that you can specify in\n      your next request to fetch the next page of slot types.</simpara>\n      ",
            "documentation": "\n         <p>If the response is truncated, it includes a pagination token that you can specify in\n      your next request to fetch the next page of slot types.</p>\n      ",
            "paginationToken": true,
            "shape_name": "NextToken"
          }
        },
        "shape_name": "GetSlotTypesResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n         <p>Returns slot type information as follows: </p>\n         <ul>\n            <li>\n               <p>If you specify the <code>nameContains</code> field, returns the\n            <code>$LATEST</code> version of all slot types that contain the specified\n          string.</p>\n            </li>\n            <li>\n               <p> If you don't specify the <code>nameContains</code> field, returns information\n          about the <code>$LATEST</code> version of all slot types. </p>\n            </li>\n         </ul>\n         <p> The operation requires permission for the <code>lex:GetSlotTypes</code> action.\n    </p>\n      "
    },
    "GetSlotTypeVersions": {
      "name": "GetSlotTypeVersions",
      "http": {
        "method": "GET",
        "uri": "/slottypes/{name}/versions/?nextToken={nextToken}&maxResults={maxResults}",
        "response_code": 200
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the slot type for which versions should be returned.</simpara>\n      ",
            "documentation": "\n         <p>The name of the slot type for which versions should be returned.</p>\n      ",
            "location": "uri",
            "shape_name": "SlotTypeName",
            "min_length": 1,
            "max_length": 100
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A pagination token for fetching the next page of slot type versions. If the response to\n      this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next\n      page of versions, specify the pagination token in the next request. </simpara>\n      ",
            "documentation": "\n         <p>A pagination token for fetching the next page of slot type versions. If the response to\n      this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next\n      page of versions, specify the pagination token in the next request. </p>\n      ",
            "paginationToken": true,
            "location": "uri",
            "shape_name": "NextToken"
          },
          "maxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The maximum number of slot type versions to return in the response. The default is\n      10.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of slot type versions to return in the response. The default is\n      10.</p>\n      ",
            "pageSize": true,
            "location": "uri",
            "shape_name": "MaxResults",
            "min_length": 1,
            "max_length": 50
          }
        },
        "shape_name": "GetSlotTypeVersionsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "slotTypes": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of <code>SlotTypeMetadata</code> objects, one for each numbered version of the\n      slot type plus one for the <code>$LATEST</code> version.</simpara>\n      ",
            "documentation": "\n         <p>An array of <code>SlotTypeMetadata</code> objects, one for each numbered version of the\n      slot type plus one for the <code>$LATEST</code> version.</p>\n      ",
            "shape_name": "SlotTypeMetadataList",
            "members": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "pattern": "^([A-Za-z]_?)+$",
                  "zonbookDocumentation": "\n         <simpara>The name of the slot type.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the slot type.</p>\n      ",
                  "shape_name": "SlotTypeName",
                  "min_length": 1,
                  "max_length": 100
                },
                "description": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A description of the slot type.</simpara>\n      ",
                  "documentation": "\n         <p>A description of the slot type.</p>\n      ",
                  "shape_name": "Description",
                  "min_length": 0,
                  "max_length": 200
                },
                "lastUpdatedDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The date that the slot type was updated. When you create a resource, the creation date\n      and last updated date are the same. </simpara>\n      ",
                  "documentation": "\n         <p>The date that the slot type was updated. When you create a resource, the creation date\n      and last updated date are the same. </p>\n      ",
                  "shape_name": "Timestamp"
                },
                "createdDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The date that the slot type was created.</simpara>\n      ",
                  "documentation": "\n         <p>The date that the slot type was created.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "version": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the slot type.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the slot type.</p>\n      ",
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                }
              },
              "zonbookDocumentation": "\n         <simpara>Provides information about a slot type..</simpara>\n      ",
              "documentation": "\n         <p>Provides information about a slot type..</p>\n      ",
              "shape_name": "SlotTypeMetadata"
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A pagination token for fetching the next page of slot type versions. If the response to\n      this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next\n      page of versions, specify the pagination token in the next request. </simpara>\n      ",
            "documentation": "\n         <p>A pagination token for fetching the next page of slot type versions. If the response to\n      this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next\n      page of versions, specify the pagination token in the next request. </p>\n      ",
            "paginationToken": true,
            "shape_name": "NextToken"
          }
        },
        "shape_name": "GetSlotTypeVersionsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n         <p>Gets information about all versions of a slot type.</p>\n         <p>The <code>GetSlotTypeVersions</code> operation returns a <code>SlotTypeMetadata</code>\n      object for each version of a slot type. For example, if a slot type has three numbered\n      versions, the <code>GetSlotTypeVersions</code> operation returns four\n        <code>SlotTypeMetadata</code> objects in the response, one for each numbered version and one\n      for the <code>$LATEST</code> version. </p>\n         <p>The <code>GetSlotTypeVersions</code> operation always returns at least one version, the\n        <code>$LATEST</code> version.</p>\n         <p>This operation requires permissions for the <code>lex:GetSlotTypeVersions</code>\n      action.</p>\n      "
    },
    "CreateSlotTypeVersion": {
      "name": "CreateSlotTypeVersion",
      "http": {
        "method": "POST",
        "uri": "/slottypes/{name}/versions",
        "response_code": 201
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the slot type that you want to create a new version for. The name is case\n      sensitive. </simpara>\n      ",
            "documentation": "\n         <p>The name of the slot type that you want to create a new version for. The name is case\n      sensitive. </p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "SlotTypeName",
            "min_length": 1,
            "max_length": 100
          },
          "checksum": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Checksum for the <code>$LATEST</code> version of the slot type that you want to\n      publish. If you specify a checksum and the <code>$LATEST</code> version of the slot type has a\n      different checksum, Amazon Lex returns a <code>PreconditionFailedException</code> exception and\n      doesn't publish the new version. If you don't specify a checksum, Amazon Lex publishes the\n        <code>$LATEST</code> version.</simpara>\n      ",
            "documentation": "\n         <p>Checksum for the <code>$LATEST</code> version of the slot type that you want to\n      publish. If you specify a checksum and the <code>$LATEST</code> version of the slot type has a\n      different checksum, Amazon Lex returns a <code>PreconditionFailedException</code> exception and\n      doesn't publish the new version. If you don't specify a checksum, Amazon Lex publishes the\n        <code>$LATEST</code> version.</p>\n      ",
            "shape_name": "String"
          }
        },
        "shape_name": "CreateSlotTypeVersionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the slot type.</simpara>\n      ",
            "documentation": "\n         <p>The name of the slot type.</p>\n      ",
            "shape_name": "SlotTypeName",
            "min_length": 1,
            "max_length": 100
          },
          "description": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A description of the slot type.</simpara>\n      ",
            "documentation": "\n         <p>A description of the slot type.</p>\n      ",
            "shape_name": "Description",
            "min_length": 0,
            "max_length": 200
          },
          "enumerationValues": {
            "type": "list",
            "zonbookDocumentation": "\n\n         <simpara>A list of <code>EnumerationValue</code> objects that defines the values that the slot\n      type can take.</simpara>\n\n      ",
            "documentation": "\n\n         <p>A list of <code>EnumerationValue</code> objects that defines the values that the slot\n      type can take.</p>\n\n      ",
            "shape_name": "EnumerationValues",
            "min_length": 1,
            "max_length": 10000,
            "members": {
              "type": "structure",
              "members": {
                "value": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>The value of the slot type.</simpara>\n      ",
                  "documentation": "\n         <p>The value of the slot type.</p>\n      ",
                  "required": true,
                  "shape_name": "Value",
                  "min_length": 1,
                  "max_length": 140
                },
                "synonyms": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>Additional values related to the slot type value.</simpara>\n      ",
                  "documentation": "\n         <p>Additional values related to the slot type value.</p>\n      ",
                  "shape_name": "SynonymList",
                  "members": {
                    "type": "string",
                    "shape_name": "Value",
                    "documentation": null,
                    "min_length": 1,
                    "max_length": 140
                  }
                }
              },
              "zonbookDocumentation": "\n         <simpara>Each slot type can have a set of values. Each enumeration value represents a value the\n      slot type can take. </simpara>\n         <simpara>For example, a pizza ordering bot could have a slot type that specifies the type of\n      crust that the pizza should have. The slot type could include the values </simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>thick</simpara>\n            </listitem>\n            <listitem>\n               <simpara>thin</simpara>\n            </listitem>\n            <listitem>\n               <simpara>stuffed</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
              "documentation": "\n         <p>Each slot type can have a set of values. Each enumeration value represents a value the\n      slot type can take. </p>\n         <p>For example, a pizza ordering bot could have a slot type that specifies the type of\n      crust that the pizza should have. The slot type could include the values </p>\n         <ul>\n            <li>\n               <p>thick</p>\n            </li>\n            <li>\n               <p>thin</p>\n            </li>\n            <li>\n               <p>stuffed</p>\n            </li>\n         </ul>\n      ",
              "shape_name": "EnumerationValue"
            }
          },
          "lastUpdatedDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The date that the slot type was updated. When you create a resource, the creation date\n      and last update date are the same.</simpara>\n      ",
            "documentation": "\n         <p>The date that the slot type was updated. When you create a resource, the creation date\n      and last update date are the same.</p>\n      ",
            "shape_name": "Timestamp"
          },
          "createdDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The date that the slot type was created.</simpara>\n      ",
            "documentation": "\n         <p>The date that the slot type was created.</p>\n      ",
            "shape_name": "Timestamp"
          },
          "version": {
            "type": "string",
            "pattern": "\\$LATEST|[0-9]+",
            "zonbookDocumentation": "\n         <simpara>The version assigned to the new slot type version. </simpara>\n      ",
            "documentation": "\n         <p>The version assigned to the new slot type version. </p>\n      ",
            "shape_name": "Version",
            "min_length": 1,
            "max_length": 64
          },
          "checksum": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Checksum of the <code>$LATEST</code> version of the slot type.</simpara>\n      ",
            "documentation": "\n         <p>Checksum of the <code>$LATEST</code> version of the slot type.</p>\n      ",
            "shape_name": "String"
          },
          "valueSelectionStrategy": {
            "type": "string",
            "enum": [
              "ORIGINAL_VALUE",
              "TOP_RESOLUTION"
            ],
            "zonbookDocumentation": "\n         <simpara>The strategy that Amazon Lex uses to determine the value of the slot. For more information,\n      see <xref linkend=\"PutSlotType\"/>.</simpara>\n      ",
            "documentation": "\n         <p>The strategy that Amazon Lex uses to determine the value of the slot. For more information,\n      see <a>PutSlotType</a>.</p>\n      ",
            "shape_name": "SlotValueSelectionStrategy"
          }
        },
        "shape_name": "CreateSlotTypeVersionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> There was a conflict processing the request. Try your request again. </simpara>\n      ",
          "documentation": "\n         <p> There was a conflict processing the request. Try your request again. </p>\n      ",
          "shape_name": "ConflictException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> The checksum of the resource that you are trying to change does not match the checksum\n      in the request. Check the resource's checksum and try again.</simpara>\n      ",
          "documentation": "\n         <p> The checksum of the resource that you are trying to change does not match the checksum\n      in the request. Check the resource's checksum and try again.</p>\n      ",
          "shape_name": "PreconditionFailedException"
        }
      ],
      "documentation": "\n         <p>Creates a new version of a slot type based on the <code>$LATEST</code> version of the\n      specified slot type. If the <code>$LATEST</code> version of this resource has not changed\n      since the last version that you created, Amazon Lex doesn't create a new version. It returns the\n      last version that you created. </p>\n         <note>\n            <p>You can update only the <code>$LATEST</code> version of a slot type. You can't update\n        the numbered versions that you create with the <code>CreateSlotTypeVersion</code>\n        operation.</p>\n         </note>\n\n         <p>When you create a version of a slot type, Amazon Lex sets the version to 1. Subsequent\n      versions increment by 1. For more information, see <a>versioning-intro</a>. </p>\n\n         <p>This operation requires permissions for the <code>lex:CreateSlotTypeVersion</code>\n      action.</p>\n      "
    },
    "DeleteSlotTypeVersion": {
      "name": "DeleteSlotTypeVersion",
      "http": {
        "method": "DELETE",
        "uri": "/slottypes/{name}/version/{version}",
        "response_code": 204
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the slot type.</simpara>\n      ",
            "documentation": "\n         <p>The name of the slot type.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "SlotTypeName",
            "min_length": 1,
            "max_length": 100
          },
          "version": {
            "type": "string",
            "pattern": "[0-9]+",
            "zonbookDocumentation": "\n         <simpara>The version of the slot type to delete. You cannot delete the <code>$LATEST</code>\n      version of the slot type. To delete the <code>$LATEST</code> version, use the <xref linkend=\"DeleteSlotType\"/> operation.</simpara>\n      ",
            "documentation": "\n         <p>The version of the slot type to delete. You cannot delete the <code>$LATEST</code>\n      version of the slot type. To delete the <code>$LATEST</code> version, use the <a>DeleteSlotType</a> operation.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "NumericalVersion",
            "min_length": 1,
            "max_length": 64
          }
        },
        "shape_name": "DeleteSlotTypeVersionRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> There was a conflict processing the request. Try your request again. </simpara>\n      ",
          "documentation": "\n         <p> There was a conflict processing the request. Try your request again. </p>\n      ",
          "shape_name": "ConflictException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        },
        {
          "type": "structure",
          "members": {
            "referenceType": {
              "type": "string",
              "enum": [
                "Intent",
                "Bot",
                "BotAlias",
                "BotChannel"
              ],
              "shape_name": "ReferenceType",
              "documentation": null
            },
            "exampleReference": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "pattern": "[a-zA-Z_]+",
                  "zonbookDocumentation": "\n         <simpara>The name of the resource that is using the resource that you are trying to\n      delete.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the resource that is using the resource that you are trying to\n      delete.</p>\n      ",
                  "shape_name": "Name",
                  "min_length": 1,
                  "max_length": 100
                },
                "version": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the resource that is using the resource that you are trying to\n      delete.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the resource that is using the resource that you are trying to\n      delete.</p>\n      ",
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                }
              },
              "zonbookDocumentation": "\n         <simpara>Describes the resource that refers to the resource that you are attempting to delete.\n      This object is returned as part of the <code>ResourceInUseException</code> exception.\n    </simpara>\n      ",
              "documentation": "\n         <p>Describes the resource that refers to the resource that you are attempting to delete.\n      This object is returned as part of the <code>ResourceInUseException</code> exception.\n    </p>\n      ",
              "shape_name": "ResourceReference"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource that you are attempting to delete is referred to by another resource. Use\n      this information to remove references to the resource that you are trying to delete.</simpara>\n         <simpara>The body of the exception contains a JSON object that describes the resource.</simpara>\n         <simpara>\n            <code>{ \"resourceType\": BOT | BOTALIAS | BOTCHANNEL | INTENT,</code>\n         </simpara>\n         <simpara>\n            <code>\"resourceReference\": {</code>\n         </simpara>\n         <simpara>\n            <code>\"name\": <emphasis>string</emphasis>, \"version\": <emphasis>string</emphasis> }\n        }</code>\n         </simpara>\n      ",
          "documentation": "\n         <p>The resource that you are attempting to delete is referred to by another resource. Use\n      this information to remove references to the resource that you are trying to delete.</p>\n         <p>The body of the exception contains a JSON object that describes the resource.</p>\n         <p>\n            <code>{ \"resourceType\": BOT | BOTALIAS | BOTCHANNEL | INTENT,</code>\n         </p>\n         <p>\n            <code>\"resourceReference\": {</code>\n         </p>\n         <p>\n            <code>\"name\": <i>string</i>, \"version\": <i>string</i> }\n        }</code>\n         </p>\n      ",
          "shape_name": "ResourceInUseException"
        }
      ],
      "documentation": "\n         <p>Deletes a specific version of a slot type. To delete all versions of a slot type, use\n      the <a>DeleteSlotType</a> operation. </p>\n         <p>This operation requires permissions for the <code>lex:DeleteSlotTypeVersion</code>\n      action.</p>\n      "
    },
    "PutBot": {
      "name": "PutBot",
      "http": {
        "method": "PUT",
        "uri": "/bots/{name}/versions/$LATEST",
        "response_code": 200
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the bot. The name is <emphasis>not</emphasis> case sensitive. </simpara>\n      ",
            "documentation": "\n         <p>The name of the bot. The name is <i>not</i> case sensitive. </p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          },
          "description": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A description of the bot.</simpara>\n      ",
            "documentation": "\n         <p>A description of the bot.</p>\n      ",
            "shape_name": "Description",
            "min_length": 0,
            "max_length": 200
          },
          "intents": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of <code>Intent</code> objects. Each intent represents a command that a user\n      can express. For example, a pizza ordering bot might support an OrderPizza intent. For more\n      information, see <xref linkend=\"how-it-works\"/>.</simpara>\n      ",
            "documentation": "\n         <p>An array of <code>Intent</code> objects. Each intent represents a command that a user\n      can express. For example, a pizza ordering bot might support an OrderPizza intent. For more\n      information, see <a>how-it-works</a>.</p>\n      ",
            "shape_name": "IntentList",
            "members": {
              "type": "structure",
              "members": {
                "intentName": {
                  "type": "string",
                  "pattern": "^([A-Za-z]_?)+$",
                  "zonbookDocumentation": "\n         <simpara>The name of the intent.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the intent.</p>\n      ",
                  "required": true,
                  "shape_name": "IntentName",
                  "min_length": 1,
                  "max_length": 100
                },
                "intentVersion": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the intent.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the intent.</p>\n      ",
                  "required": true,
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                }
              },
              "zonbookDocumentation": "\n         <simpara>Identifies the specific version of an intent.</simpara>\n      ",
              "documentation": "\n         <p>Identifies the specific version of an intent.</p>\n      ",
              "shape_name": "Intent"
            }
          },
          "clarificationPrompt": {
            "type": "structure",
            "members": {
              "messages": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</simpara>\n      ",
                "documentation": "\n         <p>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</p>\n      ",
                "required": true,
                "shape_name": "MessageList",
                "min_length": 1,
                "max_length": 15,
                "members": {
                  "type": "structure",
                  "members": {
                    "contentType": {
                      "type": "string",
                      "enum": [
                        "PlainText",
                        "SSML",
                        "CustomPayload"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                      "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentType"
                    },
                    "content": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                      "documentation": "\n         <p>The text of the message.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentString",
                      "min_length": 1,
                      "max_length": 1000
                    },
                    "groupNumber": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                      "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                      "shape_name": "GroupNumber",
                      "min_length": 1,
                      "max_length": 5
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                  "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                  "shape_name": "Message"
                }
              },
              "maxAttempts": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The number of times to prompt the user for information.</simpara>\n      ",
                "documentation": "\n         <p>The number of times to prompt the user for information.</p>\n      ",
                "required": true,
                "shape_name": "PromptMaxAttempts",
                "min_length": 1,
                "max_length": 5
              },
              "responseCard": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <xref linkend=\"ex-resp-card\"/>. </simpara>\n      ",
                "documentation": "\n         <p>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <a>ex-resp-card</a>. </p>\n      ",
                "shape_name": "ResponseCard",
                "min_length": 1,
                "max_length": 50000
              }
            },
            "zonbookDocumentation": "\n         <simpara>When Amazon Lex doesn't understand the user's intent, it uses this message to get\n      clarification. To specify how many times Amazon Lex should repeate the clarification prompt, use\n      the <code>maxAttempts</code> field. If Amazon Lex still doesn't understand, it sends the message in\n      the <code>abortStatement</code> field. </simpara>\n         <simpara>When you create a clarification prompt, make sure that it suggests the correct response\n      from the user. for example, for a bot that orders pizza and drinks, you might create this\n      clarification prompt: \"What would you like to do? You can say 'Order a pizza' or 'Order a\n      drink.'\"</simpara>\n      ",
            "documentation": "\n         <p>When Amazon Lex doesn't understand the user's intent, it uses this message to get\n      clarification. To specify how many times Amazon Lex should repeate the clarification prompt, use\n      the <code>maxAttempts</code> field. If Amazon Lex still doesn't understand, it sends the message in\n      the <code>abortStatement</code> field. </p>\n         <p>When you create a clarification prompt, make sure that it suggests the correct response\n      from the user. for example, for a bot that orders pizza and drinks, you might create this\n      clarification prompt: \"What would you like to do? You can say 'Order a pizza' or 'Order a\n      drink.'\"</p>\n      ",
            "shape_name": "Prompt"
          },
          "abortStatement": {
            "type": "structure",
            "members": {
              "messages": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A collection of message objects.</simpara>\n      ",
                "documentation": "\n         <p>A collection of message objects.</p>\n      ",
                "required": true,
                "shape_name": "MessageList",
                "min_length": 1,
                "max_length": 15,
                "members": {
                  "type": "structure",
                  "members": {
                    "contentType": {
                      "type": "string",
                      "enum": [
                        "PlainText",
                        "SSML",
                        "CustomPayload"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                      "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentType"
                    },
                    "content": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                      "documentation": "\n         <p>The text of the message.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentString",
                      "min_length": 1,
                      "max_length": 1000
                    },
                    "groupNumber": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                      "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                      "shape_name": "GroupNumber",
                      "min_length": 1,
                      "max_length": 5
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                  "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                  "shape_name": "Message"
                }
              },
              "responseCard": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara> At runtime, if the client is using the <ulink url=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</ulink>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </simpara>\n\n      ",
                "documentation": "\n         <p> At runtime, if the client is using the <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </p>\n\n      ",
                "shape_name": "ResponseCard",
                "min_length": 1,
                "max_length": 50000
              }
            },
            "zonbookDocumentation": "\n         <simpara>When Amazon Lex can't understand the user's input in context, it tries to elicit the\n      information a few times. After that, Amazon Lex sends the message defined in\n        <code>abortStatement</code> to the user, and then aborts the conversation. To set the number\n      of retries, use the <code>valueElicitationPrompt</code> field for the slot type. </simpara>\n         <simpara>For example, in a pizza ordering bot, Amazon Lex might ask a user \"What type of crust would\n      you like?\" If the user's response is not one of the expected responses (for example, \"thin\n      crust, \"deep dish,\" etc.), Amazon Lex tries to elicit a correct response a few more times. </simpara>\n         <simpara>For example, in a pizza ordering application, <code>OrderPizza</code> might be one of\n      the intents. This intent might require the <code>CrustType</code> slot. You specify the\n        <code>valueElicitationPrompt</code> field when you create the <code>CrustType</code>\n      slot.</simpara>\n      ",
            "documentation": "\n         <p>When Amazon Lex can't understand the user's input in context, it tries to elicit the\n      information a few times. After that, Amazon Lex sends the message defined in\n        <code>abortStatement</code> to the user, and then aborts the conversation. To set the number\n      of retries, use the <code>valueElicitationPrompt</code> field for the slot type. </p>\n         <p>For example, in a pizza ordering bot, Amazon Lex might ask a user \"What type of crust would\n      you like?\" If the user's response is not one of the expected responses (for example, \"thin\n      crust, \"deep dish,\" etc.), Amazon Lex tries to elicit a correct response a few more times. </p>\n         <p>For example, in a pizza ordering application, <code>OrderPizza</code> might be one of\n      the intents. This intent might require the <code>CrustType</code> slot. You specify the\n        <code>valueElicitationPrompt</code> field when you create the <code>CrustType</code>\n      slot.</p>\n      ",
            "shape_name": "Statement"
          },
          "idleSessionTTLInSeconds": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>The maximum time in seconds that Amazon Lex retains the data gathered in a\n      conversation.</simpara>\n         <simpara>A user interaction session remains active for the amount of time specified. If no\n      conversation occurs during this time, the session expires and Amazon Lex deletes any data provided\n      before the timeout.</simpara>\n         <simpara>For example, suppose that a user chooses the OrderPizza intent, but gets sidetracked\n      halfway through placing an order. If the user doesn't complete the order within the specified\n      time, Amazon Lex discards the slot information that it gathered, and the user must start\n      over.</simpara>\n         <simpara>If you don't include the <code>idleSessionTTLInSeconds</code> element in a\n        <code>PutBot</code> operation request, Amazon Lex uses the default value. This is also true if\n      the request replaces an existing bot.</simpara>\n         <simpara>The default is 300 seconds (5 minutes).</simpara>\n      ",
            "documentation": "\n         <p>The maximum time in seconds that Amazon Lex retains the data gathered in a\n      conversation.</p>\n         <p>A user interaction session remains active for the amount of time specified. If no\n      conversation occurs during this time, the session expires and Amazon Lex deletes any data provided\n      before the timeout.</p>\n         <p>For example, suppose that a user chooses the OrderPizza intent, but gets sidetracked\n      halfway through placing an order. If the user doesn't complete the order within the specified\n      time, Amazon Lex discards the slot information that it gathered, and the user must start\n      over.</p>\n         <p>If you don't include the <code>idleSessionTTLInSeconds</code> element in a\n        <code>PutBot</code> operation request, Amazon Lex uses the default value. This is also true if\n      the request replaces an existing bot.</p>\n         <p>The default is 300 seconds (5 minutes).</p>\n      ",
            "shape_name": "SessionTTL",
            "min_length": 60,
            "max_length": 86400
          },
          "voiceId": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The Amazon Polly voice ID that you want Amazon Lex to use for voice interactions with the\n      user. The locale configured for the voice must match the locale of the bot. For more\n      information, see <ulink url=\"http://docs.aws.amazon.com/polly/latest/dg/voicelist.html\">Available Voices</ulink> in the <emphasis>Amazon Polly Developer\n      Guide</emphasis>.</simpara>\n      ",
            "documentation": "\n         <p>The Amazon Polly voice ID that you want Amazon Lex to use for voice interactions with the\n      user. The locale configured for the voice must match the locale of the bot. For more\n      information, see <a href=\"http://docs.aws.amazon.com/polly/latest/dg/voicelist.html\">Available Voices</a> in the <i>Amazon Polly Developer\n      Guide</i>.</p>\n      ",
            "shape_name": "String"
          },
          "checksum": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Identifies a specific revision of the <code>$LATEST</code> version.</simpara>\n         <simpara>When you create a new bot, leave the <code>checksum</code> field blank. If you specify\n      a checksum you get a <code>BadRequestException</code> exception.</simpara>\n         <simpara>When you want to update a bot, set the <code>checksum</code> field to the checksum of\n      the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code>\n        checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version,\n      you get a <code>PreconditionFailedException</code> exception.</simpara>\n      ",
            "documentation": "\n         <p>Identifies a specific revision of the <code>$LATEST</code> version.</p>\n         <p>When you create a new bot, leave the <code>checksum</code> field blank. If you specify\n      a checksum you get a <code>BadRequestException</code> exception.</p>\n         <p>When you want to update a bot, set the <code>checksum</code> field to the checksum of\n      the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code>\n        checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version,\n      you get a <code>PreconditionFailedException</code> exception.</p>\n      ",
            "shape_name": "String"
          },
          "processBehavior": {
            "type": "string",
            "enum": [
              "SAVE",
              "BUILD"
            ],
            "zonbookDocumentation": "\n         <simpara>If you set the <code>processBehavior</code> element to <code>BUILD</code>, Amazon Lex builds\n      the bot so that it can be run. If you set the element to <code>SAVE</code> Amazon Lex saves the bot,\n      but doesn't build it. </simpara>\n         <simpara>If you don't specify this value, the default value is <code>BUILD</code>.</simpara>\n      ",
            "documentation": "\n         <p>If you set the <code>processBehavior</code> element to <code>BUILD</code>, Amazon Lex builds\n      the bot so that it can be run. If you set the element to <code>SAVE</code> Amazon Lex saves the bot,\n      but doesn't build it. </p>\n         <p>If you don't specify this value, the default value is <code>BUILD</code>.</p>\n      ",
            "shape_name": "ProcessBehavior"
          },
          "locale": {
            "type": "string",
            "enum": [
              "en-US",
              "en-GB",
              "de-DE"
            ],
            "zonbookDocumentation": "\n         <simpara> Specifies the target locale for the bot. Any intent used in the bot must be compatible\n      with the locale of the bot. </simpara>\n\n         <simpara>The default is <code>en-US</code>.</simpara>\n      ",
            "documentation": "\n         <p> Specifies the target locale for the bot. Any intent used in the bot must be compatible\n      with the locale of the bot. </p>\n\n         <p>The default is <code>en-US</code>.</p>\n      ",
            "required": true,
            "shape_name": "Locale"
          },
          "childDirected": {
            "type": "boolean",
            "zonbookDocumentation": "\n    \n         <simpara>For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify\n      whether your use of Amazon Lex is related to a website, program, or other application that is\n      directed or targeted, in whole or in part, to children under age 13 and subject to the\n      Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or\n        <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code>\n      in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <emphasis role=\"bold\">is</emphasis> related to a website, program, or other application that is\n      directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By\n      specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your\n      use of Amazon Lex <emphasis role=\"bold\">is not</emphasis> related to a website, program, or other\n      application that is directed or targeted, in whole or in part, to children under age 13 and\n      subject to COPPA. You may not specify a default value for the <code>childDirected</code> field\n      that does not accurately reflect whether your use of Amazon Lex is related to a website, program,\n      or other application that is directed or targeted, in whole or in part, to children under age\n      13 and subject to COPPA.</simpara>\n         <simpara>If your use of Amazon Lex relates to a website, program, or other application that is\n      directed in whole or in part, to children under age 13, you must obtain any required\n      verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in\n      connection with websites, programs, or other applications that are directed or targeted, in\n      whole or in part, to children under age 13, see the <ulink url=\"https://aws.amazon.com/lex/faqs#data-security\">Amazon Lex FAQ.</ulink>\n         </simpara>\n      ",
            "documentation": "\n    \n         <p>For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify\n      whether your use of Amazon Lex is related to a website, program, or other application that is\n      directed or targeted, in whole or in part, to children under age 13 and subject to the\n      Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or\n        <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code>\n      in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is</b> related to a website, program, or other application that is\n      directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By\n      specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your\n      use of Amazon Lex <b>is not</b> related to a website, program, or other\n      application that is directed or targeted, in whole or in part, to children under age 13 and\n      subject to COPPA. You may not specify a default value for the <code>childDirected</code> field\n      that does not accurately reflect whether your use of Amazon Lex is related to a website, program,\n      or other application that is directed or targeted, in whole or in part, to children under age\n      13 and subject to COPPA.</p>\n         <p>If your use of Amazon Lex relates to a website, program, or other application that is\n      directed in whole or in part, to children under age 13, you must obtain any required\n      verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in\n      connection with websites, programs, or other applications that are directed or targeted, in\n      whole or in part, to children under age 13, see the <a href=\"https://aws.amazon.com/lex/faqs#data-security\">Amazon Lex FAQ.</a>\n         </p>\n      ",
            "required": true,
            "shape_name": "Boolean"
          },
          "createVersion": {
            "type": "boolean",
            "shape_name": "Boolean",
            "documentation": null
          }
        },
        "shape_name": "PutBotRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the bot.</simpara>\n      ",
            "documentation": "\n         <p>The name of the bot.</p>\n      ",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          },
          "description": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A description of the bot.</simpara>\n      ",
            "documentation": "\n         <p>A description of the bot.</p>\n      ",
            "shape_name": "Description",
            "min_length": 0,
            "max_length": 200
          },
          "intents": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of <code>Intent</code> objects. For more information, see <xref linkend=\"PutBot\"/>.</simpara>\n      ",
            "documentation": "\n         <p>An array of <code>Intent</code> objects. For more information, see <a>PutBot</a>.</p>\n      ",
            "shape_name": "IntentList",
            "members": {
              "type": "structure",
              "members": {
                "intentName": {
                  "type": "string",
                  "pattern": "^([A-Za-z]_?)+$",
                  "zonbookDocumentation": "\n         <simpara>The name of the intent.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the intent.</p>\n      ",
                  "required": true,
                  "shape_name": "IntentName",
                  "min_length": 1,
                  "max_length": 100
                },
                "intentVersion": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the intent.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the intent.</p>\n      ",
                  "required": true,
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                }
              },
              "zonbookDocumentation": "\n         <simpara>Identifies the specific version of an intent.</simpara>\n      ",
              "documentation": "\n         <p>Identifies the specific version of an intent.</p>\n      ",
              "shape_name": "Intent"
            }
          },
          "clarificationPrompt": {
            "type": "structure",
            "members": {
              "messages": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</simpara>\n      ",
                "documentation": "\n         <p>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</p>\n      ",
                "required": true,
                "shape_name": "MessageList",
                "min_length": 1,
                "max_length": 15,
                "members": {
                  "type": "structure",
                  "members": {
                    "contentType": {
                      "type": "string",
                      "enum": [
                        "PlainText",
                        "SSML",
                        "CustomPayload"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                      "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentType"
                    },
                    "content": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                      "documentation": "\n         <p>The text of the message.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentString",
                      "min_length": 1,
                      "max_length": 1000
                    },
                    "groupNumber": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                      "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                      "shape_name": "GroupNumber",
                      "min_length": 1,
                      "max_length": 5
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                  "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                  "shape_name": "Message"
                }
              },
              "maxAttempts": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The number of times to prompt the user for information.</simpara>\n      ",
                "documentation": "\n         <p>The number of times to prompt the user for information.</p>\n      ",
                "required": true,
                "shape_name": "PromptMaxAttempts",
                "min_length": 1,
                "max_length": 5
              },
              "responseCard": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <xref linkend=\"ex-resp-card\"/>. </simpara>\n      ",
                "documentation": "\n         <p>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <a>ex-resp-card</a>. </p>\n      ",
                "shape_name": "ResponseCard",
                "min_length": 1,
                "max_length": 50000
              }
            },
            "zonbookDocumentation": "\n         <simpara> The prompts that Amazon Lex uses when it doesn't understand the user's intent. For more\n      information, see <xref linkend=\"PutBot\"/>. </simpara>\n      ",
            "documentation": "\n         <p> The prompts that Amazon Lex uses when it doesn't understand the user's intent. For more\n      information, see <a>PutBot</a>. </p>\n      ",
            "shape_name": "Prompt"
          },
          "abortStatement": {
            "type": "structure",
            "members": {
              "messages": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A collection of message objects.</simpara>\n      ",
                "documentation": "\n         <p>A collection of message objects.</p>\n      ",
                "required": true,
                "shape_name": "MessageList",
                "min_length": 1,
                "max_length": 15,
                "members": {
                  "type": "structure",
                  "members": {
                    "contentType": {
                      "type": "string",
                      "enum": [
                        "PlainText",
                        "SSML",
                        "CustomPayload"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                      "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentType"
                    },
                    "content": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                      "documentation": "\n         <p>The text of the message.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentString",
                      "min_length": 1,
                      "max_length": 1000
                    },
                    "groupNumber": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                      "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                      "shape_name": "GroupNumber",
                      "min_length": 1,
                      "max_length": 5
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                  "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                  "shape_name": "Message"
                }
              },
              "responseCard": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara> At runtime, if the client is using the <ulink url=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</ulink>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </simpara>\n\n      ",
                "documentation": "\n         <p> At runtime, if the client is using the <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </p>\n\n      ",
                "shape_name": "ResponseCard",
                "min_length": 1,
                "max_length": 50000
              }
            },
            "zonbookDocumentation": "\n         <simpara>The message that Amazon Lex uses to abort a conversation. For more information, see <xref linkend=\"PutBot\"/>.</simpara>\n      ",
            "documentation": "\n         <p>The message that Amazon Lex uses to abort a conversation. For more information, see <a>PutBot</a>.</p>\n      ",
            "shape_name": "Statement"
          },
          "status": {
            "type": "string",
            "enum": [
              "BUILDING",
              "READY",
              "READY_BASIC_TESTING",
              "FAILED",
              "NOT_BUILT"
            ],
            "zonbookDocumentation": "\n         <simpara> When you send a request to create a bot with <code>processBehavior</code> set to\n        <code>BUILD</code>, Amazon Lex sets the <code>status</code> response element to\n        <code>BUILDING</code>. After Amazon Lex builds the bot, it sets <code>status</code> to\n        <code>READY</code>. If Amazon Lex can't build the bot, Amazon Lex sets <code>status</code> to\n        <code>FAILED</code>. Amazon Lex returns the reason for the failure in the\n        <code>failureReason</code> response element. </simpara>\n         <simpara>When you set <code>processBehavior</code>to <code>SAVE</code>, Amazon Lex sets the status\n      code to <code>NOT BUILT</code>.</simpara>\n      ",
            "documentation": "\n         <p> When you send a request to create a bot with <code>processBehavior</code> set to\n        <code>BUILD</code>, Amazon Lex sets the <code>status</code> response element to\n        <code>BUILDING</code>. After Amazon Lex builds the bot, it sets <code>status</code> to\n        <code>READY</code>. If Amazon Lex can't build the bot, Amazon Lex sets <code>status</code> to\n        <code>FAILED</code>. Amazon Lex returns the reason for the failure in the\n        <code>failureReason</code> response element. </p>\n         <p>When you set <code>processBehavior</code>to <code>SAVE</code>, Amazon Lex sets the status\n      code to <code>NOT BUILT</code>.</p>\n      ",
            "shape_name": "Status"
          },
          "failureReason": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If <code>status</code> is <code>FAILED</code>, Amazon Lex provides the reason that it failed\n      to build the bot.</simpara>\n      ",
            "documentation": "\n         <p>If <code>status</code> is <code>FAILED</code>, Amazon Lex provides the reason that it failed\n      to build the bot.</p>\n      ",
            "shape_name": "String"
          },
          "lastUpdatedDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The date that the bot was updated. When you create a resource, the creation date and\n      last updated date are the same.</simpara>\n      ",
            "documentation": "\n         <p>The date that the bot was updated. When you create a resource, the creation date and\n      last updated date are the same.</p>\n      ",
            "shape_name": "Timestamp"
          },
          "createdDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The date that the bot was created.</simpara>\n      ",
            "documentation": "\n         <p>The date that the bot was created.</p>\n      ",
            "shape_name": "Timestamp"
          },
          "idleSessionTTLInSeconds": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>The maximum length of time that Amazon Lex retains the data gathered in a conversation. For\n      more information, see <xref linkend=\"PutBot\"/>.</simpara>\n      ",
            "documentation": "\n         <p>The maximum length of time that Amazon Lex retains the data gathered in a conversation. For\n      more information, see <a>PutBot</a>.</p>\n      ",
            "shape_name": "SessionTTL",
            "min_length": 60,
            "max_length": 86400
          },
          "voiceId": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user. For more\n      information, see <xref linkend=\"PutBot\"/>.</simpara>\n      ",
            "documentation": "\n         <p>The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user. For more\n      information, see <a>PutBot</a>.</p>\n      ",
            "shape_name": "String"
          },
          "checksum": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Checksum of the bot that you created.</simpara>\n      ",
            "documentation": "\n         <p>Checksum of the bot that you created.</p>\n      ",
            "shape_name": "String"
          },
          "version": {
            "type": "string",
            "pattern": "\\$LATEST|[0-9]+",
            "zonbookDocumentation": "\n         <simpara>The version of the bot. For a new bot, the version is always\n      <code>$LATEST</code>.</simpara>\n      ",
            "documentation": "\n         <p>The version of the bot. For a new bot, the version is always\n      <code>$LATEST</code>.</p>\n      ",
            "shape_name": "Version",
            "min_length": 1,
            "max_length": 64
          },
          "locale": {
            "type": "string",
            "enum": [
              "en-US",
              "en-GB",
              "de-DE"
            ],
            "zonbookDocumentation": "\n         <simpara> The target locale for the bot. </simpara>\n      ",
            "documentation": "\n         <p> The target locale for the bot. </p>\n      ",
            "shape_name": "Locale"
          },
          "childDirected": {
            "type": "boolean",
            "zonbookDocumentation": "\n    \n         <simpara>For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify\n      whether your use of Amazon Lex is related to a website, program, or other application that is\n      directed or targeted, in whole or in part, to children under age 13 and subject to the\n      Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or\n        <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code>\n      in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <emphasis role=\"bold\">is</emphasis> related to a website, program, or other application that is\n      directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By\n      specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your\n      use of Amazon Lex <emphasis role=\"bold\">is not</emphasis> related to a website, program, or other\n      application that is directed or targeted, in whole or in part, to children under age 13 and\n      subject to COPPA. You may not specify a default value for the <code>childDirected</code> field\n      that does not accurately reflect whether your use of Amazon Lex is related to a website, program,\n      or other application that is directed or targeted, in whole or in part, to children under age\n      13 and subject to COPPA.</simpara>\n         <simpara>If your use of Amazon Lex relates to a website, program, or other application that is\n      directed in whole or in part, to children under age 13, you must obtain any required\n      verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in\n      connection with websites, programs, or other applications that are directed or targeted, in\n      whole or in part, to children under age 13, see the <ulink url=\"https://aws.amazon.com/lex/faqs#data-security\">Amazon Lex FAQ.</ulink>\n         </simpara>\n\n      ",
            "documentation": "\n    \n         <p>For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify\n      whether your use of Amazon Lex is related to a website, program, or other application that is\n      directed or targeted, in whole or in part, to children under age 13 and subject to the\n      Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or\n        <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code>\n      in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is</b> related to a website, program, or other application that is\n      directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By\n      specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your\n      use of Amazon Lex <b>is not</b> related to a website, program, or other\n      application that is directed or targeted, in whole or in part, to children under age 13 and\n      subject to COPPA. You may not specify a default value for the <code>childDirected</code> field\n      that does not accurately reflect whether your use of Amazon Lex is related to a website, program,\n      or other application that is directed or targeted, in whole or in part, to children under age\n      13 and subject to COPPA.</p>\n         <p>If your use of Amazon Lex relates to a website, program, or other application that is\n      directed in whole or in part, to children under age 13, you must obtain any required\n      verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in\n      connection with websites, programs, or other applications that are directed or targeted, in\n      whole or in part, to children under age 13, see the <a href=\"https://aws.amazon.com/lex/faqs#data-security\">Amazon Lex FAQ.</a>\n         </p>\n\n      ",
            "shape_name": "Boolean"
          },
          "createVersion": {
            "type": "boolean",
            "shape_name": "Boolean",
            "documentation": null
          }
        },
        "shape_name": "PutBotResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> There was a conflict processing the request. Try your request again. </simpara>\n      ",
          "documentation": "\n         <p> There was a conflict processing the request. Try your request again. </p>\n      ",
          "shape_name": "ConflictException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> The checksum of the resource that you are trying to change does not match the checksum\n      in the request. Check the resource's checksum and try again.</simpara>\n      ",
          "documentation": "\n         <p> The checksum of the resource that you are trying to change does not match the checksum\n      in the request. Check the resource's checksum and try again.</p>\n      ",
          "shape_name": "PreconditionFailedException"
        }
      ],
      "documentation": "\n         <p>Creates an Amazon Lex conversational bot or replaces an existing bot. When you create or\n      update a bot you are only required to specify a name, a locale, and whether the bot is\n      directed toward children under age 13. You can use this to add intents later, or to remove\n      intents from an existing bot. When you create a bot with the minimum information, the bot is\n      created or updated but Amazon Lex returns the <code/> response <code>FAILED</code>. You can build\n      the bot after you add one or more intents. For more information about Amazon Lex bots, see <a>how-it-works</a>. </p>\n         <p>If you specify the name of an existing bot, the fields in the request replace the\n      existing values in the <code>$LATEST</code> version of the bot. Amazon Lex removes any fields that\n      you don't provide values for in the request, except for the <code>idleTTLInSeconds</code> and\n        <code>privacySettings</code> fields, which are set to their default values. If you don't\n      specify values for required fields, Amazon Lex throws an exception.</p>\n\n         <p>This operation requires permissions for the <code>lex:PutBot</code> action. For more\n      information, see <a>auth-and-access-control</a>.</p>\n      "
    },
    "GetBot": {
      "name": "GetBot",
      "http": {
        "method": "GET",
        "uri": "/bots/{name}/versions/{versionOrAlias}",
        "response_code": 200
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the bot. The name is case sensitive. </simpara>\n      ",
            "documentation": "\n         <p>The name of the bot. The name is case sensitive. </p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          },
          "versionOrAlias": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The version or alias of the bot.</simpara>\n      ",
            "documentation": "\n         <p>The version or alias of the bot.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "String"
          }
        },
        "shape_name": "GetBotRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the bot.</simpara>\n      ",
            "documentation": "\n         <p>The name of the bot.</p>\n      ",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          },
          "description": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A description of the bot.</simpara>\n      ",
            "documentation": "\n         <p>A description of the bot.</p>\n      ",
            "shape_name": "Description",
            "min_length": 0,
            "max_length": 200
          },
          "intents": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of <code>intent</code> objects. For more information, see <xref linkend=\"PutBot\"/>.</simpara>\n      ",
            "documentation": "\n         <p>An array of <code>intent</code> objects. For more information, see <a>PutBot</a>.</p>\n      ",
            "shape_name": "IntentList",
            "members": {
              "type": "structure",
              "members": {
                "intentName": {
                  "type": "string",
                  "pattern": "^([A-Za-z]_?)+$",
                  "zonbookDocumentation": "\n         <simpara>The name of the intent.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the intent.</p>\n      ",
                  "required": true,
                  "shape_name": "IntentName",
                  "min_length": 1,
                  "max_length": 100
                },
                "intentVersion": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the intent.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the intent.</p>\n      ",
                  "required": true,
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                }
              },
              "zonbookDocumentation": "\n         <simpara>Identifies the specific version of an intent.</simpara>\n      ",
              "documentation": "\n         <p>Identifies the specific version of an intent.</p>\n      ",
              "shape_name": "Intent"
            }
          },
          "clarificationPrompt": {
            "type": "structure",
            "members": {
              "messages": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</simpara>\n      ",
                "documentation": "\n         <p>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</p>\n      ",
                "required": true,
                "shape_name": "MessageList",
                "min_length": 1,
                "max_length": 15,
                "members": {
                  "type": "structure",
                  "members": {
                    "contentType": {
                      "type": "string",
                      "enum": [
                        "PlainText",
                        "SSML",
                        "CustomPayload"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                      "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentType"
                    },
                    "content": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                      "documentation": "\n         <p>The text of the message.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentString",
                      "min_length": 1,
                      "max_length": 1000
                    },
                    "groupNumber": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                      "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                      "shape_name": "GroupNumber",
                      "min_length": 1,
                      "max_length": 5
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                  "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                  "shape_name": "Message"
                }
              },
              "maxAttempts": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The number of times to prompt the user for information.</simpara>\n      ",
                "documentation": "\n         <p>The number of times to prompt the user for information.</p>\n      ",
                "required": true,
                "shape_name": "PromptMaxAttempts",
                "min_length": 1,
                "max_length": 5
              },
              "responseCard": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <xref linkend=\"ex-resp-card\"/>. </simpara>\n      ",
                "documentation": "\n         <p>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <a>ex-resp-card</a>. </p>\n      ",
                "shape_name": "ResponseCard",
                "min_length": 1,
                "max_length": 50000
              }
            },
            "zonbookDocumentation": "\n         <simpara>The message Amazon Lex uses when it doesn't understand the user's request. For more\n      information, see <xref linkend=\"PutBot\"/>. </simpara>\n      ",
            "documentation": "\n         <p>The message Amazon Lex uses when it doesn't understand the user's request. For more\n      information, see <a>PutBot</a>. </p>\n      ",
            "shape_name": "Prompt"
          },
          "abortStatement": {
            "type": "structure",
            "members": {
              "messages": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A collection of message objects.</simpara>\n      ",
                "documentation": "\n         <p>A collection of message objects.</p>\n      ",
                "required": true,
                "shape_name": "MessageList",
                "min_length": 1,
                "max_length": 15,
                "members": {
                  "type": "structure",
                  "members": {
                    "contentType": {
                      "type": "string",
                      "enum": [
                        "PlainText",
                        "SSML",
                        "CustomPayload"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                      "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentType"
                    },
                    "content": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                      "documentation": "\n         <p>The text of the message.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentString",
                      "min_length": 1,
                      "max_length": 1000
                    },
                    "groupNumber": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                      "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                      "shape_name": "GroupNumber",
                      "min_length": 1,
                      "max_length": 5
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                  "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                  "shape_name": "Message"
                }
              },
              "responseCard": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara> At runtime, if the client is using the <ulink url=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</ulink>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </simpara>\n\n      ",
                "documentation": "\n         <p> At runtime, if the client is using the <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </p>\n\n      ",
                "shape_name": "ResponseCard",
                "min_length": 1,
                "max_length": 50000
              }
            },
            "zonbookDocumentation": "\n         <simpara>The message that Amazon Lex returns when the user elects to end the conversation without\n      completing it. For more information, see <xref linkend=\"PutBot\"/>.</simpara>\n      ",
            "documentation": "\n         <p>The message that Amazon Lex returns when the user elects to end the conversation without\n      completing it. For more information, see <a>PutBot</a>.</p>\n      ",
            "shape_name": "Statement"
          },
          "status": {
            "type": "string",
            "enum": [
              "BUILDING",
              "READY",
              "READY_BASIC_TESTING",
              "FAILED",
              "NOT_BUILT"
            ],
            "zonbookDocumentation": "\n         <simpara>The status of the bot. If the bot is ready to run, the status is <code>READY</code>. If\n      there was a problem with building the bot, the status is <code>FAILED</code> and the\n        <code>failureReason</code> explains why the bot did not build. If the bot was saved but not\n      built, the status is <code>NOT BUILT</code>.</simpara>\n      ",
            "documentation": "\n         <p>The status of the bot. If the bot is ready to run, the status is <code>READY</code>. If\n      there was a problem with building the bot, the status is <code>FAILED</code> and the\n        <code>failureReason</code> explains why the bot did not build. If the bot was saved but not\n      built, the status is <code>NOT BUILT</code>.</p>\n      ",
            "shape_name": "Status"
          },
          "failureReason": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If <code>status</code> is <code>FAILED</code>, Amazon Lex explains why it failed to build\n      the bot.</simpara>\n      ",
            "documentation": "\n         <p>If <code>status</code> is <code>FAILED</code>, Amazon Lex explains why it failed to build\n      the bot.</p>\n      ",
            "shape_name": "String"
          },
          "lastUpdatedDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The date that the bot was updated. When you create a resource, the creation date and\n      last updated date are the same. </simpara>\n      ",
            "documentation": "\n         <p>The date that the bot was updated. When you create a resource, the creation date and\n      last updated date are the same. </p>\n      ",
            "shape_name": "Timestamp"
          },
          "createdDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The date that the bot was created.</simpara>\n      ",
            "documentation": "\n         <p>The date that the bot was created.</p>\n      ",
            "shape_name": "Timestamp"
          },
          "idleSessionTTLInSeconds": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>The maximum time in seconds that Amazon Lex retains the data gathered in a conversation. For\n      more information, see <xref linkend=\"PutBot\"/>.</simpara>\n\n      ",
            "documentation": "\n         <p>The maximum time in seconds that Amazon Lex retains the data gathered in a conversation. For\n      more information, see <a>PutBot</a>.</p>\n\n      ",
            "shape_name": "SessionTTL",
            "min_length": 60,
            "max_length": 86400
          },
          "voiceId": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user. For more\n      information, see <xref linkend=\"PutBot\"/>.</simpara>\n      ",
            "documentation": "\n         <p>The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user. For more\n      information, see <a>PutBot</a>.</p>\n      ",
            "shape_name": "String"
          },
          "checksum": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Checksum of the bot used to identify a specific revision of the bot's\n        <code>$LATEST</code> version.</simpara>\n      ",
            "documentation": "\n         <p>Checksum of the bot used to identify a specific revision of the bot's\n        <code>$LATEST</code> version.</p>\n      ",
            "shape_name": "String"
          },
          "version": {
            "type": "string",
            "pattern": "\\$LATEST|[0-9]+",
            "zonbookDocumentation": "\n         <simpara>The version of the bot. For a new bot, the version is always\n      <code>$LATEST</code>.</simpara>\n      ",
            "documentation": "\n         <p>The version of the bot. For a new bot, the version is always\n      <code>$LATEST</code>.</p>\n      ",
            "shape_name": "Version",
            "min_length": 1,
            "max_length": 64
          },
          "locale": {
            "type": "string",
            "enum": [
              "en-US",
              "en-GB",
              "de-DE"
            ],
            "zonbookDocumentation": "\n         <simpara> The target locale for the bot. </simpara>\n      ",
            "documentation": "\n         <p> The target locale for the bot. </p>\n      ",
            "shape_name": "Locale"
          },
          "childDirected": {
            "type": "boolean",
            "zonbookDocumentation": "\n    \n         <simpara>For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify\n      whether your use of Amazon Lex is related to a website, program, or other application that is\n      directed or targeted, in whole or in part, to children under age 13 and subject to the\n      Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or\n        <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code>\n      in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <emphasis role=\"bold\">is</emphasis> related to a website, program, or other application that is\n      directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By\n      specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your\n      use of Amazon Lex <emphasis role=\"bold\">is not</emphasis> related to a website, program, or other\n      application that is directed or targeted, in whole or in part, to children under age 13 and\n      subject to COPPA. You may not specify a default value for the <code>childDirected</code> field\n      that does not accurately reflect whether your use of Amazon Lex is related to a website, program,\n      or other application that is directed or targeted, in whole or in part, to children under age\n      13 and subject to COPPA.</simpara>\n         <simpara>If your use of Amazon Lex relates to a website, program, or other application that is\n      directed in whole or in part, to children under age 13, you must obtain any required\n      verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in\n      connection with websites, programs, or other applications that are directed or targeted, in\n      whole or in part, to children under age 13, see the <ulink url=\"https://aws.amazon.com/lex/faqs#data-security\">Amazon Lex FAQ.</ulink>\n         </simpara>\n      ",
            "documentation": "\n    \n         <p>For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify\n      whether your use of Amazon Lex is related to a website, program, or other application that is\n      directed or targeted, in whole or in part, to children under age 13 and subject to the\n      Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or\n        <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code>\n      in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is</b> related to a website, program, or other application that is\n      directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By\n      specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your\n      use of Amazon Lex <b>is not</b> related to a website, program, or other\n      application that is directed or targeted, in whole or in part, to children under age 13 and\n      subject to COPPA. You may not specify a default value for the <code>childDirected</code> field\n      that does not accurately reflect whether your use of Amazon Lex is related to a website, program,\n      or other application that is directed or targeted, in whole or in part, to children under age\n      13 and subject to COPPA.</p>\n         <p>If your use of Amazon Lex relates to a website, program, or other application that is\n      directed in whole or in part, to children under age 13, you must obtain any required\n      verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in\n      connection with websites, programs, or other applications that are directed or targeted, in\n      whole or in part, to children under age 13, see the <a href=\"https://aws.amazon.com/lex/faqs#data-security\">Amazon Lex FAQ.</a>\n         </p>\n      ",
            "shape_name": "Boolean"
          }
        },
        "shape_name": "GetBotResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n         <p>Returns metadata information for a specific bot. You must provide the bot name and the\n      bot version or alias. </p>\n         <p> This operation requires permissions for the <code>lex:GetBot</code> action. </p>\n      "
    },
    "DeleteBot": {
      "name": "DeleteBot",
      "http": {
        "method": "DELETE",
        "uri": "/bots/{name}",
        "response_code": 204
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the bot. The name is case sensitive. </simpara>\n      ",
            "documentation": "\n         <p>The name of the bot. The name is case sensitive. </p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          }
        },
        "shape_name": "DeleteBotRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> There was a conflict processing the request. Try your request again. </simpara>\n      ",
          "documentation": "\n         <p> There was a conflict processing the request. Try your request again. </p>\n      ",
          "shape_name": "ConflictException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        },
        {
          "type": "structure",
          "members": {
            "referenceType": {
              "type": "string",
              "enum": [
                "Intent",
                "Bot",
                "BotAlias",
                "BotChannel"
              ],
              "shape_name": "ReferenceType",
              "documentation": null
            },
            "exampleReference": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "pattern": "[a-zA-Z_]+",
                  "zonbookDocumentation": "\n         <simpara>The name of the resource that is using the resource that you are trying to\n      delete.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the resource that is using the resource that you are trying to\n      delete.</p>\n      ",
                  "shape_name": "Name",
                  "min_length": 1,
                  "max_length": 100
                },
                "version": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the resource that is using the resource that you are trying to\n      delete.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the resource that is using the resource that you are trying to\n      delete.</p>\n      ",
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                }
              },
              "zonbookDocumentation": "\n         <simpara>Describes the resource that refers to the resource that you are attempting to delete.\n      This object is returned as part of the <code>ResourceInUseException</code> exception.\n    </simpara>\n      ",
              "documentation": "\n         <p>Describes the resource that refers to the resource that you are attempting to delete.\n      This object is returned as part of the <code>ResourceInUseException</code> exception.\n    </p>\n      ",
              "shape_name": "ResourceReference"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource that you are attempting to delete is referred to by another resource. Use\n      this information to remove references to the resource that you are trying to delete.</simpara>\n         <simpara>The body of the exception contains a JSON object that describes the resource.</simpara>\n         <simpara>\n            <code>{ \"resourceType\": BOT | BOTALIAS | BOTCHANNEL | INTENT,</code>\n         </simpara>\n         <simpara>\n            <code>\"resourceReference\": {</code>\n         </simpara>\n         <simpara>\n            <code>\"name\": <emphasis>string</emphasis>, \"version\": <emphasis>string</emphasis> }\n        }</code>\n         </simpara>\n      ",
          "documentation": "\n         <p>The resource that you are attempting to delete is referred to by another resource. Use\n      this information to remove references to the resource that you are trying to delete.</p>\n         <p>The body of the exception contains a JSON object that describes the resource.</p>\n         <p>\n            <code>{ \"resourceType\": BOT | BOTALIAS | BOTCHANNEL | INTENT,</code>\n         </p>\n         <p>\n            <code>\"resourceReference\": {</code>\n         </p>\n         <p>\n            <code>\"name\": <i>string</i>, \"version\": <i>string</i> }\n        }</code>\n         </p>\n      ",
          "shape_name": "ResourceInUseException"
        }
      ],
      "documentation": "\n         <p>Deletes all versions of the bot, including the <code>$LATEST</code> version. To delete\n      a specific version of the bot, use the <a>DeleteBotVersion</a> operation.</p>\n         <p>If a bot has an alias, you can't delete it. Instead, the <code>DeleteBot</code>\n      operation returns a <code>ResourceInUseException</code> exception that includes a reference to\n      the alias that refers to the bot. To remove the reference to the bot, delete the alias. If you\n      get the same exception again, delete the referring alias until the <code>DeleteBot</code>\n      operation is successful.</p>\n\n         <p>This operation requires permissions for the <code>lex:DeleteBot</code>\n      action.</p>\n      "
    },
    "GetBots": {
      "name": "GetBots",
      "http": {
        "method": "GET",
        "uri": "/bots/?nameContains={nameContains}&nextToken={nextToken}&maxResults={maxResults}",
        "response_code": 200
      },
      "input": {
        "type": "structure",
        "members": {
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A pagination token that fetches the next page of bots. If the response to this call is\n      truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of bots,\n      specify the pagination token in the next request. </simpara>\n      ",
            "documentation": "\n         <p>A pagination token that fetches the next page of bots. If the response to this call is\n      truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of bots,\n      specify the pagination token in the next request. </p>\n      ",
            "paginationToken": true,
            "location": "uri",
            "shape_name": "NextToken"
          },
          "maxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The maximum number of bots to return in the response that the request will return. The\n      default is 10.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of bots to return in the response that the request will return. The\n      default is 10.</p>\n      ",
            "pageSize": true,
            "location": "uri",
            "shape_name": "MaxResults",
            "min_length": 1,
            "max_length": 50
          },
          "nameContains": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>Substring to match in bot names. A bot will be returned if any part of its name matches\n      the substring. For example, \"xyz\" matches both \"xyzabc\" and \"abcxyz.\"</simpara>\n      ",
            "documentation": "\n         <p>Substring to match in bot names. A bot will be returned if any part of its name matches\n      the substring. For example, \"xyz\" matches both \"xyzabc\" and \"abcxyz.\"</p>\n      ",
            "location": "uri",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          }
        },
        "shape_name": "GetBotsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "bots": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of <code>botMetadata</code> objects, with one entry for each bot. </simpara>\n      ",
            "documentation": "\n         <p>An array of <code>botMetadata</code> objects, with one entry for each bot. </p>\n      ",
            "shape_name": "BotMetadataList",
            "members": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "pattern": "^([A-Za-z]_?)+$",
                  "zonbookDocumentation": "\n         <simpara>The name of the bot. </simpara>\n      ",
                  "documentation": "\n         <p>The name of the bot. </p>\n      ",
                  "shape_name": "BotName",
                  "min_length": 2,
                  "max_length": 50
                },
                "description": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A description of the bot.</simpara>\n      ",
                  "documentation": "\n         <p>A description of the bot.</p>\n      ",
                  "shape_name": "Description",
                  "min_length": 0,
                  "max_length": 200
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "BUILDING",
                    "READY",
                    "READY_BASIC_TESTING",
                    "FAILED",
                    "NOT_BUILT"
                  ],
                  "zonbookDocumentation": "\n         <simpara>The status of the bot.</simpara>\n      ",
                  "documentation": "\n         <p>The status of the bot.</p>\n      ",
                  "shape_name": "Status"
                },
                "lastUpdatedDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The date that the bot was updated. When you create a bot, the creation date and last\n      updated date are the same. </simpara>\n      ",
                  "documentation": "\n         <p>The date that the bot was updated. When you create a bot, the creation date and last\n      updated date are the same. </p>\n      ",
                  "shape_name": "Timestamp"
                },
                "createdDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The date that the bot was created.</simpara>\n      ",
                  "documentation": "\n         <p>The date that the bot was created.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "version": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the bot. For a new bot, the version is always\n      <code>$LATEST</code>.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the bot. For a new bot, the version is always\n      <code>$LATEST</code>.</p>\n      ",
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                }
              },
              "zonbookDocumentation": "\n         <simpara>Provides information about a bot. .</simpara>\n      ",
              "documentation": "\n         <p>Provides information about a bot. .</p>\n      ",
              "shape_name": "BotMetadata"
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the response is truncated, it includes a pagination token that you can specify in\n      your next request to fetch the next page of bots. </simpara>\n      ",
            "documentation": "\n         <p>If the response is truncated, it includes a pagination token that you can specify in\n      your next request to fetch the next page of bots. </p>\n      ",
            "paginationToken": true,
            "shape_name": "NextToken"
          }
        },
        "shape_name": "GetBotsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n         <p>Returns bot information as follows: </p>\n         <ul>\n            <li>\n               <p>If you provide the <code>nameContains</code> field, the response includes\n          information for the <code>$LATEST</code> version of all bots whose name contains the\n          specified string.</p>\n            </li>\n            <li>\n               <p>If you don't specify the <code>nameContains</code> field, the operation returns\n          information about the <code>$LATEST</code> version of all of your bots.</p>\n            </li>\n         </ul>\n         <p>This operation requires permission for the <code>lex:GetBots</code> action.</p>\n      "
    },
    "GetBotVersions": {
      "name": "GetBotVersions",
      "http": {
        "method": "GET",
        "uri": "/bots/{name}/versions/?nextToken={nextToken}&maxResults={maxResults}",
        "response_code": 200
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the bot for which versions should be returned.</simpara>\n      ",
            "documentation": "\n         <p>The name of the bot for which versions should be returned.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A pagination token for fetching the next page of bot versions. If the response to this\n      call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of\n      versions, specify the pagination token in the next request. </simpara>\n      ",
            "documentation": "\n         <p>A pagination token for fetching the next page of bot versions. If the response to this\n      call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of\n      versions, specify the pagination token in the next request. </p>\n      ",
            "paginationToken": true,
            "location": "uri",
            "shape_name": "NextToken"
          },
          "maxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The maximum number of bot versions to return in the response. The default is\n      10.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of bot versions to return in the response. The default is\n      10.</p>\n      ",
            "pageSize": true,
            "location": "uri",
            "shape_name": "MaxResults",
            "min_length": 1,
            "max_length": 50
          }
        },
        "shape_name": "GetBotVersionsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "bots": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of <code>BotMetadata</code> objects, one for each numbered version of the bot\n      plus one for the <code>$LATEST</code> version.</simpara>\n      ",
            "documentation": "\n         <p>An array of <code>BotMetadata</code> objects, one for each numbered version of the bot\n      plus one for the <code>$LATEST</code> version.</p>\n      ",
            "shape_name": "BotMetadataList",
            "members": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "pattern": "^([A-Za-z]_?)+$",
                  "zonbookDocumentation": "\n         <simpara>The name of the bot. </simpara>\n      ",
                  "documentation": "\n         <p>The name of the bot. </p>\n      ",
                  "shape_name": "BotName",
                  "min_length": 2,
                  "max_length": 50
                },
                "description": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A description of the bot.</simpara>\n      ",
                  "documentation": "\n         <p>A description of the bot.</p>\n      ",
                  "shape_name": "Description",
                  "min_length": 0,
                  "max_length": 200
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "BUILDING",
                    "READY",
                    "READY_BASIC_TESTING",
                    "FAILED",
                    "NOT_BUILT"
                  ],
                  "zonbookDocumentation": "\n         <simpara>The status of the bot.</simpara>\n      ",
                  "documentation": "\n         <p>The status of the bot.</p>\n      ",
                  "shape_name": "Status"
                },
                "lastUpdatedDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The date that the bot was updated. When you create a bot, the creation date and last\n      updated date are the same. </simpara>\n      ",
                  "documentation": "\n         <p>The date that the bot was updated. When you create a bot, the creation date and last\n      updated date are the same. </p>\n      ",
                  "shape_name": "Timestamp"
                },
                "createdDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The date that the bot was created.</simpara>\n      ",
                  "documentation": "\n         <p>The date that the bot was created.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "version": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the bot. For a new bot, the version is always\n      <code>$LATEST</code>.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the bot. For a new bot, the version is always\n      <code>$LATEST</code>.</p>\n      ",
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                }
              },
              "zonbookDocumentation": "\n         <simpara>Provides information about a bot. .</simpara>\n      ",
              "documentation": "\n         <p>Provides information about a bot. .</p>\n      ",
              "shape_name": "BotMetadata"
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A pagination token for fetching the next page of bot versions. If the response to this\n      call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of\n      versions, specify the pagination token in the next request. </simpara>\n      ",
            "documentation": "\n         <p>A pagination token for fetching the next page of bot versions. If the response to this\n      call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of\n      versions, specify the pagination token in the next request. </p>\n      ",
            "paginationToken": true,
            "shape_name": "NextToken"
          }
        },
        "shape_name": "GetBotVersionsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n         <p>Gets information about all of the versions of a bot.</p>\n         <p>The <code>GetBotVersions</code> operation returns a <code>BotMetadata</code> object for\n      each version of a bot. For example, if a bot has three numbered versions, the\n        <code>GetBotVersions</code> operation returns four <code>BotMetadata</code> objects in the\n      response, one for each numbered version and one for the <code>$LATEST</code> version. </p>\n         <p>The <code>GetBotVersions</code> operation always returns at least one version, the\n        <code>$LATEST</code> version.</p>\n         <p>This operation requires permissions for the <code>lex:GetBotVersions</code>\n      action.</p>\n      "
    },
    "CreateBotVersion": {
      "name": "CreateBotVersion",
      "http": {
        "method": "POST",
        "uri": "/bots/{name}/versions",
        "response_code": 201
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the bot that you want to create a new version of. The name is case\n      sensitive. </simpara>\n      ",
            "documentation": "\n         <p>The name of the bot that you want to create a new version of. The name is case\n      sensitive. </p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          },
          "checksum": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Identifies a specific revision of the <code>$LATEST</code> version of the bot. If you\n      specify a checksum and the <code>$LATEST</code> version of the bot has a different checksum, a\n        <code>PreconditionFailedException</code> exception is returned and Amazon Lex doesn't publish a\n      new version. If you don't specify a checksum, Amazon Lex publishes the <code>$LATEST</code>\n      version.</simpara>\n      ",
            "documentation": "\n         <p>Identifies a specific revision of the <code>$LATEST</code> version of the bot. If you\n      specify a checksum and the <code>$LATEST</code> version of the bot has a different checksum, a\n        <code>PreconditionFailedException</code> exception is returned and Amazon Lex doesn't publish a\n      new version. If you don't specify a checksum, Amazon Lex publishes the <code>$LATEST</code>\n      version.</p>\n      ",
            "shape_name": "String"
          }
        },
        "shape_name": "CreateBotVersionRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the bot.</simpara>\n      ",
            "documentation": "\n         <p>The name of the bot.</p>\n      ",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          },
          "description": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A description of the bot.</simpara>\n      ",
            "documentation": "\n         <p>A description of the bot.</p>\n      ",
            "shape_name": "Description",
            "min_length": 0,
            "max_length": 200
          },
          "intents": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of <code>Intent</code> objects. For more information, see <xref linkend=\"PutBot\"/>.</simpara>\n      ",
            "documentation": "\n         <p>An array of <code>Intent</code> objects. For more information, see <a>PutBot</a>.</p>\n      ",
            "shape_name": "IntentList",
            "members": {
              "type": "structure",
              "members": {
                "intentName": {
                  "type": "string",
                  "pattern": "^([A-Za-z]_?)+$",
                  "zonbookDocumentation": "\n         <simpara>The name of the intent.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the intent.</p>\n      ",
                  "required": true,
                  "shape_name": "IntentName",
                  "min_length": 1,
                  "max_length": 100
                },
                "intentVersion": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the intent.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the intent.</p>\n      ",
                  "required": true,
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                }
              },
              "zonbookDocumentation": "\n         <simpara>Identifies the specific version of an intent.</simpara>\n      ",
              "documentation": "\n         <p>Identifies the specific version of an intent.</p>\n      ",
              "shape_name": "Intent"
            }
          },
          "clarificationPrompt": {
            "type": "structure",
            "members": {
              "messages": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</simpara>\n      ",
                "documentation": "\n         <p>An array of objects, each of which provides a message string and its type. You can\n      specify the message string in plain text or in Speech Synthesis Markup Language\n      (SSML).</p>\n      ",
                "required": true,
                "shape_name": "MessageList",
                "min_length": 1,
                "max_length": 15,
                "members": {
                  "type": "structure",
                  "members": {
                    "contentType": {
                      "type": "string",
                      "enum": [
                        "PlainText",
                        "SSML",
                        "CustomPayload"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                      "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentType"
                    },
                    "content": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                      "documentation": "\n         <p>The text of the message.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentString",
                      "min_length": 1,
                      "max_length": 1000
                    },
                    "groupNumber": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                      "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                      "shape_name": "GroupNumber",
                      "min_length": 1,
                      "max_length": 5
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                  "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                  "shape_name": "Message"
                }
              },
              "maxAttempts": {
                "type": "integer",
                "zonbookDocumentation": "\n         <simpara>The number of times to prompt the user for information.</simpara>\n      ",
                "documentation": "\n         <p>The number of times to prompt the user for information.</p>\n      ",
                "required": true,
                "shape_name": "PromptMaxAttempts",
                "min_length": 1,
                "max_length": 5
              },
              "responseCard": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <xref linkend=\"ex-resp-card\"/>. </simpara>\n      ",
                "documentation": "\n         <p>A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API\n      response. It substitutes session attributes and slot values for placeholders in the response\n      card. For more information, see <a>ex-resp-card</a>. </p>\n      ",
                "shape_name": "ResponseCard",
                "min_length": 1,
                "max_length": 50000
              }
            },
            "zonbookDocumentation": "\n         <simpara>The message that Amazon Lex uses when it doesn't understand the user's request. For more\n      information, see <xref linkend=\"PutBot\"/>. </simpara>\n      ",
            "documentation": "\n         <p>The message that Amazon Lex uses when it doesn't understand the user's request. For more\n      information, see <a>PutBot</a>. </p>\n      ",
            "shape_name": "Prompt"
          },
          "abortStatement": {
            "type": "structure",
            "members": {
              "messages": {
                "type": "list",
                "zonbookDocumentation": "\n         <simpara>A collection of message objects.</simpara>\n      ",
                "documentation": "\n         <p>A collection of message objects.</p>\n      ",
                "required": true,
                "shape_name": "MessageList",
                "min_length": 1,
                "max_length": 15,
                "members": {
                  "type": "structure",
                  "members": {
                    "contentType": {
                      "type": "string",
                      "enum": [
                        "PlainText",
                        "SSML",
                        "CustomPayload"
                      ],
                      "zonbookDocumentation": "\n         <simpara>The content type of the message string.</simpara>\n      ",
                      "documentation": "\n         <p>The content type of the message string.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentType"
                    },
                    "content": {
                      "type": "string",
                      "zonbookDocumentation": "\n         <simpara>The text of the message.</simpara>\n      ",
                      "documentation": "\n         <p>The text of the message.</p>\n      ",
                      "required": true,
                      "shape_name": "ContentString",
                      "min_length": 1,
                      "max_length": 1000
                    },
                    "groupNumber": {
                      "type": "integer",
                      "box": true,
                      "zonbookDocumentation": "\n         <para>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</para>\n      ",
                      "documentation": "\n         <p>Identifies the message group that the message belongs to. When a group is assigned to a\n      message, Amazon Lex returns one message from each group in the response.</p>\n      ",
                      "shape_name": "GroupNumber",
                      "min_length": 1,
                      "max_length": 5
                    }
                  },
                  "zonbookDocumentation": "\n         <simpara>The message object that provides the message text and its type.</simpara>\n      ",
                  "documentation": "\n         <p>The message object that provides the message text and its type.</p>\n      ",
                  "shape_name": "Message"
                }
              },
              "responseCard": {
                "type": "string",
                "zonbookDocumentation": "\n         <simpara> At runtime, if the client is using the <ulink url=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</ulink>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </simpara>\n\n      ",
                "documentation": "\n         <p> At runtime, if the client is using the <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a>\n      API, Amazon Lex includes the response card in the response. It substitutes all of the session\n      attributes and slot values for placeholders in the response card. </p>\n\n      ",
                "shape_name": "ResponseCard",
                "min_length": 1,
                "max_length": 50000
              }
            },
            "zonbookDocumentation": "\n         <simpara>The message that Amazon Lex uses to abort a conversation. For more information, see <xref linkend=\"PutBot\"/>.</simpara>\n      ",
            "documentation": "\n         <p>The message that Amazon Lex uses to abort a conversation. For more information, see <a>PutBot</a>.</p>\n      ",
            "shape_name": "Statement"
          },
          "status": {
            "type": "string",
            "enum": [
              "BUILDING",
              "READY",
              "READY_BASIC_TESTING",
              "FAILED",
              "NOT_BUILT"
            ],
            "zonbookDocumentation": "\n         <simpara> When you send a request to create or update a bot, Amazon Lex sets the <code>status</code>\n      response element to <code>BUILDING</code>. After Amazon Lex builds the bot, it sets\n        <code>status</code> to <code>READY</code>. If Amazon Lex can't build the bot, it sets\n        <code>status</code> to <code>FAILED</code>. Amazon Lex returns the reason for the failure in the\n        <code>failureReason</code> response element. </simpara>\n      ",
            "documentation": "\n         <p> When you send a request to create or update a bot, Amazon Lex sets the <code>status</code>\n      response element to <code>BUILDING</code>. After Amazon Lex builds the bot, it sets\n        <code>status</code> to <code>READY</code>. If Amazon Lex can't build the bot, it sets\n        <code>status</code> to <code>FAILED</code>. Amazon Lex returns the reason for the failure in the\n        <code>failureReason</code> response element. </p>\n      ",
            "shape_name": "Status"
          },
          "failureReason": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If <code>status</code> is <code>FAILED</code>, Amazon Lex provides the reason that it failed\n      to build the bot.</simpara>\n      ",
            "documentation": "\n         <p>If <code>status</code> is <code>FAILED</code>, Amazon Lex provides the reason that it failed\n      to build the bot.</p>\n      ",
            "shape_name": "String"
          },
          "lastUpdatedDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The date when the <code>$LATEST</code> version of this bot was updated. </simpara>\n      ",
            "documentation": "\n         <p>The date when the <code>$LATEST</code> version of this bot was updated. </p>\n      ",
            "shape_name": "Timestamp"
          },
          "createdDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The date when the bot version was created.</simpara>\n      ",
            "documentation": "\n         <p>The date when the bot version was created.</p>\n      ",
            "shape_name": "Timestamp"
          },
          "idleSessionTTLInSeconds": {
            "type": "integer",
            "zonbookDocumentation": "\n         <simpara>The maximum time in seconds that Amazon Lex retains the data gathered in a conversation. For\n      more information, see <xref linkend=\"PutBot\"/>.</simpara>\n\n      ",
            "documentation": "\n         <p>The maximum time in seconds that Amazon Lex retains the data gathered in a conversation. For\n      more information, see <a>PutBot</a>.</p>\n\n      ",
            "shape_name": "SessionTTL",
            "min_length": 60,
            "max_length": 86400
          },
          "voiceId": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The Amazon Polly voice ID that Amazon Lex uses for voice interactions with the\n      user.</simpara>\n      ",
            "documentation": "\n         <p>The Amazon Polly voice ID that Amazon Lex uses for voice interactions with the\n      user.</p>\n      ",
            "shape_name": "String"
          },
          "checksum": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Checksum identifying the version of the bot that was created.</simpara>\n      ",
            "documentation": "\n         <p>Checksum identifying the version of the bot that was created.</p>\n      ",
            "shape_name": "String"
          },
          "version": {
            "type": "string",
            "pattern": "\\$LATEST|[0-9]+",
            "zonbookDocumentation": "\n         <simpara>The version of the bot. </simpara>\n      ",
            "documentation": "\n         <p>The version of the bot. </p>\n      ",
            "shape_name": "Version",
            "min_length": 1,
            "max_length": 64
          },
          "locale": {
            "type": "string",
            "enum": [
              "en-US",
              "en-GB",
              "de-DE"
            ],
            "zonbookDocumentation": "\n         <simpara> Specifies the target locale for the bot. </simpara>\n      ",
            "documentation": "\n         <p> Specifies the target locale for the bot. </p>\n      ",
            "shape_name": "Locale"
          },
          "childDirected": {
            "type": "boolean",
            "zonbookDocumentation": "\n    \n         <simpara>For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify\n      whether your use of Amazon Lex is related to a website, program, or other application that is\n      directed or targeted, in whole or in part, to children under age 13 and subject to the\n      Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or\n        <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code>\n      in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <emphasis role=\"bold\">is</emphasis> related to a website, program, or other application that is\n      directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By\n      specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your\n      use of Amazon Lex <emphasis role=\"bold\">is not</emphasis> related to a website, program, or other\n      application that is directed or targeted, in whole or in part, to children under age 13 and\n      subject to COPPA. You may not specify a default value for the <code>childDirected</code> field\n      that does not accurately reflect whether your use of Amazon Lex is related to a website, program,\n      or other application that is directed or targeted, in whole or in part, to children under age\n      13 and subject to COPPA.</simpara>\n         <simpara>If your use of Amazon Lex relates to a website, program, or other application that is\n      directed in whole or in part, to children under age 13, you must obtain any required\n      verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in\n      connection with websites, programs, or other applications that are directed or targeted, in\n      whole or in part, to children under age 13, see the <ulink url=\"https://aws.amazon.com/lex/faqs#data-security\">Amazon Lex FAQ.</ulink>\n         </simpara>\n      ",
            "documentation": "\n    \n         <p>For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify\n      whether your use of Amazon Lex is related to a website, program, or other application that is\n      directed or targeted, in whole or in part, to children under age 13 and subject to the\n      Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or\n        <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code>\n      in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is</b> related to a website, program, or other application that is\n      directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By\n      specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your\n      use of Amazon Lex <b>is not</b> related to a website, program, or other\n      application that is directed or targeted, in whole or in part, to children under age 13 and\n      subject to COPPA. You may not specify a default value for the <code>childDirected</code> field\n      that does not accurately reflect whether your use of Amazon Lex is related to a website, program,\n      or other application that is directed or targeted, in whole or in part, to children under age\n      13 and subject to COPPA.</p>\n         <p>If your use of Amazon Lex relates to a website, program, or other application that is\n      directed in whole or in part, to children under age 13, you must obtain any required\n      verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in\n      connection with websites, programs, or other applications that are directed or targeted, in\n      whole or in part, to children under age 13, see the <a href=\"https://aws.amazon.com/lex/faqs#data-security\">Amazon Lex FAQ.</a>\n         </p>\n      ",
            "shape_name": "Boolean"
          }
        },
        "shape_name": "CreateBotVersionResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> There was a conflict processing the request. Try your request again. </simpara>\n      ",
          "documentation": "\n         <p> There was a conflict processing the request. Try your request again. </p>\n      ",
          "shape_name": "ConflictException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> The checksum of the resource that you are trying to change does not match the checksum\n      in the request. Check the resource's checksum and try again.</simpara>\n      ",
          "documentation": "\n         <p> The checksum of the resource that you are trying to change does not match the checksum\n      in the request. Check the resource's checksum and try again.</p>\n      ",
          "shape_name": "PreconditionFailedException"
        }
      ],
      "documentation": "\n         <p>Creates a new version of the bot based on the <code>$LATEST</code> version. If the\n        <code>$LATEST</code> version of this resource hasn't changed since you created the last\n      version, Amazon Lex doesn't create a new version. It returns the last created version.</p>\n         <note>\n            <p>You can update only the <code>$LATEST</code> version of the bot. You can't update the\n        numbered versions that you create with the <code>CreateBotVersion</code>\n        operation.</p>\n         </note>\n         <p> When you create the first version of a bot, Amazon Lex sets the version to 1. Subsequent\n      versions increment by 1. For more information, see <a>versioning-intro</a>. </p>\n         <p> This operation requires permission for the <code>lex:CreateBotVersion</code> action.\n    </p>\n      "
    },
    "DeleteBotVersion": {
      "name": "DeleteBotVersion",
      "http": {
        "method": "DELETE",
        "uri": "/bots/{name}/versions/{version}",
        "response_code": 204
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the bot.</simpara>\n      ",
            "documentation": "\n         <p>The name of the bot.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          },
          "version": {
            "type": "string",
            "pattern": "[0-9]+",
            "zonbookDocumentation": "\n         <simpara>The version of the bot to delete. You cannot delete the <code>$LATEST</code> version of\n      the bot. To delete the <code>$LATEST</code> version, use the <xref linkend=\"DeleteBot\"/>\n      operation.</simpara>\n      ",
            "documentation": "\n         <p>The version of the bot to delete. You cannot delete the <code>$LATEST</code> version of\n      the bot. To delete the <code>$LATEST</code> version, use the <a>DeleteBot</a>\n      operation.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "NumericalVersion",
            "min_length": 1,
            "max_length": 64
          }
        },
        "shape_name": "DeleteBotVersionRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> There was a conflict processing the request. Try your request again. </simpara>\n      ",
          "documentation": "\n         <p> There was a conflict processing the request. Try your request again. </p>\n      ",
          "shape_name": "ConflictException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        },
        {
          "type": "structure",
          "members": {
            "referenceType": {
              "type": "string",
              "enum": [
                "Intent",
                "Bot",
                "BotAlias",
                "BotChannel"
              ],
              "shape_name": "ReferenceType",
              "documentation": null
            },
            "exampleReference": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "pattern": "[a-zA-Z_]+",
                  "zonbookDocumentation": "\n         <simpara>The name of the resource that is using the resource that you are trying to\n      delete.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the resource that is using the resource that you are trying to\n      delete.</p>\n      ",
                  "shape_name": "Name",
                  "min_length": 1,
                  "max_length": 100
                },
                "version": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the resource that is using the resource that you are trying to\n      delete.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the resource that is using the resource that you are trying to\n      delete.</p>\n      ",
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                }
              },
              "zonbookDocumentation": "\n         <simpara>Describes the resource that refers to the resource that you are attempting to delete.\n      This object is returned as part of the <code>ResourceInUseException</code> exception.\n    </simpara>\n      ",
              "documentation": "\n         <p>Describes the resource that refers to the resource that you are attempting to delete.\n      This object is returned as part of the <code>ResourceInUseException</code> exception.\n    </p>\n      ",
              "shape_name": "ResourceReference"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource that you are attempting to delete is referred to by another resource. Use\n      this information to remove references to the resource that you are trying to delete.</simpara>\n         <simpara>The body of the exception contains a JSON object that describes the resource.</simpara>\n         <simpara>\n            <code>{ \"resourceType\": BOT | BOTALIAS | BOTCHANNEL | INTENT,</code>\n         </simpara>\n         <simpara>\n            <code>\"resourceReference\": {</code>\n         </simpara>\n         <simpara>\n            <code>\"name\": <emphasis>string</emphasis>, \"version\": <emphasis>string</emphasis> }\n        }</code>\n         </simpara>\n      ",
          "documentation": "\n         <p>The resource that you are attempting to delete is referred to by another resource. Use\n      this information to remove references to the resource that you are trying to delete.</p>\n         <p>The body of the exception contains a JSON object that describes the resource.</p>\n         <p>\n            <code>{ \"resourceType\": BOT | BOTALIAS | BOTCHANNEL | INTENT,</code>\n         </p>\n         <p>\n            <code>\"resourceReference\": {</code>\n         </p>\n         <p>\n            <code>\"name\": <i>string</i>, \"version\": <i>string</i> }\n        }</code>\n         </p>\n      ",
          "shape_name": "ResourceInUseException"
        }
      ],
      "documentation": "\n         <p>Deletes a specific version of a bot. To delete all versions of a bot, use the <a>DeleteBot</a> operation. </p>\n         <p>This operation requires permissions for the <code>lex:DeleteBotVersion</code>\n      action.</p>\n      "
    },
    "DeleteServiceRoleForLexBots": {
      "name": "DeleteServiceRoleForLexBots",
      "http": {
        "method": "DELETE",
        "uri": "/roles/bot",
        "response_code": 204
      },
      "input": null,
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "referenceType": {
              "type": "string",
              "enum": [
                "Intent",
                "Bot",
                "BotAlias",
                "BotChannel"
              ],
              "shape_name": "ReferenceType",
              "documentation": null
            },
            "exampleReference": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "pattern": "[a-zA-Z_]+",
                  "zonbookDocumentation": "\n         <simpara>The name of the resource that is using the resource that you are trying to\n      delete.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the resource that is using the resource that you are trying to\n      delete.</p>\n      ",
                  "shape_name": "Name",
                  "min_length": 1,
                  "max_length": 100
                },
                "version": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the resource that is using the resource that you are trying to\n      delete.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the resource that is using the resource that you are trying to\n      delete.</p>\n      ",
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                }
              },
              "zonbookDocumentation": "\n         <simpara>Describes the resource that refers to the resource that you are attempting to delete.\n      This object is returned as part of the <code>ResourceInUseException</code> exception.\n    </simpara>\n      ",
              "documentation": "\n         <p>Describes the resource that refers to the resource that you are attempting to delete.\n      This object is returned as part of the <code>ResourceInUseException</code> exception.\n    </p>\n      ",
              "shape_name": "ResourceReference"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource that you are attempting to delete is referred to by another resource. Use\n      this information to remove references to the resource that you are trying to delete.</simpara>\n         <simpara>The body of the exception contains a JSON object that describes the resource.</simpara>\n         <simpara>\n            <code>{ \"resourceType\": BOT | BOTALIAS | BOTCHANNEL | INTENT,</code>\n         </simpara>\n         <simpara>\n            <code>\"resourceReference\": {</code>\n         </simpara>\n         <simpara>\n            <code>\"name\": <emphasis>string</emphasis>, \"version\": <emphasis>string</emphasis> }\n        }</code>\n         </simpara>\n      ",
          "documentation": "\n         <p>The resource that you are attempting to delete is referred to by another resource. Use\n      this information to remove references to the resource that you are trying to delete.</p>\n         <p>The body of the exception contains a JSON object that describes the resource.</p>\n         <p>\n            <code>{ \"resourceType\": BOT | BOTALIAS | BOTCHANNEL | INTENT,</code>\n         </p>\n         <p>\n            <code>\"resourceReference\": {</code>\n         </p>\n         <p>\n            <code>\"name\": <i>string</i>, \"version\": <i>string</i> }\n        }</code>\n         </p>\n      ",
          "shape_name": "ResourceInUseException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> There was a conflict processing the request. Try your request again. </simpara>\n      ",
          "documentation": "\n         <p> There was a conflict processing the request. Try your request again. </p>\n      ",
          "shape_name": "ConflictException"
        }
      ],
      "documentation": null
    },
    "PutBotAlias": {
      "name": "PutBotAlias",
      "http": {
        "method": "PUT",
        "uri": "/bots/{botName}/aliases/{name}",
        "response_code": 200
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the alias. The name is <emphasis>not</emphasis> case sensitive.</simpara>\n      ",
            "documentation": "\n         <p>The name of the alias. The name is <i>not</i> case sensitive.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "AliasName",
            "min_length": 1,
            "max_length": 100
          },
          "description": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A description of the alias.</simpara>\n      ",
            "documentation": "\n         <p>A description of the alias.</p>\n      ",
            "shape_name": "Description",
            "min_length": 0,
            "max_length": 200
          },
          "botVersion": {
            "type": "string",
            "pattern": "\\$LATEST|[0-9]+",
            "zonbookDocumentation": "\n         <simpara>The version of the bot.</simpara>\n      ",
            "documentation": "\n         <p>The version of the bot.</p>\n      ",
            "required": true,
            "shape_name": "Version",
            "min_length": 1,
            "max_length": 64
          },
          "botName": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the bot.</simpara>\n      ",
            "documentation": "\n         <p>The name of the bot.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          },
          "checksum": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Identifies a specific revision of the <code>$LATEST</code> version.</simpara>\n         <simpara>When you create a new bot alias, leave the <code>checksum</code> field blank. If you\n      specify a checksum you get a <code>BadRequestException</code> exception.</simpara>\n         <simpara>When you want to update a bot alias, set the <code>checksum</code> field to the\n      checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify\n      the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code>\n      version, you get a <code>PreconditionFailedException</code> exception.</simpara>\n      ",
            "documentation": "\n         <p>Identifies a specific revision of the <code>$LATEST</code> version.</p>\n         <p>When you create a new bot alias, leave the <code>checksum</code> field blank. If you\n      specify a checksum you get a <code>BadRequestException</code> exception.</p>\n         <p>When you want to update a bot alias, set the <code>checksum</code> field to the\n      checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify\n      the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code>\n      version, you get a <code>PreconditionFailedException</code> exception.</p>\n      ",
            "shape_name": "String"
          }
        },
        "shape_name": "PutBotAliasRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the alias.</simpara>\n      ",
            "documentation": "\n         <p>The name of the alias.</p>\n      ",
            "shape_name": "AliasName",
            "min_length": 1,
            "max_length": 100
          },
          "description": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A description of the alias.</simpara>\n      ",
            "documentation": "\n         <p>A description of the alias.</p>\n      ",
            "shape_name": "Description",
            "min_length": 0,
            "max_length": 200
          },
          "botVersion": {
            "type": "string",
            "pattern": "\\$LATEST|[0-9]+",
            "zonbookDocumentation": "\n         <simpara>The version of the bot that the alias points to.</simpara>\n      ",
            "documentation": "\n         <p>The version of the bot that the alias points to.</p>\n      ",
            "shape_name": "Version",
            "min_length": 1,
            "max_length": 64
          },
          "botName": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the bot that the alias points to.</simpara>\n      ",
            "documentation": "\n         <p>The name of the bot that the alias points to.</p>\n      ",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          },
          "lastUpdatedDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The date that the bot alias was updated. When you create a resource, the creation date\n      and the last updated date are the same.</simpara>\n      ",
            "documentation": "\n         <p>The date that the bot alias was updated. When you create a resource, the creation date\n      and the last updated date are the same.</p>\n      ",
            "shape_name": "Timestamp"
          },
          "createdDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The date that the bot alias was created.</simpara>\n      ",
            "documentation": "\n         <p>The date that the bot alias was created.</p>\n      ",
            "shape_name": "Timestamp"
          },
          "checksum": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The checksum for the current version of the alias.</simpara>\n      ",
            "documentation": "\n         <p>The checksum for the current version of the alias.</p>\n      ",
            "shape_name": "String"
          }
        },
        "shape_name": "PutBotAliasResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> There was a conflict processing the request. Try your request again. </simpara>\n      ",
          "documentation": "\n         <p> There was a conflict processing the request. Try your request again. </p>\n      ",
          "shape_name": "ConflictException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> The checksum of the resource that you are trying to change does not match the checksum\n      in the request. Check the resource's checksum and try again.</simpara>\n      ",
          "documentation": "\n         <p> The checksum of the resource that you are trying to change does not match the checksum\n      in the request. Check the resource's checksum and try again.</p>\n      ",
          "shape_name": "PreconditionFailedException"
        }
      ],
      "documentation": "\n         <p>Creates an alias for the specified version of the bot or replaces an alias for the\n      specified bot. To change the version of the bot that the alias points to, replace the alias.\n      For more information about aliases, see <a>versioning-aliases</a>.</p>\n         <p>This operation requires permissions for the <code>lex:PutBotAlias</code> action.\n    </p>\n      "
    },
    "GetBotAlias": {
      "name": "GetBotAlias",
      "http": {
        "method": "GET",
        "uri": "/bots/{botName}/aliases/{name}",
        "response_code": 200
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the bot alias. The name is case sensitive.</simpara>\n      ",
            "documentation": "\n         <p>The name of the bot alias. The name is case sensitive.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "AliasName",
            "min_length": 1,
            "max_length": 100
          },
          "botName": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the bot.</simpara>\n      ",
            "documentation": "\n         <p>The name of the bot.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          }
        },
        "shape_name": "GetBotAliasRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the bot alias.</simpara>\n      ",
            "documentation": "\n         <p>The name of the bot alias.</p>\n      ",
            "shape_name": "AliasName",
            "min_length": 1,
            "max_length": 100
          },
          "description": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A description of the bot alias.</simpara>\n      ",
            "documentation": "\n         <p>A description of the bot alias.</p>\n      ",
            "shape_name": "Description",
            "min_length": 0,
            "max_length": 200
          },
          "botVersion": {
            "type": "string",
            "pattern": "\\$LATEST|[0-9]+",
            "zonbookDocumentation": "\n         <simpara>The version of the bot that the alias points to.</simpara>\n      ",
            "documentation": "\n         <p>The version of the bot that the alias points to.</p>\n      ",
            "shape_name": "Version",
            "min_length": 1,
            "max_length": 64
          },
          "botName": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the bot that the alias points to.</simpara>\n      ",
            "documentation": "\n         <p>The name of the bot that the alias points to.</p>\n      ",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          },
          "lastUpdatedDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The date that the bot alias was updated. When you create a resource, the creation date\n      and the last updated date are the same.</simpara>\n      ",
            "documentation": "\n         <p>The date that the bot alias was updated. When you create a resource, the creation date\n      and the last updated date are the same.</p>\n      ",
            "shape_name": "Timestamp"
          },
          "createdDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The date that the bot alias was created.</simpara>\n      ",
            "documentation": "\n         <p>The date that the bot alias was created.</p>\n      ",
            "shape_name": "Timestamp"
          },
          "checksum": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Checksum of the bot alias.</simpara>\n      ",
            "documentation": "\n         <p>Checksum of the bot alias.</p>\n      ",
            "shape_name": "String"
          }
        },
        "shape_name": "GetBotAliasResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n         <p>Returns information about an Amazon Lex bot alias. For more information about aliases, see\n        <a>versioning-aliases</a>.</p>\n         <p>This operation requires permissions for the <code>lex:GetBotAlias</code>\n      action.</p>\n      "
    },
    "DeleteBotAlias": {
      "name": "DeleteBotAlias",
      "http": {
        "method": "DELETE",
        "uri": "/bots/{botName}/aliases/{name}",
        "response_code": 204
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the alias to delete. The name is case sensitive. </simpara>\n      ",
            "documentation": "\n         <p>The name of the alias to delete. The name is case sensitive. </p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "AliasName",
            "min_length": 1,
            "max_length": 100
          },
          "botName": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the bot that the alias points to.</simpara>\n      ",
            "documentation": "\n         <p>The name of the bot that the alias points to.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          }
        },
        "shape_name": "DeleteBotAliasRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> There was a conflict processing the request. Try your request again. </simpara>\n      ",
          "documentation": "\n         <p> There was a conflict processing the request. Try your request again. </p>\n      ",
          "shape_name": "ConflictException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        },
        {
          "type": "structure",
          "members": {
            "referenceType": {
              "type": "string",
              "enum": [
                "Intent",
                "Bot",
                "BotAlias",
                "BotChannel"
              ],
              "shape_name": "ReferenceType",
              "documentation": null
            },
            "exampleReference": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "pattern": "[a-zA-Z_]+",
                  "zonbookDocumentation": "\n         <simpara>The name of the resource that is using the resource that you are trying to\n      delete.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the resource that is using the resource that you are trying to\n      delete.</p>\n      ",
                  "shape_name": "Name",
                  "min_length": 1,
                  "max_length": 100
                },
                "version": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the resource that is using the resource that you are trying to\n      delete.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the resource that is using the resource that you are trying to\n      delete.</p>\n      ",
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                }
              },
              "zonbookDocumentation": "\n         <simpara>Describes the resource that refers to the resource that you are attempting to delete.\n      This object is returned as part of the <code>ResourceInUseException</code> exception.\n    </simpara>\n      ",
              "documentation": "\n         <p>Describes the resource that refers to the resource that you are attempting to delete.\n      This object is returned as part of the <code>ResourceInUseException</code> exception.\n    </p>\n      ",
              "shape_name": "ResourceReference"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource that you are attempting to delete is referred to by another resource. Use\n      this information to remove references to the resource that you are trying to delete.</simpara>\n         <simpara>The body of the exception contains a JSON object that describes the resource.</simpara>\n         <simpara>\n            <code>{ \"resourceType\": BOT | BOTALIAS | BOTCHANNEL | INTENT,</code>\n         </simpara>\n         <simpara>\n            <code>\"resourceReference\": {</code>\n         </simpara>\n         <simpara>\n            <code>\"name\": <emphasis>string</emphasis>, \"version\": <emphasis>string</emphasis> }\n        }</code>\n         </simpara>\n      ",
          "documentation": "\n         <p>The resource that you are attempting to delete is referred to by another resource. Use\n      this information to remove references to the resource that you are trying to delete.</p>\n         <p>The body of the exception contains a JSON object that describes the resource.</p>\n         <p>\n            <code>{ \"resourceType\": BOT | BOTALIAS | BOTCHANNEL | INTENT,</code>\n         </p>\n         <p>\n            <code>\"resourceReference\": {</code>\n         </p>\n         <p>\n            <code>\"name\": <i>string</i>, \"version\": <i>string</i> }\n        }</code>\n         </p>\n      ",
          "shape_name": "ResourceInUseException"
        }
      ],
      "documentation": "\n         <p>Deletes an alias for the specified bot. </p>\n         <p>You can't delete an alias that is used in the association between a bot and a messaging\n      channel. If an alias is used in a channel association, the <code>DeleteBot</code> operation\n      returns a <code>ResourceInUseException</code> exception that includes a reference to the\n      channel association that refers to the bot. You can remove the reference to the alias by\n      deleting the channel association. If you get the same exception again, delete the referring\n      association until the <code>DeleteBotAlias</code> operation is successful.</p>\n      "
    },
    "GetBotAliases": {
      "name": "GetBotAliases",
      "http": {
        "method": "GET",
        "uri": "/bots/{botName}/aliases/?nameContains={nameContains}&nextToken={nextToken}&maxResults={maxResults}",
        "response_code": 200
      },
      "input": {
        "type": "structure",
        "members": {
          "botName": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the bot.</simpara>\n      ",
            "documentation": "\n         <p>The name of the bot.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A pagination token for fetching the next page of aliases. If the response to this call\n      is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of\n      aliases, specify the pagination token in the next request. </simpara>\n      ",
            "documentation": "\n         <p>A pagination token for fetching the next page of aliases. If the response to this call\n      is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of\n      aliases, specify the pagination token in the next request. </p>\n      ",
            "paginationToken": true,
            "location": "uri",
            "shape_name": "NextToken"
          },
          "maxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The maximum number of aliases to return in the response. The default is 50. .\n    </simpara>\n      ",
            "documentation": "\n         <p>The maximum number of aliases to return in the response. The default is 50. .\n    </p>\n      ",
            "pageSize": true,
            "location": "uri",
            "shape_name": "MaxResults",
            "min_length": 1,
            "max_length": 50
          },
          "nameContains": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>Substring to match in bot alias names. An alias will be returned if any part of its\n      name matches the substring. For example, \"xyz\" matches both \"xyzabc\" and \"abcxyz.\"</simpara>\n      ",
            "documentation": "\n         <p>Substring to match in bot alias names. An alias will be returned if any part of its\n      name matches the substring. For example, \"xyz\" matches both \"xyzabc\" and \"abcxyz.\"</p>\n      ",
            "location": "uri",
            "shape_name": "AliasName",
            "min_length": 1,
            "max_length": 100
          }
        },
        "shape_name": "GetBotAliasesRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "BotAliases": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of <code>BotAliasMetadata</code> objects, each describing a bot\n      alias.</simpara>\n      ",
            "documentation": "\n         <p>An array of <code>BotAliasMetadata</code> objects, each describing a bot\n      alias.</p>\n      ",
            "shape_name": "BotAliasMetadataList",
            "members": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "pattern": "^([A-Za-z]_?)+$",
                  "zonbookDocumentation": "\n         <simpara>The name of the bot alias.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the bot alias.</p>\n      ",
                  "shape_name": "AliasName",
                  "min_length": 1,
                  "max_length": 100
                },
                "description": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A description of the bot alias.</simpara>\n      ",
                  "documentation": "\n         <p>A description of the bot alias.</p>\n      ",
                  "shape_name": "Description",
                  "min_length": 0,
                  "max_length": 200
                },
                "botVersion": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the Amazon Lex bot to which the alias points.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the Amazon Lex bot to which the alias points.</p>\n      ",
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                },
                "botName": {
                  "type": "string",
                  "pattern": "^([A-Za-z]_?)+$",
                  "zonbookDocumentation": "\n         <simpara>The name of the bot to which the alias points.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the bot to which the alias points.</p>\n      ",
                  "shape_name": "BotName",
                  "min_length": 2,
                  "max_length": 50
                },
                "lastUpdatedDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The date that the bot alias was updated. When you create a resource, the creation date\n      and last updated date are the same.</simpara>\n      ",
                  "documentation": "\n         <p>The date that the bot alias was updated. When you create a resource, the creation date\n      and last updated date are the same.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "createdDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The date that the bot alias was created.</simpara>\n      ",
                  "documentation": "\n         <p>The date that the bot alias was created.</p>\n      ",
                  "shape_name": "Timestamp"
                },
                "checksum": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>Checksum of the bot alias.</simpara>\n      ",
                  "documentation": "\n         <p>Checksum of the bot alias.</p>\n      ",
                  "shape_name": "String"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Provides information about a bot alias.</simpara>\n      ",
              "documentation": "\n         <p>Provides information about a bot alias.</p>\n      ",
              "shape_name": "BotAliasMetadata"
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A pagination token for fetching next page of aliases. If the response to this call is\n      truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of\n      aliases, specify the pagination token in the next request. </simpara>\n      ",
            "documentation": "\n         <p>A pagination token for fetching next page of aliases. If the response to this call is\n      truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of\n      aliases, specify the pagination token in the next request. </p>\n      ",
            "paginationToken": true,
            "shape_name": "NextToken"
          }
        },
        "shape_name": "GetBotAliasesResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n         <p>Returns a list of aliases for a specified Amazon Lex bot.</p>\n         <p>This operation requires permissions for the <code>lex:GetBotAliases</code>\n      action.</p>\n      "
    },
    "CreateBotChannelAssociation": {
      "name": "CreateBotChannelAssociation",
      "http": {
        "method": "POST",
        "uri": "/bots/{botName}/aliases/{botAlias}/channels",
        "response_code": 201
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>\n            <emphasis>The name of the association between the bot and the messaging channel. The name is\n        case sensitive.</emphasis>\n         </simpara>\n      ",
            "documentation": "\n         <p>\n            <i>The name of the association between the bot and the messaging channel. The name is\n        case sensitive.</i>\n         </p>\n      ",
            "required": true,
            "shape_name": "BotChannelName",
            "min_length": 1,
            "max_length": 100
          },
          "description": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>\n            <emphasis>A description of the association between the bot and the messaging\n        channel.</emphasis>\n         </simpara>\n      ",
            "documentation": "\n         <p>\n            <i>A description of the association between the bot and the messaging\n        channel.</i>\n         </p>\n      ",
            "shape_name": "Description",
            "min_length": 0,
            "max_length": 200
          },
          "botAlias": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>\n            <emphasis>The name of the bot alias to associate with the messaging channel.</emphasis>\n         </simpara>\n      ",
            "documentation": "\n         <p>\n            <i>The name of the bot alias to associate with the messaging channel.</i>\n         </p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "AliasName",
            "min_length": 1,
            "max_length": 100
          },
          "botName": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>\n            <emphasis>The name of the bot to associate with the messaging channel.</emphasis>\n         </simpara>\n      ",
            "documentation": "\n         <p>\n            <i>The name of the bot to associate with the messaging channel.</i>\n         </p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          },
          "type": {
            "type": "string",
            "enum": [
              "Facebook",
              "Slack",
              "Twilio-Sms",
              "Kik"
            ],
            "zonbookDocumentation": "\n         <simpara/>\n      ",
            "documentation": "\n         <p/>\n      ",
            "required": true,
            "shape_name": "ChannelType"
          },
          "channelConfiguration": {
            "type": "map",
            "sensitive": true,
            "zonbookDocumentation": "\n         <simpara/>\n      ",
            "documentation": "\n         <p/>\n      ",
            "required": true,
            "shape_name": "ChannelConfigurationMap",
            "min_length": 1,
            "max_length": 10,
            "keys": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            },
            "members": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "kmsKeyId": {
            "type": "string",
            "shape_name": "KmsKeyID",
            "documentation": null,
            "min_length": 1,
            "max_length": 2048
          }
        },
        "shape_name": "CreateBotChannelAssociationRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>\n            <emphasis>The name of the association between the bot and the messaging channel.</emphasis>\n         </simpara>\n      ",
            "documentation": "\n         <p>\n            <i>The name of the association between the bot and the messaging channel.</i>\n         </p>\n      ",
            "shape_name": "BotChannelName",
            "min_length": 1,
            "max_length": 100
          },
          "description": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>\n            <emphasis>A description of the association between the bot and the messaging\n        channel.</emphasis>\n         </simpara>\n      ",
            "documentation": "\n         <p>\n            <i>A description of the association between the bot and the messaging\n        channel.</i>\n         </p>\n      ",
            "shape_name": "Description",
            "min_length": 0,
            "max_length": 200
          },
          "botAlias": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>\n            <emphasis>The bot alias associated with the messaging channel.</emphasis>\n         </simpara>\n      ",
            "documentation": "\n         <p>\n            <i>The bot alias associated with the messaging channel.</i>\n         </p>\n      ",
            "shape_name": "AliasName",
            "min_length": 1,
            "max_length": 100
          },
          "botName": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>\n            <emphasis>The name of the bot associated with the messaging channel.</emphasis>\n         </simpara>\n      ",
            "documentation": "\n         <p>\n            <i>The name of the bot associated with the messaging channel.</i>\n         </p>\n      ",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          },
          "createdDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>\n            <emphasis>The date that the association between the bot and the messaging channel was\n        made.</emphasis>\n         </simpara>\n      ",
            "documentation": "\n         <p>\n            <i>The date that the association between the bot and the messaging channel was\n        made.</i>\n         </p>\n      ",
            "shape_name": "Timestamp"
          },
          "type": {
            "type": "string",
            "enum": [
              "Facebook",
              "Slack",
              "Twilio-Sms",
              "Kik"
            ],
            "zonbookDocumentation": "\n         <simpara/>\n      ",
            "documentation": "\n         <p/>\n      ",
            "shape_name": "ChannelType"
          },
          "botConfiguration": {
            "type": "map",
            "sensitive": true,
            "zonbookDocumentation": "\n         <simpara/>\n      ",
            "documentation": "\n         <p/>\n      ",
            "shape_name": "ChannelConfigurationMap",
            "min_length": 1,
            "max_length": 10,
            "keys": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            },
            "members": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "CREATED",
              "FAILED"
            ],
            "shape_name": "ChannelStatus",
            "documentation": null
          },
          "failureReason": {
            "type": "string",
            "shape_name": "String",
            "documentation": null
          }
        },
        "shape_name": "CreateBotChannelAssociationResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> There was a conflict processing the request. Try your request again. </simpara>\n      ",
          "documentation": "\n         <p> There was a conflict processing the request. Try your request again. </p>\n      ",
          "shape_name": "ConflictException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n         <p> Creates an association between a bot and a messaging channel, such as Facebook, Slack,\n      or Twilio. </p>\n      "
    },
    "GetBotChannelAssociation": {
      "name": "GetBotChannelAssociation",
      "http": {
        "method": "GET",
        "uri": "/bots/{botName}/aliases/{botAlias}/channels/{name}",
        "response_code": 200
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the association between the bot and the channel. The name is case\n      sensitive. </simpara>\n      ",
            "documentation": "\n         <p>The name of the association between the bot and the channel. The name is case\n      sensitive. </p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "BotChannelName",
            "min_length": 1,
            "max_length": 100
          },
          "botName": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the Amazon Lex bot.</simpara>\n      ",
            "documentation": "\n         <p>The name of the Amazon Lex bot.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          },
          "botAlias": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>An alias pointing to the specific version of the Amazon Lex bot to which this association is\n      being made.</simpara>\n      ",
            "documentation": "\n         <p>An alias pointing to the specific version of the Amazon Lex bot to which this association is\n      being made.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "AliasName",
            "min_length": 1,
            "max_length": 100
          }
        },
        "shape_name": "GetBotChannelAssociationRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the association between the bot and the channel.</simpara>\n      ",
            "documentation": "\n         <p>The name of the association between the bot and the channel.</p>\n      ",
            "shape_name": "BotChannelName",
            "min_length": 1,
            "max_length": 100
          },
          "description": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A description of the association between the bot and the channel.</simpara>\n      ",
            "documentation": "\n         <p>A description of the association between the bot and the channel.</p>\n      ",
            "shape_name": "Description",
            "min_length": 0,
            "max_length": 200
          },
          "botAlias": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>An alias pointing to the specific version of the Amazon Lex bot to which this association is\n      being made.</simpara>\n      ",
            "documentation": "\n         <p>An alias pointing to the specific version of the Amazon Lex bot to which this association is\n      being made.</p>\n      ",
            "shape_name": "AliasName",
            "min_length": 1,
            "max_length": 100
          },
          "botName": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the Amazon Lex bot.</simpara>\n      ",
            "documentation": "\n         <p>The name of the Amazon Lex bot.</p>\n      ",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          },
          "createdDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>The date that the association between the bot and the channel was created.</simpara>\n      ",
            "documentation": "\n         <p>The date that the association between the bot and the channel was created.</p>\n      ",
            "shape_name": "Timestamp"
          },
          "type": {
            "type": "string",
            "enum": [
              "Facebook",
              "Slack",
              "Twilio-Sms",
              "Kik"
            ],
            "zonbookDocumentation": "\n         <simpara>The type of the messaging platform.</simpara>\n      ",
            "documentation": "\n         <p>The type of the messaging platform.</p>\n      ",
            "shape_name": "ChannelType"
          },
          "botConfiguration": {
            "type": "map",
            "sensitive": true,
            "zonbookDocumentation": "\n         <simpara>Provides information that the messaging platform needs to communicate with the Amazon Lex\n      bot.</simpara>\n      ",
            "documentation": "\n         <p>Provides information that the messaging platform needs to communicate with the Amazon Lex\n      bot.</p>\n      ",
            "shape_name": "ChannelConfigurationMap",
            "min_length": 1,
            "max_length": 10,
            "keys": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            },
            "members": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "CREATED",
              "FAILED"
            ],
            "zonbookDocumentation": "\n         <simpara>The status of the bot channel. </simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>CREATED</code> - The channel has been created and is ready for use.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>IN_PROGRESS</code> - Channel creation is in progress.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>FAILED</code> - There was an error creating the channel. For information\n          about the reason for the failure, see the <code>failureReason</code> field.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
            "documentation": "\n         <p>The status of the bot channel. </p>\n         <ul>\n            <li>\n               <p>\n                  <code>CREATED</code> - The channel has been created and is ready for use.</p>\n            </li>\n            <li>\n               <p>\n                  <code>IN_PROGRESS</code> - Channel creation is in progress.</p>\n            </li>\n            <li>\n               <p>\n                  <code>FAILED</code> - There was an error creating the channel. For information\n          about the reason for the failure, see the <code>failureReason</code> field.</p>\n            </li>\n         </ul>\n      ",
            "shape_name": "ChannelStatus"
          },
          "failureReason": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If <code>status</code> is <code>FAILED</code>, Amazon Lex provides the reason that it failed\n      to create the association.</simpara>\n      ",
            "documentation": "\n         <p>If <code>status</code> is <code>FAILED</code>, Amazon Lex provides the reason that it failed\n      to create the association.</p>\n      ",
            "shape_name": "String"
          }
        },
        "shape_name": "GetBotChannelAssociationResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n         <p>Returns information about the association between an Amazon Lex bot and a messaging\n      platform.</p>\n         <p>This operation requires permissions for the <code>lex:GetBotChannelAssociation</code>\n      action.</p>\n      "
    },
    "GetBotChannelAssociations": {
      "name": "GetBotChannelAssociations",
      "http": {
        "method": "GET",
        "uri": "/bots/{botName}/aliases/{botAlias}/channels/?nameContains={nameContains}&nextToken={nextToken}&maxResults={maxResults}",
        "response_code": 200
      },
      "input": {
        "type": "structure",
        "members": {
          "botName": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the Amazon Lex bot in the association.</simpara>\n      ",
            "documentation": "\n         <p>The name of the Amazon Lex bot in the association.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          },
          "botAlias": {
            "type": "string",
            "pattern": "^(-|^([A-Za-z]_?)+$)$",
            "zonbookDocumentation": "\n         <simpara>An alias pointing to the specific version of the Amazon Lex bot to which this association is\n      being made.</simpara>\n      ",
            "documentation": "\n         <p>An alias pointing to the specific version of the Amazon Lex bot to which this association is\n      being made.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "AliasNameOrListAll",
            "min_length": 1,
            "max_length": 100
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A pagination token for fetching the next page of associations. If the response to this\n      call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of\n      associations, specify the pagination token in the next request. </simpara>\n      ",
            "documentation": "\n         <p>A pagination token for fetching the next page of associations. If the response to this\n      call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of\n      associations, specify the pagination token in the next request. </p>\n      ",
            "paginationToken": true,
            "location": "uri",
            "shape_name": "NextToken"
          },
          "maxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The maximum number of associations to return in the response. The default is 50.\n    </simpara>\n      ",
            "documentation": "\n         <p>The maximum number of associations to return in the response. The default is 50.\n    </p>\n      ",
            "pageSize": true,
            "location": "uri",
            "shape_name": "MaxResults",
            "min_length": 1,
            "max_length": 50
          },
          "nameContains": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>Substring to match in channel association names. An association will be returned if any\n      part of its name matches the substring. For example, \"xyz\" matches both \"xyzabc\" and \"abcxyz.\"\n      To return all bot channel associations, use a hyphen (\"-\") as the <code>nameContains</code>\n      parameter.</simpara>\n      ",
            "documentation": "\n         <p>Substring to match in channel association names. An association will be returned if any\n      part of its name matches the substring. For example, \"xyz\" matches both \"xyzabc\" and \"abcxyz.\"\n      To return all bot channel associations, use a hyphen (\"-\") as the <code>nameContains</code>\n      parameter.</p>\n      ",
            "location": "uri",
            "shape_name": "BotChannelName",
            "min_length": 1,
            "max_length": 100
          }
        },
        "shape_name": "GetBotChannelAssociationsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "botChannelAssociations": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of objects, one for each association, that provides information about the\n      Amazon Lex bot and its association with the channel. </simpara>\n      ",
            "documentation": "\n         <p>An array of objects, one for each association, that provides information about the\n      Amazon Lex bot and its association with the channel. </p>\n      ",
            "shape_name": "BotChannelAssociationList",
            "members": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "pattern": "^([A-Za-z]_?)+$",
                  "zonbookDocumentation": "\n         <simpara>The name of the association between the bot and the channel. </simpara>\n      ",
                  "documentation": "\n         <p>The name of the association between the bot and the channel. </p>\n      ",
                  "shape_name": "BotChannelName",
                  "min_length": 1,
                  "max_length": 100
                },
                "description": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A text description of the association you are creating. </simpara>\n      ",
                  "documentation": "\n         <p>A text description of the association you are creating. </p>\n      ",
                  "shape_name": "Description",
                  "min_length": 0,
                  "max_length": 200
                },
                "botAlias": {
                  "type": "string",
                  "pattern": "^([A-Za-z]_?)+$",
                  "zonbookDocumentation": "\n         <simpara>An alias pointing to the specific version of the Amazon Lex bot to which this association is\n      being made. </simpara>\n      ",
                  "documentation": "\n         <p>An alias pointing to the specific version of the Amazon Lex bot to which this association is\n      being made. </p>\n      ",
                  "shape_name": "AliasName",
                  "min_length": 1,
                  "max_length": 100
                },
                "botName": {
                  "type": "string",
                  "pattern": "^([A-Za-z]_?)+$",
                  "zonbookDocumentation": "\n         <simpara>The name of the Amazon Lex bot to which this association is being made. </simpara>\n         <note>\n            <simpara>Currently, Amazon Lex supports associations with Facebook and Slack, and Twilio.</simpara>\n\n         </note>\n      ",
                  "documentation": "\n         <p>The name of the Amazon Lex bot to which this association is being made. </p>\n         <note>\n            <p>Currently, Amazon Lex supports associations with Facebook and Slack, and Twilio.</p>\n\n         </note>\n      ",
                  "shape_name": "BotName",
                  "min_length": 2,
                  "max_length": 50
                },
                "createdDate": {
                  "type": "timestamp",
                  "zonbookDocumentation": "\n         <simpara>The date that the association between the Amazon Lex bot and the channel was created.\n    </simpara>\n      ",
                  "documentation": "\n         <p>The date that the association between the Amazon Lex bot and the channel was created.\n    </p>\n      ",
                  "shape_name": "Timestamp"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "Facebook",
                    "Slack",
                    "Twilio-Sms",
                    "Kik"
                  ],
                  "zonbookDocumentation": "\n         <simpara>Specifies the type of association by indicating the type of channel being established\n      between the Amazon Lex bot and the external messaging platform.</simpara>\n      ",
                  "documentation": "\n         <p>Specifies the type of association by indicating the type of channel being established\n      between the Amazon Lex bot and the external messaging platform.</p>\n      ",
                  "shape_name": "ChannelType"
                },
                "botConfiguration": {
                  "type": "map",
                  "sensitive": true,
                  "zonbookDocumentation": "\n         <simpara>Provides information necessary to communicate with the messaging platform. </simpara>\n      ",
                  "documentation": "\n         <p>Provides information necessary to communicate with the messaging platform. </p>\n      ",
                  "shape_name": "ChannelConfigurationMap",
                  "min_length": 1,
                  "max_length": 10,
                  "keys": {
                    "type": "string",
                    "shape_name": "String",
                    "documentation": null
                  },
                  "members": {
                    "type": "string",
                    "shape_name": "String",
                    "documentation": null
                  }
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "IN_PROGRESS",
                    "CREATED",
                    "FAILED"
                  ],
                  "zonbookDocumentation": "\n         <simpara>The status of the bot channel. </simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>CREATED</code> - The channel has been created and is ready for use.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>IN_PROGRESS</code> - Channel creation is in progress.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>FAILED</code> - There was an error creating the channel. For information\n          about the reason for the failure, see the <code>failureReason</code> field.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
                  "documentation": "\n         <p>The status of the bot channel. </p>\n         <ul>\n            <li>\n               <p>\n                  <code>CREATED</code> - The channel has been created and is ready for use.</p>\n            </li>\n            <li>\n               <p>\n                  <code>IN_PROGRESS</code> - Channel creation is in progress.</p>\n            </li>\n            <li>\n               <p>\n                  <code>FAILED</code> - There was an error creating the channel. For information\n          about the reason for the failure, see the <code>failureReason</code> field.</p>\n            </li>\n         </ul>\n      ",
                  "shape_name": "ChannelStatus"
                },
                "failureReason": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>If <code>status</code> is <code>FAILED</code>, Amazon Lex provides the reason that it failed\n      to create the association.</simpara>\n      ",
                  "documentation": "\n         <p>If <code>status</code> is <code>FAILED</code>, Amazon Lex provides the reason that it failed\n      to create the association.</p>\n      ",
                  "shape_name": "String"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Represents an association between an Amazon Lex bot and an external messaging\n      platform.</simpara>\n      ",
              "documentation": "\n         <p>Represents an association between an Amazon Lex bot and an external messaging\n      platform.</p>\n      ",
              "shape_name": "BotChannelAssociation"
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A pagination token that fetches the next page of associations. If the response to this\n      call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of\n      associations, specify the pagination token in the next request. </simpara>\n      ",
            "documentation": "\n         <p>A pagination token that fetches the next page of associations. If the response to this\n      call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of\n      associations, specify the pagination token in the next request. </p>\n      ",
            "paginationToken": true,
            "shape_name": "NextToken"
          }
        },
        "shape_name": "GetBotChannelAssociationsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n         <p> Returns a list of all of the channels associated with the specified bot. </p>\n         <p>The <code>GetBotChannelAssociations</code> operation requires permissions for the\n        <code>lex:GetBotChannelAssociations</code> action.</p>\n      "
    },
    "DeleteBotChannelAssociation": {
      "name": "DeleteBotChannelAssociation",
      "http": {
        "method": "DELETE",
        "uri": "/bots/{botName}/aliases/{botAlias}/channels/{name}",
        "response_code": 204
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the association. The name is case sensitive. </simpara>\n      ",
            "documentation": "\n         <p>The name of the association. The name is case sensitive. </p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "BotChannelName",
            "min_length": 1,
            "max_length": 100
          },
          "botName": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the Amazon Lex bot.</simpara>\n      ",
            "documentation": "\n         <p>The name of the Amazon Lex bot.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          },
          "botAlias": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>An alias that points to the specific version of the Amazon Lex bot to which this association\n      is being made.</simpara>\n      ",
            "documentation": "\n         <p>An alias that points to the specific version of the Amazon Lex bot to which this association\n      is being made.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "AliasName",
            "min_length": 1,
            "max_length": 100
          }
        },
        "shape_name": "DeleteBotChannelAssociationRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> There was a conflict processing the request. Try your request again. </simpara>\n      ",
          "documentation": "\n         <p> There was a conflict processing the request. Try your request again. </p>\n      ",
          "shape_name": "ConflictException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n         <p>Deletes the association between an Amazon Lex bot and a messaging platform.</p>\n         <p>This operation requires permission for the <code>lex:DeleteBotChannelAssociation</code>\n      action.</p>\n      "
    },
    "DeleteServiceRoleForLexChannels": {
      "name": "DeleteServiceRoleForLexChannels",
      "http": {
        "method": "DELETE",
        "uri": "/roles/channel",
        "response_code": 204
      },
      "input": null,
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "referenceType": {
              "type": "string",
              "enum": [
                "Intent",
                "Bot",
                "BotAlias",
                "BotChannel"
              ],
              "shape_name": "ReferenceType",
              "documentation": null
            },
            "exampleReference": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "pattern": "[a-zA-Z_]+",
                  "zonbookDocumentation": "\n         <simpara>The name of the resource that is using the resource that you are trying to\n      delete.</simpara>\n      ",
                  "documentation": "\n         <p>The name of the resource that is using the resource that you are trying to\n      delete.</p>\n      ",
                  "shape_name": "Name",
                  "min_length": 1,
                  "max_length": 100
                },
                "version": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the resource that is using the resource that you are trying to\n      delete.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the resource that is using the resource that you are trying to\n      delete.</p>\n      ",
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                }
              },
              "zonbookDocumentation": "\n         <simpara>Describes the resource that refers to the resource that you are attempting to delete.\n      This object is returned as part of the <code>ResourceInUseException</code> exception.\n    </simpara>\n      ",
              "documentation": "\n         <p>Describes the resource that refers to the resource that you are attempting to delete.\n      This object is returned as part of the <code>ResourceInUseException</code> exception.\n    </p>\n      ",
              "shape_name": "ResourceReference"
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource that you are attempting to delete is referred to by another resource. Use\n      this information to remove references to the resource that you are trying to delete.</simpara>\n         <simpara>The body of the exception contains a JSON object that describes the resource.</simpara>\n         <simpara>\n            <code>{ \"resourceType\": BOT | BOTALIAS | BOTCHANNEL | INTENT,</code>\n         </simpara>\n         <simpara>\n            <code>\"resourceReference\": {</code>\n         </simpara>\n         <simpara>\n            <code>\"name\": <emphasis>string</emphasis>, \"version\": <emphasis>string</emphasis> }\n        }</code>\n         </simpara>\n      ",
          "documentation": "\n         <p>The resource that you are attempting to delete is referred to by another resource. Use\n      this information to remove references to the resource that you are trying to delete.</p>\n         <p>The body of the exception contains a JSON object that describes the resource.</p>\n         <p>\n            <code>{ \"resourceType\": BOT | BOTALIAS | BOTCHANNEL | INTENT,</code>\n         </p>\n         <p>\n            <code>\"resourceReference\": {</code>\n         </p>\n         <p>\n            <code>\"name\": <i>string</i>, \"version\": <i>string</i> }\n        }</code>\n         </p>\n      ",
          "shape_name": "ResourceInUseException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara> There was a conflict processing the request. Try your request again. </simpara>\n      ",
          "documentation": "\n         <p> There was a conflict processing the request. Try your request again. </p>\n      ",
          "shape_name": "ConflictException"
        }
      ],
      "documentation": null
    },
    "GetBuiltinIntents": {
      "name": "GetBuiltinIntents",
      "http": {
        "method": "GET",
        "uri": "/builtins/intents/?locale={locale}&signatureContains={signatureContains}&maxResults={maxResults}&nextToken={nextToken}",
        "response_code": 200
      },
      "input": {
        "type": "structure",
        "members": {
          "locale": {
            "type": "string",
            "enum": [
              "en-US",
              "en-GB",
              "de-DE"
            ],
            "zonbookDocumentation": "\n\n         <simpara>A list of locales that the intent supports.</simpara>\n      ",
            "documentation": "\n\n         <p>A list of locales that the intent supports.</p>\n      ",
            "location": "uri",
            "shape_name": "Locale"
          },
          "signatureContains": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Substring to match in built-in intent signatures. An intent will be returned if any\n      part of its signature matches the substring. For example, \"xyz\" matches both \"xyzabc\" and\n      \"abcxyz.\" To find the signature for an intent, see <ulink url=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents\">Standard Built-in Intents</ulink> in the <emphasis>Alexa Skills Kit</emphasis>.</simpara>\n      ",
            "documentation": "\n         <p>Substring to match in built-in intent signatures. An intent will be returned if any\n      part of its signature matches the substring. For example, \"xyz\" matches both \"xyzabc\" and\n      \"abcxyz.\" To find the signature for an intent, see <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents\">Standard Built-in Intents</a> in the <i>Alexa Skills Kit</i>.</p>\n      ",
            "location": "uri",
            "shape_name": "String"
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A pagination token that fetches the next page of intents. If this API call is\n      truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of\n      intents, use the pagination token in the next request.</simpara>\n      ",
            "documentation": "\n         <p>A pagination token that fetches the next page of intents. If this API call is\n      truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of\n      intents, use the pagination token in the next request.</p>\n      ",
            "paginationToken": true,
            "location": "uri",
            "shape_name": "NextToken"
          },
          "maxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The maximum number of intents to return in the response. The default is 10.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of intents to return in the response. The default is 10.</p>\n      ",
            "pageSize": true,
            "location": "uri",
            "shape_name": "MaxResults",
            "min_length": 1,
            "max_length": 50
          }
        },
        "shape_name": "GetBuiltinIntentsRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "intents": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of <code>builtinIntentMetadata</code> objects, one for each intent in the\n      response.</simpara>\n      ",
            "documentation": "\n         <p>An array of <code>builtinIntentMetadata</code> objects, one for each intent in the\n      response.</p>\n      ",
            "shape_name": "BuiltinIntentMetadataList",
            "members": {
              "type": "structure",
              "members": {
                "signature": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A unique identifier for the built-in intent. To find the signature for an intent, see\n        <ulink url=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents\">Standard Built-in Intents</ulink> in the <emphasis>Alexa Skills Kit</emphasis>.</simpara>\n      ",
                  "documentation": "\n         <p>A unique identifier for the built-in intent. To find the signature for an intent, see\n        <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents\">Standard Built-in Intents</a> in the <i>Alexa Skills Kit</i>.</p>\n      ",
                  "shape_name": "BuiltinIntentSignature"
                },
                "supportedLocales": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>A list of identifiers for the locales that the intent supports.</simpara>\n      ",
                  "documentation": "\n         <p>A list of identifiers for the locales that the intent supports.</p>\n      ",
                  "shape_name": "LocaleList",
                  "members": {
                    "type": "string",
                    "enum": [
                      "en-US",
                      "en-GB",
                      "de-DE"
                    ],
                    "shape_name": "Locale",
                    "documentation": null
                  }
                }
              },
              "zonbookDocumentation": "\n         <simpara>Provides metadata for a built-in intent.</simpara>\n      ",
              "documentation": "\n         <p>Provides metadata for a built-in intent.</p>\n      ",
              "shape_name": "BuiltinIntentMetadata"
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A pagination token that fetches the next page of intents. If the response to this API\n      call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of\n      intents, specify the pagination token in the next request.</simpara>\n      ",
            "documentation": "\n         <p>A pagination token that fetches the next page of intents. If the response to this API\n      call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of\n      intents, specify the pagination token in the next request.</p>\n      ",
            "paginationToken": true,
            "shape_name": "NextToken"
          }
        },
        "shape_name": "GetBuiltinIntentsResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n         <p>Gets a list of built-in intents that meet the specified criteria.</p>\n         <p>This operation requires permission for the <code>lex:GetBuiltinIntents</code>\n      action.</p>\n\n      "
    },
    "GetBuiltinIntent": {
      "name": "GetBuiltinIntent",
      "http": {
        "method": "GET",
        "uri": "/builtins/intents/{signature}",
        "response_code": 200
      },
      "input": {
        "type": "structure",
        "members": {
          "signature": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The unique identifier for a built-in intent. To find the signature for an intent, see\n        <ulink url=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents\">Standard Built-in Intents</ulink> in the <emphasis>Alexa Skills Kit</emphasis>.</simpara>\n      ",
            "documentation": "\n         <p>The unique identifier for a built-in intent. To find the signature for an intent, see\n        <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents\">Standard Built-in Intents</a> in the <i>Alexa Skills Kit</i>.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "BuiltinIntentSignature"
          }
        },
        "shape_name": "GetBuiltinIntentRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "signature": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The unique identifier for a built-in intent.</simpara>\n      ",
            "documentation": "\n         <p>The unique identifier for a built-in intent.</p>\n      ",
            "shape_name": "BuiltinIntentSignature"
          },
          "supportedLocales": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A list of locales that the intent supports.</simpara>\n      ",
            "documentation": "\n         <p>A list of locales that the intent supports.</p>\n      ",
            "shape_name": "LocaleList",
            "members": {
              "type": "string",
              "enum": [
                "en-US",
                "en-GB",
                "de-DE"
              ],
              "shape_name": "Locale",
              "documentation": null
            }
          },
          "slots": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of <code>BuiltinIntentSlot</code> objects, one entry for each slot type in the\n      intent.</simpara>\n      ",
            "documentation": "\n         <p>An array of <code>BuiltinIntentSlot</code> objects, one entry for each slot type in the\n      intent.</p>\n      ",
            "shape_name": "BuiltinIntentSlotList",
            "members": {
              "type": "structure",
              "members": {
                "name": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A list of the slots defined for the intent.</simpara>\n      ",
                  "documentation": "\n         <p>A list of the slots defined for the intent.</p>\n      ",
                  "shape_name": "String"
                }
              },
              "zonbookDocumentation": "\n         <simpara>Provides information about a slot used in a built-in intent.</simpara>\n      ",
              "documentation": "\n         <p>Provides information about a slot used in a built-in intent.</p>\n      ",
              "shape_name": "BuiltinIntentSlot"
            }
          }
        },
        "shape_name": "GetBuiltinIntentResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n         <p>Returns information about a built-in intent.</p>\n         <p>This operation requires permission for the <code>lex:GetBuiltinIntent</code>\n      action.</p>\n      "
    },
    "GetBuiltinSlotTypes": {
      "name": "GetBuiltinSlotTypes",
      "http": {
        "method": "GET",
        "uri": "/builtins/slottypes/?locale={locale}&signatureContains={signatureContains}&maxResults={maxResults}&nextToken={nextToken}",
        "response_code": 200
      },
      "input": {
        "type": "structure",
        "members": {
          "locale": {
            "type": "string",
            "enum": [
              "en-US",
              "en-GB",
              "de-DE"
            ],
            "zonbookDocumentation": "\n         <simpara>A list of locales that the slot type supports.</simpara>\n      ",
            "documentation": "\n         <p>A list of locales that the slot type supports.</p>\n      ",
            "location": "uri",
            "shape_name": "Locale"
          },
          "signatureContains": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>Substring to match in built-in slot type signatures. A slot type will be returned if\n      any part of its signature matches the substring. For example, \"xyz\" matches both \"xyzabc\" and\n      \"abcxyz.\"</simpara>\n      ",
            "documentation": "\n         <p>Substring to match in built-in slot type signatures. A slot type will be returned if\n      any part of its signature matches the substring. For example, \"xyz\" matches both \"xyzabc\" and\n      \"abcxyz.\"</p>\n      ",
            "location": "uri",
            "shape_name": "String"
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>A pagination token that fetches the next page of slot types. If the response to this\n      API call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next\n      page of slot types, specify the pagination token in the next request.</simpara>\n      ",
            "documentation": "\n         <p>A pagination token that fetches the next page of slot types. If the response to this\n      API call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next\n      page of slot types, specify the pagination token in the next request.</p>\n      ",
            "paginationToken": true,
            "location": "uri",
            "shape_name": "NextToken"
          },
          "maxResults": {
            "type": "integer",
            "box": true,
            "zonbookDocumentation": "\n         <simpara>The maximum number of slot types to return in the response. The default is\n      10.</simpara>\n      ",
            "documentation": "\n         <p>The maximum number of slot types to return in the response. The default is\n      10.</p>\n      ",
            "pageSize": true,
            "location": "uri",
            "shape_name": "MaxResults",
            "min_length": 1,
            "max_length": 50
          }
        },
        "shape_name": "GetBuiltinSlotTypesRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "slotTypes": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of <code>BuiltInSlotTypeMetadata</code> objects, one entry for each slot type\n      returned.</simpara>\n      ",
            "documentation": "\n         <p>An array of <code>BuiltInSlotTypeMetadata</code> objects, one entry for each slot type\n      returned.</p>\n      ",
            "shape_name": "BuiltinSlotTypeMetadataList",
            "members": {
              "type": "structure",
              "members": {
                "signature": {
                  "type": "string",
                  "zonbookDocumentation": "\n         <simpara>A unique identifier for the built-in slot type. To find the signature for a slot type,\n      see <ulink url=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference\">Slot Type Reference</ulink> in the <emphasis>Alexa Skills Kit</emphasis>.</simpara>\n      ",
                  "documentation": "\n         <p>A unique identifier for the built-in slot type. To find the signature for a slot type,\n      see <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference\">Slot Type Reference</a> in the <i>Alexa Skills Kit</i>.</p>\n      ",
                  "shape_name": "BuiltinSlotTypeSignature"
                },
                "supportedLocales": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>A list of target locales for the slot. </simpara>\n      ",
                  "documentation": "\n         <p>A list of target locales for the slot. </p>\n      ",
                  "shape_name": "LocaleList",
                  "members": {
                    "type": "string",
                    "enum": [
                      "en-US",
                      "en-GB",
                      "de-DE"
                    ],
                    "shape_name": "Locale",
                    "documentation": null
                  }
                }
              },
              "zonbookDocumentation": "\n         <simpara>Provides information about a built in slot type.</simpara>\n      ",
              "documentation": "\n         <p>Provides information about a built in slot type.</p>\n      ",
              "shape_name": "BuiltinSlotTypeMetadata"
            }
          },
          "nextToken": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If the response is truncated, the response includes a pagination token that you can use\n      in your next request to fetch the next page of slot types.</simpara>\n      ",
            "documentation": "\n         <p>If the response is truncated, the response includes a pagination token that you can use\n      in your next request to fetch the next page of slot types.</p>\n      ",
            "paginationToken": true,
            "shape_name": "NextToken"
          }
        },
        "shape_name": "GetBuiltinSlotTypesResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n         <p>Gets a list of built-in slot types that meet the specified criteria.</p>\n         <p>For a list of built-in slot types, see <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference\">Slot Type Reference</a> in the <i>Alexa Skills Kit</i>.</p>\n\n         <p>This operation requires permission for the <code>lex:GetBuiltInSlotTypes</code>\n      action.</p>\n      "
    },
    "GetUtterancesView": {
      "name": "GetUtterancesView",
      "http": {
        "method": "GET",
        "uri": "/bots/{botName}/utterances?view=aggregation&bot_versions={botVersions}&status_type={statusType}",
        "response_code": 200
      },
      "input": {
        "type": "structure",
        "members": {
          "botName": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the bot for which utterance information should be returned.</simpara>\n      ",
            "documentation": "\n         <p>The name of the bot for which utterance information should be returned.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          },
          "botVersions": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of bot versions for which utterance information should be returned. The limit\n      is 5 versions per request.</simpara>\n      ",
            "documentation": "\n         <p>An array of bot versions for which utterance information should be returned. The limit\n      is 5 versions per request.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "BotVersions",
            "min_length": 1,
            "max_length": 5,
            "members": {
              "type": "string",
              "pattern": "\\$LATEST|[0-9]+",
              "shape_name": "Version",
              "documentation": null,
              "min_length": 1,
              "max_length": 64
            }
          },
          "statusType": {
            "type": "string",
            "enum": [
              "Detected",
              "Missed"
            ],
            "zonbookDocumentation": "\n         <simpara>To return utterances that were recognized and handled, use<code>Detected</code>. To\n      return utterances that were not recognized, use <code>Missed</code>.</simpara>\n      ",
            "documentation": "\n         <p>To return utterances that were recognized and handled, use<code>Detected</code>. To\n      return utterances that were not recognized, use <code>Missed</code>.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "StatusType"
          },
          "dateRange": {
            "type": "string",
            "enum": [
              "FifteenDay"
            ],
            "internalonly": true,
            "shape_name": "DateRange",
            "documentation": null
          },
          "sourceType": {
            "type": "string",
            "enum": [
              "All"
            ],
            "internalonly": true,
            "shape_name": "SourceType",
            "documentation": null
          },
          "sortType": {
            "type": "string",
            "enum": [
              "ByOccurrenceCount"
            ],
            "internalonly": true,
            "shape_name": "SortType",
            "documentation": null
          }
        },
        "shape_name": "GetUtterancesViewRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "botName": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the bot for which utterance information was returned.</simpara>\n      ",
            "documentation": "\n         <p>The name of the bot for which utterance information was returned.</p>\n      ",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          },
          "utterances": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>An array of <xref linkend=\"UtteranceList\"/> objects, each containing a list of <xref linkend=\"UtteranceData\"/> objects describing the utterances that were processed by your bot.\n      The response contains a maximum of 100 <code>UtteranceData</code> objects for each\n      version.</simpara>\n      ",
            "documentation": "\n         <p>An array of <a>UtteranceList</a> objects, each containing a list of <a>UtteranceData</a> objects describing the utterances that were processed by your bot.\n      The response contains a maximum of 100 <code>UtteranceData</code> objects for each\n      version.</p>\n      ",
            "shape_name": "ListsOfUtterances",
            "members": {
              "type": "structure",
              "members": {
                "botVersion": {
                  "type": "string",
                  "pattern": "\\$LATEST|[0-9]+",
                  "zonbookDocumentation": "\n         <simpara>The version of the bot that processed the list.</simpara>\n      ",
                  "documentation": "\n         <p>The version of the bot that processed the list.</p>\n      ",
                  "shape_name": "Version",
                  "min_length": 1,
                  "max_length": 64
                },
                "utterances": {
                  "type": "list",
                  "zonbookDocumentation": "\n         <simpara>One or more <xref linkend=\"UtteranceData\"/> objects that contain information about the\n      utterances that have been made to a bot. The maximum number of object is 100.</simpara>\n      ",
                  "documentation": "\n         <p>One or more <a>UtteranceData</a> objects that contain information about the\n      utterances that have been made to a bot. The maximum number of object is 100.</p>\n      ",
                  "shape_name": "ListOfUtterance",
                  "members": {
                    "type": "structure",
                    "members": {
                      "utteranceString": {
                        "type": "string",
                        "zonbookDocumentation": "\n         <simpara>The text that was entered by the user or the text representation of an audio\n      clip.</simpara>\n      ",
                        "documentation": "\n         <p>The text that was entered by the user or the text representation of an audio\n      clip.</p>\n      ",
                        "shape_name": "UtteranceString",
                        "min_length": 1,
                        "max_length": 2000
                      },
                      "count": {
                        "type": "integer",
                        "zonbookDocumentation": "\n         <simpara>The number of times that the utterance was processed.</simpara>\n      ",
                        "documentation": "\n         <p>The number of times that the utterance was processed.</p>\n      ",
                        "shape_name": "Count"
                      },
                      "distinctUsers": {
                        "type": "integer",
                        "zonbookDocumentation": "\n         <simpara>The total number of individuals that used the utterance.</simpara>\n      ",
                        "documentation": "\n         <p>The total number of individuals that used the utterance.</p>\n      ",
                        "shape_name": "Count"
                      },
                      "firstUtteredDate": {
                        "type": "timestamp",
                        "zonbookDocumentation": "\n         <simpara>The date that the utterance was first recorded.</simpara>\n      ",
                        "documentation": "\n         <p>The date that the utterance was first recorded.</p>\n      ",
                        "shape_name": "Timestamp"
                      },
                      "lastUtteredDate": {
                        "type": "timestamp",
                        "zonbookDocumentation": "\n         <simpara>The date that the utterance was last recorded.</simpara>\n      ",
                        "documentation": "\n         <p>The date that the utterance was last recorded.</p>\n      ",
                        "shape_name": "Timestamp"
                      }
                    },
                    "zonbookDocumentation": "\n         <simpara>Provides information about a single utterance that was made to your bot. </simpara>\n      ",
                    "documentation": "\n         <p>Provides information about a single utterance that was made to your bot. </p>\n      ",
                    "shape_name": "UtteranceData"
                  }
                }
              },
              "zonbookDocumentation": "\n         <simpara>Provides a list of utterances that have been made to a specific version of your bot.\n      The list contains a maximum of 100 utterances.</simpara>\n      ",
              "documentation": "\n         <p>Provides a list of utterances that have been made to a specific version of your bot.\n      The list contains a maximum of 100 utterances.</p>\n      ",
              "shape_name": "UtteranceList"
            }
          }
        },
        "shape_name": "GetUtterancesViewResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n         <p>Use the <code>GetUtterancesView</code> operation to get information about the\n      utterances that your users have made to your bot. You can use this list to tune the utterances\n      that your bot responds to.</p>\n         <p>For example, say that you have created a bot to order flowers. After your users have\n      used your bot for a while, use the <code>GetUtterancesView</code> operation to see the\n      requests that they have made and whether they have been successful. You might find that the\n      utterance \"I want flowers\" is not being recognized. You could add this utterance to the\n        <code>OrderFlowers</code> intent so that your bot recognizes that utterance.</p>\n         <p>After you publish a new version of a bot, you can get information about the old version\n      and the new so that you can compare the performance across the two versions. </p>\n         <note>\n            <p>Utterance statistics are generated once a day. Data is available for the last 15\n        days. You can request information for up to 5 versions in each request. The response\n        contains information about a maximum of 100 utterances for each version.</p>\n         </note>\n         <p>This operation requires permissions for the <code>lex:GetUtterancesView</code>\n      action.</p>\n      "
    },
    "DeleteUtterances": {
      "name": "DeleteUtterances",
      "http": {
        "method": "DELETE",
        "uri": "/bots/{botName}/utterances/{userId}",
        "response_code": 204
      },
      "input": {
        "type": "structure",
        "members": {
          "botName": {
            "type": "string",
            "pattern": "^([A-Za-z]_?)+$",
            "zonbookDocumentation": "\n         <simpara>The name of the bot that stored the utterances.</simpara>\n      ",
            "documentation": "\n         <p>The name of the bot that stored the utterances.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "BotName",
            "min_length": 2,
            "max_length": 50
          },
          "userId": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara> The unique identifier for the user that made the utterances. This is the user ID that\n      was sent in the <ulink url=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html\">PostContent</ulink> or <ulink url=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</ulink>\n      operation request that contained the utterance.</simpara>\n      ",
            "documentation": "\n         <p> The unique identifier for the user that made the utterances. This is the user ID that\n      was sent in the <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html\">PostContent</a> or <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a>\n      operation request that contained the utterance.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "UserId",
            "min_length": 2,
            "max_length": 100
          }
        },
        "shape_name": "DeleteUtterancesRequest",
        "documentation": null
      },
      "output": null,
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n         <p>Deletes stored utterances.</p>\n         <p>Amazon Lex stores the utterances that users send to your bot. Utterances are stored for 15\n      days for use with the <a>GetUtterancesView</a> operation, and then stored\n      indefinitely for use in improving the ability of your bot to respond to user input.</p>\n         <p>Use the <code>DeleteStoredUtterances</code> operation to manually delete stored\n      utterances for a specific user.</p>\n         <p>This operation requires permissions for the <code>lex:DeleteUtterances</code>\n      action.</p>\n      "
    },
    "GetExport": {
      "name": "GetExport",
      "http": {
        "method": "GET",
        "uri": "/exports/?name={name}&version={version}&resourceType={resourceType}&exportType={exportType}",
        "response_code": 200
      },
      "input": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "[a-zA-Z_]+",
            "zonbookDocumentation": "\n         <simpara>The name of the bot to export.</simpara>\n      ",
            "documentation": "\n         <p>The name of the bot to export.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "Name",
            "min_length": 1,
            "max_length": 100
          },
          "version": {
            "type": "string",
            "pattern": "[0-9]+",
            "zonbookDocumentation": "\n         <simpara>The version of the bot to export.</simpara>\n      ",
            "documentation": "\n         <p>The version of the bot to export.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "NumericalVersion",
            "min_length": 1,
            "max_length": 64
          },
          "resourceType": {
            "type": "string",
            "enum": [
              "BOT",
              "INTENT",
              "SLOT_TYPE"
            ],
            "zonbookDocumentation": "\n         <simpara>The type of resource to export. </simpara>\n      ",
            "documentation": "\n         <p>The type of resource to export. </p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "ResourceType"
          },
          "exportType": {
            "type": "string",
            "enum": [
              "ALEXA_SKILLS_KIT",
              "LEX"
            ],
            "zonbookDocumentation": "\n         <simpara>The format of the exported data.</simpara>\n      ",
            "documentation": "\n         <p>The format of the exported data.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "ExportType"
          }
        },
        "shape_name": "GetExportRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "[a-zA-Z_]+",
            "zonbookDocumentation": "\n         <simpara>The name of the bot being exported.</simpara>\n      ",
            "documentation": "\n         <p>The name of the bot being exported.</p>\n      ",
            "shape_name": "Name",
            "min_length": 1,
            "max_length": 100
          },
          "version": {
            "type": "string",
            "pattern": "[0-9]+",
            "zonbookDocumentation": "\n         <simpara>The version of the bot being exported.</simpara>\n      ",
            "documentation": "\n         <p>The version of the bot being exported.</p>\n      ",
            "shape_name": "NumericalVersion",
            "min_length": 1,
            "max_length": 64
          },
          "resourceType": {
            "type": "string",
            "enum": [
              "BOT",
              "INTENT",
              "SLOT_TYPE"
            ],
            "zonbookDocumentation": "\n         <simpara>The type of the exported resource.</simpara>\n      ",
            "documentation": "\n         <p>The type of the exported resource.</p>\n      ",
            "shape_name": "ResourceType"
          },
          "exportType": {
            "type": "string",
            "enum": [
              "ALEXA_SKILLS_KIT",
              "LEX"
            ],
            "zonbookDocumentation": "\n         <simpara>The format of the exported data.</simpara>\n      ",
            "documentation": "\n         <p>The format of the exported data.</p>\n      ",
            "shape_name": "ExportType"
          },
          "exportStatus": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "READY",
              "FAILED"
            ],
            "zonbookDocumentation": "\n         <simpara>The status of the export. </simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>\n                  <code>IN_PROGRESS</code> - The export is in progress.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>READY</code> - The export is complete.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>\n                  <code>FAILED</code> - The export could not be completed.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
            "documentation": "\n         <p>The status of the export. </p>\n         <ul>\n            <li>\n               <p>\n                  <code>IN_PROGRESS</code> - The export is in progress.</p>\n            </li>\n            <li>\n               <p>\n                  <code>READY</code> - The export is complete.</p>\n            </li>\n            <li>\n               <p>\n                  <code>FAILED</code> - The export could not be completed.</p>\n            </li>\n         </ul>\n      ",
            "shape_name": "ExportStatus"
          },
          "failureReason": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>If <code>status</code> is <code>FAILED</code>, Amazon Lex provides the reason that it failed\n      to export the resource.</simpara>\n      ",
            "documentation": "\n         <p>If <code>status</code> is <code>FAILED</code>, Amazon Lex provides the reason that it failed\n      to export the resource.</p>\n      ",
            "shape_name": "String"
          },
          "url": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>An S3 pre-signed URL that provides the location of the exported resource. The exported\n      resource is a ZIP archive that contains the exported resource in JSON format. The structure of\n      the archive may change. Your code should not rely on the archive structure.</simpara>\n      ",
            "documentation": "\n         <p>An S3 pre-signed URL that provides the location of the exported resource. The exported\n      resource is a ZIP archive that contains the exported resource in JSON format. The structure of\n      the archive may change. Your code should not rely on the archive structure.</p>\n      ",
            "shape_name": "String"
          }
        },
        "shape_name": "GetExportResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n         <p>Exports the contents of a Amazon Lex resource in a specified format. </p>\n      "
    },
    "StartImport": {
      "name": "StartImport",
      "http": {
        "method": "POST",
        "uri": "/imports/",
        "response_code": 201
      },
      "input": {
        "type": "structure",
        "members": {
          "payload": {
            "type": "blob",
            "zonbookDocumentation": "\n         <para>A zip archive in binary format. The archive should contain one file, a JSON file containing the resource\n    to import. The resource should match the type specified in the <code>resourceType</code> field.</para>\n      ",
            "documentation": "\n         <p>A zip archive in binary format. The archive should contain one file, a JSON file containing the resource\n    to import. The resource should match the type specified in the <code>resourceType</code> field.</p>\n      ",
            "required": true,
            "shape_name": "Blob"
          },
          "resourceType": {
            "type": "string",
            "enum": [
              "BOT",
              "INTENT",
              "SLOT_TYPE"
            ],
            "zonbookDocumentation": "\n         <simpara>Specifies the type of resource to export. Each resource also exports any resources that\n      it depends on. </simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>A bot exports dependent intents.</simpara>\n            </listitem>\n            <listitem>\n               <simpara>An intent exports dependent slot types.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
            "documentation": "\n         <p>Specifies the type of resource to export. Each resource also exports any resources that\n      it depends on. </p>\n         <ul>\n            <li>\n               <p>A bot exports dependent intents.</p>\n            </li>\n            <li>\n               <p>An intent exports dependent slot types.</p>\n            </li>\n         </ul>\n      ",
            "required": true,
            "shape_name": "ResourceType"
          },
          "mergeStrategy": {
            "type": "string",
            "enum": [
              "OVERWRITE_LATEST",
              "FAIL_ON_CONFLICT"
            ],
            "zonbookDocumentation": "\n         <simpara>Specifies the action that the <code>StartImport</code> operation should take when there\n      is an existing resource with the same name.</simpara>\n         <itemizedlist>\n            <listitem>\n               <simpara>FAIL_ON_CONFLICT - The import operation is stopped on the first conflict between a\n          resource in the import file and an existing resource. The name of the resource causing the\n          conflict is in the <code>failureReason</code> field of the response to the\n            <code>GetImport</code> operation.</simpara>\n               <simpara>OVERWRITE_LATEST - The import operation proceeds even if there is a conflict with\n          an existing resource. The $LASTEST version of the existing resource is overwritten with\n          the data from the import file.</simpara>\n            </listitem>\n         </itemizedlist>\n      ",
            "documentation": "\n         <p>Specifies the action that the <code>StartImport</code> operation should take when there\n      is an existing resource with the same name.</p>\n         <ul>\n            <li>\n               <p>FAIL_ON_CONFLICT - The import operation is stopped on the first conflict between a\n          resource in the import file and an existing resource. The name of the resource causing the\n          conflict is in the <code>failureReason</code> field of the response to the\n            <code>GetImport</code> operation.</p>\n               <p>OVERWRITE_LATEST - The import operation proceeds even if there is a conflict with\n          an existing resource. The $LASTEST version of the existing resource is overwritten with\n          the data from the import file.</p>\n            </li>\n         </ul>\n      ",
            "required": true,
            "shape_name": "MergeStrategy"
          }
        },
        "shape_name": "StartImportRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "[a-zA-Z_]+",
            "zonbookDocumentation": "\n         <simpara>The name given to the import job.</simpara>\n      ",
            "documentation": "\n         <p>The name given to the import job.</p>\n      ",
            "shape_name": "Name",
            "min_length": 1,
            "max_length": 100
          },
          "resourceType": {
            "type": "string",
            "enum": [
              "BOT",
              "INTENT",
              "SLOT_TYPE"
            ],
            "zonbookDocumentation": "\n         <simpara>The type of resource to import.</simpara>\n      ",
            "documentation": "\n         <p>The type of resource to import.</p>\n      ",
            "shape_name": "ResourceType"
          },
          "mergeStrategy": {
            "type": "string",
            "enum": [
              "OVERWRITE_LATEST",
              "FAIL_ON_CONFLICT"
            ],
            "zonbookDocumentation": "\n         <simpara>The action to take when there is a merge conflict.</simpara>\n      ",
            "documentation": "\n         <p>The action to take when there is a merge conflict.</p>\n      ",
            "shape_name": "MergeStrategy"
          },
          "importId": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The identifier for the specific import job.</simpara>\n      ",
            "documentation": "\n         <p>The identifier for the specific import job.</p>\n      ",
            "shape_name": "String"
          },
          "importStatus": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "COMPLETE",
              "FAILED"
            ],
            "zonbookDocumentation": "\n         <simpara>The status of the import job. If the status is <code>FAILED</code>, you can get the\n      reason for the failure using the <code>GetImport</code> operation.</simpara>\n      ",
            "documentation": "\n         <p>The status of the import job. If the status is <code>FAILED</code>, you can get the\n      reason for the failure using the <code>GetImport</code> operation.</p>\n      ",
            "shape_name": "ImportStatus"
          },
          "createdDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>A timestamp for the date and time that the import job was requested.</simpara>\n      ",
            "documentation": "\n         <p>A timestamp for the date and time that the import job was requested.</p>\n      ",
            "shape_name": "Timestamp"
          }
        },
        "shape_name": "StartImportResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n         <p>Starts a job to import a resource to Amazon Lex.</p>\n      "
    },
    "GetImport": {
      "name": "GetImport",
      "http": {
        "method": "GET",
        "uri": "/imports/{importId}",
        "response_code": 200
      },
      "input": {
        "type": "structure",
        "members": {
          "importId": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The identifier of the import job information to return.</simpara>\n      ",
            "documentation": "\n         <p>The identifier of the import job information to return.</p>\n      ",
            "required": true,
            "location": "uri",
            "shape_name": "String"
          }
        },
        "shape_name": "GetImportRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "name": {
            "type": "string",
            "pattern": "[a-zA-Z_]+",
            "zonbookDocumentation": "\n         <simpara>The name given to the import job.</simpara>\n      ",
            "documentation": "\n         <p>The name given to the import job.</p>\n      ",
            "shape_name": "Name",
            "min_length": 1,
            "max_length": 100
          },
          "resourceType": {
            "type": "string",
            "enum": [
              "BOT",
              "INTENT",
              "SLOT_TYPE"
            ],
            "zonbookDocumentation": "\n         <simpara>The type of resource imported.</simpara>\n      ",
            "documentation": "\n         <p>The type of resource imported.</p>\n      ",
            "shape_name": "ResourceType"
          },
          "mergeStrategy": {
            "type": "string",
            "enum": [
              "OVERWRITE_LATEST",
              "FAIL_ON_CONFLICT"
            ],
            "zonbookDocumentation": "\n         <simpara>The action taken when there was a conflict between an existing resource and a resource\n      in the import file.</simpara>\n      ",
            "documentation": "\n         <p>The action taken when there was a conflict between an existing resource and a resource\n      in the import file.</p>\n      ",
            "shape_name": "MergeStrategy"
          },
          "importId": {
            "type": "string",
            "zonbookDocumentation": "\n         <simpara>The identifier for the specific import job.</simpara>\n      ",
            "documentation": "\n         <p>The identifier for the specific import job.</p>\n      ",
            "shape_name": "String"
          },
          "importStatus": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "COMPLETE",
              "FAILED"
            ],
            "zonbookDocumentation": "\n         <simpara>The status of the import job. If the status is <code>FAILED</code>, you can get\n    the reason for the failure from the <code>failureReason</code> field.</simpara>\n      ",
            "documentation": "\n         <p>The status of the import job. If the status is <code>FAILED</code>, you can get\n    the reason for the failure from the <code>failureReason</code> field.</p>\n      ",
            "shape_name": "ImportStatus"
          },
          "failureReason": {
            "type": "list",
            "zonbookDocumentation": "\n         <simpara>A string that describes why an import job failed to complete.</simpara>\n      ",
            "documentation": "\n         <p>A string that describes why an import job failed to complete.</p>\n      ",
            "shape_name": "StringList",
            "members": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "createdDate": {
            "type": "timestamp",
            "zonbookDocumentation": "\n         <simpara>A timestamp for the date and time that the import job was created.</simpara>\n      ",
            "documentation": "\n         <p>A timestamp for the date and time that the import job was created.</p>\n      ",
            "shape_name": "Timestamp"
          }
        },
        "shape_name": "GetImportResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The resource specified in the request was not found. Check the resource and try\n      again.</simpara>\n      ",
          "documentation": "\n         <p>The resource specified in the request was not found. Check the resource and try\n      again.</p>\n      ",
          "shape_name": "NotFoundException"
        },
        {
          "type": "structure",
          "members": {
            "retryAfterSeconds": {
              "type": "string",
              "location": "header",
              "shape_name": "String",
              "documentation": null,
              "location_name": "Retry-After"
            },
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request exceeded a limit. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>The request exceeded a limit. Try your request again.</p>\n      ",
          "shape_name": "LimitExceededException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>An internal Amazon Lex error occurred. Try your request again.</simpara>\n      ",
          "documentation": "\n         <p>An internal Amazon Lex error occurred. Try your request again.</p>\n      ",
          "shape_name": "InternalFailureException"
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "String",
              "documentation": null
            }
          },
          "zonbookDocumentation": "\n         <simpara>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</simpara>\n      ",
          "documentation": "\n         <p>The request is not well formed. For example, a value is invalid or a required field is\n      missing. Check the field values, and try again.</p>\n      ",
          "shape_name": "BadRequestException"
        }
      ],
      "documentation": "\n         <p>Gets information about an import job started with the <code>StartImport</code>\n      operation.</p>\n      "
    },
    "LockServiceLinkedRole": {
      "name": "LockServiceLinkedRole",
      "http": {
        "method": "POST",
        "uri": "/"
      },
      "input": {
        "type": "structure",
        "members": {
          "RoleArn": {
            "type": "string",
            "required": true,
            "shape_name": "arnType",
            "documentation": null,
            "min_length": 20,
            "max_length": 2048
          },
          "Timeout": {
            "type": "long",
            "required": true,
            "shape_name": "longType",
            "documentation": null
          }
        },
        "shape_name": "LockServiceLinkedRoleRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
          "CanBeDeleted": {
            "type": "boolean",
            "required": true,
            "shape_name": "booleanType",
            "documentation": null
          },
          "ReasonOfFailure": {
            "type": "string",
            "shape_name": "stringType",
            "documentation": null
          },
          "RelatedResources": {
            "type": "list",
            "shape_name": "stringListType",
            "documentation": null,
            "members": {
              "type": "string",
              "shape_name": "stringType",
              "documentation": null
            }
          }
        },
        "shape_name": "LockServiceLinkedRoleResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "errorMessage",
              "documentation": null
            }
          },
          "shape_name": "ServiceLinkedRoleLockServiceException",
          "documentation": null
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "errorMessage",
              "documentation": null
            }
          },
          "shape_name": "ServiceLinkedRoleLockClientException",
          "documentation": null
        }
      ],
      "documentation": null
    },
    "UnlockServiceLinkedRole": {
      "name": "UnlockServiceLinkedRole",
      "http": {
        "method": "POST",
        "uri": "/"
      },
      "input": {
        "type": "structure",
        "members": {
          "RoleArn": {
            "type": "string",
            "required": true,
            "shape_name": "arnType",
            "documentation": null,
            "min_length": 20,
            "max_length": 2048
          },
          "DeletionStatus": {
            "type": "string",
            "enum": [
              "SUCCEEDED",
              "FAILED"
            ],
            "shape_name": "deletionStatus",
            "documentation": null
          }
        },
        "shape_name": "UnlockServiceLinkedRoleRequest",
        "documentation": null
      },
      "output": {
        "type": "structure",
        "members": {
        },
        "shape_name": "UnlockServiceLinkedRoleResponse",
        "documentation": null
      },
      "errors": [
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "errorMessage",
              "documentation": null
            }
          },
          "shape_name": "ServiceLinkedRoleLockServiceException",
          "documentation": null
        },
        {
          "type": "structure",
          "members": {
            "message": {
              "type": "string",
              "shape_name": "errorMessage",
              "documentation": null
            }
          },
          "shape_name": "ServiceLinkedRoleLockClientException",
          "documentation": null
        }
      ],
      "documentation": null
    }
  }
}
